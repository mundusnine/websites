// Generated by Haxe 4.1.3
(function ($hx_exports, $global) { "use strict";
$hx_exports["echo"] = $hx_exports["echo"] || {};
$hx_exports["kha"] = $hx_exports["kha"] || {};
$hx_exports["kha"]["input"] = $hx_exports["kha"]["input"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var AnimationEditor = function(panel,animTab) {
	this.oldRotation = 0.0;
	var this1 = new kha_math_FastVector2(0.0,0.0);
	this.origDimensions = this1;
	this.frameHandles = [];
	this.renameState = false;
	this.viewHeight = 0;
	this.fpsHandle = new zui_Handle();
	this.animHandle = new zui_Handle();
	this.animIndex = -1;
	this.animations = [];
	this.curFrames = [];
	this.animAction = [];
	this.numberOfFrames = 67.0;
	this.doUpdate = false;
	this.lastImage = "";
	this.delta = 0.0;
	this.oldUid = -1;
	this.timelineHandle = zui_Handle.global.nest(0,null);
	this.windowHandle = zui_Handle.global.nest(1,null);
	this.selectedUID = -1;
	this.parent = panel;
	this.ownerTab = animTab;
	this.setAll(this.parent.get_x(),this.parent.get_y(),this.parent.get_w(),this.parent.get_h());
	this.parent.windowHandle.scrollEnabled = true;
	panel.postRenders.push($bind(this,this.renderTimeline));
};
$hxClasses["AnimationEditor"] = AnimationEditor;
AnimationEditor.__name__ = true;
AnimationEditor.width = null;
AnimationEditor.height = null;
AnimationEditor.x = null;
AnimationEditor.y = null;
AnimationEditor.prototype = {
	ui: null
	,curSprite: null
	,selectedUID: null
	,windowHandle: null
	,timelineHandle: null
	,parent: null
	,ownerTab: null
	,setAll: function(px,py,w,h) {
		AnimationEditor.x = px;
		AnimationEditor.y = py;
		AnimationEditor.width = w;
		AnimationEditor.height = h;
	}
	,oldUid: null
	,set_selectedUID: function(value) {
		var oldUid = this.selectedUID;
		if(value < 0 || value > found_State.active._entities.length) {
			this.selectedUID = -1;
		} else {
			var object = found_State.active._entities[value];
			if(object.get_raw().type == "sprite_object") {
				this.curSprite = object;
				this.selectedUID = value;
				this.set_curFrames(this.curSprite.data.get_animation()._frames);
				this.animations.length = 0;
				var _g = 0;
				var _g1 = this.curSprite.data.raw.anims;
				while(_g < _g1.length) {
					var anim = _g1[_g];
					++_g;
					this.animations.push(anim.name);
				}
				this.animIndex = this.curSprite.data.curAnim;
			} else {
				this.selectedUID = -1;
				if(this.curSprite != null) {
					this.set_curFrames(this.curSprite.data.get_animation()._frames.slice());
					this.lastImage = "";
					this.curSprite = null;
					this.animIndex = -1;
				}
				this.curFrames.length = 0;
				this.animations.length = 0;
			}
		}
		if(oldUid != this.selectedUID) {
			this.timelineHandle.redraws = this.windowHandle.redraws = 2;
			oldUid = this.selectedUID;
		}
		return this.selectedUID;
	}
	,delta: null
	,lastImage: null
	,doUpdate: null
	,numberOfFrames: null
	,animAction: null
	,curFrames: null
	,set_curFrames: function(data) {
		if(this.curFrames.length != data.length || this.oldUid != this.selectedUID) {
			this.frameHandles = [];
			var _g = 0;
			while(_g < data.length) {
				var frame = data[_g];
				++_g;
				var handles = [];
				handles.push(new zui_Handle({ value : 0}));
				handles.push(new zui_Handle({ value : 0}));
				handles.push(new zui_Handle({ value : 0}));
				handles.push(new zui_Handle({ value : 0}));
				handles.push(new zui_Handle({ value : 0}));
				this.frameHandles.push(handles);
			}
		}
		return this.curFrames = data;
	}
	,animations: null
	,animIndex: null
	,animHandle: null
	,fpsHandle: null
	,viewHeight: null
	,renameState: null
	,render: function(ui) {
		this.ui = ui;
		var sc = ui.ops.scaleFactor;
		var timelineLabelsHeight = 30 * sc | 0;
		var timelineFramesHeight = 40 * sc | 0;
		if(AnimationEditor.timeline == null || AnimationEditor.timeline.get_height() != timelineLabelsHeight + timelineFramesHeight) {
			this.drawTimeline(timelineLabelsHeight,timelineFramesHeight);
			this.drawDot();
		}
		this.numberOfFrames = AnimationEditor.timeline.get_width() / (11 * sc) - 1;
		if(this.curSprite != null && this.lastImage != this.curSprite.data.raw.imagePath) {
			this.lastImage = this.curSprite.data.raw.imagePath;
			if(this.curSprite.data.raw.anims.length > 0 && this.curSprite.data.raw.anims.length != this.animations.length) {
				var _g = 0;
				var _g1 = this.curSprite.data.raw.anims;
				while(_g < _g1.length) {
					var anim = _g1[_g];
					++_g;
					this.animations.push(anim.name);
				}
				this.animIndex = this.curSprite.data.curAnim;
				this.set_curFrames(this.curSprite.data.get_animation()._frames);
			} else if(this.curSprite.data.raw.anims.length == 0) {
				this.animations.length = 0;
			}
			this.timelineHandle.redraws = this.windowHandle.redraws = 2;
		}
		this.viewHeight = AnimationEditor.height - AnimationEditor.timeline.get_height();
		if(ui.tab(this.parent.htab,this.ownerTab.name)) {
			ui.row([0.52,0.16,0.16,0.16]);
			this.animHandle.position = this.animIndex;
			if(this.animations.length > 0) {
				if(!this.renameState) {
					this.animIndex = ui.combo(this.animHandle,this.animations);
				} else {
					var last = ui.t.ACCENT_COL;
					ui.t.ACCENT_COL = kha_Color.fromFloats(1.0,0.0,0.0,0.7);
					var txtHandle = zui_Handle.global.nest(113,null);
					if(this.animIndex < 0) {
						haxe_Log.trace("animIndex is bad at number: " + this.animIndex,{ fileName : "AnimationEditor.hx", lineNumber : 154, className : "AnimationEditor", methodName : "render"});
					}
					txtHandle.text = this.animations[this.animIndex];
					ui.textInput(txtHandle);
					if(txtHandle.changed) {
						this.animations[this.animIndex] = txtHandle.text;
						this.curSprite.data.anims[this.animIndex].name = txtHandle.text;
						this.renameState = false;
					}
					ui.t.ACCENT_COL = last;
				}
			}
			if(this.curSprite != null && this.animHandle.changed) {
				this.curSprite.data.set_curAnim(this.animIndex);
				this.set_curFrames(this.curSprite.data.get_animation()._frames);
			}
			if(ui.button(utilities_Translator.tr("Rename"))) {
				this.renameState = !this.renameState;
			}
			if(ui.button(utilities_Translator.tr("New Animation")) && this.curSprite != null) {
				var id = this.animations.length;
				this.animIndex = this.animations.push("Animation " + id) - 1;
				if(this.animIndex == 0) {
					var frame = { id : 0, start : 0.0, tw : this.curSprite.data.raw.width | 0, th : this.curSprite.data.raw.height | 0};
					this.curSprite.data.get_animation().take(found_anim_Animation.create(frame));
					this.set_curFrames(this.curSprite.data.get_animation()._frames);
				} else {
					this.curSprite.data.set_curAnim(this.curSprite.data.addSubSprite(0));
					this.set_curFrames(this.curSprite.data.get_animation()._frames);
				}
				var _g = 0;
				var _g1 = this.curFrames;
				while(_g < _g1.length) {
					var frame = _g1[_g];
					++_g;
					var handles = [];
					handles.push(new zui_Handle({ value : 0}));
					handles.push(new zui_Handle({ value : 0}));
					handles.push(new zui_Handle({ value : 0}));
					handles.push(new zui_Handle({ value : 0}));
					handles.push(new zui_Handle({ value : 0}));
					this.frameHandles.push(handles);
				}
				this.curSprite.data.get_animation().name = this.animations[this.animIndex];
				this.timelineHandle.redraws = 2;
			}
			if(ui.button("Save Animations") && this.curSprite != null) {
				this.saveAnimations();
				EditorHierarchy.getInstance().makeDirty();
			}
			if(this.animIndex > -1) {
				var editable = true;
				this.fpsHandle.text = "" + this.curSprite.data.get_animation()._speeddiv;
				ui.textInput(this.fpsHandle,"Fps",0,editable);
				if(this.fpsHandle.changed) {
					this.curSprite.data.get_animation()._speeddiv = Std.parseInt(this.fpsHandle.text);
				}
			}
			ui.row([0.5,0.5]);
			if(this.delta > this.numberOfFrames) {
				this.delta = this.numberOfFrames;
				this.doUpdate = false;
			}
			var state = this.doUpdate ? "Pause" : "Play";
			if(ui.button(state)) {
				if(this.doUpdate) {
					this.doUpdate = false;
				} else if(this.delta >= this.numberOfFrames) {
					this.delta = 0.0;
					this.doUpdate = true;
				} else {
					this.doUpdate = true;
				}
			}
			if(ui.button("Reset")) {
				this.delta = 0.0;
				this.doUpdate = false;
				this.timelineHandle.redraws = 2;
			}
			var div = ui.t.ELEMENT_W * ui.ops.scaleFactor / this.parent.get_w() * 2;
			ui.row([1.0 - div,div]);
			ui.panel(zui_Handle.global.nest(114,{ selected : true}),"",false,false,false);
			var oldY = ui._y;
			zui_Ext.panelList(ui,zui_Handle.global.nest(115,{ selected : true, layout : 0}),this.curFrames,$bind(this,this.addItem),$bind(this,this.removeItem),$bind(this,this.getName),$bind(this,this.setName),$bind(this,this.drawItem),false);
			this.animationPreview(this.delta,AnimationEditor.width,this.viewHeight,oldY);
		}
	}
	,renderTimeline: function(ui) {
		if(!this.ownerTab.get_active()) {
			return;
		}
		var sc = ui.ops.scaleFactor;
		var timelineLabelsHeight = 30 * sc | 0;
		var timelineFramesHeight = 40 * sc | 0;
		if(ui.window(this.timelineHandle,AnimationEditor.x,AnimationEditor.y + this.viewHeight,AnimationEditor.width,AnimationEditor.timeline.get_height())) {
			ui.imageScrollAlign = false;
			var state = ui.image(AnimationEditor.timeline);
			if(state == 2) {
				this.delta = Math.abs(ui._windowX - ui.inputX) / 11 / ui.ops.scaleFactor | 0;
			}
			ui.g.set_color(-14656100);
			ui.g.fillRect(this.delta * 11 * sc,timelineLabelsHeight,10 * sc,timelineFramesHeight);
			ui.g.set_font(kha_Assets.fonts.font_default);
			ui.g.set_fontSize(16 * sc | 0);
			var frameIndicatorMargin = 4 * sc;
			var frameIndicatorPadding = 4 * sc;
			var frameIndicatorWidth = 30 * sc;
			var frameIndicatorHeight = timelineLabelsHeight - frameIndicatorMargin * 2;
			var frameTextWidth = kha_Assets.fonts.font_default.width(ui.g.get_fontSize(),"" + 99.00);
			if(frameTextWidth > frameIndicatorWidth + frameIndicatorPadding) {
				frameIndicatorWidth = frameTextWidth + frameIndicatorPadding;
			}
			ui.g.fillRect(this.delta * 11 * sc + 5 * sc - frameIndicatorWidth / 2,frameIndicatorMargin,frameIndicatorWidth,frameIndicatorHeight);
			ui.g.set_color(-1);
			ui.g.drawString("" + found_math_Util.fround(this.delta,2),this.delta * 11 * sc + 5 * sc - frameTextWidth / 2,timelineLabelsHeight / 2 - ui.g.get_fontSize() / 2);
			ui.g.set_color(kha_Color.fromBytes(255,100,100,255));
			var x = ui._x;
			var y = ui._y;
			if(y == null) {
				y = 0.0;
			}
			if(x == null) {
				x = 0.0;
			}
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var old_x = x1;
			var old_y = y1;
			var _g = 0;
			var _g1 = this.curFrames;
			while(_g < _g1.length) {
				var frame = _g1[_g];
				++_g;
				var frameWidth = 10 * sc;
				ui._x = frame.start * 11 * sc;
				ui._y = timelineLabelsHeight * 0.5 + timelineFramesHeight * 0.5 + frameWidth * 0.75;
				var state = ui.image(AnimationEditor.dot,-1,frameWidth,0,0,frameWidth | 0,frameWidth | 0);
				ui._x = frame.start * 11 * sc;
				ui._y = timelineLabelsHeight * 0.5 + timelineFramesHeight * 0.5 + frameWidth * 0.75;
				if(ui.getHover()) {
					ui.tooltip("Frame: " + frame.id);
				}
			}
			ui._x = old_x;
			ui._y = old_y;
			ui.imageScrollAlign = true;
		}
	}
	,addItem: function(name) {
		if(this.animIndex < 0) {
			return;
		}
		var _g = 0;
		var _g1 = this.curFrames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			if(frame.start == this.delta) {
				return;
			}
		}
		var frame = { id : 0, start : this.delta, tw : 0, th : 0};
		var id = this.curFrames.push(frame) - 1;
		var handles = [];
		handles.push(new zui_Handle({ value : 0}));
		handles.push(new zui_Handle({ value : 0}));
		handles.push(new zui_Handle({ value : 0}));
		handles.push(new zui_Handle({ value : 0}));
		handles.push(new zui_Handle({ value : 0}));
		this.frameHandles.push(handles);
		frame.id = id;
		if(this.curFrames.length > 1) {
			var firstFrame = this.curFrames[0];
			var tmp = Math.abs(firstFrame.start - frame.start);
			this.curSprite.data.get_animation()._speeddiv = tmp * 10 | 0;
		}
		this.timelineHandle.redraws = 2;
	}
	,removeItem: function(i) {
		this.curFrames.splice(i,1);
		var _g = 0;
		var _g1 = this.curFrames.length;
		while(_g < _g1) {
			var index = _g++;
			if(this.curFrames[index].id != index) {
				this.curFrames[index].id = index;
			}
		}
		this.frameHandles.splice(i,1);
		this.timelineHandle.redraws = 2;
	}
	,getName: function(i) {
		return "Index : " + this.curFrames[i].id;
	}
	,setName: function(i,name) {
		return;
	}
	,frameHandles: null
	,drawItem: function(handle,i) {
		if(this.frameHandles.length == 0) {
			return;
		}
		var cur = this.curFrames[i];
		var startHandle = this.frameHandles[i][0];
		var xHandle = this.frameHandles[i][1];
		var yHandle = this.frameHandles[i][2];
		var wHandle = this.frameHandles[i][3];
		var hHandle = this.frameHandles[i][4];
		startHandle.value = cur.start;
		cur.start = zui_Ext.floatInput(this.ui,startHandle,"Start") | 0;
		xHandle.value = cur.tx != null ? cur.tx : 0;
		cur.tx = zui_Ext.floatInput(this.ui,xHandle,"Tile X") | 0;
		yHandle.value = cur.ty != null ? cur.ty : 0;
		cur.ty = zui_Ext.floatInput(this.ui,yHandle,"Tile Y") | 0;
		wHandle.value = cur.tw;
		cur.tw = zui_Ext.floatInput(this.ui,wHandle,"Tile Width") | 0;
		hHandle.value = cur.th;
		cur.th = zui_Ext.floatInput(this.ui,hHandle,"Tile Height") | 0;
	}
	,update: function(dt) {
		if(!this.ownerTab.get_active()) {
			return;
		}
		if(this.doUpdate && this.curSprite != null) {
			this.curSprite.animate();
			var currentCount = this.curSprite.data.get_animation()._speeddiv - this.curSprite.data.get_animation()._count % this.curSprite.data.get_animation()._speeddiv;
			this.delta = currentCount / this.curSprite.data.get_animation()._speeddiv;
			this.timelineHandle.redraws = this.windowHandle.redraws = 1;
		}
	}
	,canvas: null
	,origDimensions: null
	,oldRotation: null
	,animationPreview: function(delta,width,height,oldY) {
		var size = (width > height ? width : height) * 0.25;
		var rx = width * 0.5 - size * 0.5;
		if(this.canvas == null) {
			this.canvas = kha_Image.createRenderTarget(width * 0.25 | 0,height * 0.25 | 0);
		}
		if(this.selectedUID > 0) {
			var scale = 1.0;
			if(width > height) {
				scale = this.curSprite.get_width() > width * 0.25 ? width * 0.125 / this.curSprite.get_width() : 1.0;
			} else {
				scale = this.curSprite.get_height() > height * 0.25 ? height * 0.125 / this.curSprite.get_height() : 1.0;
			}
			this.origDimensions.x = this.curSprite.get_scale().x;
			this.origDimensions.y = this.curSprite.get_scale().y;
			this.oldRotation = this.curSprite.get_rotation().z;
			this.curSprite.get_rotation().z = 0.0;
			this.curSprite.get_scale().x = scale;
			this.curSprite.get_scale().y = scale;
			this.canvas.get_g2().pushTranslation(-this.curSprite.get_position().x + rx + size * 0.25,-this.curSprite.get_position().y + oldY + size * 0.25);
			if(!this.doUpdate) {
				this.curSprite.data.get_animation()._count = 0;
				this.curSprite.data.get_animation()._index = 0;
			}
			this.curSprite.render(this.canvas);
			if(this.doUpdate && this.curSprite.data.get_animation()._index == 0) {
				this.delta = 0.0;
				this.timelineHandle.redraws = 2;
			}
			this.canvas.get_g2().popTransformation();
			this.curSprite.get_scale().x = this.origDimensions.x;
			this.curSprite.get_scale().y = this.origDimensions.y;
			this.curSprite.get_rotation().z = this.oldRotation;
		}
		this.ui.image(this.canvas,-1,size,rx | 0,oldY | 0);
		this.ui.g.drawRect(rx,oldY,size,size);
	}
	,onResize: function(width,height) {
		this.canvas = kha_Image.createRenderTarget(width * 0.25 | 0,height * 0.25 | 0);
		this.canvas.get_g2().clear(0);
	}
	,drawDot: function() {
		var frameWidth = 10 * this.ui.ops.scaleFactor | 0;
		AnimationEditor.dot = kha_Image.createRenderTarget(frameWidth,frameWidth);
		var g = AnimationEditor.dot.get_g2();
		this.ui.g.end();
		g.begin(true,0);
		g.set_color(kha_Color.fromString("#FFE8432E"));
		g.fillTriangle(0,frameWidth,frameWidth * 0.5,0,frameWidth,frameWidth);
		g.end();
		this.ui.g.begin(false);
	}
	,drawTimeline: function(timelineLabelsHeight,timelineFramesHeight) {
		var sc = this.ui.ops.scaleFactor;
		var timelineHeight = timelineLabelsHeight + timelineFramesHeight;
		AnimationEditor.timeline = kha_Image.createRenderTarget(AnimationEditor.width,timelineHeight);
		var g = AnimationEditor.timeline.get_g2();
		this.ui.g.end();
		g.begin(true,-14540254);
		g.set_font(kha_Assets.fonts.font_default);
		g.set_fontSize(16 * sc | 0);
		var frames = AnimationEditor.timeline.get_width() / (11 * sc) | 0;
		var _g = 0;
		var _g1 = (frames / 5 | 0) + 1;
		while(_g < _g1) {
			var i = _g++;
			var frame = i * 5;
			var frameTextWidth = kha_Assets.fonts.font_default.width(g.get_fontSize(),frame + "");
			g.drawString(frame + "",i * 55 * sc + 5 * sc - frameTextWidth / 2,timelineLabelsHeight / 2 - g.get_fontSize() / 2);
		}
		var _g = 0;
		var _g1 = frames;
		while(_g < _g1) {
			var i = _g++;
			g.set_color(i % 5 == 0 ? -12303292 : -13421773);
			g.fillRect(i * 11 * sc,timelineHeight - timelineFramesHeight,10 * sc,timelineFramesHeight);
		}
		g.end();
		this.ui.g.begin(false);
	}
	,saveAnimations: function() {
		if(this.curSprite == null) {
			return;
		}
		var animations = [];
		var _g = 0;
		var _g1 = this.curSprite.data.anims;
		while(_g < _g1.length) {
			var anim = _g1[_g];
			++_g;
			var isWholeImage = anim._frames.length == 1 && anim._frames[0].tw == this.curSprite.data.image.get_width() && anim._frames[0].th == this.curSprite.data.image.get_height();
			if(!isWholeImage) {
				var out = { name : anim.name, frames : anim._frames, fps : anim._speeddiv, time : 0.0};
				var _g2 = 0;
				var _g3 = out.frames;
				while(_g2 < _g3.length) {
					var frame = _g3[_g2];
					++_g2;
					if(out.time < frame.start) {
						out.time = frame.start;
					}
				}
				animations.push(out);
				this.curSprite.dataChanged = true;
			}
		}
		this.curSprite.data.raw.anims = animations;
	}
	,__class__: AnimationEditor
	,__properties__: {set_curFrames:"set_curFrames",set_selectedUID:"set_selectedUID"}
};
var zui_Handle = function(ops) {
	this.changed = false;
	this.dragY = 0;
	this.dragX = 0;
	this.dragEnabled = false;
	this.lastMaxY = 0.0;
	this.lastMaxX = 0.0;
	this.layout = 0;
	this.scrollEnabled = false;
	this.scrollOffset = 0.0;
	this.redraws = 2;
	this.texture = null;
	this.text = "";
	this.value = 0.0;
	this.color = -1;
	this.position = 0;
	this.selected = false;
	if(ops != null) {
		if(ops.selected != null) {
			this.selected = ops.selected;
		}
		if(ops.position != null) {
			this.position = ops.position;
		}
		if(ops.value != null) {
			this.value = ops.value;
		}
		if(ops.text != null) {
			this.text = ops.text;
		}
		if(ops.color != null) {
			this.color = ops.color;
		}
		if(ops.layout != null) {
			this.layout = ops.layout;
		}
	}
};
$hxClasses["zui.Handle"] = zui_Handle;
zui_Handle.__name__ = true;
zui_Handle.prototype = {
	selected: null
	,position: null
	,color: null
	,value: null
	,text: null
	,texture: null
	,redraws: null
	,scrollOffset: null
	,scrollEnabled: null
	,layout: null
	,lastMaxX: null
	,lastMaxY: null
	,dragEnabled: null
	,dragX: null
	,dragY: null
	,changed: null
	,children: null
	,nest: function(i,ops) {
		if(this.children == null) {
			this.children = new haxe_ds_IntMap();
		}
		var c = this.children.h[i];
		if(c == null) {
			c = new zui_Handle(ops);
			this.children.h[i] = c;
		}
		return c;
	}
	,unnest: function(i) {
		if(this.children != null) {
			this.children.remove(i);
		}
	}
	,__class__: zui_Handle
};
var CollisionEditorDialog = function() { };
$hxClasses["CollisionEditorDialog"] = CollisionEditorDialog;
CollisionEditorDialog.__name__ = true;
CollisionEditorDialog.image = null;
CollisionEditorDialog.sprite = null;
CollisionEditorDialog.tile = null;
CollisionEditorDialog.open = function(p_sprite,p_tile) {
	CollisionEditorDialog.sprite = p_sprite;
	CollisionEditorDialog.tile = p_tile;
	if(CollisionEditorDialog.sprite != null && CollisionEditorDialog.sprite.get_raw().type == "sprite_object") {
		CollisionEditorDialog.image = p_sprite.data.image;
	} else if(CollisionEditorDialog.tile != null) {
		CollisionEditorDialog.shouldTileInit = true;
	} else if(CollisionEditorDialog.sprite != null && CollisionEditorDialog.sprite.get_raw().type == "object") {
		CollisionEditorDialog.image = kha_Image.create(CollisionEditorDialog.sprite.get_width() | 0,CollisionEditorDialog.sprite.get_height() | 0);
	} else {
		found_tool_Log.error("CollisionEditor can not be opened without a Tile or a Sprite",{ fileName : "CollisionEditorDialog.hx", lineNumber : 42, className : "CollisionEditorDialog", methodName : "open"});
		found_App.editorui.ui.enabled = true;
		zui_Popup.show = false;
	}
	found_App.editorui.ui.enabled = false;
	var _this = found_Found.popupZuiInstance;
	var _this1 = found_Found.popupZuiInstance;
	zui_Popup.showCustom(found_Found.popupZuiInstance,CollisionEditorDialog.collisionEditorPopupDraw,-1,-1,_this.t.ELEMENT_W * _this.ops.scaleFactor * 4 | 0,_this1.t.ELEMENT_W * _this1.ops.scaleFactor * 3 | 0);
};
CollisionEditorDialog.initTileImage = function(ui) {
	ui.g.end();
	CollisionEditorDialog.shouldTileInit = false;
	CollisionEditorDialog.image = kha_Image.createRenderTarget(CollisionEditorDialog.tile._w | 0,CollisionEditorDialog.tile._h | 0);
	CollisionEditorDialog.image.get_g2().begin();
	CollisionEditorDialog.tile.render(CollisionEditorDialog.image,new kha_math_Vector2());
	CollisionEditorDialog.image.get_g2().end();
	ui.g.begin(false);
};
CollisionEditorDialog.collisionEditorPopupDraw = function(ui) {
	if(CollisionEditorDialog.shouldTileInit) {
		CollisionEditorDialog.initTileImage(ui);
	}
	zui_Popup.boxTitle = "Edit collision";
	var border = 2 * zui_Popup.borderW + zui_Popup.borderOffset;
	var initX = ui._x;
	var data = CollisionEditorDialog.sprite != null ? CollisionEditorDialog.sprite : CollisionEditorDialog.tile;
	var _w = CollisionEditorDialog.sprite != null ? CollisionEditorDialog.sprite.get_raw().type == "sprite_object" ? CollisionEditorDialog.sprite.get__w() : CollisionEditorDialog.sprite.get_width() : CollisionEditorDialog.tile._w;
	var _h = CollisionEditorDialog.sprite != null ? CollisionEditorDialog.sprite.get_raw().type == "sprite_object" ? CollisionEditorDialog.sprite.get__h() : CollisionEditorDialog.sprite.get_width() : CollisionEditorDialog.tile._h;
	var shapes = [];
	if(CollisionEditorDialog.sprite != null && data.raw.rigidBody.shapes != null) {
		shapes = data.raw.rigidBody.shapes;
	} else if(CollisionEditorDialog.tile != null && CollisionEditorDialog.tile.raw.rigidBodies.h.hasOwnProperty(CollisionEditorDialog.tile.tileId)) {
		shapes = CollisionEditorDialog.tile.raw.rigidBodies.h[CollisionEditorDialog.tile.tileId].shapes;
	}
	var shape = null;
	if(shapes != null && shapes.length > 0) {
		shape = shapes[0];
		CollisionEditorDialog.comboBoxHandle.position = shape.type;
	} else {
		shape = echo_Shape.get_defaults();
		shape.offset_x = _w * 0.5;
		shape.offset_y = _h * 0.5;
		shape.width = CollisionEditorDialog.image.get_width();
		shape.height = CollisionEditorDialog.image.get_height();
		shape.type = 0;
		shapes.push(shape);
	}
	var selectedCollisionTypeIndex = ui.combo(CollisionEditorDialog.comboBoxHandle,CollisionEditorDialog.collisionTypes,"Collision Type");
	if(CollisionEditorDialog.comboBoxHandle.changed) {
		if(selectedCollisionTypeIndex == 0) {
			shape = echo_Shape.get_defaults();
			shape.offset_x = _w * 0.5;
			shape.offset_y = _h * 0.5;
			shape.width = CollisionEditorDialog.image.get_width();
			shape.height = CollisionEditorDialog.image.get_height();
			shape.type = 0;
		}
		if(selectedCollisionTypeIndex == 1) {
			var radius = 0.5 * (CollisionEditorDialog.image.get_width() > CollisionEditorDialog.image.get_height() ? CollisionEditorDialog.image.get_width() : CollisionEditorDialog.image.get_height());
			shape = echo_Shape.get_defaults();
			shape.offset_x = _w * 0.5;
			shape.offset_y = _h * 0.5;
			shape.radius = radius;
			shape.type = 1;
		}
		if(selectedCollisionTypeIndex == 2) {
			var _g = [];
			var this1 = new hxmath_math_Vector2Default(0,0);
			_g.push(this1);
			var this1 = new hxmath_math_Vector2Default(0,0);
			_g.push(this1);
			var this1 = new hxmath_math_Vector2Default(0,0);
			_g.push(this1);
			var this1 = new hxmath_math_Vector2Default(0,0);
			_g.push(this1);
			var verts = _g;
			verts[1].x = CollisionEditorDialog.image.get_width();
			verts[2].x = CollisionEditorDialog.image.get_width();
			verts[2].y = CollisionEditorDialog.image.get_height();
			verts[3].y = CollisionEditorDialog.image.get_height();
			shape = echo_Shape.get_defaults();
			shape.offset_x = shape.offset_y = 0;
			shape.rotation = 0;
			shape.vertices = verts;
			shape.type = 2;
		}
		if(shapes.length > 0) {
			shapes[0] = shape;
		} else {
			shapes.push(shape);
		}
	}
	var initY = ui._y;
	var ratio = 1.0;
	if(CollisionEditorDialog.image.get_width() > ui._windowW) {
		ratio = ui._windowW / CollisionEditorDialog.image.get_width();
	}
	if(CollisionEditorDialog.image.get_height() > ui._windowH) {
		ratio = ui._windowH / CollisionEditorDialog.image.get_height();
	}
	var r = ui.curRatio == -1 ? 1.0 : ui.ratios[ui.curRatio];
	var px = ui._x + ui.buttonOffsetY + (ui.t.SCROLL_W * ui.ops.scaleFactor | 0) * r * 0.5;
	var py = ui._y;
	var tempX = ui._x;
	ui._x -= ui.buttonOffsetY + (ui.t.SCROLL_W * ui.ops.scaleFactor | 0) * r / 2;
	var tempH = CollisionEditorDialog.tile != null ? CollisionEditorDialog.image.get_height() : CollisionEditorDialog.image.get_height() * CollisionEditorDialog.sprite.get_scale().y;
	var state = ui.image(CollisionEditorDialog.image,-1,tempH,0,0,CollisionEditorDialog.image.get_width(),CollisionEditorDialog.image.get_height());
	ui._x = tempX;
	ui._y += ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor * 2;
	if(shape != null) {
		var color = kha_Color.fromBytes(255,0,0,128);
		switch(shape.type) {
		case 0:
			var xHandle = zui_Handle.global.nest(48,null);
			xHandle.value = shape.offset_x - _w * 0.5;
			var x = ui.slider(xHandle,"X",0,CollisionEditorDialog.image.get_width());
			if(xHandle.changed) {
				shape.offset_x = x + _w * 0.5;
			}
			var yHandle = zui_Handle.global.nest(49,null);
			yHandle.value = shape.offset_y - _h * 0.5;
			var y = ui.slider(yHandle,"Y",0,CollisionEditorDialog.image.get_height());
			if(yHandle.changed) {
				shape.offset_y = y + _h * 0.5;
			}
			var widthHandle = zui_Handle.global.nest(50,null);
			widthHandle.value = shape.width;
			var w = ui.slider(widthHandle,"Width",0.1,_w);
			if(widthHandle.changed) {
				shape.width = w;
			}
			var heightHandle = zui_Handle.global.nest(51,null);
			heightHandle.value = shape.height;
			var h = ui.slider(heightHandle,"Height",0.1,_h);
			if(heightHandle.changed) {
				shape.height = h;
			}
			ui.g.set_color(color);
			ui.g.fillRect(ui._x + shape.offset_x - _w * 0.5,initY + shape.offset_y - _h * 0.5,shape.width,shape.height);
			ui.g.set_color(-1);
			break;
		case 1:
			var xHandle = zui_Handle.global.nest(52,null);
			xHandle.value = shape.offset_x - _w * 0.5;
			var x = ui.slider(xHandle,"X",0,_w);
			if(xHandle.changed) {
				shape.offset_x = x + _w * 0.5;
			}
			var yHandle = zui_Handle.global.nest(53,null);
			yHandle.value = shape.offset_y - _h * 0.5;
			var y = ui.slider(yHandle,"Y",0,_h);
			if(yHandle.changed) {
				shape.offset_y = y + _h * 0.5;
			}
			var radiusHandle = zui_Handle.global.nest(54,null);
			radiusHandle.value = shape.radius;
			var maxRadius = _w > _h ? _w : _h;
			var radius = ui.slider(radiusHandle,"Radius",1,maxRadius);
			if(radiusHandle.changed) {
				shape.radius = radius;
			}
			ui.g.set_color(color);
			kha_graphics2_GraphicsExtension.fillCircle(ui.g,ui._x + shape.offset_x,initY + shape.offset_y,shape.radius);
			ui.g.set_color(-1);
			break;
		case 2:
			ui.text("Number of vertices: " + shape.vertices.length);
			ui.g.set_color(color);
			kha_graphics2_GraphicsExtension.fillPolygon(ui.g,ui._x + shape.offset_x,initY + shape.offset_y,shape.vertices);
			var col = kha_Color.fromBytes(0,0,255,128);
			var selectedCol = kha_Color.fromBytes(0,0,255,255);
			var _g = 0;
			var _g1 = shape.vertices;
			while(_g < _g1.length) {
				var vert = _g1[_g];
				++_g;
				ui.g.set_color(col);
				var w = 10;
				var addX = ui._x + (vert.x > 0 ? -w : 0.0);
				var addY = initY + (vert.y > 0 ? -w : 0.0);
				if(state == 2) {
					var x = Math.abs(ui._windowX - ui.inputX) - px;
					var y = Math.abs(ui._windowY - ui.inputY) - py;
					var tempX = addX - ui._x;
					var tempY = addY - initY;
					if(x >= vert.x + tempX - w * 2 && x <= vert.x + tempX + w * 2 && y >= vert.y + tempY - w * 2 && y <= vert.y + tempY + w * 2) {
						ui.g.set_color(selectedCol);
						var tx = Math.min(x,_w);
						var ty = Math.min(y,_h);
						vert.x = Math.max(0,tx);
						vert.y = Math.max(0,ty);
					}
				}
				ui.g.fillRect(vert.x + addX,vert.y + addY,w,w);
			}
			ui.g.set_color(-1);
			break;
		}
	}
	ui._x = initX;
	ui.row([0.33,0.33,0.33]);
	if(ui.button("Done")) {
		if(CollisionEditorDialog.sprite != null) {
			data.raw.rigidBody.shapes = shapes;
		} else {
			CollisionEditorDialog.tile.raw.rigidBodies.h[CollisionEditorDialog.tile.tileId].shapes = shapes;
		}
		if(Object.prototype.hasOwnProperty.call(data,"body")) {
			data.body.clear_shapes();
			var i = 0;
			while(i < shapes.length) {
				data.body.create_shape(shapes[i]);
				++i;
			}
		}
		if(CollisionEditorDialog.tile != null) {
			CollisionEditorDialog.tile.map.removeBodies(found_State.active,CollisionEditorDialog.tile.tileId);
			CollisionEditorDialog.tile.map.makeBodies(found_State.active,CollisionEditorDialog.tile.tileId);
		}
		if(CollisionEditorDialog.sprite != null) {
			CollisionEditorDialog.sprite.dataChanged = true;
		} else {
			CollisionEditorDialog.tile.map.dataChanged = true;
		}
		EditorHierarchy.getInstance().makeDirty();
		CollisionEditorDialog.exit();
	}
	if(ui.button("Remove")) {
		if(CollisionEditorDialog.sprite != null) {
			data.raw.rigidBody.shapes = [];
		} else {
			CollisionEditorDialog.tile.raw.rigidBodies.h[CollisionEditorDialog.tile.tileId].shapes = [];
			CollisionEditorDialog.tile.map.removeBodies(found_State.active,CollisionEditorDialog.tile.tileId);
		}
		data.body.clear_shapes();
		if(CollisionEditorDialog.sprite != null) {
			CollisionEditorDialog.sprite.dataChanged = true;
		} else {
			CollisionEditorDialog.tile.map.dataChanged = true;
		}
		EditorHierarchy.getInstance().makeDirty();
		CollisionEditorDialog.exit();
	}
	if(ui.button("Cancel")) {
		CollisionEditorDialog.exit();
	}
	ui._y += ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor * 2;
	if(ui._y < zui_Popup.modalH) {
		ui._y = zui_Popup.modalH;
	}
};
CollisionEditorDialog.exit = function() {
	found_App.editorui.ui.enabled = true;
	zui_Popup.show = false;
	if(CollisionEditorDialog.sprite != null && CollisionEditorDialog.sprite.body != null) {
		var _this = CollisionEditorDialog.sprite.body;
		var value = CollisionEditorDialog.sprite.get_position().x;
		if(value != _this.frame.get_offset().x) {
			var _this1 = _this.frame;
			var this1 = _this.frame.get_offset();
			var y = _this.frame.get_offset().y;
			var self = this1;
			self.x = value;
			self.y = y;
			_this1.set_offset(self);
			_this.dirty = true;
			if(!_this.sync_locked) {
				if(_this.shapes.length > 0) {
					var _g = 0;
					var _g1 = _this.shapes;
					while(_g < _g1.length) {
						var shape = _g1[_g];
						++_g;
						shape.sync();
					}
				}
				if(_this.mass <= 0 && _this.world != null) {
					_this.bounds(_this.quadtree_data.bounds);
					_this.world.static_quadtree.update(_this.quadtree_data);
				}
				if(_this.on_move != null) {
					_this.on_move(_this.frame.get_offset().x,_this.frame.get_offset().y);
				}
			}
		}
		_this.frame.get_offset();
		var _this = CollisionEditorDialog.sprite.body;
		var value = CollisionEditorDialog.sprite.get_position().y;
		if(value != _this.frame.get_offset().y) {
			var _this1 = _this.frame;
			var self = _this.frame.get_offset();
			self.x = _this.frame.get_offset().x;
			self.y = value;
			_this1.set_offset(self);
			_this.dirty = true;
			if(!_this.sync_locked) {
				if(_this.shapes.length > 0) {
					var _g = 0;
					var _g1 = _this.shapes;
					while(_g < _g1.length) {
						var shape = _g1[_g];
						++_g;
						shape.sync();
					}
				}
				if(_this.mass <= 0 && _this.world != null) {
					_this.bounds(_this.quadtree_data.bounds);
					_this.world.static_quadtree.update(_this.quadtree_data);
				}
				if(_this.on_move != null) {
					_this.on_move(_this.frame.get_offset().x,_this.frame.get_offset().y);
				}
			}
		}
		_this.frame.get_offset();
	}
};
CollisionEditorDialog.toOptions = function(shape) {
	var def = echo_Shape.get_defaults();
	def.type = shape.type;
	def.offset_x = shape._x;
	def.offset_y = shape._y;
	def.rotation = shape._rotation;
	def.solid = shape.solid;
	if(((shape) instanceof echo_shape_Rect)) {
		var t = js_Boot.__cast(shape , echo_shape_Rect);
		def.width = t.ex * 2;
		def.height = t.ey * 2;
	} else if(((shape) instanceof echo_shape_Circle)) {
		def.radius = (js_Boot.__cast(shape , echo_shape_Circle)).radius;
	} else if(((shape) instanceof echo_shape_Polygon)) {
		var _this = js_Boot.__cast(shape , echo_shape_Polygon);
		if(_this.dirty_vertices) {
			_this.dirty_vertices = false;
			var self = _this.local_frame.get_offset();
			self.x = _this.local_x;
			self.y = _this.local_y;
			_this.local_frame.set_angleDegrees(_this.local_rotation);
			if(_this.parent_frame != null) {
				var self = _this.parent_frame;
				var self1 = self.get_matrix();
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var v = _this.local_frame.get_offset();
				var pos_x = m_a * v.x + m_c * v.y;
				var pos_y = m_b * v.x + m_d * v.y;
				var a = _this.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var _this1 = _this.local_frame;
				var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
				_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self = _this.local_frame.get_offset();
				self.x = pos_x;
				self.y = pos_y;
			}
			while(_this._vertices.length > _this.count) _this._vertices.pop();
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					continue;
				}
				if(_this._vertices[i] == null) {
					var _this1 = _this._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
				var p = _this.local_vertices[i];
				var self = _this.local_frame;
				var m = self.get_matrix();
				var self1 = m;
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var self_x = m_a * p.x + m_c * p.y;
				var self_y = m_b * p.x + m_d * p.y;
				var self2 = m;
				var b_x = self2.tx;
				var b_y = self2.ty;
				var pos_x = self_x;
				var pos_y = self_y;
				pos_x += b_x;
				pos_y += b_y;
				var self3 = _this._vertices[i];
				self3.x = pos_x;
				self3.y = pos_y;
			}
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				var target = _this.sync_pos;
				var self = _this._vertices[(i + 1) % _this.count];
				var self1 = self;
				var value = self1.x;
				var self2 = target;
				self2.x = value;
				var self3 = self;
				var value1 = self3.y;
				var self4 = target;
				self4.y = value1;
				var a = _this._vertices[i];
				var self5 = _this.sync_pos;
				self5.x -= a.x;
				self5.y -= a.y;
				if(_this._normals[i] == null) {
					var _this1 = _this._normals;
					var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
					_this1[i] = this1;
				} else {
					var y = _this.sync_pos.x;
					var self6 = _this._normals[i];
					self6.x = -_this.sync_pos.y;
					self6.y = y;
				}
				var self7 = _this._normals[i];
				var self8 = self7;
				var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
				if(length > 0.0) {
					var self9 = self7;
					self9.x /= length;
					self9.y /= length;
				}
			}
		}
		def.vertices = _this._vertices;
	}
	return def;
};
var ConfigSettingsDialog = function() { };
$hxClasses["ConfigSettingsDialog"] = ConfigSettingsDialog;
ConfigSettingsDialog.__name__ = true;
ConfigSettingsDialog.open = function() {
	ConfigSettingsDialog.languages = utilities_Translator.getSupportedLocales();
	var index = 0;
	var _g = 0;
	var _g1 = ConfigSettingsDialog.languages;
	while(_g < _g1.length) {
		var lang = _g1[_g];
		++_g;
		if(lang == utilities_Config.raw.locale) {
			ConfigSettingsDialog.localeHandle.position = index;
		}
		++index;
	}
	var _this = found_Found.popupZuiInstance;
	var _this1 = found_Found.popupZuiInstance;
	zui_Popup.showCustom(found_Found.popupZuiInstance,ConfigSettingsDialog.configSettingsPopupDraw,-1,-1,_this.t.ELEMENT_W * _this.ops.scaleFactor * 4 | 0,_this1.t.ELEMENT_W * _this1.ops.scaleFactor * 3 | 0);
};
ConfigSettingsDialog.configSettingsPopupDraw = function(ui) {
	zui_Popup.boxTitle = utilities_Translator.tr("Edit Config Settings");
	ui.text(utilities_Translator.tr("Localization") + ": ");
	var selected = ui.combo(ConfigSettingsDialog.localeHandle,ConfigSettingsDialog.languages);
	if(ConfigSettingsDialog.localeHandle.changed) {
		utilities_Config.raw.locale = ConfigSettingsDialog.languages[selected];
	}
	ConfigSettingsDialog.playModeHandle.selected = utilities_Config.raw.defaultPlayMode;
	var value = ui.check(ConfigSettingsDialog.playModeHandle,utilities_Translator.tr("Boot in Play Mode"));
	if(ConfigSettingsDialog.playModeHandle.changed) {
		utilities_Config.raw.defaultPlayMode = value;
	}
	ConfigSettingsDialog.hideMenuHandle.selected = utilities_Config.raw.autoHideMenuBar;
	var value = ui.check(ConfigSettingsDialog.hideMenuHandle,utilities_Translator.tr("Auto Hide Menu Bar in Scene View"));
	if(ConfigSettingsDialog.hideMenuHandle.changed) {
		utilities_Config.raw.autoHideMenuBar = value;
	}
	ConfigSettingsDialog.uiScaleHandle.value = utilities_Config.raw.window_scale != null ? utilities_Config.raw.window_scale : 1.0;
	var factor = ui.slider(ConfigSettingsDialog.uiScaleHandle,"Ui scale",0.75,1.2,true);
	if(ConfigSettingsDialog.uiScaleHandle.changed) {
		utilities_Config.raw.window_scale = factor;
		ConfigSettingsDialog.changedScale = true;
	}
	var border = zui_Popup.borderW * 2 + zui_Popup.borderOffset;
	ui._y = ui._h - ui.t.BUTTON_H - ui.t.ELEMENT_H - border;
	ui.row([0.5,0.5]);
	ui._y = ui._h - ui.t.BUTTON_H - border;
	ui.text("");
	ui.row([0.5,0.5]);
	if(ui.button("Save Settings")) {
		zui_Popup.show = false;
		utilities_Config.save();
		if(ConfigSettingsDialog.changedScale) {
			found_App.editorui.setUIScale(factor);
			found_App.editorui.redraw();
		}
		ConfigSettingsDialog.changedScale = false;
	}
	if(ui.button("Cancel")) {
		zui_Popup.show = false;
		ConfigSettingsDialog.changedScale = false;
	}
	if(ui._y < zui_Popup.modalH) {
		ui._y = zui_Popup.modalH;
	}
};
var CustomExt = function() { };
$hxClasses["CustomExt"] = CustomExt;
CustomExt.__name__ = true;
CustomExt.fileBrowser = function(ui,handle,foldersOnly) {
	if(foldersOnly == null) {
		foldersOnly = false;
	}
	var ratios = [0.04,0.96];
	var sep = "/";
	var files = khafs_Fs.isDirectory(handle.text) ? khafs_Fs.readDirectory(handle.text,foldersOnly) : foldersOnly ? CustomExt.lastFolders : CustomExt.lastFiles;
	var i1 = handle.text.indexOf("/");
	var i2 = handle.text.indexOf("\\");
	var nested = i1 > -1 && handle.text.length - 1 > i1 || i2 > -1 && handle.text.length - 1 > i2;
	handle.changed = false;
	if(nested) {
		var image = CustomExt.getRessourceImage("");
		ratios[0] = ui._w * ratios[0] < image.get_width() ? ui._w / image.get_width() * 0.01 : ratios[0];
		ratios[1] = 1.0 - ratios[0];
		ui.row(ratios);
		ui.image(image);
		if(ui.button("..",0)) {
			handle.changed = ui.changed = true;
			if(!khafs_Fs.isDirectory(handle.text)) {
				handle.text = handle.text.substring(0,handle.text.lastIndexOf(sep));
			}
			handle.text = handle.text.substring(0,handle.text.lastIndexOf(sep));
			if(handle.text.length == 2 && handle.text.charAt(1) == ":") {
				handle.text += sep;
			}
			if(handle.text == "") {
				handle.text = "./";
			}
		}
	}
	var _g = 0;
	while(_g < files.length) {
		var f = files[_g];
		++_g;
		if(f == "" || f.charAt(0) == ".") {
			continue;
		}
		var image = CustomExt.getRessourceImage(handle.text + ("" + sep + f));
		ratios[0] = ui._w * ratios[0] < image.get_width() ? ui._w / image.get_width() * 0.01 : ratios[0];
		ratios[1] = 1.0 - ratios[0];
		ui.row(ratios);
		ui.image(image);
		if(ui.button(f,0)) {
			handle.changed = ui.changed = true;
			if(!khafs_Fs.isDirectory(handle.text)) {
				handle.text = handle.text.substring(0,handle.text.lastIndexOf(sep));
			}
			if(handle.text.charAt(handle.text.length - 1) != sep) {
				handle.text += sep;
			}
			handle.text += f;
		}
	}
	if(foldersOnly) {
		CustomExt.lastFolders = files;
	} else {
		CustomExt.lastFiles = files;
	}
	return handle.text;
};
CustomExt.getRessourceImage = function(filepath) {
	var name = "blank";
	if(khafs_Fs.isDirectory(filepath)) {
		name = "folder";
	} else {
		var end = HxOverrides.substr(filepath,filepath.lastIndexOf("."),null);
		switch(end) {
		case ".hx":case ".json":case ".vhx":
			name = "script";
			break;
		case ".jpg":case ".png":
			name = "picture_grey";
			break;
		case ".found":case ".txt":
			name = "file_grey";
			break;
		case ".mp3":case ".wav":
			name = "audio_file_grey";
			break;
		}
	}
	return kha_Assets.images.get(name);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = true;
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,__class__: EReg
};
var Tab = function(tabname,p_layout) {
	if(p_layout == null) {
		p_layout = 0;
	}
	this.position = -1;
	this.name = tabname;
	this.layout = p_layout;
};
$hxClasses["Tab"] = Tab;
Tab.__name__ = true;
Tab.prototype = {
	parent: null
	,position: null
	,active: null
	,name: null
	,layout: null
	,get_layout: function() {
		return this.layout;
	}
	,get_active: function() {
		if(this.parent == null) {
			return false;
		}
		if(this.parent.visible) {
			return this.parent.htab.position == this.position;
		} else {
			return false;
		}
	}
	,redraw: function() {
	}
	,render: function(ui) {
	}
	,__class__: Tab
	,__properties__: {get_layout:"get_layout",get_active:"get_active"}
};
var EditorHierarchyObserver = function() { };
$hxClasses["EditorHierarchyObserver"] = EditorHierarchyObserver;
EditorHierarchyObserver.__name__ = true;
EditorHierarchyObserver.__isInterface__ = true;
EditorHierarchyObserver.prototype = {
	notifySceneSelectedInHierarchy: null
	,notifyObjectSelectedInHierarchy: null
	,__class__: EditorHierarchyObserver
};
var EditorAnimationView = function() {
	Tab.call(this,utilities_Translator.tr("Animation"));
	EditorHierarchy.getInstance().register(this);
};
$hxClasses["EditorAnimationView"] = EditorAnimationView;
EditorAnimationView.__name__ = true;
EditorAnimationView.__interfaces__ = [EditorHierarchyObserver];
EditorAnimationView.__super__ = Tab;
EditorAnimationView.prototype = $extend(Tab.prototype,{
	animationEditor: null
	,notifySceneSelectedInHierarchy: function() {
		if(this.animationEditor == null) {
			if(!this.initAnimationEditor()) {
				return;
			}
		}
		this.animationEditor.set_selectedUID(-1);
	}
	,notifyObjectSelectedInHierarchy: function(selectedObject,selectedUID) {
		if(this.animationEditor == null) {
			if(!this.initAnimationEditor()) {
				return;
			}
		}
		this.animationEditor.set_selectedUID(selectedUID);
	}
	,notifyPlayPause: function() {
		if(!this.get_active()) {
			return;
		}
		this.animationEditor.doUpdate = !this.animationEditor.doUpdate;
	}
	,initAnimationEditor: function() {
		if(this.animationEditor == null && this.parent != null) {
			this.animationEditor = new AnimationEditor(this.parent,this);
			return true;
		}
		return false;
	}
	,render: function(ui) {
		if(this.animationEditor == null && this.parent != null) {
			this.animationEditor = new AnimationEditor(this.parent,this);
		} else if(this.animationEditor == null) {
			return;
		}
		this.animationEditor.setAll(this.parent.get_x(),this.parent.get_y(),this.parent.get_w(),this.parent.get_h());
		this.animationEditor.render(ui);
	}
	,update: function(dt) {
		if(!this.get_active()) {
			return;
		}
		this.animationEditor.update(dt);
	}
	,__class__: EditorAnimationView
});
var EditorCodeView = function() {
	this.codeScriptTextAreaHandle = zui_Handle.global.nest(9,null);
	this.codeScriptWindowHandle = zui_Handle.global.nest(8,null);
	this.traitNameWindowHandle = zui_Handle.global.nest(7,null);
	this.currentlyDisplayedTrait = null;
	this.lastDisplayedTrait = null;
	Tab.call(this,utilities_Translator.tr("Code"));
	EditorHierarchy.getInstance().register(this);
};
$hxClasses["EditorCodeView"] = EditorCodeView;
EditorCodeView.__name__ = true;
EditorCodeView.__interfaces__ = [EditorHierarchyObserver];
EditorCodeView.__super__ = Tab;
EditorCodeView.prototype = $extend(Tab.prototype,{
	visualEditor: null
	,lastDisplayedTrait: null
	,currentlyDisplayedTrait: null
	,traitNameWindowHandle: null
	,codeScriptWindowHandle: null
	,codeScriptTextAreaHandle: null
	,notifySceneSelectedInHierarchy: function() {
		this.setDisplayedTrait(null);
	}
	,notifyObjectSelectedInHierarchy: function(selectedObject,selectedUID) {
		if(selectedUID >= 0) {
			var traits = selectedObject.traits != null ? selectedObject.traits : [];
			if(traits.length > 0) {
				this.setDisplayedTrait(traits[0]);
			} else {
				this.setDisplayedTrait(null);
			}
		} else {
			this.setDisplayedTrait(null);
		}
	}
	,setDisplayedTrait: function(trait) {
		this.currentlyDisplayedTrait = trait;
		if(this.get_active() && this.visualEditor != null) {
			this.traitNameWindowHandle.redraws = this.codeScriptWindowHandle.redraws = this.codeScriptTextAreaHandle.redraws = 2;
			this.visualEditor.redraw();
		}
	}
	,render: function(ui) {
		if(this.visualEditor == null) {
			this.visualEditor = new found_tool_NodeEditor(ui,this.parent.get_x(),this.parent.get_y(),this.parent.get_w(),this.parent.get_h());
			this.visualEditor.visible = false;
			this.parent.postRenders.push(($_=this.visualEditor,$bind($_,$_.render)));
		}
		this.visualEditor.setAll(this.parent.get_x(),this.parent.get_y() + (ui.t.BUTTON_H + ui.t.ELEMENT_OFFSET) * 2,this.parent.get_w(),this.parent.get_h() - (ui.t.BUTTON_H + ui.t.ELEMENT_OFFSET) * 2);
		var isActive = ui.tab(this.parent.htab,this.name);
		if(isActive) {
			if(this.currentlyDisplayedTrait != null) {
				ui.row([0.7,0.3]);
				ui.text(this.currentlyDisplayedTrait.classname);
				if(ui.button("Save")) {
					this.saveDisplayedTraitData();
				}
				this.updateDisplayedTraitData();
				if(this.currentlyDisplayedTrait.type != "VisualScript") {
					this.visualEditor.visible = false;
					var isEditable = StringTools.endsWith(this.currentlyDisplayedTrait.classname,".hx");
					zui_Ext.textArea(ui,this.codeScriptTextAreaHandle,0,isEditable);
				} else {
					this.visualEditor.visible = true;
				}
			}
		} else {
			this.visualEditor.visible = false;
		}
	}
	,updateDisplayedTraitData: function() {
		var _gthis = this;
		if(this.currentlyDisplayedTrait != this.lastDisplayedTrait) {
			if(this.currentlyDisplayedTrait != null) {
				if(this.currentlyDisplayedTrait.type == "VisualScript") {
					khafs_Fs.getContent(this.currentlyDisplayedTrait.classname,function(data) {
						var visualTraitData = JSON.parse(data);
						visualTraitData.nodes = new zui_Nodes();
						found_tool_NodeEditor.selectedNode = visualTraitData;
					});
				} else if(StringTools.startsWith(this.currentlyDisplayedTrait.classname,"found.trait.internal") || StringTools.startsWith(this.currentlyDisplayedTrait.classname,"gameplay")) {
					haxe_Log.trace("need to load internal trait",{ fileName : "EditorCodeView.hx", lineNumber : 94, className : "EditorCodeView", methodName : "updateDisplayedTraitData"});
				} else {
					khafs_Fs.getContent(this.currentlyDisplayedTrait.classname,function(data) {
						_gthis.codeScriptTextAreaHandle.text = data;
					});
				}
			} else {
				found_tool_NodeEditor.selectedNode = null;
			}
			this.lastDisplayedTrait = this.currentlyDisplayedTrait;
		}
	}
	,saveDisplayedTraitData: function() {
		var _gthis = this;
		var traitData = "";
		if(this.currentlyDisplayedTrait.type == "VisualScript") {
			var nodeData = found_tool_NodeEditor.selectedNode;
			traitData = JSON.stringify({ name : nodeData.name, nodes : null, nodeCanvas : nodeData.nodeCanvas});
		} else {
			traitData = this.codeScriptTextAreaHandle.text;
		}
		khafs_Fs.saveContent(this.currentlyDisplayedTrait.classname,traitData,function() {
			_gthis.saveTraitOnCurrentObject(_gthis.currentlyDisplayedTrait);
		});
	}
	,saveTraitOnCurrentObject: function(trait) {
		found_Scene.createTraits([trait],found_App.editorui.inspector.get_currentObject());
		var currentObject = found_App.editorui.inspector.get_currentObject();
		if(currentObject.get_raw().traits != null) {
			var alreadyHasTrait = false;
			var _g = 0;
			var _g1 = currentObject.get_raw().traits;
			while(_g < _g1.length) {
				var oldTrait = _g1[_g];
				++_g;
				if(oldTrait.classname == trait.classname) {
					alreadyHasTrait = true;
				}
			}
			if(!alreadyHasTrait) {
				currentObject.get_raw().traits.push(trait);
			}
		} else {
			currentObject.get_raw().traits = [trait];
		}
		currentObject.dataChanged = true;
		EditorHierarchy.getInstance().makeDirty();
	}
	,__class__: EditorCodeView
});
var EditorConsole = function() {
	this.lineHeight = 0.0;
	this.comboH = zui_Handle.global.nest(116,null);
	this.checkH = zui_Handle.global.nest(2,null);
	this.handle = zui_Handle.global.nest(21,null);
	this.typeImages = [];
	this.content = [];
	var _gthis = this;
	Tab.call(this,utilities_Translator.tr("Console"));
	found_tool_Log.addCustomLogging($bind(this,this.log));
	this.typeImages.push(kha_Assets.images.information);
	this.typeImages.push(kha_Assets.images.warning);
	this.typeImages.push(kha_Assets.images.warning);
	this.options = { showAdd : false, editable : false, itemDrawCb : $bind(this,this.drawItem), showRadio : true, getNameCb : function(id) {
		if(id < 0 || _gthis.content[id] == null) {
			return "";
		}
		_gthis.ui.t.TEXT_COL = _gthis.content[id].type == 2 ? -1883360 : _gthis.content[id].type == 1 ? -256 : -1513499;
		return _gthis.content[id].content;
	}, removeCb : function(id) {
		if(id < 0) {
			return;
		}
		_gthis.content.splice(id,1);
	}};
	this.translate();
};
$hxClasses["EditorConsole"] = EditorConsole;
EditorConsole.__name__ = true;
EditorConsole.__super__ = Tab;
EditorConsole.prototype = $extend(Tab.prototype,{
	content: null
	,typeImages: null
	,outputTypes: null
	,options: null
	,isBaseType: function(v) {
		if(typeof(v) == "number" && ((v | 0) === v)) {
			return true;
		}
		if(typeof(v) == "string") {
			return true;
		}
		if(typeof(v) == "number") {
			return true;
		}
		if(((v) instanceof Array)) {
			return true;
		}
		return false;
	}
	,log: function(v,infos) {
		var type = 0;
		if(infos != null && infos.customParams != null) {
			var index = 0;
			var _g = 0;
			var _g1 = infos.customParams;
			while(_g < _g1.length) {
				var v1 = _g1[_g];
				++_g;
				if(Std.string(v1).indexOf("Warn") != -1) {
					type = 1;
					break;
				} else if(Std.string(v1).indexOf("Error") != -1) {
					type = 2;
					break;
				}
				++index;
			}
			if(index < infos.customParams.length) {
				infos.customParams.splice(index,1);
			}
		}
		if(this.get_active()) {
			this.redraw();
		}
		var str = this.isBaseType(v) ? haxe_Log.formatOutput(v,infos) : this.formatNonString(v);
		this.content.push({ type : type, content : str});
	}
	,formatNonString: function(data) {
		var str = "";
		var _g = 0;
		var _g1 = Reflect.fields(data);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(Reflect.fields(Reflect.field(data,f)).length > 0) {
				str += this.formatNonString(Reflect.field(data,f));
			} else {
				var d = Reflect.field(data,f);
				str += "" + f + ": " + d + "; ";
			}
		}
		return str;
	}
	,translate: function() {
		this.outputTypes = [utilities_Translator.tr("All"),utilities_Translator.tr("Information"),utilities_Translator.tr("Warnings"),utilities_Translator.tr("Errors")];
	}
	,redraw: function() {
		this.parent.windowHandle.redraws = this.parent.htab.redraws = this.handle.redraws = 2;
	}
	,ui: null
	,drawItem: function(h,id) {
		if(id < 0 || this.content[id] == null) {
			return;
		}
		var out = this.content[id];
		var _this = this.ui;
		this.ui._y -= _this.t.BUTTON_H * _this.ops.scaleFactor;
		this.ui.image(this.typeImages[out.type],-1,this.lineHeight);
	}
	,handle: null
	,checkH: null
	,comboH: null
	,lineHeight: null
	,render: function(pui) {
		this.ui = pui;
		if(this.ui.tab(this.parent.htab,utilities_Translator.tr(this.name))) {
			var _this = this.ui;
			var div = _this.t.ELEMENT_W * _this.ops.scaleFactor / this.parent.get_w();
			this.ui.row([div,div,div,1.0 - div * 3]);
			if(this.ui.button(utilities_Translator.tr("Clear"))) {
				this.clear();
			}
			this.ui.check(this.checkH,utilities_Translator.tr("Clear on Play"));
			var pos = this.ui.combo(this.comboH,this.outputTypes);
			this.ui.text("");
			var trie = function(co) {
				if(co.type + 1 == pos || pos == 0) {
					return true;
				}
				return false;
			};
			var _g = [];
			var _g1 = 0;
			var _g2 = this.content;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(trie(v)) {
					_g.push(v);
				}
			}
			var contents = _g;
			var col = this.ui.t.ACCENT_COL;
			var hover = this.ui.t.ACCENT_HOVER_COL;
			var select = this.ui.t.ACCENT_SELECT_COL;
			this.ui.t.ACCENT_SELECT_COL = this.ui.t.ACCENT_HOVER_COL = this.ui.t.ACCENT_COL = 0;
			var _this = this.ui;
			this.lineHeight = _this.t.ELEMENT_H * _this.ops.scaleFactor * 0.65;
			var tCol = this.ui.t.TEXT_COL;
			var _this = this.ui;
			var lastFnt = _this.t.FONT_SIZE * _this.ops.scaleFactor | 0;
			this.ui.fontSize = Math.ceil(this.lineHeight);
			zui_Ext.list(this.ui,this.handle,contents,this.options);
			this.ui.t.TEXT_COL = tCol;
			this.ui.fontSize = lastFnt;
			this.ui.t.ACCENT_COL = col;
			this.ui.t.ACCENT_HOVER_COL = hover;
			this.ui.t.ACCENT_SELECT_COL = select;
		}
	}
	,clear: function(callbyPlay) {
		if(callbyPlay == null) {
			callbyPlay = false;
		}
		if(callbyPlay && (!this.checkH.selected || !found_App.editorui.isPlayMode)) {
			return;
		}
		this.content.splice(0,this.content.length);
	}
	,__class__: EditorConsole
});
var EditorGameView = function() {
	this.drawHeight = 0.0;
	this.drawWidth = 0.0;
	this.drawTrait = new found_Trait();
	Tab.call(this,utilities_Translator.tr("Game"));
};
$hxClasses["EditorGameView"] = EditorGameView;
EditorGameView.__name__ = true;
EditorGameView.__super__ = Tab;
EditorGameView.prototype = $extend(Tab.prototype,{
	drawTrait: null
	,x: null
	,get_x: function() {
		return this.parent.get_x();
	}
	,y: null
	,get_y: function() {
		return this.parent.get_y();
	}
	,width: null
	,get_width: function() {
		return this.parent.get_w();
	}
	,height: null
	,get_height: function() {
		return this.parent.get_h();
	}
	,drawWidth: null
	,drawHeight: null
	,render: function(ui) {
		if(found_Found.scenebuffer == null) {
			found_Found.scenebuffer = kha_Image.createRenderTarget(found_Found.backbuffer.get_width(),found_Found.backbuffer.get_height());
		}
		if(ui.tab(this.parent.htab,this.name)) {
			var h = null;
			var iw = found_Found.scenebuffer.get_width() * ui.ops.scaleFactor;
			var ih = found_Found.scenebuffer.get_height() * ui.ops.scaleFactor;
			var w = Math.min(iw,ui._w);
			var x = ui._x;
			var scroll = ui.currentWindow != null && ui.currentWindow.scrollEnabled;
			var r;
			if(ui.curRatio == -1) {
				r = 1.0;
			} else {
				var ratio = ui.ratios[ui.curRatio];
				r = ratio < 0 ? -ratio : ratio;
			}
			if(ui.imageScrollAlign) {
				w = Math.min(iw,ui._w - ui.buttonOffsetY * 2);
				x += ui.buttonOffsetY;
				if(!scroll) {
					w -= (ui.t.SCROLL_W * ui.ops.scaleFactor | 0) * r;
					x += (ui.t.SCROLL_W * ui.ops.scaleFactor | 0) * r / 2;
				}
			} else if(scroll) {
				w += (ui.t.SCROLL_W * ui.ops.scaleFactor | 0) * r;
			}
			var ratio = h == null ? w / iw : h / ih;
			if(h == null) {
				h = ih * ratio;
			} else {
				w = iw * ratio;
			}
			this.drawWidth = w;
			this.drawHeight = h;
			ui.image(found_Found.scenebuffer);
			ui.g.end();
			this.parent.windowHandle.redraws = 1;
			var image = found_Found.scenebuffer;
			image.get_g2().begin();
			if(found_State.active != null) {
				found_State.active.render(image);
			}
			image.get_g2().end();
			found_App.frameCounter.render(image);
			ui.g.begin(false);
		}
		this.parent.windowHandle.redraws = 2;
	}
	,__class__: EditorGameView
	,__properties__: $extend(Tab.prototype.__properties__,{get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"})
});
var EditorHierarchy = function() {
	this.typeDescr = ["object:\nAn object that has positional and collision information.\nTo detect collisions or have a trigger zone make sure to create a rigidbody on the object.","sprite_object:\nAn Object that has a visual representation in the scene.\nCan be animated or have a parallax effect be applied to it.","tilemap_object:\nAn object which can have multiple tiles/images that can be drawn on screen based on this objects position.\nIn the futur tiles will be animatable and Auto-tilling will be supported."];
	this.objectTypes = ["None","object","sprite_object","tilemap_object"];
	this.objectNameDoubleClickTime = 0.0;
	this.sceneNameDoubleClickTime = 0.0;
	this.handles = [];
	this.objectTypeHandle = zui_Handle.global.nest(86,null);
	this.textInputHandle = zui_Handle.global.nest(85,null);
	this.objectWithNameAlreadyExists = false;
	this.sceneNameHandle = zui_Handle.global.nest(17,null);
	this.sceneName = "";
	this.selectedObjectUID = -1;
	this.observers = [];
	Tab.call(this,utilities_Translator.tr("Hierarchy"));
	this.setSceneData(found_State.active.raw);
};
$hxClasses["EditorHierarchy"] = EditorHierarchy;
EditorHierarchy.__name__ = true;
EditorHierarchy.instance = null;
EditorHierarchy.getInstance = function() {
	if(EditorHierarchy.instance == null) {
		EditorHierarchy.instance = new EditorHierarchy();
	}
	return EditorHierarchy.instance;
};
EditorHierarchy.__super__ = Tab;
EditorHierarchy.prototype = $extend(Tab.prototype,{
	observers: null
	,selectedObjectUID: null
	,sceneName: null
	,scene: null
	,sceneNameHandle: null
	,objectWithNameAlreadyExists: null
	,textInputHandle: null
	,objectTypeHandle: null
	,handles: null
	,sceneNameDoubleClickTime: null
	,objectNameDoubleClickTime: null
	,objectTypes: null
	,typeDescr: null
	,register: function(observer) {
		this.observers.push(observer);
	}
	,unregister: function(observer) {
		HxOverrides.remove(this.observers,observer);
	}
	,onSceneSelected: function() {
		var _g = 0;
		var _g1 = this.observers;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.notifySceneSelectedInHierarchy();
		}
	}
	,onObjectSelected: function(uid,obj) {
		this.selectedObjectUID = uid;
		var _g = 0;
		var _g1 = this.observers;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.notifyObjectSelectedInHierarchy(obj,uid);
		}
	}
	,setSceneData: function(raw) {
		this.sceneName = raw.name;
		this.scene = raw;
		this.redraw();
	}
	,makeDirty: function() {
		if(!this.isDirty()) {
			this.sceneName += "*";
		}
		this.redraw();
		if(this.selectedObjectUID == -1) {
			return;
		}
		found_State.active._entities[this.selectedObjectUID].dataChanged = true;
	}
	,isDirty: function() {
		return StringTools.endsWith(this.sceneName,"*");
	}
	,makeClean: function() {
		this.sceneName = StringTools.replace(this.sceneName,"*","");
		this.redraw();
	}
	,redraw: function() {
		if(this.parent != null) {
			this.parent.windowHandle.redraws = 2;
		}
		this.sceneNameHandle.redraws = 2;
	}
	,render: function(ui) {
		Tab.prototype.render.call(this,ui);
		if(this.scene == null) {
			return;
		}
		if(ui.panel(zui_Handle.global.nest(87,null),this.name)) {
			this.sceneNameHandle.text = this.scene.name;
			if(kha_Scheduler.time() - this.sceneNameDoubleClickTime > 1.0) {
				this.sceneNameHandle.position = 0;
				this.sceneNameDoubleClickTime = 0.0;
			}
			if(ui.getReleased()) {
				this.onSceneSelected();
				this.sceneNameDoubleClickTime = kha_Scheduler.time();
				if(this.sceneNameHandle.position > 0) {
					this.sceneNameHandle.position = 0;
				} else if(this.sceneNameHandle.position < 1) {
					this.sceneNameHandle.position++;
					ui.deselectText();
					ui.inputReleased = false;
				}
			}
			var label = this.isDirty() ? utilities_Translator.tr("Scene(changed)") : utilities_Translator.tr("Scene");
			label += ": ";
			var name = ui.textInput(this.sceneNameHandle,label,2);
			if(this.sceneNameHandle.changed) {
				this.sceneName = StringTools.replace(this.sceneName,this.scene.name,name);
				this.scene.name = name;
			}
			if(this.scene._entities.length > this.handles.length) {
				while(this.handles.length != this.scene._entities.length) this.handles.push(new zui_Handle());
			}
			var i = 0;
			while(i < this.scene._entities.length) {
				var itemHandle = this.handles[i];
				i = this.itemDrawCb(ui,itemHandle,i,this.scene._entities);
			}
		}
		if(ui.button(utilities_Translator.tr("New Object"))) {
			var _this = found_Found.popupZuiInstance;
			var _this1 = found_Found.popupZuiInstance;
			zui_Popup.showCustom(found_Found.popupZuiInstance,$bind(this,this.objectCreationPopupDraw),-1,-1,_this.t.ELEMENT_W * _this.ops.scaleFactor * 4 | 0,_this1.t.ELEMENT_W * _this1.ops.scaleFactor * 3 | 0);
		}
	}
	,objectCreationPopupDraw: function(ui) {
		zui_Popup.boxTitle = utilities_Translator.tr("Add an Object");
		var border = 2 * zui_Popup.borderW + zui_Popup.borderOffset;
		if(ui.panel(zui_Handle.global.nest(88,{ selected : true}),utilities_Translator.tr("Object Types") + ":",true)) {
			var index = 0;
			var _g = 0;
			var _g1 = this.objectTypes;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				if(type == "None") {
					continue;
				}
				var drawHint = false;
				if(ui.getHover()) {
					drawHint = true;
				}
				if(ui.button(type)) {
					this.objectTypeHandle.position = index + 1;
					if(this.textInputHandle.text == "") {
						var name = type.split("_")[0];
						this.textInputHandle.text = name.charAt(0).toUpperCase() + name.substring(1,name.length);
						this.objectWithNameAlreadyExists = found_State.active.getObject(this.textInputHandle.text) != null;
					}
				}
				if(drawHint) {
					ui.text(utilities_Translator.tr(this.typeDescr[index]));
				}
				++index;
			}
		}
		ui._y = ui._h - ui.t.BUTTON_H * 2 - border;
		ui.row([0.5,0.5]);
		var before = ui.t.LABEL_COL;
		if(this.objectWithNameAlreadyExists) {
			ui.t.LABEL_COL = ui.t.TEXT_COL = -65536;
		}
		ui.textInput(this.textInputHandle,utilities_Translator.tr("Name"));
		if(this.textInputHandle.changed) {
			this.objectWithNameAlreadyExists = found_State.active.getObject(this.textInputHandle.text) != null;
		}
		ui.t.LABEL_COL = ui.t.TEXT_COL = before;
		ui.combo(this.objectTypeHandle,this.objectTypes,utilities_Translator.tr("Type"),true,0);
		ui._y = ui._h - ui.t.BUTTON_H - border;
		ui.row([0.5,0.5]);
		ui.enabled = !this.objectWithNameAlreadyExists && this.textInputHandle.text != "" && this.objectTypeHandle.position != 0;
		if(ui.button(utilities_Translator.tr("Add"))) {
			this.addData2Scn(found_data_Creator.createType(this.textInputHandle.text,this.objectTypes[this.objectTypeHandle.position]));
			this.closeObjectCreationPopup();
		}
		ui.enabled = true;
		if(ui.button(utilities_Translator.tr("Cancel"))) {
			this.closeObjectCreationPopup();
		}
	}
	,addData2Scn: function(data) {
		found_State.active.raw._entities.push(data);
		found_State.active.addEntity(data,true);
		this.makeDirty();
	}
	,closeObjectCreationPopup: function() {
		zui_Popup.show = false;
		this.objectTypeHandle.text = this.textInputHandle.text = "";
		this.redraw();
	}
	,rmvData2Scn: function(uid) {
		found_State.active.raw._entities.splice(uid,1);
		var entity = found_State.active._entities[uid];
		entity.spawned = true;
		found_State.active.remove(entity);
		if(found_State.active.physics_world != null) {
			found_State.active.physics_world.reset_quadtrees();
		}
		var _g = 0;
		var _g1 = found_object_Executor.executors;
		while(_g < _g1.length) {
			var exe = _g1[_g];
			++_g;
			var modified = Reflect.field(found_object_Object,exe.field);
			modified.splice(uid,1);
		}
		found_object_Object.uidCounter--;
		var _g = 0;
		var _g1 = found_State.active._entities.length;
		while(_g < _g1) {
			var i = _g++;
			Reflect.setProperty(found_State.active._entities[i],"uid",i);
			found_State.active._entities[i].dataChanged = true;
		}
		if(uid == this.selectedObjectUID) {
			this.onObjectSelected(-1,null);
		}
		this.makeDirty();
	}
	,itemDrawCb: function(ui,itemHandle,i,raw) {
		ui.row([0.12,0.68,0.2]);
		ui.text("");
		var expanded = false;
		itemHandle.text = raw[i].name;
		if(kha_Scheduler.time() - this.objectNameDoubleClickTime > 1.0) {
			itemHandle.position = 0;
			this.objectNameDoubleClickTime = 0.0;
		}
		if(ui.getReleased()) {
			this.objectNameDoubleClickTime = kha_Scheduler.time();
			if(itemHandle.position > 0) {
				itemHandle.position = 0;
			} else if(itemHandle.position < 1) {
				itemHandle.position++;
				ui.deselectText();
				ui.inputReleased = false;
				this.onObjectSelected(i,raw[i]);
			}
		}
		var color = ui.t.FILL_ACCENT_BG;
		ui.t.FILL_ACCENT_BG = ui.t.FILL_WINDOW_BG;
		var out = ui.textInput(itemHandle);
		ui.t.FILL_ACCENT_BG = color;
		if(itemHandle.changed) {
			raw[i].name = out;
			this.makeDirty();
		}
		if(i > 0 && raw[i].type != "camera_object") {
			if(ui.button("X")) {
				this.rmvData2Scn(i);
			} else {
				++i;
			}
		} else {
			ui.text("");
			++i;
		}
		if(expanded) {
			var y = 0;
			while(i < raw[i].children.length) y = this.itemDrawCb(ui,itemHandle.nest(i),y,raw[i].children);
		}
		return i;
	}
	,__class__: EditorHierarchy
});
var EditorInspector = function() {
	this.types = ["Int","Bool","Float","String","Vector2i","Vector2b","Vector2"];
	this.layersName = [];
	this.layers = [];
	this.index = -1;
	this.zSortText = "If active will zsort instead of Y sort";
	this.depthSortText = "If active will draw based on depth order";
	this.layerItemHandles = [];
	this.layersHandle = zui_Handle.global.nest(16,null);
	this.objectTraitsChanged = false;
	this.updateSelectedTraitIndex = false;
	this.traitListHandle = zui_Handle.global.nest(26,null);
	this.sceneHandle = zui_Handle.global.nest(15,null);
	this.objectHandle = zui_Handle.global.nest(14,null);
	this.objItemHandles = [];
	this.itemsLength = 11;
	this.changed = false;
	Tab.call(this,utilities_Translator.tr("Inspector"));
	var base = zui_Handle.global.nest(22,null);
	var _g = 0;
	var _g1 = this.itemsLength;
	while(_g < _g1) {
		var i = _g++;
		this.objItemHandles.push(base.nest(i));
	}
	this.objectHandle.nest(0);
	this.traitListOpts = { addCb : $bind(this,this.addTrait), removeCb : $bind(this,this.removeTrait), getNameCb : $bind(this,this.getTraitName), setNameCb : null, getLabelCb : null, itemDrawCb : $bind(this,this.drawTrait), showRadio : true, editable : false, showAdd : true, addLabel : "New Trait"};
	EditorHierarchy.getInstance().register(this);
};
$hxClasses["EditorInspector"] = EditorInspector;
EditorInspector.__name__ = true;
EditorInspector.__interfaces__ = [EditorHierarchyObserver];
EditorInspector.__super__ = Tab;
EditorInspector.prototype = $extend(Tab.prototype,{
	ui: null
	,changed: null
	,selectedObjectData: null
	,selectedSceneData: null
	,itemsLength: null
	,objItemHandles: null
	,objectHandle: null
	,sceneHandle: null
	,traitListHandle: null
	,traitListOpts: null
	,updateSelectedTraitIndex: null
	,objectTraitsChanged: null
	,layersHandle: null
	,layerItemHandles: null
	,depthSortText: null
	,zSortText: null
	,index: null
	,currentObject: null
	,get_currentObject: function() {
		if(this.index == -1) {
			return null;
		}
		return found_State.active._entities[this.index];
	}
	,layers: null
	,get_layers: function() {
		var data = found_State.active.raw;
		if(data != null && data.layers == null) {
			data.layers = this.layers;
		}
		if(data != null) {
			return data.layers;
		} else {
			return this.layers;
		}
	}
	,layersName: null
	,get_layersName: function() {
		while(this.get_layers().length > this.layersName.length) this.layersName.push(this.get_layers()[this.layersName.length].name);
		return this.layersName;
	}
	,redraw: function() {
		if(this.parent != null) {
			this.parent.windowHandle.redraws = 2;
		}
		this.objectHandle.redraws = 2;
		this.sceneHandle.redraws = 2;
		this.layersHandle.redraws = 2;
	}
	,setObject: function(objectData,i) {
		this.selectedSceneData = null;
		if(this.index != -1 && this.index != i && found_trait_internal_Arrows.get_instance().object != null) {
			HxOverrides.remove(found_trait_internal_Arrows.get_instance().object.traits,found_trait_internal_Arrows.get_instance());
		}
		if(i != -1) {
			this.index = i;
			this.selectedObjectData = this.get_currentObject().get_raw();
			this.traitListHandle.nest(0).position = 0;
			this.parent.visible = true;
		} else {
			this.selectedObjectData = null;
			this.index = i;
			this.parent.visible = false;
		}
		this.redraw();
	}
	,selectScene: function() {
		this.selectedObjectData = null;
		this.setObject(null,-1);
		this.selectedSceneData = found_State.active.raw;
		this.parent.visible = true;
		this.redraw();
	}
	,notifySceneSelectedInHierarchy: function() {
		this.selectScene();
	}
	,notifyObjectSelectedInHierarchy: function(selectedObject,selectedUID) {
		this.setObject(selectedObject,selectedUID);
		if(this.index != -1 && selectedObject.type == "tilemap_object") {
			found_Found.tileeditor.selectTilemap(this.index);
		} else {
			found_Found.tileeditor.selectTilemap(-1);
		}
		this.redraw();
	}
	,render: function(ui) {
		if(this.selectedObjectData == null && this.selectedSceneData == null) {
			this.parent.visible = false;
			return;
		}
		Tab.prototype.render.call(this,ui);
		this.ui = ui;
		this.changed = false;
		if(ui.tab(this.parent.htab,this.name)) {
			if(ui.button(utilities_Translator.tr("Deselect"))) {
				this.setObject(null,-1);
				this.selectedObjectData = null;
				this.selectedSceneData = null;
				return;
			}
			if(this.selectedObjectData != null) {
				this.drawSelectedObjectItems(ui);
			} else if(this.selectedSceneData != null) {
				this.drawSelectedSceneItems(ui);
			}
		}
	}
	,drawSelectedObjectItems: function(ui) {
		var _gthis = this;
		var activeHandle = this.objItemHandles[0];
		var xPosHandle = this.objItemHandles[1];
		var yPosHandle = this.objItemHandles[2];
		var zRotHandle = this.objItemHandles[3];
		var xScaleHandle = this.objItemHandles[4];
		var yScaleHandle = this.objItemHandles[5];
		var layerHandle = this.objItemHandles[6];
		var depthHandle = this.objItemHandles[7];
		var wHandle = this.objItemHandles[8];
		var hHandle = this.objItemHandles[9];
		var imagePathHandle = this.objItemHandles[10];
		var kinematicHandle = zui_Handle.global.nest(57,null);
		var massHandle = zui_Handle.global.nest(58,null);
		var elasticityHandle = zui_Handle.global.nest(59,null);
		var maxXvelHandle = zui_Handle.global.nest(60,null);
		var maxYvelHandle = zui_Handle.global.nest(61,null);
		var maxRotVelHandle = zui_Handle.global.nest(62,null);
		var dragXHandle = zui_Handle.global.nest(63,null);
		var dragYHandle = zui_Handle.global.nest(64,null);
		var gravityScaleHandle = zui_Handle.global.nest(65,null);
		var objectNameHandle = zui_Handle.global.nest(66,null);
		objectNameHandle.text = this.selectedObjectData.name;
		ui.textInput(objectNameHandle,"");
		if(objectNameHandle.changed && objectNameHandle.text != "") {
			this.selectedObjectData.name = objectNameHandle.text;
			this.get_currentObject().dataChanged = true;
			this.changed = true;
		}
		ui.text(this.selectedObjectData.type);
		activeHandle.selected = this.selectedObjectData.active;
		ui.check(activeHandle," active");
		if(activeHandle.changed) {
			this.selectedObjectData.active = activeHandle.selected;
			this.get_currentObject().set_active(this.selectedObjectData.active);
			this.get_currentObject().dataChanged = true;
			this.changed = true;
		}
		var div = ui.t.ELEMENT_W * ui.ops.scaleFactor / this.parent.get_w();
		var row = (1.0 - div * 0.2) * 0.5;
		ui.row([div * 0.2,row,row]);
		ui.text("P");
		xPosHandle.value = found_math_Util.fround(this.selectedObjectData.position.x,2);
		var px = zui_Ext.floatInput(ui,xPosHandle,"X",2);
		if(xPosHandle.changed) {
			this.selectedObjectData.position.x = found_math_Util.fround(px,2);
			this.get_currentObject().get_position().x = this.selectedObjectData.position.x;
			this.get_currentObject().dataChanged = true;
			this.changed = true;
		}
		yPosHandle.value = found_math_Util.fround(this.selectedObjectData.position.y,2);
		var py = zui_Ext.floatInput(ui,yPosHandle,"Y",2);
		if(yPosHandle.changed) {
			this.selectedObjectData.position.y = found_math_Util.fround(py,2);
			this.get_currentObject().get_position().y = this.selectedObjectData.position.y;
			this.get_currentObject().dataChanged = true;
			this.changed = true;
		}
		ui.row([div * 0.2,1.0 - div * 0.2]);
		ui.text("R");
		zRotHandle.value = this.selectedObjectData.rotation.z;
		var rz = Math.abs(zui_Ext.floatInput(ui,zRotHandle,"",2));
		if(zRotHandle.changed) {
			if(rz > 360) {
				rz -= 360;
			}
			this.selectedObjectData.rotation.z = rz;
			this.get_currentObject().get_rotation().z = this.selectedObjectData.rotation.z;
			this.get_currentObject().dataChanged = true;
			this.changed = true;
		}
		ui.row([div * 0.2,row,row]);
		ui.text("S");
		xScaleHandle.value = found_math_Util.fround(this.selectedObjectData.scale != null ? this.selectedObjectData.scale.x : 1.0,2);
		var sx = zui_Ext.floatInput(ui,xScaleHandle,"X",2);
		if(xScaleHandle.changed) {
			this.selectedObjectData.scale.x = sx;
			this.get_currentObject().get_scale().x = this.selectedObjectData.scale.x;
			this.get_currentObject().dataChanged = true;
			this.changed = true;
		}
		yScaleHandle.value = found_math_Util.fround(this.selectedObjectData.scale != null ? this.selectedObjectData.scale.y : 1.0,2);
		var sy = zui_Ext.floatInput(ui,yScaleHandle,"Y",2);
		if(yScaleHandle.changed) {
			this.selectedObjectData.scale.y = sy;
			this.get_currentObject().get_scale().y = this.selectedObjectData.scale.y;
			this.get_currentObject().dataChanged = true;
			this.changed = true;
		}
		ui.row([div * 0.5,1.0 - div * 0.5]);
		ui.text("Layer: ");
		if(found_State.active.raw.layers != null) {
			layerHandle.position = this.selectedObjectData.layer;
			var layer = ui.combo(layerHandle,this.get_layersName());
			if(layerHandle.changed) {
				this.selectedObjectData.layer = layer;
				this.get_currentObject().dataChanged = true;
				this.changed = true;
				layerHandle.changed = false;
			}
			var isZsort = found_State.active.raw._Zsort;
			if(isZsort != null && isZsort) {
				ui.indent();
				ui.row([div,1.0 - div]);
				ui.text("Order in layer:");
				depthHandle.value = this.selectedObjectData.depth;
				var depth = zui_Ext.floatInput(ui,depthHandle);
				if(depthHandle.changed) {
					this.selectedObjectData.depth = depth;
					this.get_currentObject().dataChanged = true;
					this.changed = true;
				}
				ui.unindent();
			}
		} else if(ui.button("Create Layers")) {
			this.selectScene();
			return;
		}
		ui.row([div,div]);
		wHandle.value = this.selectedObjectData.width;
		var width = zui_Ext.floatInput(ui,wHandle,"Width: ",2);
		if(wHandle.changed) {
			this.selectedObjectData.width = width;
			this.get_currentObject().set_width(this.selectedObjectData.width);
			this.get_currentObject().dataChanged = true;
			this.changed = true;
		}
		hHandle.value = this.selectedObjectData.height;
		var height = zui_Ext.floatInput(ui,hHandle,"Height: ",2);
		if(hHandle.changed) {
			this.selectedObjectData.height = height;
			this.get_currentObject().set_height(this.selectedObjectData.height);
			this.get_currentObject().dataChanged = true;
			this.changed = true;
		}
		if(Object.prototype.hasOwnProperty.call(this.selectedObjectData,"imagePath")) {
			var sprite = this.selectedObjectData;
			ui.row([1.0 - div * 0.5,div * 0.5]);
			imagePathHandle.text = sprite.imagePath;
			var path = ui.textInput(imagePathHandle,"Image:",2);
			if(imagePathHandle.changed) {
				sprite.imagePath = path;
				this.changed = true;
			}
			if(ui.button("Browse")) {
				this.browseImage();
			}
		}
		if(ui.panel(zui_Handle.global.nest(67,null),"Traits: ")) {
			ui.indent();
			var traits = this.selectedObjectData.traits != null ? this.selectedObjectData.traits : [];
			var lastSelectedTraitIndex = this.traitListHandle.nest(0).position;
			var selectedTraitIndex = zui_Ext.list(ui,this.traitListHandle,traits,this.traitListOpts);
			if(selectedTraitIndex != lastSelectedTraitIndex || this.objectTraitsChanged || this.updateSelectedTraitIndex) {
				if(this.objectTraitsChanged) {
					this.objectTraitsChanged = false;
				} else if(this.updateSelectedTraitIndex) {
					this.traitListHandle.nest(0).position = this.traitListHandle.nest(0).position - 1;
					selectedTraitIndex = this.traitListHandle.nest(0).position;
					this.updateSelectedTraitIndex = false;
				}
				found_App.editorui.codeView.setDisplayedTrait(traits[selectedTraitIndex]);
			}
			this.selectedObjectData.traits = traits;
			ui.unindent();
		}
		if(found_State.active.raw.physicsWorld != null) {
			ui.row([0.5,0.5]);
			var text = this.selectedObjectData.rigidBody != null ? "-" : "+";
			var addRigidbody = function(state) {
				if(state == "+") {
					_gthis.selectedObjectData.rigidBody = echo_Body.get_defaults();
					_gthis.get_currentObject().set_raw(_gthis.selectedObjectData);
					if(_gthis.get_currentObject().body == null) {
						_gthis.get_currentObject().set_body(new echo_Body(_gthis.selectedObjectData.rigidBody));
					}
					if(_gthis.get_currentObject().body.shapes == null && _gthis.get_currentObject().body.shapes.length == 0) {
						var addRigidbody = _gthis.get_currentObject().body.shapes;
						var x = 0;
						var y = 0;
						var width = _gthis.get_currentObject().get_width();
						var height = _gthis.get_currentObject().get_height();
						if(height == null) {
							height = 0;
						}
						if(width == null) {
							width = 1;
						}
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var rect = echo_shape_Rect._pool.get();
						var x1 = x;
						var y1 = y;
						var width1 = width;
						var height1 = height;
						var rotation = 0;
						if(rotation == null) {
							rotation = 0;
						}
						if(height1 == null) {
							height1 = 0;
						}
						if(width1 == null) {
							width1 = 1;
						}
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						rect.local_x = x1;
						if(rect.parent_frame != null) {
							if(!rect.sync_locked) {
								if(rect.parent_frame != null) {
									if(rect.local_x == 0 && rect.local_y == 0) {
										rect._x = rect.parent_frame.get_offset().x;
										rect._y = rect.parent_frame.get_offset().y;
									} else {
										var self = rect.sync_pos;
										self.x = rect.local_x;
										self.y = rect.local_y;
										var p = rect.sync_pos;
										var self = rect.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										rect._x = pos_x;
										rect._y = pos_y;
									}
									rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
								} else {
									rect._x = rect.local_x;
									rect._y = rect.local_x;
									rect._rotation = rect.local_rotation;
								}
								if(rect.transformed_rect == null && rect._rotation != 0) {
									var polygon = echo_shape_Polygon._pool.get();
									polygon.count = 4;
									var _g = 0;
									var _g1 = polygon.count;
									while(_g < _g1) {
										var i = _g++;
										if(polygon.local_vertices[i] == null) {
											var polygon1 = polygon.local_vertices;
											var this1 = new hxmath_math_Vector2Default(0,0);
											polygon1[i] = this1;
										}
									}
									var self = polygon.local_vertices[0];
									self.x = -rect.ex;
									self.y = -rect.ey;
									var self = polygon.local_vertices[1];
									self.x = rect.ex;
									self.y = -rect.ey;
									var self = polygon.local_vertices[2];
									self.x = rect.ex;
									self.y = rect.ey;
									var self = polygon.local_vertices[3];
									self.x = -rect.ex;
									self.y = rect.ey;
									polygon.lock_sync();
									polygon.local_x = rect.local_x;
									if(polygon.parent_frame != null) {
										if(!polygon.sync_locked) {
											if(polygon.parent_frame != null) {
												if(polygon.local_x == 0 && polygon.local_y == 0) {
													polygon._x = polygon.parent_frame.get_offset().x;
													polygon._y = polygon.parent_frame.get_offset().y;
												} else {
													var self = polygon.sync_pos;
													self.x = polygon.local_x;
													self.y = polygon.local_y;
													var p = polygon.sync_pos;
													var self = polygon.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													polygon._x = pos_x;
													polygon._y = pos_y;
												}
												polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
											} else {
												polygon._x = polygon.local_x;
												polygon._y = polygon.local_x;
												polygon._rotation = polygon.local_rotation;
											}
											polygon.dirty_vertices = true;
											polygon.dirty_bounds = true;
										}
									} else {
										polygon._x = polygon.local_x;
									}
									polygon.local_y = rect.local_y;
									if(polygon.parent_frame != null) {
										if(!polygon.sync_locked) {
											if(polygon.parent_frame != null) {
												if(polygon.local_x == 0 && polygon.local_y == 0) {
													polygon._x = polygon.parent_frame.get_offset().x;
													polygon._y = polygon.parent_frame.get_offset().y;
												} else {
													var self = polygon.sync_pos;
													self.x = polygon.local_x;
													self.y = polygon.local_y;
													var p = polygon.sync_pos;
													var self = polygon.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													polygon._x = pos_x;
													polygon._y = pos_y;
												}
												polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
											} else {
												polygon._x = polygon.local_x;
												polygon._y = polygon.local_x;
												polygon._rotation = polygon.local_rotation;
											}
											polygon.dirty_vertices = true;
											polygon.dirty_bounds = true;
										}
									} else {
										polygon._y = polygon.local_y;
									}
									polygon.local_rotation = rect.local_rotation;
									if(polygon.parent_frame != null) {
										if(!polygon.sync_locked) {
											if(polygon.parent_frame != null) {
												if(polygon.local_x == 0 && polygon.local_y == 0) {
													polygon._x = polygon.parent_frame.get_offset().x;
													polygon._y = polygon.parent_frame.get_offset().y;
												} else {
													var self = polygon.sync_pos;
													self.x = polygon.local_x;
													self.y = polygon.local_y;
													var p = polygon.sync_pos;
													var self = polygon.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													polygon._x = pos_x;
													polygon._y = pos_y;
												}
												polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
											} else {
												polygon._x = polygon.local_x;
												polygon._y = polygon.local_x;
												polygon._rotation = polygon.local_rotation;
											}
											polygon.dirty_vertices = true;
											polygon.dirty_bounds = true;
										}
									} else {
										polygon._rotation = polygon.local_rotation;
									}
									polygon.dirty_vertices = true;
									polygon.dirty_bounds = true;
									polygon.unlock_sync();
									polygon.pooled = false;
									rect.transformed_rect = polygon;
									rect.transformed_rect.set_parent(rect.parent_frame);
								} else if(rect.transformed_rect != null) {
									var _this = rect.transformed_rect;
									_this.count = 4;
									var _g = 0;
									var _g1 = _this.count;
									while(_g < _g1) {
										var i = _g++;
										if(_this.local_vertices[i] == null) {
											var _this1 = _this.local_vertices;
											var this1 = new hxmath_math_Vector2Default(0,0);
											_this1[i] = this1;
										}
									}
									var self = _this.local_vertices[0];
									self.x = -rect.ex;
									self.y = -rect.ey;
									var self = _this.local_vertices[1];
									self.x = rect.ex;
									self.y = -rect.ey;
									var self = _this.local_vertices[2];
									self.x = rect.ex;
									self.y = rect.ey;
									var self = _this.local_vertices[3];
									self.x = -rect.ex;
									self.y = rect.ey;
									_this.lock_sync();
									_this.local_x = rect.local_x;
									if(_this.parent_frame != null) {
										if(!_this.sync_locked) {
											if(_this.parent_frame != null) {
												if(_this.local_x == 0 && _this.local_y == 0) {
													_this._x = _this.parent_frame.get_offset().x;
													_this._y = _this.parent_frame.get_offset().y;
												} else {
													var self = _this.sync_pos;
													self.x = _this.local_x;
													self.y = _this.local_y;
													var p = _this.sync_pos;
													var self = _this.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													_this._x = pos_x;
													_this._y = pos_y;
												}
												_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
											} else {
												_this._x = _this.local_x;
												_this._y = _this.local_x;
												_this._rotation = _this.local_rotation;
											}
											_this.dirty_vertices = true;
											_this.dirty_bounds = true;
										}
									} else {
										_this._x = _this.local_x;
									}
									_this.local_y = rect.local_y;
									if(_this.parent_frame != null) {
										if(!_this.sync_locked) {
											if(_this.parent_frame != null) {
												if(_this.local_x == 0 && _this.local_y == 0) {
													_this._x = _this.parent_frame.get_offset().x;
													_this._y = _this.parent_frame.get_offset().y;
												} else {
													var self = _this.sync_pos;
													self.x = _this.local_x;
													self.y = _this.local_y;
													var p = _this.sync_pos;
													var self = _this.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													_this._x = pos_x;
													_this._y = pos_y;
												}
												_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
											} else {
												_this._x = _this.local_x;
												_this._y = _this.local_x;
												_this._rotation = _this.local_rotation;
											}
											_this.dirty_vertices = true;
											_this.dirty_bounds = true;
										}
									} else {
										_this._y = _this.local_y;
									}
									_this.local_rotation = rect.local_rotation;
									if(_this.parent_frame != null) {
										if(!_this.sync_locked) {
											if(_this.parent_frame != null) {
												if(_this.local_x == 0 && _this.local_y == 0) {
													_this._x = _this.parent_frame.get_offset().x;
													_this._y = _this.parent_frame.get_offset().y;
												} else {
													var self = _this.sync_pos;
													self.x = _this.local_x;
													self.y = _this.local_y;
													var p = _this.sync_pos;
													var self = _this.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													_this._x = pos_x;
													_this._y = pos_y;
												}
												_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
											} else {
												_this._x = _this.local_x;
												_this._y = _this.local_x;
												_this._rotation = _this.local_rotation;
											}
											_this.dirty_vertices = true;
											_this.dirty_bounds = true;
										}
									} else {
										_this._rotation = _this.local_rotation;
									}
									_this.dirty_vertices = true;
									_this.dirty_bounds = true;
									_this.unlock_sync();
								}
							}
						} else {
							rect._x = rect.local_x;
						}
						rect.local_y = y1;
						if(rect.parent_frame != null) {
							if(!rect.sync_locked) {
								if(rect.parent_frame != null) {
									if(rect.local_x == 0 && rect.local_y == 0) {
										rect._x = rect.parent_frame.get_offset().x;
										rect._y = rect.parent_frame.get_offset().y;
									} else {
										var self = rect.sync_pos;
										self.x = rect.local_x;
										self.y = rect.local_y;
										var p = rect.sync_pos;
										var self = rect.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										rect._x = pos_x;
										rect._y = pos_y;
									}
									rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
								} else {
									rect._x = rect.local_x;
									rect._y = rect.local_x;
									rect._rotation = rect.local_rotation;
								}
								if(rect.transformed_rect == null && rect._rotation != 0) {
									var polygon = echo_shape_Polygon._pool.get();
									polygon.count = 4;
									var _g = 0;
									var _g1 = polygon.count;
									while(_g < _g1) {
										var i = _g++;
										if(polygon.local_vertices[i] == null) {
											var polygon1 = polygon.local_vertices;
											var this1 = new hxmath_math_Vector2Default(0,0);
											polygon1[i] = this1;
										}
									}
									var self = polygon.local_vertices[0];
									self.x = -rect.ex;
									self.y = -rect.ey;
									var self = polygon.local_vertices[1];
									self.x = rect.ex;
									self.y = -rect.ey;
									var self = polygon.local_vertices[2];
									self.x = rect.ex;
									self.y = rect.ey;
									var self = polygon.local_vertices[3];
									self.x = -rect.ex;
									self.y = rect.ey;
									polygon.lock_sync();
									polygon.local_x = rect.local_x;
									if(polygon.parent_frame != null) {
										if(!polygon.sync_locked) {
											if(polygon.parent_frame != null) {
												if(polygon.local_x == 0 && polygon.local_y == 0) {
													polygon._x = polygon.parent_frame.get_offset().x;
													polygon._y = polygon.parent_frame.get_offset().y;
												} else {
													var self = polygon.sync_pos;
													self.x = polygon.local_x;
													self.y = polygon.local_y;
													var p = polygon.sync_pos;
													var self = polygon.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													polygon._x = pos_x;
													polygon._y = pos_y;
												}
												polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
											} else {
												polygon._x = polygon.local_x;
												polygon._y = polygon.local_x;
												polygon._rotation = polygon.local_rotation;
											}
											polygon.dirty_vertices = true;
											polygon.dirty_bounds = true;
										}
									} else {
										polygon._x = polygon.local_x;
									}
									polygon.local_y = rect.local_y;
									if(polygon.parent_frame != null) {
										if(!polygon.sync_locked) {
											if(polygon.parent_frame != null) {
												if(polygon.local_x == 0 && polygon.local_y == 0) {
													polygon._x = polygon.parent_frame.get_offset().x;
													polygon._y = polygon.parent_frame.get_offset().y;
												} else {
													var self = polygon.sync_pos;
													self.x = polygon.local_x;
													self.y = polygon.local_y;
													var p = polygon.sync_pos;
													var self = polygon.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													polygon._x = pos_x;
													polygon._y = pos_y;
												}
												polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
											} else {
												polygon._x = polygon.local_x;
												polygon._y = polygon.local_x;
												polygon._rotation = polygon.local_rotation;
											}
											polygon.dirty_vertices = true;
											polygon.dirty_bounds = true;
										}
									} else {
										polygon._y = polygon.local_y;
									}
									polygon.local_rotation = rect.local_rotation;
									if(polygon.parent_frame != null) {
										if(!polygon.sync_locked) {
											if(polygon.parent_frame != null) {
												if(polygon.local_x == 0 && polygon.local_y == 0) {
													polygon._x = polygon.parent_frame.get_offset().x;
													polygon._y = polygon.parent_frame.get_offset().y;
												} else {
													var self = polygon.sync_pos;
													self.x = polygon.local_x;
													self.y = polygon.local_y;
													var p = polygon.sync_pos;
													var self = polygon.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													polygon._x = pos_x;
													polygon._y = pos_y;
												}
												polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
											} else {
												polygon._x = polygon.local_x;
												polygon._y = polygon.local_x;
												polygon._rotation = polygon.local_rotation;
											}
											polygon.dirty_vertices = true;
											polygon.dirty_bounds = true;
										}
									} else {
										polygon._rotation = polygon.local_rotation;
									}
									polygon.dirty_vertices = true;
									polygon.dirty_bounds = true;
									polygon.unlock_sync();
									polygon.pooled = false;
									rect.transformed_rect = polygon;
									rect.transformed_rect.set_parent(rect.parent_frame);
								} else if(rect.transformed_rect != null) {
									var _this = rect.transformed_rect;
									_this.count = 4;
									var _g = 0;
									var _g1 = _this.count;
									while(_g < _g1) {
										var i = _g++;
										if(_this.local_vertices[i] == null) {
											var _this1 = _this.local_vertices;
											var this1 = new hxmath_math_Vector2Default(0,0);
											_this1[i] = this1;
										}
									}
									var self = _this.local_vertices[0];
									self.x = -rect.ex;
									self.y = -rect.ey;
									var self = _this.local_vertices[1];
									self.x = rect.ex;
									self.y = -rect.ey;
									var self = _this.local_vertices[2];
									self.x = rect.ex;
									self.y = rect.ey;
									var self = _this.local_vertices[3];
									self.x = -rect.ex;
									self.y = rect.ey;
									_this.lock_sync();
									_this.local_x = rect.local_x;
									if(_this.parent_frame != null) {
										if(!_this.sync_locked) {
											if(_this.parent_frame != null) {
												if(_this.local_x == 0 && _this.local_y == 0) {
													_this._x = _this.parent_frame.get_offset().x;
													_this._y = _this.parent_frame.get_offset().y;
												} else {
													var self = _this.sync_pos;
													self.x = _this.local_x;
													self.y = _this.local_y;
													var p = _this.sync_pos;
													var self = _this.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													_this._x = pos_x;
													_this._y = pos_y;
												}
												_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
											} else {
												_this._x = _this.local_x;
												_this._y = _this.local_x;
												_this._rotation = _this.local_rotation;
											}
											_this.dirty_vertices = true;
											_this.dirty_bounds = true;
										}
									} else {
										_this._x = _this.local_x;
									}
									_this.local_y = rect.local_y;
									if(_this.parent_frame != null) {
										if(!_this.sync_locked) {
											if(_this.parent_frame != null) {
												if(_this.local_x == 0 && _this.local_y == 0) {
													_this._x = _this.parent_frame.get_offset().x;
													_this._y = _this.parent_frame.get_offset().y;
												} else {
													var self = _this.sync_pos;
													self.x = _this.local_x;
													self.y = _this.local_y;
													var p = _this.sync_pos;
													var self = _this.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													_this._x = pos_x;
													_this._y = pos_y;
												}
												_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
											} else {
												_this._x = _this.local_x;
												_this._y = _this.local_x;
												_this._rotation = _this.local_rotation;
											}
											_this.dirty_vertices = true;
											_this.dirty_bounds = true;
										}
									} else {
										_this._y = _this.local_y;
									}
									_this.local_rotation = rect.local_rotation;
									if(_this.parent_frame != null) {
										if(!_this.sync_locked) {
											if(_this.parent_frame != null) {
												if(_this.local_x == 0 && _this.local_y == 0) {
													_this._x = _this.parent_frame.get_offset().x;
													_this._y = _this.parent_frame.get_offset().y;
												} else {
													var self = _this.sync_pos;
													self.x = _this.local_x;
													self.y = _this.local_y;
													var p = _this.sync_pos;
													var self = _this.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													_this._x = pos_x;
													_this._y = pos_y;
												}
												_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
											} else {
												_this._x = _this.local_x;
												_this._y = _this.local_x;
												_this._rotation = _this.local_rotation;
											}
											_this.dirty_vertices = true;
											_this.dirty_bounds = true;
										}
									} else {
										_this._rotation = _this.local_rotation;
									}
									_this.dirty_vertices = true;
									_this.dirty_bounds = true;
									_this.unlock_sync();
								}
							}
						} else {
							rect._y = rect.local_y;
						}
						rect.ex = width1 * 0.5;
						if(rect.transformed_rect != null) {
							var _this = rect.transformed_rect;
							_this.count = 4;
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								if(_this.local_vertices[i] == null) {
									var _this1 = _this.local_vertices;
									var this1 = new hxmath_math_Vector2Default(0,0);
									_this1[i] = this1;
								}
							}
							var self = _this.local_vertices[0];
							self.x = -rect.ex;
							self.y = -rect.ey;
							var self = _this.local_vertices[1];
							self.x = rect.ex;
							self.y = -rect.ey;
							var self = _this.local_vertices[2];
							self.x = rect.ex;
							self.y = rect.ey;
							var self = _this.local_vertices[3];
							self.x = -rect.ex;
							self.y = rect.ey;
							_this.lock_sync();
							_this.local_x = rect.local_x;
							if(_this.parent_frame != null) {
								if(!_this.sync_locked) {
									if(_this.parent_frame != null) {
										if(_this.local_x == 0 && _this.local_y == 0) {
											_this._x = _this.parent_frame.get_offset().x;
											_this._y = _this.parent_frame.get_offset().y;
										} else {
											var self = _this.sync_pos;
											self.x = _this.local_x;
											self.y = _this.local_y;
											var p = _this.sync_pos;
											var self = _this.parent_frame;
											var m = self.get_matrix();
											var self = m;
											var m_a = self.a;
											var m_b = self.b;
											var m_c = self.c;
											var m_d = self.d;
											var self_x = m_a * p.x + m_c * p.y;
											var self_y = m_b * p.x + m_d * p.y;
											var self = m;
											var b_x = self.tx;
											var b_y = self.ty;
											var pos_x = self_x;
											var pos_y = self_y;
											pos_x += b_x;
											pos_y += b_y;
											_this._x = pos_x;
											_this._y = pos_y;
										}
										_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
									} else {
										_this._x = _this.local_x;
										_this._y = _this.local_x;
										_this._rotation = _this.local_rotation;
									}
									_this.dirty_vertices = true;
									_this.dirty_bounds = true;
								}
							} else {
								_this._x = _this.local_x;
							}
							_this.local_y = rect.local_y;
							if(_this.parent_frame != null) {
								if(!_this.sync_locked) {
									if(_this.parent_frame != null) {
										if(_this.local_x == 0 && _this.local_y == 0) {
											_this._x = _this.parent_frame.get_offset().x;
											_this._y = _this.parent_frame.get_offset().y;
										} else {
											var self = _this.sync_pos;
											self.x = _this.local_x;
											self.y = _this.local_y;
											var p = _this.sync_pos;
											var self = _this.parent_frame;
											var m = self.get_matrix();
											var self = m;
											var m_a = self.a;
											var m_b = self.b;
											var m_c = self.c;
											var m_d = self.d;
											var self_x = m_a * p.x + m_c * p.y;
											var self_y = m_b * p.x + m_d * p.y;
											var self = m;
											var b_x = self.tx;
											var b_y = self.ty;
											var pos_x = self_x;
											var pos_y = self_y;
											pos_x += b_x;
											pos_y += b_y;
											_this._x = pos_x;
											_this._y = pos_y;
										}
										_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
									} else {
										_this._x = _this.local_x;
										_this._y = _this.local_x;
										_this._rotation = _this.local_rotation;
									}
									_this.dirty_vertices = true;
									_this.dirty_bounds = true;
								}
							} else {
								_this._y = _this.local_y;
							}
							_this.local_rotation = rect.local_rotation;
							if(_this.parent_frame != null) {
								if(!_this.sync_locked) {
									if(_this.parent_frame != null) {
										if(_this.local_x == 0 && _this.local_y == 0) {
											_this._x = _this.parent_frame.get_offset().x;
											_this._y = _this.parent_frame.get_offset().y;
										} else {
											var self = _this.sync_pos;
											self.x = _this.local_x;
											self.y = _this.local_y;
											var p = _this.sync_pos;
											var self = _this.parent_frame;
											var m = self.get_matrix();
											var self = m;
											var m_a = self.a;
											var m_b = self.b;
											var m_c = self.c;
											var m_d = self.d;
											var self_x = m_a * p.x + m_c * p.y;
											var self_y = m_b * p.x + m_d * p.y;
											var self = m;
											var b_x = self.tx;
											var b_y = self.ty;
											var pos_x = self_x;
											var pos_y = self_y;
											pos_x += b_x;
											pos_y += b_y;
											_this._x = pos_x;
											_this._y = pos_y;
										}
										_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
									} else {
										_this._x = _this.local_x;
										_this._y = _this.local_x;
										_this._rotation = _this.local_rotation;
									}
									_this.dirty_vertices = true;
									_this.dirty_bounds = true;
								}
							} else {
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
							_this.unlock_sync();
						}
						rect.ey = (height1 <= 0 ? width1 : height1) * 0.5;
						if(rect.transformed_rect != null) {
							var _this = rect.transformed_rect;
							_this.count = 4;
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								if(_this.local_vertices[i] == null) {
									var _this1 = _this.local_vertices;
									var this1 = new hxmath_math_Vector2Default(0,0);
									_this1[i] = this1;
								}
							}
							var self = _this.local_vertices[0];
							self.x = -rect.ex;
							self.y = -rect.ey;
							var self = _this.local_vertices[1];
							self.x = rect.ex;
							self.y = -rect.ey;
							var self = _this.local_vertices[2];
							self.x = rect.ex;
							self.y = rect.ey;
							var self = _this.local_vertices[3];
							self.x = -rect.ex;
							self.y = rect.ey;
							_this.lock_sync();
							_this.local_x = rect.local_x;
							if(_this.parent_frame != null) {
								if(!_this.sync_locked) {
									if(_this.parent_frame != null) {
										if(_this.local_x == 0 && _this.local_y == 0) {
											_this._x = _this.parent_frame.get_offset().x;
											_this._y = _this.parent_frame.get_offset().y;
										} else {
											var self = _this.sync_pos;
											self.x = _this.local_x;
											self.y = _this.local_y;
											var p = _this.sync_pos;
											var self = _this.parent_frame;
											var m = self.get_matrix();
											var self = m;
											var m_a = self.a;
											var m_b = self.b;
											var m_c = self.c;
											var m_d = self.d;
											var self_x = m_a * p.x + m_c * p.y;
											var self_y = m_b * p.x + m_d * p.y;
											var self = m;
											var b_x = self.tx;
											var b_y = self.ty;
											var pos_x = self_x;
											var pos_y = self_y;
											pos_x += b_x;
											pos_y += b_y;
											_this._x = pos_x;
											_this._y = pos_y;
										}
										_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
									} else {
										_this._x = _this.local_x;
										_this._y = _this.local_x;
										_this._rotation = _this.local_rotation;
									}
									_this.dirty_vertices = true;
									_this.dirty_bounds = true;
								}
							} else {
								_this._x = _this.local_x;
							}
							_this.local_y = rect.local_y;
							if(_this.parent_frame != null) {
								if(!_this.sync_locked) {
									if(_this.parent_frame != null) {
										if(_this.local_x == 0 && _this.local_y == 0) {
											_this._x = _this.parent_frame.get_offset().x;
											_this._y = _this.parent_frame.get_offset().y;
										} else {
											var self = _this.sync_pos;
											self.x = _this.local_x;
											self.y = _this.local_y;
											var p = _this.sync_pos;
											var self = _this.parent_frame;
											var m = self.get_matrix();
											var self = m;
											var m_a = self.a;
											var m_b = self.b;
											var m_c = self.c;
											var m_d = self.d;
											var self_x = m_a * p.x + m_c * p.y;
											var self_y = m_b * p.x + m_d * p.y;
											var self = m;
											var b_x = self.tx;
											var b_y = self.ty;
											var pos_x = self_x;
											var pos_y = self_y;
											pos_x += b_x;
											pos_y += b_y;
											_this._x = pos_x;
											_this._y = pos_y;
										}
										_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
									} else {
										_this._x = _this.local_x;
										_this._y = _this.local_x;
										_this._rotation = _this.local_rotation;
									}
									_this.dirty_vertices = true;
									_this.dirty_bounds = true;
								}
							} else {
								_this._y = _this.local_y;
							}
							_this.local_rotation = rect.local_rotation;
							if(_this.parent_frame != null) {
								if(!_this.sync_locked) {
									if(_this.parent_frame != null) {
										if(_this.local_x == 0 && _this.local_y == 0) {
											_this._x = _this.parent_frame.get_offset().x;
											_this._y = _this.parent_frame.get_offset().y;
										} else {
											var self = _this.sync_pos;
											self.x = _this.local_x;
											self.y = _this.local_y;
											var p = _this.sync_pos;
											var self = _this.parent_frame;
											var m = self.get_matrix();
											var self = m;
											var m_a = self.a;
											var m_b = self.b;
											var m_c = self.c;
											var m_d = self.d;
											var self_x = m_a * p.x + m_c * p.y;
											var self_y = m_b * p.x + m_d * p.y;
											var self = m;
											var b_x = self.tx;
											var b_y = self.ty;
											var pos_x = self_x;
											var pos_y = self_y;
											pos_x += b_x;
											pos_y += b_y;
											_this._x = pos_x;
											_this._y = pos_y;
										}
										_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
									} else {
										_this._x = _this.local_x;
										_this._y = _this.local_x;
										_this._rotation = _this.local_rotation;
									}
									_this.dirty_vertices = true;
									_this.dirty_bounds = true;
								}
							} else {
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
							_this.unlock_sync();
						}
						rect.local_rotation = rotation;
						if(rect.parent_frame != null) {
							if(!rect.sync_locked) {
								if(rect.parent_frame != null) {
									if(rect.local_x == 0 && rect.local_y == 0) {
										rect._x = rect.parent_frame.get_offset().x;
										rect._y = rect.parent_frame.get_offset().y;
									} else {
										var self = rect.sync_pos;
										self.x = rect.local_x;
										self.y = rect.local_y;
										var p = rect.sync_pos;
										var self = rect.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										rect._x = pos_x;
										rect._y = pos_y;
									}
									rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
								} else {
									rect._x = rect.local_x;
									rect._y = rect.local_x;
									rect._rotation = rect.local_rotation;
								}
								if(rect.transformed_rect == null && rect._rotation != 0) {
									var polygon = echo_shape_Polygon._pool.get();
									polygon.count = 4;
									var _g = 0;
									var _g1 = polygon.count;
									while(_g < _g1) {
										var i = _g++;
										if(polygon.local_vertices[i] == null) {
											var polygon1 = polygon.local_vertices;
											var this1 = new hxmath_math_Vector2Default(0,0);
											polygon1[i] = this1;
										}
									}
									var self = polygon.local_vertices[0];
									self.x = -rect.ex;
									self.y = -rect.ey;
									var self = polygon.local_vertices[1];
									self.x = rect.ex;
									self.y = -rect.ey;
									var self = polygon.local_vertices[2];
									self.x = rect.ex;
									self.y = rect.ey;
									var self = polygon.local_vertices[3];
									self.x = -rect.ex;
									self.y = rect.ey;
									polygon.lock_sync();
									polygon.local_x = rect.local_x;
									if(polygon.parent_frame != null) {
										if(!polygon.sync_locked) {
											if(polygon.parent_frame != null) {
												if(polygon.local_x == 0 && polygon.local_y == 0) {
													polygon._x = polygon.parent_frame.get_offset().x;
													polygon._y = polygon.parent_frame.get_offset().y;
												} else {
													var self = polygon.sync_pos;
													self.x = polygon.local_x;
													self.y = polygon.local_y;
													var p = polygon.sync_pos;
													var self = polygon.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													polygon._x = pos_x;
													polygon._y = pos_y;
												}
												polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
											} else {
												polygon._x = polygon.local_x;
												polygon._y = polygon.local_x;
												polygon._rotation = polygon.local_rotation;
											}
											polygon.dirty_vertices = true;
											polygon.dirty_bounds = true;
										}
									} else {
										polygon._x = polygon.local_x;
									}
									polygon.local_y = rect.local_y;
									if(polygon.parent_frame != null) {
										if(!polygon.sync_locked) {
											if(polygon.parent_frame != null) {
												if(polygon.local_x == 0 && polygon.local_y == 0) {
													polygon._x = polygon.parent_frame.get_offset().x;
													polygon._y = polygon.parent_frame.get_offset().y;
												} else {
													var self = polygon.sync_pos;
													self.x = polygon.local_x;
													self.y = polygon.local_y;
													var p = polygon.sync_pos;
													var self = polygon.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													polygon._x = pos_x;
													polygon._y = pos_y;
												}
												polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
											} else {
												polygon._x = polygon.local_x;
												polygon._y = polygon.local_x;
												polygon._rotation = polygon.local_rotation;
											}
											polygon.dirty_vertices = true;
											polygon.dirty_bounds = true;
										}
									} else {
										polygon._y = polygon.local_y;
									}
									polygon.local_rotation = rect.local_rotation;
									if(polygon.parent_frame != null) {
										if(!polygon.sync_locked) {
											if(polygon.parent_frame != null) {
												if(polygon.local_x == 0 && polygon.local_y == 0) {
													polygon._x = polygon.parent_frame.get_offset().x;
													polygon._y = polygon.parent_frame.get_offset().y;
												} else {
													var self = polygon.sync_pos;
													self.x = polygon.local_x;
													self.y = polygon.local_y;
													var p = polygon.sync_pos;
													var self = polygon.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													polygon._x = pos_x;
													polygon._y = pos_y;
												}
												polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
											} else {
												polygon._x = polygon.local_x;
												polygon._y = polygon.local_x;
												polygon._rotation = polygon.local_rotation;
											}
											polygon.dirty_vertices = true;
											polygon.dirty_bounds = true;
										}
									} else {
										polygon._rotation = polygon.local_rotation;
									}
									polygon.dirty_vertices = true;
									polygon.dirty_bounds = true;
									polygon.unlock_sync();
									polygon.pooled = false;
									rect.transformed_rect = polygon;
									rect.transformed_rect.set_parent(rect.parent_frame);
								} else if(rect.transformed_rect != null) {
									var _this = rect.transformed_rect;
									_this.count = 4;
									var _g = 0;
									var _g1 = _this.count;
									while(_g < _g1) {
										var i = _g++;
										if(_this.local_vertices[i] == null) {
											var _this1 = _this.local_vertices;
											var this1 = new hxmath_math_Vector2Default(0,0);
											_this1[i] = this1;
										}
									}
									var self = _this.local_vertices[0];
									self.x = -rect.ex;
									self.y = -rect.ey;
									var self = _this.local_vertices[1];
									self.x = rect.ex;
									self.y = -rect.ey;
									var self = _this.local_vertices[2];
									self.x = rect.ex;
									self.y = rect.ey;
									var self = _this.local_vertices[3];
									self.x = -rect.ex;
									self.y = rect.ey;
									_this.lock_sync();
									_this.local_x = rect.local_x;
									if(_this.parent_frame != null) {
										if(!_this.sync_locked) {
											if(_this.parent_frame != null) {
												if(_this.local_x == 0 && _this.local_y == 0) {
													_this._x = _this.parent_frame.get_offset().x;
													_this._y = _this.parent_frame.get_offset().y;
												} else {
													var self = _this.sync_pos;
													self.x = _this.local_x;
													self.y = _this.local_y;
													var p = _this.sync_pos;
													var self = _this.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													_this._x = pos_x;
													_this._y = pos_y;
												}
												_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
											} else {
												_this._x = _this.local_x;
												_this._y = _this.local_x;
												_this._rotation = _this.local_rotation;
											}
											_this.dirty_vertices = true;
											_this.dirty_bounds = true;
										}
									} else {
										_this._x = _this.local_x;
									}
									_this.local_y = rect.local_y;
									if(_this.parent_frame != null) {
										if(!_this.sync_locked) {
											if(_this.parent_frame != null) {
												if(_this.local_x == 0 && _this.local_y == 0) {
													_this._x = _this.parent_frame.get_offset().x;
													_this._y = _this.parent_frame.get_offset().y;
												} else {
													var self = _this.sync_pos;
													self.x = _this.local_x;
													self.y = _this.local_y;
													var p = _this.sync_pos;
													var self = _this.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													_this._x = pos_x;
													_this._y = pos_y;
												}
												_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
											} else {
												_this._x = _this.local_x;
												_this._y = _this.local_x;
												_this._rotation = _this.local_rotation;
											}
											_this.dirty_vertices = true;
											_this.dirty_bounds = true;
										}
									} else {
										_this._y = _this.local_y;
									}
									_this.local_rotation = rect.local_rotation;
									if(_this.parent_frame != null) {
										if(!_this.sync_locked) {
											if(_this.parent_frame != null) {
												if(_this.local_x == 0 && _this.local_y == 0) {
													_this._x = _this.parent_frame.get_offset().x;
													_this._y = _this.parent_frame.get_offset().y;
												} else {
													var self = _this.sync_pos;
													self.x = _this.local_x;
													self.y = _this.local_y;
													var p = _this.sync_pos;
													var self = _this.parent_frame;
													var m = self.get_matrix();
													var self = m;
													var m_a = self.a;
													var m_b = self.b;
													var m_c = self.c;
													var m_d = self.d;
													var self_x = m_a * p.x + m_c * p.y;
													var self_y = m_b * p.x + m_d * p.y;
													var self = m;
													var b_x = self.tx;
													var b_y = self.ty;
													var pos_x = self_x;
													var pos_y = self_y;
													pos_x += b_x;
													pos_y += b_y;
													_this._x = pos_x;
													_this._y = pos_y;
												}
												_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
											} else {
												_this._x = _this.local_x;
												_this._y = _this.local_x;
												_this._rotation = _this.local_rotation;
											}
											_this.dirty_vertices = true;
											_this.dirty_bounds = true;
										}
									} else {
										_this._rotation = _this.local_rotation;
									}
									_this.dirty_vertices = true;
									_this.dirty_bounds = true;
									_this.unlock_sync();
								}
							}
						} else {
							rect._rotation = rect.local_rotation;
						}
						rect.pooled = false;
						addRigidbody.push(rect);
					}
					if(found_State.active.physics_world != null) {
						found_State.active.physics_world.add(_gthis.get_currentObject().body);
					}
				} else if(state == "-") {
					_gthis.selectedObjectData.rigidBody = null;
					if(found_State.active.physics_world != null) {
						found_State.active.physics_world.remove(_gthis.get_currentObject().body);
					}
					_gthis.get_currentObject().set_raw(_gthis.selectedObjectData);
					_gthis.get_currentObject().set_body(null);
				}
				_gthis.get_currentObject().dataChanged = true;
				_gthis.changed = true;
			};
			if(ui.panel(zui_Handle.global.nest(68,null),"Rigidbody: ")) {
				if(ui.button(text)) {
					addRigidbody(text);
				}
				if(this.selectedObjectData.rigidBody != null) {
					kinematicHandle.selected = this.selectedObjectData.rigidBody.kinematic;
					ui.check(kinematicHandle,"is Kinematic");
					if(kinematicHandle.changed) {
						this.selectedObjectData.rigidBody.kinematic = kinematicHandle.selected;
						this.get_currentObject().body.kinematic = this.selectedObjectData.rigidBody.kinematic;
						this.get_currentObject().dataChanged = true;
						this.changed = true;
					}
					massHandle.value = this.selectedObjectData.rigidBody.mass;
					var mass = zui_Ext.floatInput(ui,massHandle,"Mass:",2);
					if(massHandle.changed) {
						this.selectedObjectData.rigidBody.mass = mass;
						var _this = this.get_currentObject().body;
						var value = this.selectedObjectData.rigidBody.mass;
						if(value < 0.0001) {
							_this.mass = _this.inverse_mass = 0;
							if(_this.mass <= 0 && _this.world != null) {
								_this.bounds(_this.quadtree_data.bounds);
								_this.world.static_quadtree.update(_this.quadtree_data);
							}
						} else {
							if(_this.mass <= 0 && _this.world != null) {
								_this.world.static_quadtree.remove(_this.quadtree_data);
							}
							_this.mass = value;
							_this.inverse_mass = 1 / _this.mass;
						}
						this.get_currentObject().dataChanged = true;
						this.changed = true;
					}
					elasticityHandle.value = this.selectedObjectData.rigidBody.elasticity;
					var elasticity = zui_Ext.floatInput(ui,elasticityHandle,"Elasticity:",2);
					if(elasticityHandle.changed) {
						this.selectedObjectData.rigidBody.elasticity = elasticity;
						this.get_currentObject().body.elasticity = this.selectedObjectData.rigidBody.elasticity;
						this.get_currentObject().dataChanged = true;
						this.changed = true;
					}
					maxXvelHandle.value = this.selectedObjectData.rigidBody.max_velocity_x;
					var maxVelX = zui_Ext.floatInput(ui,maxXvelHandle,"Max X Velocity:",2);
					if(maxXvelHandle.changed) {
						this.selectedObjectData.rigidBody.max_velocity_x = maxVelX;
						this.get_currentObject().body.max_velocity.x = this.selectedObjectData.rigidBody.max_velocity_x;
						this.get_currentObject().dataChanged = true;
						this.changed = true;
					}
					maxYvelHandle.value = this.selectedObjectData.rigidBody.max_velocity_x;
					var maxVelY = zui_Ext.floatInput(ui,zui_Handle.global.nest(69,null),"Max Y Velocity:",2);
					if(maxYvelHandle.changed) {
						this.selectedObjectData.rigidBody.max_velocity_y = maxVelY;
						this.get_currentObject().body.max_velocity.y = this.selectedObjectData.rigidBody.max_velocity_y;
						this.get_currentObject().dataChanged = true;
						this.changed = true;
					}
					maxRotVelHandle.value = this.selectedObjectData.rigidBody.max_rotational_velocity;
					var maxRot = zui_Ext.floatInput(ui,zui_Handle.global.nest(70,null),"Max Rotation Velocity:",2);
					if(maxRotVelHandle.changed) {
						this.selectedObjectData.rigidBody.max_rotational_velocity = maxRot;
						this.get_currentObject().body.max_rotational_velocity = this.selectedObjectData.rigidBody.max_rotational_velocity;
						this.get_currentObject().dataChanged = true;
						this.changed = true;
					}
					dragXHandle.value = this.selectedObjectData.rigidBody.drag_x;
					var dragX = zui_Ext.floatInput(ui,zui_Handle.global.nest(71,null),"Drag X:",2);
					if(dragXHandle.changed) {
						this.selectedObjectData.rigidBody.drag_x = dragX;
						this.get_currentObject().body.drag.x = this.selectedObjectData.rigidBody.drag_x;
						this.get_currentObject().dataChanged = true;
						this.changed = true;
					}
					dragYHandle.value = this.selectedObjectData.rigidBody.drag_y;
					var dragY = zui_Ext.floatInput(ui,zui_Handle.global.nest(72,null),"Drag Y:",2);
					if(dragYHandle.changed) {
						this.selectedObjectData.rigidBody.drag_y = dragY;
						this.get_currentObject().body.drag.y = this.selectedObjectData.rigidBody.drag_y;
						this.get_currentObject().dataChanged = true;
						this.changed = true;
					}
					gravityScaleHandle.value = this.selectedObjectData.rigidBody.gravity_scale;
					var gravityScale = zui_Ext.floatInput(ui,gravityScaleHandle,"Gravity Scale:",2);
					if(gravityScaleHandle.changed) {
						this.selectedObjectData.rigidBody.gravity_scale = gravityScale;
						this.get_currentObject().body.gravity_scale = this.selectedObjectData.rigidBody.gravity_scale;
						this.get_currentObject().dataChanged = true;
						this.changed = true;
					}
					if(ui.button("Edit Collision")) {
						if(this.selectedObjectData.rigidBody.shapes == null) {
							var shape = echo_Shape.get_defaults();
							shape.offset_x = shape.offset_y = 48;
							shape.width = this.get_currentObject().get_width();
							shape.height = this.get_currentObject().get_height();
							this.selectedObjectData.rigidBody.shapes = [];
							this.get_currentObject().set_raw(this.selectedObjectData);
						}
						CollisionEditorDialog.open(this.get_currentObject());
					}
				}
			} else if(ui.button(text)) {
				addRigidbody(text);
			}
		} else {
			ui.row([0.25,0.75]);
			ui.text("Rigidbody: ");
			if(ui.button("Create Physics World")) {
				this.selectScene();
			}
		}
		if(this.changed) {
			this.get_currentObject().set_raw(this.selectedObjectData);
			EditorHierarchy.getInstance().makeDirty();
		}
	}
	,drawSelectedSceneItems: function(ui) {
		var sceneNameHandle = zui_Handle.global.nest(73,null);
		sceneNameHandle.text = this.selectedSceneData.name != null ? this.selectedSceneData.name : "Unavailable";
		ui.textInput(sceneNameHandle,"");
		if(sceneNameHandle.changed && sceneNameHandle.text != "" && sceneNameHandle.text != "Unavailable") {
			this.selectedSceneData.name = sceneNameHandle.text;
			this.changed = true;
		}
		var depthSortHandle = zui_Handle.global.nest(74,null);
		depthSortHandle.selected = this.selectedSceneData._depth != null && this.selectedSceneData._depth;
		if(ui.getHover()) {
			ui.tooltip(this.depthSortText);
		}
		ui.check(depthSortHandle," Depth Sort");
		if(depthSortHandle.changed) {
			this.selectedSceneData._depth = depthSortHandle.selected;
			Reflect.setProperty(found_State.active,"_depth",depthSortHandle.selected);
			this.changed = true;
		}
		if(this.selectedSceneData._depth) {
			var zsortHandle = zui_Handle.global.nest(75,null);
			zsortHandle.selected = this.selectedSceneData._Zsort != null ? this.selectedSceneData._Zsort : true;
			if(ui.getHover()) {
				ui.tooltip(this.zSortText);
			}
			ui.check(zsortHandle," Z sort");
			if(zsortHandle.changed || this.selectedSceneData._Zsort != zsortHandle.selected) {
				this.selectedSceneData._Zsort = zsortHandle.selected;
				Reflect.setProperty(found_Scene,"zsort",zsortHandle.selected);
				this.changed = true;
			}
		}
		var cullHandle = zui_Handle.global.nest(76,null);
		var cull = ui.check(cullHandle,"Cull");
		if(cullHandle.changed && !cull) {
			this.selectedSceneData.cullOffset = null;
			Reflect.setProperty(found_State.active,"cullOffset",0);
			this.changed = true;
		}
		if(cull) {
			if(this.selectedSceneData.cullOffset == null) {
				this.selectedSceneData.cullOffset = 1;
				Reflect.setProperty(found_State.active,"cullOffset",this.selectedSceneData.cullOffset);
				this.changed = true;
			}
			var cullOffsetHandle = zui_Handle.global.nest(77,null);
			cullOffsetHandle.value = this.selectedSceneData.cullOffset;
			var offset = ui.slider(cullOffsetHandle,"Cull offset",1,500);
			if(cullOffsetHandle.changed) {
				this.selectedSceneData.cullOffset = offset | 0;
				Reflect.setProperty(found_State.active,"cullOffset",this.selectedSceneData.cullOffset);
				this.changed = true;
			}
		}
		ui.row([0.5,0.5]);
		var text = this.selectedSceneData.physicsWorld != null ? "-" : "+";
		if(ui.panel(zui_Handle.global.nest(78,null),"Physics World: ")) {
			if(ui.button(text)) {
				this.addPhysWorld(text,this.selectedSceneData);
			}
			if(this.selectedSceneData.physicsWorld != null) {
				var widthHandle = zui_Handle.global.nest(79,null);
				widthHandle.value = this.selectedSceneData.physicsWorld.width;
				var width = zui_Ext.floatInput(ui,widthHandle,"Width:",2);
				if(widthHandle.changed) {
					this.selectedSceneData.physicsWorld.width = width;
					var _this = found_State.active.physics_world;
					_this.width = width;
					if(_this.init) {
						_this.reset_quadtrees();
					}
					this.changed = true;
				}
				var heightHandle = zui_Handle.global.nest(80,null);
				heightHandle.value = this.selectedSceneData.physicsWorld.height;
				var height = zui_Ext.floatInput(ui,heightHandle,"Height:",2);
				if(heightHandle.changed) {
					this.selectedSceneData.physicsWorld.height = height;
					var _this = found_State.active.physics_world;
					_this.height = height;
					if(_this.init) {
						_this.reset_quadtrees();
					}
					this.changed = true;
				}
				var gravityXHandle = zui_Handle.global.nest(81,null);
				gravityXHandle.value = this.selectedSceneData.physicsWorld.gravity_x != null ? this.selectedSceneData.physicsWorld.gravity_x : 0;
				var gravityX = zui_Ext.floatInput(ui,gravityXHandle,"Gravity X:",2);
				if(gravityXHandle.changed) {
					this.selectedSceneData.physicsWorld.gravity_x = gravityX;
					found_State.active.physics_world.gravity.x = gravityX;
					this.changed = true;
				}
				var gravityYHandle = zui_Handle.global.nest(82,null);
				gravityYHandle.value = this.selectedSceneData.physicsWorld.gravity_y;
				var gravityY = zui_Ext.floatInput(ui,gravityYHandle,"Gravity Y:",2);
				if(gravityYHandle.changed) {
					this.selectedSceneData.physicsWorld.gravity_y = gravityY;
					found_State.active.physics_world.gravity.y = gravityY;
					this.changed = true;
				}
				var iterationsHandle = zui_Handle.global.nest(83,null);
				iterationsHandle.value = this.selectedSceneData.physicsWorld.iterations;
				var iterations = ui.slider(iterationsHandle,"No. of iterations",1,20,false,1) | 0;
				if(iterationsHandle.changed) {
					this.selectedSceneData.physicsWorld.iterations = iterations;
					found_State.active.physics_world.iterations = iterations;
					this.changed = true;
				}
				var historyHandle = zui_Handle.global.nest(84,null);
				historyHandle.value = this.selectedSceneData.physicsWorld.history != null ? this.selectedSceneData.physicsWorld.history : 500;
				var history = ui.slider(historyHandle,"History",1,1000,false,0.01) | 0;
				if(historyHandle.changed) {
					this.selectedSceneData.physicsWorld.history = history;
					found_State.active.physics_world.history = new echo_util_History_$Array_$echo_$data_$BodyState(history);
					this.changed = true;
				}
			}
		} else if(ui.button(text)) {
			this.addPhysWorld(text,this.selectedSceneData);
		}
		ui.text("Layers:");
		ui.indent();
		zui_Ext.panelList(ui,this.layersHandle,this.get_layers(),$bind(this,this.addLayer),$bind(this,this.deleteLayer),$bind(this,this.getLayerName),$bind(this,this.setLayerName),$bind(this,this.drawLayerItems),false,true,"New Layer");
		ui.unindent();
		if(this.changed || this.layersHandle.changed) {
			EditorHierarchy.getInstance().makeDirty();
		}
	}
	,addPhysWorld: function(state,sceneData) {
		if(state == "+") {
			sceneData.physicsWorld = { width : found_Found.WIDTH, height : found_Found.HEIGHT, iterations : 5, gravity_y : 3000};
			if(found_State.active.physics_world == null) {
				found_State.active.addPhysicsWorld(sceneData.physicsWorld);
			}
			var _g = 0;
			var _g1 = found_State.active._entities;
			while(_g < _g1.length) {
				var object = _g1[_g];
				++_g;
				if(object.body != null) {
					found_State.active.physics_world.add(object.body);
				}
				if(((object) instanceof found_anim_Tilemap)) {
					(js_Boot.__cast(object , found_anim_Tilemap)).makeBodies(found_State.active);
				}
			}
		} else if(state == "-") {
			sceneData.physicsWorld = null;
			found_State.active.physicsUpdate = function(f) {
			};
			found_State.active.physics_world.dispose();
			found_State.active.physics_world = null;
		}
		this.changed = true;
	}
	,addLayer: function(name) {
		if(name == "") {
			return;
		}
		var out = name;
		var _g = 0;
		var _g1 = this.get_layers();
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			if(layer.name == out) {
				out += this.get_layers().length + 1;
			}
		}
		this.layersHandle.changed = true;
		this.get_layers().push({ name : out, zIndex : this.get_layers().length, speed : 1.0});
		this.redraw();
	}
	,deleteLayer: function(index) {
		this.layersHandle.changed = true;
		this.get_layers().splice(index,1);
		this.get_layersName().splice(index,1);
		var _g = 0;
		var _g1 = found_State.active._entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			if(entity.get_layer() == index) {
				entity.get_raw().layer = 0;
			}
		}
	}
	,getLayerName: function(index) {
		return this.get_layersName()[index];
	}
	,setLayerName: function(index,name) {
		if(name == "") {
			return;
		}
		this.layersHandle.changed = true;
		this.get_layers()[index].name = name;
		this.get_layersName()[index] = name;
	}
	,drawLayerItems: function(handle,index) {
		if(index == -1) {
			return;
		}
		var layer = this.get_layers()[index];
		while(this.get_layers().length > this.layerItemHandles.length) {
			var handles = [];
			handles.push(new zui_Handle());
			handles.push(new zui_Handle());
			handles.push(new zui_Handle());
			this.layerItemHandles.push(handles);
		}
		var nameHandle = this.layerItemHandles[index][0];
		var zIndexHandle = this.layerItemHandles[index][1];
		var paralaxHandle = this.layerItemHandles[index][2];
		nameHandle.text = layer.name;
		var name = this.ui.textInput(nameHandle,"Name:",2);
		if(nameHandle.changed) {
			layer.name = name;
			this.get_layersName()[index] = name;
			this.changed = true;
		}
		paralaxHandle.value = layer.speed * 100;
		var speed = this.ui.slider(paralaxHandle,"Parallax",1,100);
		if(paralaxHandle.changed) {
			layer.speed = speed * 0.01;
			this.changed = true;
		}
		if(this.changed) {
			EditorHierarchy.getInstance().makeDirty();
		}
	}
	,valueInput: function(ui,handle,type) {
		var text = ui.textInput(handle);
		handle.value = parseFloat(text);
		return handle.value;
	}
	,types: null
	,multiDraw: function(ui,propName,handle,type) {
		if(type == 3) {
			ui.textInput(handle);
		} else {
			this.valueInput(ui,handle,type);
		}
		if(handle.changed) {
			var validFloat = (type == 2 || type == 6) && parseFloat(handle.text) != NaN;
			var validInt = (type == 0 || type == 4) && Std.parseInt(handle.text) != null;
			if(type == 3 || validFloat || validInt) {
				if(validFloat) {
					handle.text = Std.string(found_math_Util.fround(handle.value,2));
				}
				if(validInt) {
					handle.text = Std.string(Math.round(handle.value));
				}
				return;
			}
			handle.changed = false;
			found_tool_Log.warn("Prop: " + propName + " was not set because " + handle.text + " was entered",{ fileName : "EditorInspector.hx", lineNumber : 782, className : "EditorInspector", methodName : "multiDraw"});
			return;
		}
	}
	,drawTrait: function(handle,i) {
		var _this = this.ui;
		var div = _this.t.ELEMENT_W * _this.ops.scaleFactor / this.parent.get_w();
		var trait = this.get_currentObject().get_raw().traits[i];
		if(trait != null) {
			this.ui.row([1.0 - div * 0.75,div * 0.75]);
			var _this = this.ui;
			var fntSize = _this.t.FONT_SIZE * _this.ops.scaleFactor | 0;
			var elemH = this.ui.t.ELEMENT_H;
			this.ui.t.ELEMENT_H = this.ui.fontSize = fntSize * 0.65 | 0;
			this.ui.text(trait.classname);
			this.ui.fontSize = fntSize;
			this.ui.t.ELEMENT_H = elemH;
			var changed = false;
			if(this.ui.button("New prop")) {
				var def = "default~0~0";
				if(trait.props == null) {
					trait.props = [def];
				} else {
					trait.props.push(def);
				}
				this.updateAllRelativeProps(trait.classname,def,true);
				changed = true;
			}
			if(trait.props != null) {
				var mainH = zui_Handle.global.nest(27,null);
				var _g = 0;
				var _g1 = trait.props.length;
				while(_g < _g1) {
					var i = _g++;
					var prop = trait.props[i].split("~");
					var value = Std.parseInt(prop[1]);
					if(value >= 4) {
						this.ui.row([0.25,0.08,0.12,0.08,0.12,0.25,0.1]);
					} else {
						this.ui.row([0.3,0.3,0.3,0.1]);
					}
					var h = mainH.nest(i);
					h.text = prop[0];
					this.ui.textInput(h);
					if(h.changed) {
						this.renameAllRelativeProps(trait.classname,prop[0],h.text);
						prop[0] = h.text;
						changed = true;
					}
					var h1 = h.nest(0);
					var h2 = h.nest(1);
					switch(value) {
					case 1:
						h1.selected = Std.parseInt(prop[2]) == 1;
						this.ui.check(h1,"");
						if(h1.changed) {
							prop[2] = h1.selected ? "1" : "0";
							changed = true;
						}
						break;
					case 0:case 2:case 3:
						h1.text = prop[2];
						this.multiDraw(this.ui,h.text,h1,value);
						if(h1.changed) {
							prop[2] = h1.text;
							changed = true;
						}
						break;
					case 4:case 6:
						var vprop = prop[2].split("|");
						h1.text = vprop[0];
						h2.text = vprop[1];
						this.ui.text("x");
						this.multiDraw(this.ui,h.text + " x",h1,value);
						this.ui.text("y");
						this.multiDraw(this.ui,h.text + " y",h2,value);
						if(h1.changed) {
							vprop[0] = h1.text;
							changed = true;
						}
						if(h2.changed) {
							vprop[1] = h2.text;
							changed = true;
						}
						prop[2] = vprop.join("|");
						break;
					case 5:
						var vprop1 = prop[2].split("|");
						h1.selected = Std.parseInt(vprop1[0]) == 1;
						h2.selected = Std.parseInt(vprop1[1]) == 1;
						this.ui.check(h1,"");
						this.ui.check(h2,"");
						if(h1.changed) {
							vprop1[0] = h1.selected ? "1" : "0";
							changed = true;
						}
						if(h2.changed) {
							vprop1[1] = h2.selected ? "1" : "0";
							changed = true;
						}
						prop[2] = vprop1.join("|");
						break;
					}
					var h3 = h.nest(2);
					h3.position = value;
					var type = this.ui.combo(h3,this.types);
					if(h3.changed) {
						prop[1] = type == null ? "null" : "" + type;
						if(type >= 4) {
							prop[2] = "0|0";
						} else if(type == 3) {
							prop[2] = "";
						} else {
							prop[2] = "0";
						}
						changed = true;
					}
					if(this.ui.button("-")) {
						this.updateAllRelativeProps(trait.classname,trait.props.splice(i,1)[0]);
						this.get_currentObject().dataChanged = true;
						EditorHierarchy.getInstance().makeDirty();
						break;
					}
					trait.props[i] = prop.join("~");
					if(changed) {
						this.get_currentObject().dataChanged = changed;
						EditorHierarchy.getInstance().makeDirty();
					}
				}
			}
		}
	}
	,renameAllRelativeProps: function(classname,from,to) {
		var _g = 0;
		var _g1 = found_State.active._entities;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			if(object.get_raw().traits == null) {
				continue;
			}
			var _g2 = 0;
			var _g3 = object.get_raw().traits;
			while(_g2 < _g3.length) {
				var trait = _g3[_g2];
				++_g2;
				if(trait.classname == classname) {
					var _g4 = 0;
					var _g5 = trait.props.length;
					while(_g4 < _g5) {
						var i = _g4++;
						trait.props[i] = StringTools.replace(trait.props[i],from,to);
					}
				}
			}
		}
		var out = [];
		var _g = 0;
		var _g1 = found_Trait.getProps(classname);
		while(_g < _g1.length) {
			var prop = _g1[_g];
			++_g;
			out.push(StringTools.replace(prop,from,to));
		}
		found_Trait.props.h[classname] = out;
	}
	,updateAllRelativeProps: function(classname,addOrRmData,isAdd) {
		if(isAdd == null) {
			isAdd = false;
		}
		var finalTrait = null;
		var _g = 0;
		var _g1 = found_State.active._entities;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			if(object.get_raw().traits == null) {
				continue;
			}
			var _g2 = 0;
			var _g3 = object.get_raw().traits;
			while(_g2 < _g3.length) {
				var trait = _g3[_g2];
				++_g2;
				if(trait.classname == classname && finalTrait == null) {
					finalTrait = trait;
				}
				if(trait.classname == classname && this.get_currentObject() != object) {
					if(isAdd) {
						trait.props.push(addOrRmData);
					} else {
						var propName = addOrRmData.split("~")[0];
						var out = [];
						var _g4 = 0;
						var _g5 = trait.props.length;
						while(_g4 < _g5) {
							var i = _g4++;
							if(trait.props[i].split("~")[0] != propName) {
								out.push(trait.props[i]);
							}
						}
						trait.props = out;
					}
				}
			}
		}
		if(isAdd) {
			found_Trait.addProps(classname,[addOrRmData]);
		} else {
			found_Trait.removeProps(classname,[addOrRmData]);
		}
	}
	,addTrait: function(name) {
		TraitsDialog.open();
	}
	,setObjectTraitsChanged: function() {
		this.objectTraitsChanged = true;
		this.get_currentObject().dataChanged = true;
		EditorHierarchy.getInstance().makeDirty();
		this.redraw();
	}
	,removeTrait: function(i) {
		var removedTrait = this.get_currentObject().get_raw().traits.splice(i,1);
		if(removedTrait[0].type == "VisualScript") {
			this.get_currentObject().removeTrait(this.get_currentObject().traits[i]);
		} else if(removedTrait[0].type == "Script") {
			var trait = this.get_currentObject();
			var name = removedTrait[0].classname;
			var trait1 = trait.getTrait($hxClasses[name]);
			if(trait1 != null) {
				this.get_currentObject().removeTrait(trait1);
			}
		}
		if(this.traitListHandle.nest(0).position > 0 && i <= this.traitListHandle.nest(0).position) {
			this.updateSelectedTraitIndex = true;
		} else {
			this.objectTraitsChanged = true;
		}
		this.get_currentObject().dataChanged = true;
		EditorHierarchy.getInstance().makeDirty();
	}
	,getTraitName: function(i) {
		var trait = this.get_currentObject().get_raw().traits[i];
		var name = "";
		if(trait.type == "VisualScript") {
			var t = trait.classname.split("/");
			name = t[t.length - 1].split(".")[0];
		} else if(trait.type == "Script") {
			if(StringTools.endsWith(trait.classname,".hx")) {
				var t = trait.classname.split("/");
				name = t[t.length - 1].split(".")[0];
			} else {
				var t = trait.classname.split(".");
				name = t[t.length - 1];
			}
		}
		return name;
	}
	,addTraitToCurrentObject: function(trait) {
		this.selectedObjectData.traits.push(trait);
		found_Scene.createTraits([trait],this.get_currentObject());
		this.changed = true;
		EditorHierarchy.getInstance().makeDirty();
	}
	,notifySceneSelect: function() {
		this.selectScene();
	}
	,browseImage: function() {
		var _gthis = this;
		var done = function(path) {
			if(path == "") {
				return;
			}
			var error = true;
			var sep = khafs_Fs.sep;
			if(path != null) {
				var name = path.split(sep)[path.split(sep).length - 1];
				var type = name.split(".")[1];
				switch(type) {
				case "jpg":case "png":
					if(_gthis.index != -1 && _gthis.selectedObjectData != null) {
						Reflect.setProperty(_gthis.selectedObjectData,"imagePath",path);
						(js_Boot.__cast(found_State.active._entities[_gthis.index] , found_anim_Sprite)).set(_gthis.selectedObjectData);
						EditorHierarchy.getInstance().makeDirty();
					}
					error = false;
					break;
				default:
					haxe_Log.trace("Error: file has filetype " + type + " which is not a valid filetype for images ",{ fileName : "EditorInspector.hx", lineNumber : 1046, className : "EditorInspector", methodName : "browseImage"});
				}
				if(error) {
					haxe_Log.trace("Error: file with name " + name + " is not a valid image name or the path \"" + path + "\" was invalid ",{ fileName : "EditorInspector.hx", lineNumber : 1049, className : "EditorInspector", methodName : "browseImage"});
				}
			}
		};
		FileBrowserDialog.open(done);
	}
	,updateField: function(uid,id,data) {
		if(uid > found_State.active._entities.length - 1 || this.selectedSceneData != null) {
			return;
		}
		switch(id) {
		case "_positions":
			var x = found_math_Util.fround(Reflect.getProperty(data,"x"),2);
			var y = found_math_Util.fround(Reflect.getProperty(data,"y"),2);
			if(this.index == uid) {
				this.selectedObjectData.position.x = x;
				this.selectedObjectData.position.y = y;
				this.redraw();
			}
			break;
		case "_rotations":
			var z = Reflect.getProperty(data,"z");
			if(this.index == uid) {
				this.selectedObjectData.rotation.z = found_math_Util.fround(z,2);
			}
			break;
		case "_scales":
			var x = Reflect.getProperty(data,"x");
			var y = Reflect.getProperty(data,"y");
			if(this.index == uid) {
				this.selectedObjectData.scale.x = found_math_Util.fround(x,2);
				this.selectedObjectData.scale.y = found_math_Util.fround(y,2);
			}
			break;
		case "imagePath":
			var width = Reflect.getProperty(data,"width");
			var height = Reflect.getProperty(data,"height");
			if(this.index == uid) {
				this.selectedObjectData.width = width;
				this.selectedObjectData.height = height;
			}
			break;
		}
	}
	,__class__: EditorInspector
	,__properties__: $extend(Tab.prototype.__properties__,{get_layersName:"get_layersName",get_layers:"get_layers",get_currentObject:"get_currentObject"})
});
var EditorMenu = function() {
};
$hxClasses["EditorMenu"] = EditorMenu;
EditorMenu.__name__ = true;
EditorMenu.__properties__ = {get_menuH:"get_menuH"};
EditorMenu.menuH = null;
EditorMenu.get_menuH = function() {
	var _this = found_Found.popupZuiInstance;
	return _this.t.ELEMENT_H * _this.ops.scaleFactor * EditorMenu.menuItemsCount[EditorMenu.menuCategory];
};
EditorMenu.render = function(g) {
	var ui = found_Found.popupZuiInstance;
	EditorMenu.menuW = ui.t.ELEMENT_W * ui.ops.scaleFactor * 2.0 | 0;
	var BUTTON_COL = ui.t.BUTTON_COL;
	ui.t.BUTTON_COL = ui.t.SEPARATOR_COL;
	var ELEMENT_OFFSET = ui.t.ELEMENT_OFFSET;
	ui.t.ELEMENT_OFFSET = 0;
	g.begin(false);
	ui.beginRegion(g,EditorMenu.menuX,EditorMenu.menuY,EditorMenu.menuW);
	var sepw = EditorMenu.menuW / ui.ops.scaleFactor;
	ui.g.set_color(ui.t.SEPARATOR_COL);
	ui.g.fillRect(EditorMenu.menuX,EditorMenu.menuY,EditorMenu.menuW,EditorMenu.get_menuH());
	if(EditorMenu.menuCategory == 0) {
		if(ui.button("      " + utilities_Translator.tr("New Scene..."),0,utilities_Config.keymap.file_new)) {
			EditorMenu.createScene();
			EditorMenu.show = false;
		}
		if(ui.button("      " + utilities_Translator.tr("Open..."),0,utilities_Config.keymap.file_open)) {
			found_App.editorui.openScene();
			EditorMenu.show = false;
		}
		if(ui.button("      " + utilities_Translator.tr("Save"),0,utilities_Config.keymap.file_save)) {
			found_App.editorui.saveSceneData();
			EditorMenu.show = false;
		}
		if(ui.button("      " + utilities_Translator.tr("Save As..."),0,utilities_Config.keymap.file_save_as)) {
			found_App.editorui.saveSceneAs();
			EditorMenu.show = false;
		}
		if(ui.button("      " + utilities_Translator.tr("Export Project files..."),0)) {
			khafs_Fs.getContent(EditorUi.cwd + khafs_Fs.sep + "pjml.found",function(blob) {
				var out = JSON.parse(blob);
				var curproj = null;
				var _g = 0;
				var _g1 = out.list;
				while(_g < _g1.length) {
					var proj = _g1[_g];
					++_g;
					if(proj.name == EditorUi.projectName) {
						curproj = proj;
					}
				}
				khafs_Fs.saveContent(EditorUi.projectPath + khafs_Fs.sep + EditorUi.projectName + ".prj",JSON.stringify(curproj),function() {
					khafs_Fs.download(EditorUi.projectPath);
				});
			});
			EditorMenu.show = false;
		}
		ui.fill(0,0,sepw,1,ui.t.ACCENT_SELECT_COL);
		if(ui.button("      " + utilities_Translator.tr("Exit"),0)) {
			kha_System.stop();
			EditorMenu.show = false;
		}
	} else if(EditorMenu.menuCategory == 1) {
		if(ui.button("      " + utilities_Translator.tr("Scene Settings"),0)) {
			EditorHierarchy.instance.onSceneSelected();
		}
		if(ui.button("      " + utilities_Translator.tr("Preferences..."),0,utilities_Config.keymap.edit_prefs)) {
			EditorMenu.show = false;
			ConfigSettingsDialog.open();
		}
	} else if(EditorMenu.menuCategory == 2) {
		var active = ui.check(EditorMenu.drawGridHandle,utilities_Translator.tr("Draw Grid"));
		found_Found.drawGrid = active;
		if(EditorMenu.drawGridHandle.changed) {
			EditorMenu.show = false;
		}
		ui.enabled = active;
		EditorMenu.drawGridHandle.value = found_Found.GRID;
		var size = zui_Ext.floatInput(ui,EditorMenu.drawGridHandle,utilities_Translator.tr("Grid Size"));
		if(EditorMenu.drawGridHandle.changed) {
			var value = size;
			var x;
			if(value % 8 == 0) {
				x = value;
			} else {
				value += 8 - Math.floor(value) % 8;
				x = value;
			}
			found_Found.GRID = x | 0;
		}
		ui.enabled = true;
		var tmp = ui.check(EditorMenu.physicsDebugHandle,utilities_Translator.tr("Physics debug"));
		if(EditorMenu.physicsDebugHandle.changed) {
			EditorMenu.show = false;
			found_Found.collisionsDraw = EditorMenu.physicsDebugHandle.selected;
		}
		if(ui.button("Reset Camera Zoom")) {
			found_State.active.cam.zoom = 1.0;
		}
	} else if(EditorMenu.menuCategory == 3) {
		ui.text("Camera Movement Input");
		ui.fill(0,0,sepw,1,ui.t.ACCENT_SELECT_COL);
		var keyCode = zui_Ext.keyInput(ui,EditorMenu.camControlLeftHandle,utilities_Translator.tr("Left Input"));
		var tmp = EditorMenu.camControlLeftHandle.changed;
		keyCode = zui_Ext.keyInput(ui,EditorMenu.camControlRightHandle,utilities_Translator.tr("Right Input"));
		var tmp = EditorMenu.camControlRightHandle.changed;
		keyCode = zui_Ext.keyInput(ui,EditorMenu.camControlUpHandle,utilities_Translator.tr("Up Input"));
		var tmp = EditorMenu.camControlUpHandle.changed;
		keyCode = zui_Ext.keyInput(ui,EditorMenu.camControlDownHandle,utilities_Translator.tr("Down Input"));
		var tmp = EditorMenu.camControlDownHandle.changed;
		ui.fill(0,0,sepw,1,ui.t.ACCENT_SELECT_COL);
	} else if(EditorMenu.menuCategory == 4) {
		if(ui.button("      " + utilities_Translator.tr("Manual"),0)) {
			found_Url.explorer("https://github.com/foundry2D/foundry2d/wiki");
		}
		if(ui.button("      " + utilities_Translator.tr("Issue Tracker"),0)) {
			found_Url.explorer("https://github.com/foundry2D/foundry2d/issues");
		}
		if(ui.button("      " + utilities_Translator.tr("Report Bug"),0)) {
			var url = "https://github.com/foundry2D/foundry2d/issues/new?labels=bug&template=bug_report.md&body=*Foundry2d%20" + found_data_Data.version + "-" + found_Found.sha + ",%20" + kha_System.get_systemId() + "*";
			found_Url.explorer(url);
		}
	}
	var first = EditorMenu.showMenuFirst;
	EditorMenu.hideMenu = ui.comboSelectedHandle == null && !EditorMenu.changeStarted && !EditorMenu.keepOpen && !first && (ui.changed || ui.inputReleased || ui.inputReleasedR || ui.isEscapeDown);
	EditorMenu.showMenuFirst = false;
	EditorMenu.keepOpen = false;
	if(ui.inputReleased) {
		EditorMenu.changeStarted = false;
	}
	ui.t.BUTTON_COL = BUTTON_COL;
	ui.t.ELEMENT_OFFSET = ELEMENT_OFFSET;
	ui.endRegion();
	g.end();
};
EditorMenu.createScene = function() {
	var done = function(path) {
		if(path == "") {
			return;
		}
		var sep = khafs_Fs.sep;
		var name = StringTools.replace(path.split(sep)[path.split(sep).length - 1],".json","");
		var scene = found_data_DataLoader.parse(kha_Assets.blobs.default_json.toString());
		scene.name = name;
		scene._entities = scene._entities.splice(0,1);
		var data = found_data_DataLoader.stringify(scene);
		var p = StringTools.endsWith(path,".json") ? path : path + ".json";
		EditorUi.scenePath = p;
		khafs_Fs.getContent(EditorUi.cwd + khafs_Fs.sep + "pjml.found",function(blob) {
			var out = JSON.parse(blob);
			var _g = 0;
			var _g1 = out.list;
			while(_g < _g1.length) {
				var proj = _g1[_g];
				++_g;
				if(proj.name == EditorUi.projectName) {
					proj.scenes.push(p);
				}
			}
			khafs_Fs.saveContent(EditorUi.cwd + khafs_Fs.sep + "pjml.found",JSON.stringify(out));
			khafs_Fs.saveContent(p,data,function() {
				found_App.editorui.set_visible(false);
				found_State.addState(name,p);
				EditorUi.scenePath = p;
				found_State.set(name,($_=found_App.editorui,$bind($_,$_.init)));
			});
		});
	};
	FileBrowserDialog.open(done,EditorUi.projectPath);
};
EditorMenu.loadScene = function(scene) {
	found_App.reset();
	found_State.addState(scene.name,scene.name + ".json");
	found_State.set(scene.name);
	found_App.editorui.hierarchy.setSceneData(scene);
};
EditorMenu.prototype = {
	__class__: EditorMenu
};
var View = function() { };
$hxClasses["View"] = View;
View.__name__ = true;
View.__isInterface__ = true;
View.prototype = {
	render: null
	,redraw: null
	,__class__: View
};
var EditorMenuBar = function() {
	this.lastColor = -1;
	this.animateOut = false;
	this.animateIn = false;
	this.visible = false;
	this.y = 0.0;
	this.menubarw = 330;
	this.menuHandle = new zui_Handle({ layout : 1});
	this.workspaceHandle = new zui_Handle({ layout : 1});
};
$hxClasses["EditorMenuBar"] = EditorMenuBar;
EditorMenuBar.__name__ = true;
EditorMenuBar.__interfaces__ = [View];
EditorMenuBar.prototype = {
	ui: null
	,workspaceHandle: null
	,menuHandle: null
	,menubarw: null
	,y: null
	,visible: null
	,playImage: null
	,pauseImage: null
	,mouse: null
	,delta: null
	,current: null
	,shouldRedraw: function(image,width,height) {
		var should = image == null;
		if(!should) {
			should = image.get_width() != width || image.get_height() != height;
		}
		return should;
	}
	,redrawPlay: function(size,color) {
		this.ui.g.end();
		this.playImage = kha_Image.createRenderTarget(size | 0,size | 0);
		this.playImage.get_g2().begin(true,0);
		this.playImage.get_g2().set_color(color);
		this.playImage.get_g2().fillTriangle(0,0,0,size,size,size * 0.5);
		this.playImage.get_g2().end();
		this.ui.g.begin(false);
	}
	,redrawPause: function(size,color) {
		this.ui.g.end();
		this.pauseImage = kha_Image.createRenderTarget(size | 0,size | 0);
		this.pauseImage.get_g2().begin(true,0);
		this.pauseImage.get_g2().set_color(color);
		this.pauseImage.get_g2().fillRect(0,0,size * 0.15,size);
		this.pauseImage.get_g2().fillRect(size * 0.5,0,size * 0.15,size);
		this.pauseImage.get_g2().end();
		this.ui.g.begin(false);
	}
	,animateIn: null
	,animateOut: null
	,lastColor: null
	,render: function(ui,element) {
		this.ui = ui;
		if(this.mouse == null) {
			this.mouse = found_Input.getMouse();
		}
		var main = found_App.editorui;
		if(this.visible && !this.animateOut && !EditorMenu.show && this.mouse.y > element.height) {
			this.animateOut = true;
			this.y = element.y;
			this.current = kha_Scheduler.time();
		} else if(!this.animateIn && this.mouse.y < element.height) {
			this.animateIn = true;
			this.y = 0;
			this.visible = true;
			this.current = kha_Scheduler.time();
		}
		if(main.currentView > 0 || !utilities_Config.raw.autoHideMenuBar) {
			this.visible = this.animateIn = this.animateOut = true;
		}
		if(!this.visible && !this.animateIn && !this.animateOut) {
			return;
		}
		this.delta = kha_Scheduler.time() - this.current;
		this.current = kha_Scheduler.time();
		if(main.currentView == 0) {
			if(this.animateIn) {
				this.y = found_math_Util.lerp(0,element.y,this.delta);
				if(this.y >= element.y) {
					this.animateIn = false;
				}
			} else if(this.animateOut) {
				this.y = found_math_Util.lerp(element.y,0,this.delta);
				if(this.y <= 0.1) {
					this.animateOut = false;
					this.y = 0;
					this.visible = false;
				}
			}
		}
		ui.inputEnabled = true;
		var WINDOW_BG_COL = ui.t.WINDOW_BG_COL;
		ui.t.WINDOW_BG_COL = ui.t.SEPARATOR_COL;
		if(ui.window(this.menuHandle,element.x | 0,this.y | 0,element.width | 0,element.height | 0)) {
			var w = ui.t.BUTTON_H * ui.ops.scaleFactor > element.height ? element.height : ui.t.BUTTON_H * ui.ops.scaleFactor;
			if(this.shouldRedraw(this.playImage,w,w)) {
				this.redrawPlay(w,ui.t.ACCENT_COL);
			}
			if(this.shouldRedraw(this.pauseImage,w,w)) {
				this.redrawPause(w,ui.t.ACCENT_COL);
			}
			var _w = ui._w;
			ui._x += 1;
			zui_Ext.beginMenu(ui);
			var menuCategories = 5;
			var _g = 0;
			var _g1 = menuCategories;
			while(_g < _g1) {
				var i = _g++;
				var categories = [utilities_Translator.tr("File"),utilities_Translator.tr("Edit"),utilities_Translator.tr("Viewport"),utilities_Translator.tr("Camera"),utilities_Translator.tr("Help")];
				var pressed = zui_Ext.menuButton(ui,categories[i]);
				if(pressed && EditorMenu.show) {
					EditorMenu.show = false;
				} else if(pressed || EditorMenu.show && EditorMenu.menuCommands == null && ui.isHovered) {
					EditorMenu.show = true;
					EditorMenu.menuCategory = i;
					EditorMenu.menuX = ui._x - ui._w | 0;
					EditorMenu.menuY = ui.t.BUTTON_H * ui.ops.scaleFactor * 1.1 + 2 + ui.buttonOffsetY | 0;
				}
			}
			if(this.menubarw < ui._x + 10) {
				this.menubarw = ui._x + 10 | 0;
			}
			ui._w = _w;
			ui._x = element.width * 0.5;
			ui._y = element.height * 0.1;
			var currentImage = found_App.editorui.isPlayMode ? this.pauseImage : this.playImage;
			var state = ui.image(currentImage,this.lastColor);
			if(state == 3) {
				EditorUi.togglePlayMode();
				found_audio_Music.stopAll();
			} else if(state == 4) {
				this.lastColor = -23296;
			} else {
				this.lastColor = -1;
			}
			ui._y = 0.0;
			ui._w = ui._w + ui.t.ELEMENT_W * ui.ops.scaleFactor | 0;
			main.set_currentView(zui_Ext.inlineRadio(ui,zui_Handle.global.nest(117,null),["Scene","Code","Draw"]));
			zui_Ext.endMenu(ui);
			ui._x = ui._w - ui.t.ELEMENT_W * ui.ops.scaleFactor * 2;
		}
		ui.t.WINDOW_BG_COL = WINDOW_BG_COL;
		ui.inputEnabled = !EditorMenu.show;
	}
	,redraw: function() {
		this.menuHandle.redraws = 2;
	}
	,__class__: EditorMenuBar
};
var EditorPanel = function(visibleOnStart) {
	if(visibleOnStart == null) {
		visibleOnStart = true;
	}
	this.element = null;
	this.visible = true;
	this.tabs = [];
	this.postRenders = [];
	this.windowHandle = new zui_Handle();
	this.htab = new zui_Handle({ text : "", position : 0});
	this.visible = visibleOnStart;
};
$hxClasses["EditorPanel"] = EditorPanel;
EditorPanel.__name__ = true;
EditorPanel.__interfaces__ = [View];
EditorPanel.prototype = {
	tabs: null
	,htab: null
	,tabname: null
	,visible: null
	,get_tabname: function() {
		if(this.tabs.length == 0) {
			return "";
		}
		return this.tabs[this.htab.position].name;
	}
	,windowHandle: null
	,postRenders: null
	,element: null
	,x: null
	,get_x: function() {
		if(this.element == null) {
			return 0;
		}
		return this.element.x | 0;
	}
	,y: null
	,get_y: function() {
		if(this.element == null) {
			return 0;
		}
		return this.element.y | 0;
	}
	,w: null
	,get_w: function() {
		if(this.element == null) {
			return 0;
		}
		return this.element.width | 0;
	}
	,h: null
	,get_h: function() {
		if(this.element == null) {
			return 0;
		}
		return this.element.height | 0;
	}
	,render: function(ui,element) {
		if(this.element == null) {
			this.element = element;
		}
		if(this.tabs.length > 0) {
			this.windowHandle.layout = this.tabs[this.htab.position].get_layout();
		}
		if(ui.window(this.windowHandle,this.get_x(),this.get_y(),this.get_w(),this.get_h())) {
			var _g = 0;
			var _g1 = this.tabs;
			while(_g < _g1.length) {
				var tab = _g1[_g];
				++_g;
				tab.render(ui);
			}
		}
		var _g = 0;
		var _g1 = this.postRenders;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			r(ui);
		}
	}
	,redraw: function() {
		this.htab.redraws = this.windowHandle.redraws = 2;
	}
	,addTab: function(tab) {
		if(this.tabs.indexOf(tab) == -1) {
			tab.position = this.tabs.push(tab) - 1;
			tab.parent = this;
		}
	}
	,removeTab: function(tab) {
		if(HxOverrides.remove(this.tabs,tab)) {
			tab.parent = null;
			tab.position = -1;
		}
		return false;
	}
	,__class__: EditorPanel
	,__properties__: {get_h:"get_h",get_w:"get_w",get_y:"get_y",get_x:"get_x",get_tabname:"get_tabname"}
};
var EditorTools = function() { };
$hxClasses["EditorTools"] = EditorTools;
EditorTools.__name__ = true;
EditorTools.drawGrid = function(g) {
	if(!found_Found.drawGrid) {
		return;
	}
	var size = found_Found.GRID;
	var str = 3.0;
	var x = found_State.active.cam.get_position().x;
	x += found_Found.GRID - x % found_Found.GRID;
	x += -found_Found.GRID * 1.5;
	var y = found_State.active.cam.get_position().y;
	y += found_Found.GRID - y % found_Found.GRID;
	y += -found_Found.GRID * 2;
	var width = Math.abs(x) + found_Found.WIDTH + found_Found.GRID * 2;
	var height = Math.abs(y) + found_Found.HEIGHT + found_Found.GRID * 2;
	g.set_color(-14145496);
	while(x < width) {
		g.drawRect(x,y,size,size,str);
		x += size;
		if(g.get_color() == -14145496) {
			g.set_color(-13487566);
		} else {
			g.set_color(-14145496);
		}
		if(x >= width && y < height) {
			y += size;
			x = found_State.active.cam.get_position().x;
			x += found_Found.GRID - x % found_Found.GRID;
			x += -found_Found.GRID * 1.5;
		}
	}
	g.set_color(-1);
};
var found_Trait = function() {
	this._render2D = null;
	this._render = null;
	this._lateUpdate = null;
	this._update = null;
	this._remove = null;
	this._init = null;
	this._awake = null;
	this._add = null;
	this.name = "";
};
$hxClasses["found.Trait"] = found_Trait;
found_Trait.__name__ = true;
found_Trait.hasTrait = function(classname) {
	return Object.prototype.hasOwnProperty.call(found_Trait.props.h,classname);
};
found_Trait.getProps = function(classname) {
	if(Object.prototype.hasOwnProperty.call(found_Trait.props.h,classname)) {
		var temp = found_Trait.props.h[classname];
		var out = [];
		if(((temp) instanceof Array)) {
			return out.concat(temp);
		} else {
			var _g = 0;
			var _g1 = Reflect.fields(temp);
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				out.push(Reflect.field(temp,f));
			}
			return out;
		}
	} else {
		return [];
	}
};
found_Trait.addProps = function(classname,props) {
	if(Object.prototype.hasOwnProperty.call(found_Trait.props.h,classname)) {
		var this1 = found_Trait.props;
		var value = found_Trait.getProps(classname).concat(props);
		this1.h[classname] = value;
	} else {
		var this1 = found_Trait.props;
		var value = Reflect.copy(props);
		this1.h[classname] = value;
	}
};
found_Trait.removeProps = function(classname,props) {
	if(Object.prototype.hasOwnProperty.call(found_Trait.props.h,classname)) {
		var _g = 0;
		while(_g < props.length) {
			var p = props[_g];
			++_g;
			HxOverrides.remove(found_Trait.props.h[classname],p);
		}
	}
};
found_Trait.prototype = {
	name: null
	,object: null
	,_add: null
	,_awake: null
	,_init: null
	,_remove: null
	,_update: null
	,_lateUpdate: null
	,_render: null
	,_render2D: null
	,remove: function() {
		this.object.removeTrait(this);
	}
	,notifyOnAdd: function(f) {
		if(this._add == null) {
			this._add = [];
		}
		this._add.push(f);
	}
	,notifyOnAwake: function(f) {
		if(this._awake == null) {
			this._awake = [];
		}
		this._awake.push(f);
	}
	,notifyOnInit: function(f) {
		if(this._init == null) {
			this._init = [];
		}
		this._init.push(f);
	}
	,notifyOnRemove: function(f) {
		if(this._remove == null) {
			this._remove = [];
		}
		this._remove.push(f);
	}
	,notifyOnUpdate: function(f) {
		if(this._update == null) {
			this._update = [];
		}
		this._update.push(f);
	}
	,removeUpdate: function(f) {
		HxOverrides.remove(this._update,f);
	}
	,notifyOnLateUpdate: function(f) {
		if(this._lateUpdate == null) {
			this._lateUpdate = [];
		}
		this._lateUpdate.push(f);
	}
	,removeLateUpdate: function(f) {
		HxOverrides.remove(this._lateUpdate,f);
	}
	,notifyOnRender: function(f) {
		if(this._render == null) {
			this._render = [];
		}
		this._render.push(f);
	}
	,removeRender: function(f) {
		HxOverrides.remove(this._render,f);
	}
	,notifyOnRender2D: function(f) {
		if(this._render2D == null) {
			this._render2D = [];
		}
		this._render2D.push(f);
	}
	,removeRender2D: function(f) {
		HxOverrides.remove(this._render2D,f);
	}
	,__class__: found_Trait
};
var EditorUi = function() {
	this.lastChange = 0.0;
	this.listViews = [];
	this.currentView = 0;
	this.fsFiletypeExceptions = [".vhx",".prj"];
	this.isBlend = false;
	this.visible = true;
	var _gthis = this;
	found_Trait.call(this);
	kha_Window.get(0).notifyOnResize($bind(this,this.onResize));
	this.ui = new zui_Zui({ font : kha_Assets.fonts.font_default, theme : zui_Canvas.themes[0]});
	khafs_Fs.init(function() {
		utilities_Config.load(function() {
			utilities_Config.init();
			_gthis.set_isPlayMode(utilities_Config.raw.defaultPlayMode);
			_gthis.gameView = new EditorGameView();
			var done = function() {
				if(_gthis.listViews.length > 0 && _gthis.listViews[_gthis.currentView].visible) {
					_gthis.listViews[_gthis.currentView].set_visible(false);
					throw haxe_Exception.thrown("This is valid logic ?");
				}
				var _g = 0;
				var _g1 = _gthis.projectmanager._render2D;
				while(_g < _g1.length) {
					var f = _g1[_g];
					++_g;
					found_App.notifyOnRender2D(f);
				}
				_gthis.registerInput();
			};
			if(!khafs_Fs.exists(EditorUi.cwd + "/pjml.found")) {
				var projList = EditorUi.getLocalProjects();
				_gthis.projectmanager = new ManagerView(projList,_gthis.ui);
				done();
			} else {
				khafs_Fs.getContent(EditorUi.cwd + "/pjml.found",function(data) {
					var out = JSON.parse(data);
					out.list = out.list.concat(EditorUi.getLocalProjects());
					_gthis.projectmanager = new ManagerView(out.list,_gthis.ui);
					done();
				});
				var key = haxe_ds_StringMap.keysIterator(khafs_Fs.dbKeys.h);
				while(key.hasNext()) {
					var key1 = key.next();
					var key2 = [key1];
					if(key2[0] == EditorUi.cwd + "/pjml.found") {
						continue;
					}
					khafs_Fs.getContent(key2[0],(function(key) {
						return function(data) {
							haxe_Log.trace("Fetched data from " + key[0],{ fileName : "EditorUi.hx", lineNumber : 110, className : "EditorUi", methodName : "new"});
						};
					})(key2));
				}
			}
		});
	},this.fsFiletypeExceptions);
};
$hxClasses["EditorUi"] = EditorUi;
EditorUi.__name__ = true;
EditorUi.__properties__ = {set_projectPath:"set_projectPath"};
EditorUi.set_projectPath = function(path) {
	ProjectExplorer["currentPath"] = path;
	return EditorUi.projectPath = path;
};
EditorUi.getLocalProjects = function() {
	var out = [];
	var _g = 0;
	var _g1 = kha_Assets.blobs.names;
	while(_g < _g1.length) {
		var asset = _g1[_g];
		++_g;
		if(StringTools.endsWith(asset,"_prj")) {
			var proj = JSON.parse(kha_Assets.blobs.get(asset).toString());
			out.push(proj);
		}
	}
	return out;
};
EditorUi.togglePlayMode = function() {
	if(found_App.editorui.isPlayMode) {
		var _g = 0;
		var _g1 = found_State.active.activeEntities;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = object.traits;
			while(_g2 < _g3.length) {
				var t = _g3[_g2];
				++_g2;
				if(t._remove != null) {
					var _g4 = 0;
					var _g5 = t._remove;
					while(_g4 < _g5.length) {
						var f = _g5[_g4];
						++_g4;
						f();
					}
				}
			}
		}
		found_App.editorui.set_isPlayMode(false);
	} else {
		var _g = 0;
		var _g1 = found_State.active.inactiveEntities;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			if(obj.get_raw().active) {
				obj.set_active(true);
			}
		}
		var _g = 0;
		var _g1 = found_State.active.activeEntities;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = object.traits;
			while(_g2 < _g3.length) {
				var t = _g3[_g2];
				++_g2;
				if(t._awake != null) {
					var _g4 = 0;
					var _g5 = t._awake;
					while(_g4 < _g5.length) {
						var f = _g5[_g4];
						++_g4;
						found_App.notifyOnAwake(f);
					}
				}
				if(t._init != null) {
					var _g6 = 0;
					var _g7 = t._init;
					while(_g6 < _g7.length) {
						var f1 = _g7[_g6];
						++_g6;
						found_App.notifyOnInit(f1);
					}
				}
			}
		}
		found_App.editorui.set_isPlayMode(true);
	}
};
EditorUi.__super__ = found_Trait;
EditorUi.prototype = $extend(found_Trait.prototype,{
	visible: null
	,set_visible: function(v) {
		if(v) {
			this.registerInput();
		} else {
			this.unregisterInput();
		}
		if(this.listViews.length > 0) {
			this.listViews[this.currentView].set_visible(v);
		}
		return this.visible = v;
	}
	,inspector: null
	,hierarchy: null
	,isPlayMode: null
	,set_isPlayMode: function(b) {
		this.isPlayMode = b;
		if(this.console != null) {
			this.console.clear(true);
		}
		return this.isPlayMode;
	}
	,projectmanager: null
	,dialog: null
	,gameView: null
	,codeView: null
	,animationView: null
	,console: null
	,menu: null
	,isBlend: null
	,ui: null
	,keyboard: null
	,mouse: null
	,fsFiletypeExceptions: null
	,currentView: null
	,set_currentView: function(value) {
		if(value > this.listViews.length - 1) {
			throw haxe_Exception.thrown("View with number " + value + " is higher then the number of views available.");
		}
		this.currentView = value;
		this.redraw();
		return this.currentView;
	}
	,listViews: null
	,redraw: function() {
		var view = haxe_ds_StringMap.valueIterator(this.listViews[this.currentView].toDraw.h);
		while(view.hasNext()) {
			var view1 = view.next();
			view1.redraw();
		}
	}
	,setUIScale: function(factor) {
		found_Found.popupZuiInstance.setScale(factor);
		this.ui.setScale(factor);
	}
	,onResize: function(w,h) {
	}
	,render: function(canvas) {
		if(this.projectmanager != null && this.projectmanager.get_ready() && this.projectmanager.visible) {
			canvas.get_g2().begin(this.projectmanager.visible,this.projectmanager.get_theme().WINDOW_BG_COL);
			var _g = 0;
			var _g1 = this.projectmanager._render2D;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f(canvas.get_g2());
			}
			canvas.get_g2().end();
		}
		if(this.listViews.length > 0 && this.listViews[this.currentView].get_ready() && this.listViews[this.currentView].visible) {
			var isClear = this.currentView != 0;
			var bgColor = isClear ? this.ui.t.WINDOW_BG_COL : null;
			canvas.get_g2().begin(isClear,bgColor);
			var _g = 0;
			var _g1 = this.listViews[this.currentView]._render2D;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f(canvas.get_g2());
			}
			canvas.get_g2().end();
		}
		if(EditorMenu.show) {
			EditorMenu.render(canvas.get_g2());
		}
	}
	,init: function() {
		this.listViews.splice(0,this.listViews.length);
		var editor = new EditorView(this.ui,"main");
		var codeEditor = new EditorView(this.ui,"codeView");
		var drawEditor = new EditorView(this.ui,"drawView");
		this.listViews.push(editor);
		this.listViews.push(codeEditor);
		this.listViews.push(drawEditor);
		var center = new EditorPanel();
		var bottom = new EditorPanel();
		bottom.addTab(new ProjectExplorer());
		this.console = new EditorConsole();
		bottom.addTab(this.console);
		center.addTab(this.gameView);
		var codePanel = new EditorPanel();
		this.codeView = new EditorCodeView();
		codePanel.addTab(this.codeView);
		codeEditor.addToElementDraw("Code",codePanel);
		codeEditor.addToElementDraw("Explorer",bottom);
		codeEditor.addToElementDraw("Game",center);
		var drawPanel = new EditorPanel();
		drawPanel.addTab(new EditorAnimationView());
		drawEditor.addToElementDraw("Draw",drawPanel);
		var right = new EditorPanel(false);
		var left = new EditorPanel();
		this.inspector = new EditorInspector();
		this.hierarchy = EditorHierarchy.getInstance();
		right.addTab(this.inspector);
		left.addTab(this.hierarchy);
		editor.addToElementDraw("RightLayout",right);
		editor.addToElementDraw("LeftLayout",left);
		this.menu = new EditorMenuBar();
		var elemName = "Header";
		editor.addToElementDraw(elemName,this.menu);
		codeEditor.addToElementDraw(elemName,this.menu);
		drawEditor.addToElementDraw(elemName,this.menu);
		this.keyboard = found_Input.getKeyboard();
		this.mouse = found_Input.getMouse();
		this.set_visible(true);
	}
	,lastChange: null
	,update: function(dt) {
		if(this.mouse == null || this.keyboard == null) {
			return;
		}
		this.ui.enabled = !zui_Popup.show;
		var isInMainView = this.currentView == 0;
		if(this.keysDown(utilities_Config.keymap.file_save)) {
			this.saveSceneData();
		}
		if(this.keysDown(utilities_Config.keymap.toggle_playmode)) {
			EditorUi.togglePlayMode();
		}
		if(this.currentView == 0 && this.keysDown(utilities_Config.keymap.file_open)) {
			this.openScene();
		}
		if(this.animationView != null) {
			this.animationView.update(dt);
			if(this.keyboard.started("space")) {
				this.animationView.notifyPlayPause();
			}
		}
		if(this.keyboard.down("f9") && 0.1 < kha_Scheduler.time() - this.lastChange) {
			this.lastChange = kha_Scheduler.time();
			this.listViews[this.currentView].set_visible(!this.listViews[this.currentView].visible);
		}
		var tmp;
		var tmp1;
		if(!(this.mouse.x > EditorMenu.menuX + EditorMenu.menuW)) {
			var _this = this.ui;
			tmp1 = this.mouse.x < EditorMenu.menuX - _this.t.ELEMENT_W * _this.ops.scaleFactor * 0.05;
		} else {
			tmp1 = true;
		}
		if(!(tmp1 || this.mouse.y > EditorMenu.menuY + EditorMenu.get_menuH())) {
			var _this = this.ui;
			tmp = this.mouse.y < EditorMenu.menuY - _this.t.ELEMENT_H * _this.ops.scaleFactor;
		} else {
			tmp = true;
		}
		if(tmp) {
			EditorMenu.show = false;
		}
		if(isInMainView) {
			if(this.keyboard.down("1") && this.keyboard.down("control")) {
				EditorUi.arrowMode = 0;
				EditorTools.redrawArrows = true;
			} else if(this.keyboard.down("2") && this.keyboard.down("control")) {
				EditorUi.arrowMode = 1;
				EditorTools.redrawArrows = true;
			}
			if(this.keyboard.down("control") && this.mouse.wheelDelta != 0) {
				var mult = this.mouse.wheelDelta * -1;
				haxe_Log.trace(found_State.active.cam.zoom,{ fileName : "EditorUi.hx", lineNumber : 271, className : "EditorUi", methodName : "update"});
				if(found_State.active.cam.zoom > 0) {
					found_State.active.cam.zoom += 0.1 * mult;
					if(found_State.active.cam.zoom < 0.01) {
						found_State.active.cam.zoom = 0.1;
					}
				}
			}
			if(this.mouse.down("middle") && this.mouse.moved) {
				if(found_State.active != null) {
					found_State.active.cam.get_position().x += this.mouse.distX;
					found_State.active.cam.get_position().y += this.mouse.distY;
				}
			}
			if(this.mouse.down("left") && (this.mouse.moved || this.keyboard.down("control"))) {
				this.updateMouse(this.mouse.x,this.mouse.y,this.mouse.distX,this.mouse.distY);
			} else if(!this.mouse.down("left")) {
				EditorUi.arrow = -1;
			}
			if(this.mouse.started("left")) {
				var mpos = found_State.active.cam.screenToWorld(new kha_math_Vector2(this.mouse.x,this.mouse.y));
				var _g = 0;
				var _g1 = found_State.active._entities;
				while(_g < _g1.length) {
					var entity = _g1[_g];
					++_g;
					if(found_State.active.cam == entity) {
						continue;
					}
					var _this = entity.get_position();
					var x = _this.x - mpos.x;
					var y = _this.y - mpos.y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var dif_x = x;
					var dif_y = y;
					if(Math.abs(dif_x) < entity.get_width() && Math.abs(dif_y) < entity.get_height() && mpos.x > entity.get_position().x && mpos.y > entity.get_position().y) {
						this.hierarchy.onObjectSelected(entity.uid,entity.get_raw());
					}
				}
			}
		}
	}
	,keysDown: function(keymap) {
		var keys = keymap.split("+");
		var _g = 0;
		while(_g < keys.length) {
			var key = keys[_g];
			++_g;
			if(key == "ctrl") {
				key = "control";
			}
			if(key.length == 1) {
				if(!this.keyboard.started(key)) {
					return false;
				}
			} else if(!this.keyboard.down(key)) {
				return false;
			}
		}
		return true;
	}
	,lastMX: null
	,lastMY: null
	,distX: null
	,distY: null
	,updateMouse: function(x,y,cx,cy) {
		if(this.inspector.index == -1) {
			return;
		}
		var doUpdate = true;
		var scale = found_State.active._entities[this.inspector.index].get_scale();
		var px = cx;
		var py = cy;
		var sx = cx / found_Found.WIDTH;
		var sy = cy / found_Found.HEIGHT;
		if(doUpdate) {
			if(EditorUi.arrowMode == 0 || EditorUi.arrow == 2) {
				var canUpdate = Math.abs(this.distX) > found_Found.GRID || Math.abs(this.distY) > found_Found.GRID;
				var ctrl = this.keyboard.down("control");
				if(ctrl && canUpdate) {
					if(EditorUi.arrow == 0) {
						if(!(this.distX > 0)) {
							px += this.distX;
						}
					} else if(EditorUi.arrow == 1) {
						if(!(this.distY > 0)) {
							py += this.distY;
						}
					} else {
						if(Math.abs(this.distX) > found_Found.GRID) {
							if(!(this.distX > 0)) {
								px += this.distX;
							}
							this.distX = 0;
						} else {
							px = 0;
						}
						if(Math.abs(this.distY) > found_Found.GRID) {
							if(!(this.distY > 0)) {
								py += this.distY;
							}
							this.distY = 0;
						} else {
							py = 0;
						}
					}
					this.updatePos(px,py,true);
					if(EditorUi.arrow < 2) {
						this.distX = 0;
						this.distY = 0;
					}
				} else if(!ctrl) {
					this.updatePos(px,py,false);
				} else {
					this.distX += px;
					this.distY += py;
				}
			} else if(EditorUi.arrowMode == 1) {
				var isDown = this.keyboard.down("control");
				if(isDown && EditorUi.arrow == 0) {
					this.updateScale(scale.x + sx,scale.y + sx,isDown);
				} else if(isDown && EditorUi.arrow == 1) {
					this.updateScale(scale.x + sy,scale.y + sy,isDown);
				} else {
					this.updateScale(scale.x + sx,scale.y + sy);
				}
			}
		}
	}
	,updateScale: function(sx,sy,ctrl) {
		if(ctrl == null) {
			ctrl = false;
		}
		if(ctrl) {
			found_State.active._entities[this.inspector.index].get_scale().x += sx;
			found_State.active._entities[this.inspector.index].get_scale().y += sy;
			Reflect.setProperty(found_State.active.raw._entities[this.inspector.index].scale,"x",sx);
		} else {
			switch(EditorUi.arrow) {
			case 0:
				found_State.active._entities[this.inspector.index].get_scale().x = sx;
				Reflect.setProperty(found_State.active.raw._entities[this.inspector.index].scale,"x",sx);
				break;
			case 1:
				found_State.active._entities[this.inspector.index].get_scale().y = sy;
				Reflect.setProperty(found_State.active.raw._entities[this.inspector.index].scale,"y",sy);
				break;
			}
		}
		this.inspector.redraw();
	}
	,updatePos: function(px,py,toGrid) {
		var x = found_State.active._entities[this.inspector.index].get_position().x + px;
		var y = found_State.active._entities[this.inspector.index].get_position().y + py;
		if(toGrid) {
			var value = Math.floor(x);
			var grid = found_Found.GRID;
			if(value % grid == 0) {
				x = value;
			} else {
				value += grid - Math.floor(value) % grid;
				x = value;
			}
		}
		if(toGrid) {
			var value = Math.floor(y);
			var grid = found_Found.GRID;
			if(value % grid == 0) {
				y = value;
			} else {
				value += grid - Math.floor(value) % grid;
				y = value;
			}
		}
		switch(EditorUi.arrow) {
		case 0:
			found_State.active._entities[this.inspector.index].get_position().x = x;
			Reflect.setProperty(found_State.active.raw._entities[this.inspector.index].position,"x",x);
			break;
		case 1:
			found_State.active._entities[this.inspector.index].get_position().y = y;
			Reflect.setProperty(found_State.active.raw._entities[this.inspector.index].position,"y",y);
			break;
		case 2:
			found_State.active._entities[this.inspector.index].get_position().x = x;
			found_State.active._entities[this.inspector.index].get_position().y = y;
			Reflect.setProperty(found_State.active.raw._entities[this.inspector.index].position,"x",x);
			Reflect.setProperty(found_State.active.raw._entities[this.inspector.index].position,"y",y);
			break;
		}
		this.inspector.redraw();
	}
	,saveSceneData: function() {
		if(EditorHierarchy.getInstance().isDirty()) {
			var i = 0;
			var _g = 0;
			var _g1 = found_State.active._entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				if(entity.dataChanged) {
					found_State.active.raw._entities[i] = entity.get_raw();
				}
				++i;
			}
			EditorHierarchy.getInstance().makeClean();
			khafs_Fs.saveContent(EditorUi.scenePath,found_data_DataLoader.stringify(found_State.active.raw));
		}
	}
	,saveSceneAs: function() {
		var _gthis = this;
		FileBrowserDialog.open(function(path) {
			if(!StringTools.endsWith(path,".json")) {
				path += ".json";
			}
			EditorUi.scenePath = path;
			EditorHierarchy.getInstance().makeDirty();
			_gthis.saveSceneData();
		},EditorUi.projectPath);
	}
	,openScene: function() {
		var _gthis = this;
		var done = function(path) {
			if(path == "") {
				return;
			}
			var sep = khafs_Fs.sep;
			var name = path.split(sep)[path.split(sep).length - 1];
			if(name.indexOf(".json") != -1 && khafs_Fs.exists(path)) {
				name = StringTools.replace(name,".json","");
				EditorUi.scenePath = path;
				if(!Object.prototype.hasOwnProperty.call(found_State._states.h,name)) {
					found_State.addState(name,EditorUi.scenePath);
				}
				_gthis.hierarchy.onSceneSelected();
				found_State.set(name,function() {
					_gthis.hierarchy.setSceneData(found_State.active.raw);
					_gthis.hierarchy.onSceneSelected();
				});
			} else {
				found_tool_Log.error("file with name " + name + " is not a valid scene name or the path \"" + path + "\" was invalid ",{ fileName : "EditorUi.hx", lineNumber : 489, className : "EditorUi", methodName : "openScene"});
			}
		};
		FileBrowserDialog.open(done);
	}
	,registerInput: function() {
		kha_input_Mouse.get().notify($bind(this,this.onMouseDownEditor),$bind(this,this.onMouseUpEditor),$bind(this,this.onMouseMoveEditor),$bind(this,this.onMouseWheelEditor));
		kha_input_Keyboard.get().notify($bind(this,this.onKeyDownEditor),$bind(this,this.onKeyUpEditor),$bind(this,this.onKeyPressEditor));
	}
	,unregisterInput: function() {
		kha_input_Mouse.get().remove($bind(this,this.onMouseDownEditor),$bind(this,this.onMouseUpEditor),$bind(this,this.onMouseMoveEditor),$bind(this,this.onMouseWheelEditor));
		kha_input_Keyboard.get().remove($bind(this,this.onKeyDownEditor),$bind(this,this.onKeyUpEditor),$bind(this,this.onKeyPressEditor));
	}
	,onMouseDownEditor: function(button,x,y) {
		this.ui.onMouseDown(button,x,y);
	}
	,onMouseUpEditor: function(button,x,y) {
		this.ui.onMouseUp(button,x,y);
	}
	,onMouseMoveEditor: function(x,y,movementX,movementY) {
		this.ui.onMouseMove(x,y,movementX,movementY);
	}
	,onMouseWheelEditor: function(delta) {
		this.ui.onMouseWheel(delta);
	}
	,onKeyDownEditor: function(code) {
		this.ui.onKeyDown(code);
	}
	,onKeyUpEditor: function(code) {
		this.ui.onKeyUp(code);
	}
	,onKeyPressEditor: function(char) {
		this.ui.onKeyPress(char);
	}
	,__class__: EditorUi
	,__properties__: {set_currentView:"set_currentView",set_isPlayMode:"set_isPlayMode",set_visible:"set_visible"}
});
var found_trait_internal_CanvasScript = function(canvasName,font,b_canvas) {
	if(font == null) {
		font = "font_default.ttf";
	}
	this.onReady = null;
	this.visible = true;
	this.canvas = null;
	var _gthis = this;
	found_Trait.call(this);
	this.customDraw = new haxe_ds_StringMap();
	var done = function(blob) {
		var onFontDone = function(f) {
			var c = JSON.parse(blob.toString());
			if(c.theme == null) {
				c.theme = zui_Canvas.themes[0].NAME;
			}
			var onFontDone = zui_Canvas.getTheme(c.theme);
			_gthis.cui = new zui_Zui({ font : f, theme : onFontDone});
			if(c.assets == null || c.assets.length == 0) {
				_gthis.canvas = c;
			} else {
				var loaded = 0;
				var _g = 0;
				var _g1 = c.assets;
				while(_g < _g1.length) {
					var asset = [_g1[_g]];
					++_g;
					var file = asset[0].file;
					found_data_Data.getImage(file,(function(asset) {
						return function(image) {
							zui_Canvas.assetMap.h[asset[0].id] = image;
							if((loaded += 1) >= c.assets.length) {
								_gthis.canvas = c;
							}
						};
					})(asset));
				}
			}
		};
		if(font == "font_default.ttf") {
			onFontDone(kha_Assets.fonts.font_default);
		} else {
			found_data_Data.getFont(font,onFontDone);
		}
	};
	if(b_canvas != null) {
		done(b_canvas);
	} else {
		found_data_Data.getBlob(canvasName + ".json",done);
	}
	this.notifyOnReady(function() {
		_gthis.baseWidth = _gthis.canvas.width;
		_gthis.baseHeight = _gthis.canvas.height;
	});
	this.notifyOnRender2D(function(g) {
		if(_gthis.canvas == null || !_gthis.visible) {
			return;
		}
		if(_gthis.onReady != null) {
			_gthis.onReady();
			_gthis.onReady = null;
		}
		var hasPos = _gthis.object != null;
		var identity = new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1);
		var objectTrans = identity;
		var rotTrans = identity;
		if(hasPos) {
			if(_gthis.object.get_rotation().z > 0) {
				rotTrans = g.popTransformation();
			}
			objectTrans = g.popTransformation();
		}
		var lastTrans = g.popTransformation();
		var isEmpty = g.transformations[g.transformationIndex] == null;
		if(isEmpty) {
			g.transformationIndex++;
			if(g.transformationIndex == g.transformations.length) {
				g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
			}
			var _this = g.transformations[g.transformationIndex];
			_this._00 = lastTrans._00;
			_this._10 = lastTrans._10;
			_this._20 = lastTrans._20;
			_this._01 = lastTrans._01;
			_this._11 = lastTrans._11;
			_this._21 = lastTrans._21;
			_this._02 = lastTrans._02;
			_this._12 = lastTrans._12;
			_this._22 = lastTrans._22;
			g.setTransformation(g.transformations[g.transformationIndex]);
		}
		_gthis.setCanvasDimensions(kha_System.windowWidth(),kha_System.windowHeight());
		var events = zui_Canvas.draw(_gthis.cui,_gthis.canvas,g);
		g.end();
		var key = haxe_ds_StringMap.keysIterator(_gthis.customDraw.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var element = _gthis.getElement(key1);
			if(element != null) {
				_gthis.customDraw.h[key1](g,element);
			}
		}
		if(!isEmpty) {
			g.transformationIndex++;
			if(g.transformationIndex == g.transformations.length) {
				g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
			}
			var _this = g.transformations[g.transformationIndex];
			_this._00 = lastTrans._00;
			_this._10 = lastTrans._10;
			_this._20 = lastTrans._20;
			_this._01 = lastTrans._01;
			_this._11 = lastTrans._11;
			_this._21 = lastTrans._21;
			_this._02 = lastTrans._02;
			_this._12 = lastTrans._12;
			_this._22 = lastTrans._22;
			g.setTransformation(g.transformations[g.transformationIndex]);
		}
		if(hasPos) {
			g.transformationIndex++;
			if(g.transformationIndex == g.transformations.length) {
				g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
			}
			var _this = g.transformations[g.transformationIndex];
			_this._00 = objectTrans._00;
			_this._10 = objectTrans._10;
			_this._20 = objectTrans._20;
			_this._01 = objectTrans._01;
			_this._11 = objectTrans._11;
			_this._21 = objectTrans._21;
			_this._02 = objectTrans._02;
			_this._12 = objectTrans._12;
			_this._22 = objectTrans._22;
			g.setTransformation(g.transformations[g.transformationIndex]);
			if(_gthis.object.get_rotation().z > 0) {
				g.transformationIndex++;
				if(g.transformationIndex == g.transformations.length) {
					g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
				}
				var _this = g.transformations[g.transformationIndex];
				_this._00 = rotTrans._00;
				_this._10 = rotTrans._10;
				_this._20 = rotTrans._20;
				_this._01 = rotTrans._01;
				_this._11 = rotTrans._11;
				_this._21 = rotTrans._21;
				_this._02 = rotTrans._02;
				_this._12 = rotTrans._12;
				_this._22 = rotTrans._22;
				g.setTransformation(g.transformations[g.transformationIndex]);
			}
		}
		g.begin(false);
		var _g = 0;
		while(_g < events.length) {
			var e = events[_g];
			++_g;
			var all = found_Event.get(e);
			if(all != null) {
				var _g1 = 0;
				while(_g1 < all.length) {
					var entry = all[_g1];
					++_g1;
					var _g2 = entry.onEvent;
					switch(_g2._hx_index) {
					case 0:
						var v = _g2.v;
						v();
						break;
					case 1:
						var v1 = _g2.v;
						v1([entry.name,entry.mask]);
						break;
					}
				}
			}
		}
	});
};
$hxClasses["found.trait.internal.CanvasScript"] = found_trait_internal_CanvasScript;
found_trait_internal_CanvasScript.__name__ = true;
found_trait_internal_CanvasScript.__super__ = found_Trait;
found_trait_internal_CanvasScript.prototype = $extend(found_Trait.prototype,{
	cui: null
	,canvas: null
	,baseWidth: null
	,baseHeight: null
	,customDraw: null
	,ready: null
	,get_ready: function() {
		return this.canvas != null;
	}
	,visible: null
	,set_visible: function(visible) {
		this.visible = visible;
		var _g = 0;
		var _g1 = this.canvas.elements;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.visible = visible;
		}
		return this.visible;
	}
	,onReady: null
	,notifyOnReady: function(f) {
		this.onReady = f;
	}
	,getElement: function(name) {
		var _g = 0;
		var _g1 = this.canvas.elements;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.name == name) {
				return e;
			}
		}
		return null;
	}
	,getElements: function() {
		return this.canvas.elements;
	}
	,getCanvas: function() {
		return this.canvas;
	}
	,setUiScale: function(factor) {
		this.cui.setScale(factor);
	}
	,setCanvasDimensions: function(x,y) {
		if(this.canvas.width != x || this.canvas.height != y) {
			this.canvas.width = x;
			this.canvas.height = y;
			var _g = 0;
			var _g1 = this.canvas.elements.length;
			while(_g < _g1) {
				var i = _g++;
				this.canvas.elements[i] = this.getScaledElement(this.canvas.elements[i]);
			}
		}
	}
	,setCanvasFontSize: function(fontSize) {
		this.cui.t.FONT_SIZE = fontSize;
	}
	,getHandle: function(name) {
		var this1 = zui_Canvas.h.children;
		var key = this.getElement(name).id;
		return this1.h[key];
	}
	,getScaledElement: function(elem) {
		var element = Reflect.copy(elem);
		element.x = Math.floor(elem.x / this.baseWidth * this.canvas.width);
		element.y = Math.floor(elem.y / this.baseHeight * this.canvas.height);
		element.width = Math.floor(elem.width / this.baseWidth * this.canvas.width);
		element.height = Math.floor(elem.height / this.baseHeight * this.canvas.height);
		return element;
	}
	,addCustomDraw: function(name,func) {
		this.customDraw.h[name] = func;
	}
	,removeCustomDraw: function(name) {
		var _this = this.customDraw;
		if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
			delete(_this.h[name]);
		}
	}
	,__class__: found_trait_internal_CanvasScript
	,__properties__: {set_visible:"set_visible",get_ready:"get_ready"}
});
var EditorView = function(ui,canvasname) {
	this.ui = ui;
	found_trait_internal_CanvasScript.call(this,canvasname,"font_default.ttf",kha_Assets.blobs.get(canvasname + "_json"));
	ui.ops.theme = zui_Canvas.themes[0];
	this.toDraw = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = this.canvas.elements;
	while(_g < _g1.length) {
		var elem = _g1[_g];
		++_g;
		this.addCustomDraw(elem.name,$bind(this,this.drawEditorView));
	}
	this.firstElem = this.canvas.elements[0].name;
	this.lastElem = this.canvas.elements[this.canvas.elements.length - 1].name;
};
$hxClasses["EditorView"] = EditorView;
EditorView.__name__ = true;
EditorView.__super__ = found_trait_internal_CanvasScript;
EditorView.prototype = $extend(found_trait_internal_CanvasScript.prototype,{
	ui: null
	,toDraw: null
	,firstElem: null
	,lastElem: null
	,addToElementDraw: function(name,view) {
		this.toDraw.h[name] = view;
	}
	,drawEditorView: function(g,element) {
		if(element.name == this.firstElem) {
			this.ui.begin(g);
		}
		var drawable = this.toDraw.h[element.name];
		if(drawable != null) {
			drawable.render(this.ui,element);
		} else {
			haxe_Log.trace("No ui will be drawn for element named: " + element.name,{ fileName : "EditorView.hx", lineNumber : 35, className : "EditorView", methodName : "drawEditorView"});
		}
		if(element.name == this.lastElem) {
			this.ui.end();
		}
	}
	,__class__: EditorView
});
var FileBrowserDialog = function() {
};
$hxClasses["FileBrowserDialog"] = FileBrowserDialog;
FileBrowserDialog.__name__ = true;
FileBrowserDialog.open = function(onDone,currentPath) {
	if(currentPath == null) {
		currentPath = "";
	}
	FileBrowserDialog.doneCallback = onDone;
	FileBrowserDialog.fbHandle.text = currentPath != "" ? currentPath : EditorUi.cwd;
	var _this = found_Found.popupZuiInstance;
	var _this1 = found_Found.popupZuiInstance;
	zui_Popup.showCustom(found_Found.popupZuiInstance,FileBrowserDialog.fileBrowserPopupDraw,-1,-1,_this.t.ELEMENT_W * _this.ops.scaleFactor * 4 | 0,_this1.t.ELEMENT_W * _this1.ops.scaleFactor * 3 | 0);
};
FileBrowserDialog.doneCallback = function(path) {
};
FileBrowserDialog.fileBrowserPopupDraw = function(ui) {
	zui_Popup.boxTitle = utilities_Translator.tr("File Browser");
	if(ui.button(utilities_Translator.tr("Import Assets"))) {
		khafs_Fs.curDir = EditorUi.projectPath + khafs_Fs.sep + "Assets";
		khafs_Fs.input.click();
	}
	var selectedFile = CustomExt.fileBrowser(ui,FileBrowserDialog.fbHandle);
	if(FileBrowserDialog.fbHandle.changed) {
		FileBrowserDialog.textInputHandle.text = selectedFile;
	}
	var border = zui_Popup.borderW * 2 + zui_Popup.borderOffset;
	ui._y -= border;
	ui.endElement();
	ui.textInput(FileBrowserDialog.textInputHandle,utilities_Translator.tr("Filename"));
	ui.row([0.5,0.5]);
	ui.text("");
	ui.row([0.5,0.5]);
	if(ui.button(utilities_Translator.tr("Add"))) {
		zui_Popup.show = false;
		FileBrowserDialog.doneCallback(FileBrowserDialog.textInputHandle.text);
		FileBrowserDialog.textInputHandle.text = "";
		FileBrowserDialog.doneCallback = function(path) {
		};
	}
	if(ui.button(utilities_Translator.tr("Cancel"))) {
		zui_Popup.show = false;
		FileBrowserDialog.textInputHandle.text = "";
		FileBrowserDialog.doneCallback("");
		FileBrowserDialog.doneCallback = function(path) {
		};
	}
	if(ui._y < zui_Popup.modalH) {
		ui._y = zui_Popup.modalH;
	}
};
FileBrowserDialog.prototype = {
	__class__: FileBrowserDialog
};
var GridSizeDialog = function() { };
$hxClasses["GridSizeDialog"] = GridSizeDialog;
GridSizeDialog.__name__ = true;
GridSizeDialog.map = null;
GridSizeDialog.open = function(p_map) {
	GridSizeDialog.map = p_map;
	var _this = found_Found.popupZuiInstance;
	var _this1 = found_Found.popupZuiInstance;
	zui_Popup.showCustom(found_Found.popupZuiInstance,GridSizeDialog.gridSizePopupDraw,-1,-1,_this.t.ELEMENT_W * _this.ops.scaleFactor * 4 | 0,_this1.t.ELEMENT_W * _this1.ops.scaleFactor * 3 | 0);
	found_tool_TileEditor.ui.enabled = false;
};
GridSizeDialog.gridSizePopupDraw = function(ui) {
	zui_Popup.boxTitle = utilities_Translator.tr("Grid Size");
	var border = 2 * zui_Popup.borderW + zui_Popup.borderOffset;
	var gridSizeH = zui_Handle.global.nest(43,{ value : found_Found.GRID});
	zui_Ext.floatInput(ui,gridSizeH,utilities_Translator.tr("Grid Size"));
	var changeGrid = zui_Handle.global.nest(44,null);
	ui.check(changeGrid,utilities_Translator.tr("Affect main Grid"));
	ui._y = ui._h - ui.t.BUTTON_H - border;
	ui.row([0.5,0.5]);
	if(ui.button(utilities_Translator.tr("Apply"))) {
		GridSizeDialog.map.tw = GridSizeDialog.map.th = gridSizeH.value | 0;
		if(changeGrid.selected) {
			found_Found.GRID = GridSizeDialog.map.tw;
		}
		zui_Popup.show = false;
		GridSizeDialog.map = null;
		found_tool_TileEditor.ui.enabled = true;
	}
	if(ui.button(utilities_Translator.tr("Cancel"))) {
		zui_Popup.show = false;
		GridSizeDialog.map = null;
		found_tool_TileEditor.ui.enabled = true;
	}
	if(ui._y < zui_Popup.modalH) {
		ui._y = zui_Popup.modalH;
	}
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = true;
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = true;
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = true;
Main.main = function() {
	found_Found.setup({ app : Project, title : "Foundry2d"});
};
var ManagerView = function(data,ui) {
	this.listHandle = zui_Handle.global.nest(91,null);
	this.tabsHandle = zui_Handle.global.nest(90,null);
	this.titleElem = null;
	this.selectedItem = null;
	this.projects = [];
	found_trait_internal_CanvasScript.call(this,"projectView","font_default.ttf",kha_Assets.blobs.get("projectView_json"));
	if(!khafs_Fs.exists(EditorUi.cwd + khafs_Fs.sep + "pjml.found")) {
		khafs_Fs.saveContent(EditorUi.cwd + khafs_Fs.sep + "pjml.found","{\"list\":[]}");
	}
	this.ui = ui;
	if(data != null) {
		this.projects = data;
	}
	this.addCustomDraw("List",$bind(this,this.drawView));
	found_Event.add("onRun",haxe_ds_Either.Left($bind(this,this.runProject)));
	found_Event.add("onNew",haxe_ds_Either.Left($bind(this,this.createProject)));
	found_Event.add("onImportProject",haxe_ds_Either.Left($bind(this,this.importProject)));
	found_Event.add("onDeleteAllProjects",haxe_ds_Either.Left($bind(this,this.deleteAllProjects)));
	found_Event.add("onDelConfig",haxe_ds_Either.Left($bind(this,this.delConfig)));
};
$hxClasses["ManagerView"] = ManagerView;
ManagerView.__name__ = true;
ManagerView.__super__ = found_trait_internal_CanvasScript;
ManagerView.prototype = $extend(found_trait_internal_CanvasScript.prototype,{
	projects: null
	,selectedItem: null
	,theme: null
	,get_theme: function() {
		if(this.canvas == null) {
			return null;
		}
		return zui_Canvas.getTheme(this.canvas.theme);
	}
	,ui: null
	,titleElem: null
	,tabsHandle: null
	,listHandle: null
	,drawView: function(g,element) {
		if(this.titleElem == null) {
			this.titleElem = this.getElement("Title");
		}
		this.translate();
		var elem = element;
		this.ui.begin(g);
		if(this.ui.window(zui_Handle.global.nest(89,null),Math.floor(elem.x),Math.floor(elem.y),elem.width,elem.height)) {
			if(this.ui.tab(this.tabsHandle,utilities_Translator.tr("Projects"))) {
				var selected = zui_Ext.list(this.ui,this.listHandle,this.projects,{ itemDrawCb : $bind(this,this.drawItems), getNameCb : $bind(this,this.projName), removeCb : $bind(this,this.deleteProject), showAdd : false, showRadio : true, editable : false});
				this.selectedItem = this.projects[selected];
			}
			var tmp = this.ui.tab(this.tabsHandle,utilities_Translator.tr("Templates"));
		}
		this.ui.end();
	}
	,projName: function(i) {
		if(i < 0) {
			return "";
		}
		return this.projects[i].name;
	}
	,drawItems: function(h,i) {
		if(i < 0) {
			return;
		}
		if(this.ui.button("Path: " + this.projects[i].path,0)) {
			this.listHandle.nest(0).position = i;
			this.redraw();
		}
	}
	,redraw: function() {
		this.tabsHandle.redraws = this.listHandle.redraws = 2;
	}
	,translate: function() {
		var tmp = utilities_Translator.tr("Project Manager");
		this.titleElem.text = "Foundry Engine - " + tmp;
		this.getElement("Run").text = utilities_Translator.tr("Run");
		this.getElement("New").text = utilities_Translator.tr("New Project");
		this.getElement("Import").text = utilities_Translator.tr("Import");
		this.getElement("Delete").text = utilities_Translator.tr("Delete All Projects");
		this.getElement("DelApp").text = utilities_Translator.tr("Delete App Config");
	}
	,createProject: function() {
		var _gthis = this;
		ProjectCreator.open(function() {
			khafs_Fs.getContent(EditorUi.cwd + "/pjml.found",function(blob) {
				var out = JSON.parse(blob);
				_gthis.projects = out.list;
			});
		});
	}
	,runProject: function() {
		if(this.selectedItem != null) {
			this.set_visible(false);
			var project = this.selectedItem;
			var path = project.scenes[0];
			var sep = khafs_Fs.sep;
			var firstName = StringTools.replace(path.split(sep)[path.split(sep).length - 1],".json","");
			firstName = StringTools.replace(path.split(sep)[path.split(sep).length - 1],"_json","");
			var _g = 0;
			var _g1 = project.scenes.length;
			while(_g < _g1) {
				var i = _g++;
				path = project.scenes[i];
				this.name = StringTools.replace(path.split(sep)[path.split(sep).length - 1],".json","");
				this.name = StringTools.replace(path.split(sep)[path.split(sep).length - 1],"_json","");
				found_State.addState(this.name,project.scenes[i]);
			}
			EditorUi.projectName = project.name;
			EditorUi.set_projectPath(project.path);
			EditorUi.scenePath = project.scenes[0];
			found_State.set(firstName,($_=found_App.editorui,$bind($_,$_.init)));
		}
	}
	,deleteProject: function(i) {
		var _gthis = this;
		if(i < 0) {
			return;
		}
		var project = this.projects[i];
		khafs_Fs.getContent(EditorUi.cwd + "/pjml.found",function(blob) {
			var out = JSON.parse(blob);
			var toRemove = null;
			var _g = 0;
			var _g1 = out.list;
			while(_g < _g1.length) {
				var proj = _g1[_g];
				++_g;
				if(proj.name == project.name && proj.path == project.path) {
					toRemove = proj;
					continue;
				}
			}
			HxOverrides.remove(out.list,toRemove);
			var data = JSON.stringify(out);
			khafs_Fs.saveContent(EditorUi.cwd + "/pjml.found",data,function() {
				khafs_Fs.deleteDirectory(project.path,true);
				var _g = 0;
				var _g1 = _gthis.projects;
				while(_g < _g1.length) {
					var proj = _g1[_g];
					++_g;
					if(proj.name == project.name && proj.path == project.path) {
						HxOverrides.remove(_gthis.projects,proj);
						break;
					}
				}
				_gthis.redraw();
			});
		});
	}
	,deleteAllProjects: function() {
		khafs_Fs.dbKeys.h = Object.create(null);
		var _g = 0;
		var _g1 = this.projects;
		while(_g < _g1.length) {
			var proj = _g1[_g];
			++_g;
			khafs_Fs.deleteDirectory(proj.path,true);
		}
		khafs_Fs.saveContent(EditorUi.cwd + khafs_Fs.sep + "pjml.found","{\"list\":[]}");
		this.projects = [];
		this.redraw();
	}
	,importProject: function() {
		var _gthis = this;
		khafs_Fs.curDir = EditorUi.cwd;
		khafs_Fs.onInputDone = function(lastPath) {
			if(!StringTools.endsWith(lastPath,".zip")) {
				found_tool_Log.error("Is not a zip file: " + lastPath + " ",{ fileName : "ManagerView.hx", lineNumber : 196, className : "ManagerView", methodName : "importProject"});
				return;
			}
			var p = lastPath.split(khafs_Fs.sep);
			p.pop();
			var path = p.join(khafs_Fs.sep);
			var project = null;
			found_data_Data.getBlob(lastPath,function(b) {
				var input = new haxe_io_BytesInput(b.bytes);
				var entries = haxe_zip_Reader.readZip(input);
				var dirPath = "";
				var _g_head = entries.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var entry = val;
					var data = haxe_zip_Reader.unzip(entry);
					if(data != null) {
						var t = entry.fileName.split(khafs_Fs.sep);
						if(StringTools.endsWith(t.pop(),".prj")) {
							project = JSON.parse(data.toString());
							continue;
						}
						dirPath = t.join(khafs_Fs.sep);
						if(!khafs_Fs.isDirectory(dirPath)) {
							khafs_Fs.createDirectory(dirPath);
						}
						khafs_Fs.saveContent(path + khafs_Fs.sep + entry.fileName,data.toString());
					} else {
						var fname = entry.fileName;
						haxe_Log.trace("Item with name " + fname + " is null at path: " + lastPath,{ fileName : "ManagerView.hx", lineNumber : 221, className : "ManagerView", methodName : "importProject"});
					}
				}
				if(project != null) {
					khafs_Fs.getContent(EditorUi.cwd + khafs_Fs.sep + "pjml.found",function(blob) {
						var out = JSON.parse(blob);
						out.list.push(project);
						khafs_Fs.saveContent(EditorUi.cwd + khafs_Fs.sep + "pjml.found",JSON.stringify(out),function() {
							_gthis.projects.push(project);
							khafs_Fs.deleteFile(lastPath);
							_gthis.redraw();
						});
					});
				} else {
					haxe_Log.trace("Zip did not have a project file. Aborting project creation...\n Project files will still be added to File System",{ fileName : "ManagerView.hx", lineNumber : 237, className : "ManagerView", methodName : "importProject"});
				}
			});
		};
		khafs_Fs.input.click();
	}
	,delConfig: function() {
		khafs_Fs.deleteFile("./config.found");
		utilities_Config.restore();
	}
	,__class__: ManagerView
	,__properties__: $extend(found_trait_internal_CanvasScript.prototype.__properties__,{get_theme:"get_theme"})
});
Math.__name__ = true;
var found__$App_FPS = function() {
	this.fpsHandle = zui_Handle.global.nest(20,null);
	this.lastFps = 0;
	this.lastTime = 0.0;
	this.time = 0.0;
	this.frames = 0;
	this.fps = 0;
};
$hxClasses["found._App.FPS"] = found__$App_FPS;
found__$App_FPS.__name__ = true;
found__$App_FPS.prototype = {
	fps: null
	,frames: null
	,time: null
	,lastTime: null
	,ui: null
	,update: function() {
		var deltaTime = kha_Scheduler.realTime() - this.lastTime;
		this.lastTime = kha_Scheduler.realTime();
		this.time += deltaTime;
		if(this.time >= 1) {
			this.fps = this.frames;
			this.frames = 0;
			this.time = 0;
		}
		return this.fps;
	}
	,lastFps: null
	,fpsHandle: null
	,render: function(canvas,inEditor) {
		if(inEditor == null) {
			inEditor = true;
		}
		if(canvas.get_g2() == null || found_State.active == null || found_State.active.cam == null) {
			return;
		}
		if(this.ui == null) {
			this.ui = new zui_Zui({ font : kha_Assets.fonts.font_default});
		}
		canvas.get_g2().pushTranslation(found_State.active.cam.get_position().x,found_State.active.cam.get_position().y);
		var oldScale = this.ui.ops.scaleFactor;
		var width = 60;
		var height = 20;
		if(inEditor) {
			this.ui.setScale(2.0);
			width *= 2;
			height *= 2;
		}
		this.ui.begin(canvas.get_g2());
		var accentCol = this.ui.t.ACCENT_COL;
		var windowBgColor = this.ui.t.WINDOW_BG_COL;
		this.ui.t.ACCENT_COL = this.ui.t.WINDOW_BG_COL = 0;
		this.fpsHandle.redraws = this.lastFps != this.fps ? 2 : 0;
		if(this.ui.window(this.fpsHandle,0,0,width,height,false)) {
			this.ui.text("Fps: " + this.fps);
		}
		canvas.get_g2().popTransformation();
		this.ui.end();
		this.ui.setScale(oldScale);
		this.ui.t.ACCENT_COL = accentCol;
		this.ui.t.WINDOW_BG_COL = windowBgColor;
	}
	,addFrame: function() {
		this.frames++;
	}
	,__class__: found__$App_FPS
};
var found_App = function(_appReady) {
	_appReady();
	found_Found.backbuffer = kha_Image.createRenderTarget(found_Found.BUFFERWIDTH,found_Found.BUFFERHEIGHT);
	this._imageQuality = found_Found.smooth ? 1 : 0;
	found_State.setup();
	found_App.editorui = new EditorUi();
};
$hxClasses["found.App"] = found_App;
found_App.__name__ = true;
found_App.init = function(_appReady) {
	new found_App(_appReady);
};
found_App.reset = function() {
	found_Scene.ready = false;
	found_App.traitInits = [];
	found_App.traitUpdates = [];
	found_App.traitLateUpdates = [];
	found_App.traitRenders = [];
	found_App.traitRenders2D = [];
	if(found_App.onResets != null) {
		var _g = 0;
		var _g1 = found_App.onResets;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f();
		}
	}
	var _g = 0;
	var _g1 = found_object_Executor.executors;
	while(_g < _g1.length) {
		var exe = _g1[_g];
		++_g;
		var modified = Reflect.field(found_object_Object,exe.field);
		modified = [];
	}
};
found_App.notifyOnAwake = function(f) {
	var _g = 0;
	var _g1 = found_App.traitAwakes;
	while(_g < _g1.length) {
		var func = _g1[_g];
		++_g;
		if(Reflect.compareMethods(func,f)) {
			return;
		}
	}
	found_App.traitAwakes.push(f);
};
found_App.removeAwake = function(f) {
	HxOverrides.remove(found_App.traitAwakes,f);
};
found_App.notifyOnInit = function(f) {
	var _g = 0;
	var _g1 = found_App.traitInits;
	while(_g < _g1.length) {
		var func = _g1[_g];
		++_g;
		if(Reflect.compareMethods(func,f)) {
			return;
		}
	}
	found_App.traitInits.push(f);
};
found_App.removeInit = function(f) {
	HxOverrides.remove(found_App.traitInits,f);
};
found_App.notifyOnUpdate = function(f) {
	var _g = 0;
	var _g1 = found_App.traitUpdates;
	while(_g < _g1.length) {
		var func = _g1[_g];
		++_g;
		if(Reflect.compareMethods(func,f)) {
			return;
		}
	}
	found_App.traitUpdates.push(f);
};
found_App.removeUpdate = function(f) {
	HxOverrides.remove(found_App.traitUpdates,f);
};
found_App.notifyOnLateUpdate = function(f) {
	var _g = 0;
	var _g1 = found_App.traitLateUpdates;
	while(_g < _g1.length) {
		var func = _g1[_g];
		++_g;
		if(Reflect.compareMethods(func,f)) {
			return;
		}
	}
	found_App.traitLateUpdates.push(f);
};
found_App.removeLateUpdate = function(f) {
	HxOverrides.remove(found_App.traitLateUpdates,f);
};
found_App.notifyOnRender = function(f) {
	var _g = 0;
	var _g1 = found_App.traitRenders;
	while(_g < _g1.length) {
		var func = _g1[_g];
		++_g;
		if(Reflect.compareMethods(func,f)) {
			return;
		}
	}
	found_App.traitRenders.push(f);
};
found_App.removeRender = function(f) {
	HxOverrides.remove(found_App.traitRenders,f);
};
found_App.notifyOnRender2D = function(f) {
	var _g = 0;
	var _g1 = found_App.traitRenders2D;
	while(_g < _g1.length) {
		var func = _g1[_g];
		++_g;
		if(Reflect.compareMethods(func,f)) {
			return;
		}
	}
	found_App.traitRenders2D.push(f);
};
found_App.removeRender2D = function(f) {
	HxOverrides.remove(found_App.traitRenders2D,f);
};
found_App.notifyOnReset = function(f) {
	if(found_App.onResets == null) {
		found_App.onResets = [];
	}
	found_App.onResets.push(f);
};
found_App.removeReset = function(f) {
	HxOverrides.remove(found_App.onResets,f);
};
found_App.notifyOnEndFrame = function(f) {
	if(found_App.onEndFrames == null) {
		found_App.onEndFrames = [];
	}
	found_App.onEndFrames.push(f);
};
found_App.removeEndFrame = function(f) {
	HxOverrides.remove(found_App.onEndFrames,f);
};
found_App.prototype = {
	_imageQuality: null
	,update: function(dt) {
		if(found_State.active != null) {
			found_State.active.update(dt);
		}
		found_App.editorui.update(dt);
		if(found_Input.getMouse().down("left") && found_Input.getMouse().moved) {
			found_Found.tileeditor.addTile();
		}
		found_App.frameCounter.update();
		if(found_App.onEndFrames != null) {
			var _g = 0;
			var _g1 = found_App.onEndFrames;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f();
			}
		}
	}
	,render: function(canvas) {
		found_Found.backbuffer.get_g2().begin();
		canvas.get_g2().set_color(found_Found.backgroundcolor);
		canvas.get_g2().fillRect(0,0,found_Found.backbuffer.get_width(),found_Found.backbuffer.get_height());
		if(found_State.active != null) {
			var _this = found_Found.backbuffer.get_g2();
			var trans__00 = 1;
			var trans__10 = 0;
			var trans__20 = -found_State.active.cam.get_position().x;
			var trans__01 = 0;
			var trans__11 = 1;
			var trans__21 = -found_State.active.cam.get_position().y;
			var trans__02 = 0;
			var trans__12 = 0;
			var trans__22 = 1;
			_this.transformationIndex++;
			if(_this.transformationIndex == _this.transformations.length) {
				_this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
			}
			var _this1 = _this.transformations[_this.transformationIndex];
			_this1._00 = trans__00;
			_this1._10 = trans__10;
			_this1._20 = trans__20;
			_this1._01 = trans__01;
			_this1._11 = trans__11;
			_this1._21 = trans__21;
			_this1._02 = trans__02;
			_this1._12 = trans__12;
			_this1._22 = trans__22;
			_this.setTransformation(_this.transformations[_this.transformationIndex]);
			EditorTools.drawGrid(found_Found.backbuffer.get_g2());
			found_Found.backbuffer.get_g2().popTransformation();
			found_State.active.render(found_Found.backbuffer);
		}
		found_Found.backbuffer.get_g2().end();
		found_App.frameCounter.render(found_Found.backbuffer);
		found_App.frameCounter.frames++;
		found_App.editorui.render(found_Found.backbuffer);
		found_Found.tileeditor.render(found_Found.backbuffer);
		if(zui_Popup.show) {
			zui_Popup.render(found_Found.backbuffer.get_g2());
		}
		canvas.get_g2().begin();
		canvas.get_g2().set_imageScaleQuality(this._imageQuality);
		kha_Scaler.scale(found_Found.backbuffer,canvas,kha_System.get_screenRotation());
		canvas.get_g2().end();
	}
	,__class__: found_App
};
var Project = function() {
	found_App.call(this,function() {
	});
};
$hxClasses["Project"] = Project;
Project.__name__ = true;
Project.__super__ = found_App;
Project.prototype = $extend(found_App.prototype,{
	render: function(canvas) {
		found_App.prototype.render.call(this,canvas);
	}
	,__class__: Project
});
var ProjectCreator = function() { };
$hxClasses["ProjectCreator"] = ProjectCreator;
ProjectCreator.__name__ = true;
ProjectCreator.onDone = null;
ProjectCreator.open = function(done) {
	ProjectCreator.onDone = done;
	var _this = found_Found.popupZuiInstance;
	var _this1 = found_Found.popupZuiInstance;
	zui_Popup.showCustom(found_Found.popupZuiInstance,ProjectCreator.projectCreatorPopupDraw,-1,-1,_this.t.ELEMENT_W * _this.ops.scaleFactor * 4 | 0,_this1.t.ELEMENT_W * _this1.ops.scaleFactor * 3 | 0);
};
ProjectCreator.projectCreatorPopupDraw = function(ui) {
	zui_Popup.boxTitle = utilities_Translator.tr("New Project");
	ui.text(utilities_Translator.tr("Project Name"));
	ui.row([0.8,0.1,0.1]);
	ui.textInput(ProjectCreator.nameInputHandle);
	ui.radio(ProjectCreator.typeHandle,0,"2D");
	ui.enabled = false;
	ui.radio(ProjectCreator.typeHandle,1,"3D");
	ui.enabled = true;
	ui.text(utilities_Translator.tr("Location"));
	ui.row([0.75,0.25]);
	ui.text(ProjectCreator.pathInputHandle.text);
	if(ui.button("...")) {
		ProjectCreator.onBrowse();
	}
	ui._y = ui._h - ui.t.BUTTON_H - (zui_Popup.borderW * 2 + zui_Popup.borderOffset);
	ui.row([0.5,0.5]);
	if(ui.button(utilities_Translator.tr("Apply"))) {
		ProjectCreator.createProject();
		zui_Popup.show = false;
		ProjectCreator.nameInputHandle.text = "";
		ProjectCreator.pathInputHandle.text = "";
		ProjectCreator.onDone = function() {
		};
	}
	if(ui.button(utilities_Translator.tr("Cancel"))) {
		zui_Popup.show = false;
		ProjectCreator.nameInputHandle.text = "";
		ProjectCreator.pathInputHandle.text = "";
		ProjectCreator.onDone = function() {
		};
	}
};
ProjectCreator.createProject = function() {
	var p = ProjectCreator.pathInputHandle.text == "" ? "." : ProjectCreator.pathInputHandle.text;
	if(khafs_Fs.isDirectory(p)) {
		var outp = p;
		var type = ProjectCreator.typeHandle.position == 0 ? 0 : 1;
		var projName = ProjectCreator.nameInputHandle.text != "" ? ProjectCreator.nameInputHandle.text : utilities_Translator.tr("Project");
		outp = p + khafs_Fs.sep + projName;
		khafs_Fs.createDirectory(outp);
		ProjectInit.done = ProjectCreator.onDone;
		ProjectInit.run(outp,type,projName);
	}
};
ProjectCreator.onBrowse = function() {
	var done = function(passedPath) {
		if(passedPath != "") {
			ProjectCreator.pathInputHandle.text = passedPath;
		} else {
			ProjectCreator.pathInputHandle.text = ".";
		}
		ProjectCreator.open(ProjectCreator.onDone);
		zui_Popup.show = true;
	};
	FileBrowserDialog.open(done);
};
var ProjectExplorer = function() {
	this.fileExplorerHandle = zui_Handle.global.nest(6,null);
	this.folderExplorerHandle = zui_Handle.global.nest(5,null);
	this.windowHandle2 = zui_Handle.global.nest(4,null);
	this.windowHandle = zui_Handle.global.nest(3,null);
	this.init = false;
	this.defaultPath = "/";
	this.explorerXBrowserW = [0.25,0.75];
	Tab.call(this,utilities_Translator.tr("Project Explorer"));
};
$hxClasses["ProjectExplorer"] = ProjectExplorer;
ProjectExplorer.__name__ = true;
ProjectExplorer.currentPath = null;
ProjectExplorer.__super__ = Tab;
ProjectExplorer.prototype = $extend(Tab.prototype,{
	explorerXBrowserW: null
	,defaultPath: null
	,init: null
	,redraw: function() {
		this.windowHandle.redraws = this.windowHandle2.redraws = 2;
	}
	,openOnSystem: function() {
		khafs_Fs.curDir = EditorUi.projectPath + khafs_Fs.sep + "Assets";
		khafs_Fs.input.click();
	}
	,windowHandle: null
	,windowHandle2: null
	,folderExplorerHandle: null
	,fileExplorerHandle: null
	,render: function(ui) {
		if(!this.init && this.parent != null) {
			this.parent.postRenders.push($bind(this,this.renderFolderExplorer));
			this.parent.postRenders.push($bind(this,this.renderFileExplorer));
			this.init = true;
		}
		var tmp = ui.tab(this.parent.htab,this.name);
	}
	,renderFolderExplorer: function(ui) {
		if(!this.get_active()) {
			return;
		}
		var hoffset = ui.t.BUTTON_H * ui.ops.scaleFactor + ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor | 0;
		if(ui.window(this.windowHandle,this.parent.get_x(),this.parent.get_y() + hoffset,this.parent.get_w() * this.explorerXBrowserW[0] | 0,this.parent.get_h() - hoffset)) {
			if(ui.button(utilities_Translator.tr("Import Assets"))) {
				this.openOnSystem();
			}
			this.folderExplorerHandle.text = ProjectExplorer.currentPath;
			var folder = CustomExt.fileBrowser(ui,this.folderExplorerHandle,true);
			if(this.folderExplorerHandle.changed) {
				ProjectExplorer["currentPath"] = folder;
				this.redraw();
			}
		}
	}
	,renderFileExplorer: function(ui) {
		if(!this.get_active()) {
			return;
		}
		var hoffset = ui.t.BUTTON_H * ui.ops.scaleFactor + ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor | 0;
		var offset = ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor * 2;
		if(ui.window(this.windowHandle2,this.parent.get_x() + (this.parent.get_w() * this.explorerXBrowserW[0] + offset | 0),this.parent.get_y() + hoffset,this.parent.get_w() * this.explorerXBrowserW[1] - offset | 0,this.parent.get_h() - hoffset)) {
			ui.text(ProjectExplorer.currentPath);
			this.fileExplorerHandle.text = ProjectExplorer.currentPath;
			var file = CustomExt.fileBrowser(ui,this.fileExplorerHandle);
			if(this.fileExplorerHandle.changed) {
				ProjectExplorer["currentPath"] = file;
				if(StringTools.endsWith(file,".hx") || StringTools.endsWith(file,".vhx") || StringTools.endsWith(file,".json") || StringTools.endsWith(file,".found")) {
					var trait = { type : StringTools.endsWith(file,".vhx") ? "VisualScript" : "Script", classname : file};
					found_App.editorui.codeView.setDisplayedTrait(trait);
				}
				this.redraw();
			}
		}
	}
	,__class__: ProjectExplorer
});
var ProjectInit = function() { };
$hxClasses["ProjectInit"] = ProjectInit;
ProjectInit.__name__ = true;
ProjectInit.done = null;
ProjectInit.run = function(p_path,type,p_project) {
	if(p_project == null) {
		p_project = "";
	}
	ProjectInit.path = p_path;
	if(type == 0) {
		ProjectInit.project = p_project != "" ? p_project : "found Project";
		ProjectInit.generateProject2d();
	} else {
		ProjectInit.project = p_project != "" ? p_project : "Armory Project";
		ProjectInit.generateProject3d();
	}
};
ProjectInit.generateProject2d = function() {
	if(!khafs_Fs.exists(ProjectInit.path + "/Assets")) {
		khafs_Fs.createDirectory(ProjectInit.path + "/Assets");
	}
	if(!khafs_Fs.exists(ProjectInit.path + "/Shaders")) {
		khafs_Fs.createDirectory(ProjectInit.path + "/Shaders");
	}
	if(!khafs_Fs.exists(ProjectInit.path + "/Sources")) {
		khafs_Fs.createDirectory(ProjectInit.path + "/Sources",ProjectInit.main2d);
	}
	if(!khafs_Fs.exists(ProjectInit.path + "/Sources/Scripts")) {
		khafs_Fs.createDirectory(ProjectInit.path + "/Sources/Scripts");
	}
	if(!khafs_Fs.exists(EditorUi.cwd + "/pjml.found")) {
		khafs_Fs.saveContent(EditorUi.cwd + "/pjml.found","{\"list\":[]}",ProjectInit.createDefaults);
	} else {
		ProjectInit.createDefaults();
	}
};
ProjectInit.createDefaults = function() {
	khafs_Fs.getContent(EditorUi.cwd + "/pjml.found",function(blob) {
		var out = JSON.parse(blob);
		found_data_DataLoader["version"] = found_data_Data.version;
		var scene = found_data_DataLoader.parse(kha_Assets.blobs.default_json.toString());
		scene.name = "Play" + ProjectInit.project;
		var data = found_data_DataLoader.stringify(scene);
		var p = ProjectInit.path + ("/Assets/Play" + ProjectInit.project + ".json");
		khafs_Fs.saveContent(p,data);
		out.list.push({ name : ProjectInit.project, dataVersion : found_data_Data.version, path : ProjectInit.path, scenes : [p], type : 0});
		data = JSON.stringify(out);
		ProjectInit.path = EditorUi.cwd + "/pjml.found";
		khafs_Fs.saveContent(ProjectInit.path,data);
		if(ProjectInit.done != null) {
			ProjectInit.done();
		}
	});
};
ProjectInit.main2d = function() {
	if(!khafs_Fs.exists(ProjectInit.path + "/Sources/Main.hx")) {
		var out = "package;\n\n" + "import found.Found;\n\n" + "class Main {\n" + ("\tpublic static inline var projectName = '" + ProjectInit.project + "';\n") + "\tpublic static function main() {\n" + "\t\tFound.setup({app:Project, title:\"untitled\", width:1920, height:1080});\n" + "\t}\n" + "}";
		khafs_Fs.saveContent(ProjectInit.path + "/Sources/Main.hx",out);
	}
	if(!khafs_Fs.exists(ProjectInit.path + "/Sources/Project.hx")) {
		var out = "package;\n\n" + "import kha.Canvas;\n" + "import found.App;\n" + "import found.State;\n\n" + "class Project extends App {\n" + "\t public function new(){\n" + "\t\tsuper(function(){\n" + ("\t\t\tState.addState(\"play\",\"./" + ProjectInit.project + "/Assets/PlayState.json\");\n") + "\t\t\tState.set(\"play\");\n" + "\t\t});\n" + "\t}\n" + "\t override function render(canvas:Canvas){\n" + "\t\tsuper.render(canvas);\n" + "\t}\n" + "}";
		khafs_Fs.saveContent(ProjectInit.path + "/Sources/Project.hx",out);
	}
};
ProjectInit.generateProject3d = function() {
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var TraitsDialog = function() { };
$hxClasses["TraitsDialog"] = TraitsDialog;
TraitsDialog.__name__ = true;
TraitsDialog.open = function() {
	TraitsDialog.traitsFolderPath = EditorUi.projectPath + "/Sources/Scripts/";
	TraitsDialog.textInputHandle.text = "NewTrait";
	var _this = found_Found.popupZuiInstance;
	var _this1 = found_Found.popupZuiInstance;
	zui_Popup.showCustom(found_Found.popupZuiInstance,TraitsDialog.traitCreationPopupDraw,-1,-1,_this.t.ELEMENT_W * _this.ops.scaleFactor * 4 | 0,_this1.t.ELEMENT_W * _this1.ops.scaleFactor * 3 | 0);
};
TraitsDialog.traitCreationPopupDraw = function(ui) {
	zui_Popup.boxTitle = "Add a trait";
	if(ui.panel(zui_Handle.global.nest(24,{ selected : true}),"Existing Traits",true)) {
		var precompiledTraits = TraitsDialog.loadPrecompiledTraits();
		var userCreatedTraits = TraitsDialog.loadUserCreatedTraits(TraitsDialog.traitsFolderPath);
		TraitsDialog.arrayOfTraits = precompiledTraits.concat(userCreatedTraits);
		var _g = 0;
		var _g1 = TraitsDialog.arrayOfTraits;
		while(_g < _g1.length) {
			var trait = _g1[_g];
			++_g;
			if(ui.button(trait.classname,0)) {
				TraitsDialog.textInputHandle.text = TraitsDialog.getTraitNameFromTraitDef(trait);
				if(trait.type == "Script") {
					TraitsDialog.comboBoxHandle.position = 1;
				} else {
					TraitsDialog.comboBoxHandle.position = 0;
				}
			}
		}
	}
	var border = 2 * zui_Popup.borderW + zui_Popup.borderOffset;
	ui._y -= border * 1.2;
	ui.endElement();
	ui.row([0.6,0.4]);
	ui.textInput(TraitsDialog.textInputHandle,"Script Name");
	var selectedTraitTypeIndex = ui.combo(TraitsDialog.comboBoxHandle,TraitsDialog.traitTypes,"Trait Type");
	if(TraitsDialog.textInputHandle.text != "") {
		var text = TraitsDialog.textInputHandle.text;
		if(TraitsDialog.camelCaseRegex.match(text) && TraitsDialog.camelCaseRegex.matched(0) == text) {
			TraitsDialog.fullFileName = TraitsDialog.traitsFolderPath + TraitsDialog.textInputHandle.text + "." + TraitsDialog.traitTypeExtensions[selectedTraitTypeIndex];
			ui.text(TraitsDialog.fullFileName);
		} else {
			TraitsDialog.fullFileName = "Error: Trait name is invalid. Please enter a trait name that respects camel case.";
			ui.text(TraitsDialog.fullFileName,0,16711680);
		}
	}
	ui.row([0.5,0.5]);
	if(ui.button("Add")) {
		var text = TraitsDialog.textInputHandle.text;
		if(TraitsDialog.camelCaseRegex.match(text) && TraitsDialog.camelCaseRegex.matched(0) == text) {
			var trait = TraitsDialog.findExistingTrait(TraitsDialog.textInputHandle.text,TraitsDialog.arrayOfTraits);
			if(trait != null) {
				TraitsDialog.saveTraitOnCurrentObject(trait);
			} else if(TraitsDialog.traitTypeExtensions[selectedTraitTypeIndex] == "vhx") {
				TraitsDialog.saveNewVisualTrait(TraitsDialog.textInputHandle.text,TraitsDialog.fullFileName);
			} else {
				TraitsDialog.saveNewScriptTrait(TraitsDialog.textInputHandle.text,TraitsDialog.fullFileName);
			}
			zui_Popup.show = false;
		}
	}
	if(ui.button("Cancel")) {
		zui_Popup.show = false;
	}
	ui._y += ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor * 2;
};
TraitsDialog.loadPrecompiledTraits = function() {
	var blob = kha_Assets.blobs.get("listTraits_json");
	var data = JSON.parse(blob.toString());
	if(data.traits != null) {
		return data.traits;
	} else {
		return [];
	}
};
TraitsDialog.loadUserCreatedTraits = function(traitsFolderPath) {
	var arrayOfTraits = [];
	var files = khafs_Fs.readDirectory(traitsFolderPath);
	var _g = 0;
	while(_g < files.length) {
		var file = files[_g];
		++_g;
		var traitType = "";
		var t = file.split(".");
		var fileExtension = t[t.length - 1];
		if(fileExtension == "vhx") {
			traitType = "VisualScript";
		} else {
			traitType = "Script";
		}
		arrayOfTraits.push({ type : traitType, classname : traitsFolderPath + file});
	}
	return arrayOfTraits;
};
TraitsDialog.getTraitNameFromTraitDef = function(trait) {
	var name = "";
	if(trait.type == "VisualScript") {
		var t = trait.classname.split("/");
		name = t[t.length - 1].split(".")[0];
	} else if(trait.type == "Script") {
		if(StringTools.endsWith(trait.classname,".hx")) {
			var t = trait.classname.split("/");
			name = t[t.length - 1].split(".")[0];
		} else {
			var t = trait.classname.split(".");
			name = t[t.length - 1];
		}
	}
	return name;
};
TraitsDialog.findExistingTrait = function(newTraitName,arrayOfTraits) {
	var _g = 0;
	while(_g < arrayOfTraits.length) {
		var trait = arrayOfTraits[_g];
		++_g;
		var traitName = TraitsDialog.getTraitNameFromTraitDef(trait);
		if(traitName == newTraitName) {
			return trait;
		}
	}
	return null;
};
TraitsDialog.saveNewVisualTrait = function(traitName,traitSavePath) {
	var trait = { type : "VisualScript", classname : traitSavePath};
	var visualTraitData = { name : traitName, nodes : null, nodeCanvas : { name : traitName + " Nodes", nodes : [], links : []}};
	var visualTraitDataAsJson = JSON.stringify(visualTraitData);
	if(!khafs_Fs.exists(EditorUi.projectPath + "/Sources/Scripts")) {
		khafs_Fs.createDirectory(EditorUi.projectPath + "/Sources/Scripts");
	}
	khafs_Fs.saveContent(traitSavePath,visualTraitDataAsJson,function() {
		TraitsDialog.saveTraitOnCurrentObject(trait);
	});
};
TraitsDialog.saveNewScriptTrait = function(traitName,traitSavePath) {
	if(!khafs_Fs.exists(traitSavePath)) {
		var trait = { type : "Script", classname : traitSavePath};
		var scriptTraitData = "package;\n\n" + ("class " + traitName + " extends found.Trait {\n") + "\tpublic function new () {\n" + "\t\tsuper();\n\n" + "\t\tnotifyOnInit(function() {\n" + "\t\t\t// Insert code here\n" + "\t\t});\n\n" + "\t\tnotifyOnUpdate(function(dt:Float) {\n" + "\t\t\t// Insert code here\n" + "\t\t});\n" + "\t}\n" + "}";
		if(!khafs_Fs.exists(EditorUi.projectPath + "/Sources/Scripts")) {
			khafs_Fs.createDirectory(EditorUi.projectPath + "/Sources/Scripts");
		}
		khafs_Fs.saveContent(traitSavePath,scriptTraitData,function() {
			TraitsDialog.saveTraitOnCurrentObject(trait);
		});
	}
};
TraitsDialog.saveTraitOnCurrentObject = function(trait) {
	if(found_Trait.hasTrait(trait.classname)) {
		var props = found_Trait.getProps(trait.classname);
		trait.props = props;
	}
	found_Scene.createTraits([trait],found_App.editorui.inspector.get_currentObject());
	var currentObject = found_App.editorui.inspector.get_currentObject();
	if(currentObject.get_raw().traits != null) {
		var alreadyHasTrait = false;
		var _g = 0;
		var _g1 = currentObject.get_raw().traits;
		while(_g < _g1.length) {
			var oldTrait = _g1[_g];
			++_g;
			if(oldTrait.classname == trait.classname) {
				alreadyHasTrait = true;
			}
		}
		if(!alreadyHasTrait) {
			currentObject.get_raw().traits.push(trait);
		}
	} else {
		currentObject.get_raw().traits = [trait];
	}
	found_App.editorui.inspector.setObjectTraitsChanged();
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var echo_util_IDisposable = function() { };
$hxClasses["echo.util.IDisposable"] = echo_util_IDisposable;
echo_util_IDisposable.__name__ = true;
echo_util_IDisposable.__isInterface__ = true;
echo_util_IDisposable.prototype = {
	dispose: null
	,__class__: echo_util_IDisposable
};
var echo_Body = function(options) {
	this.id = ++echo_Body.ids;
	this.active = true;
	this.shapes = [];
	var this1 = new hxmath_math_Vector2Default(0,0);
	this.frame = hxmath_frames_Frame2._new(this1,0);
	var this1 = new hxmath_math_Vector2Default(0,0);
	this.velocity = this1;
	var this1 = new hxmath_math_Vector2Default(0,0);
	this.acceleration = this1;
	var this1 = new hxmath_math_Vector2Default(0,0);
	this.max_velocity = this1;
	var this1 = new hxmath_math_Vector2Default(0,0);
	this.drag = this1;
	this.data = { };
	this.sync_locked = false;
	this.disposed = false;
	this.load_options(options);
};
$hxClasses["echo.Body"] = echo_Body;
echo_Body.__name__ = true;
echo_Body.__interfaces__ = [echo_util_IDisposable];
echo_Body.__properties__ = {get_defaults:"get_defaults"};
echo_Body.defaults = null;
echo_Body.get_defaults = function() {
	return { kinematic : false, mass : 1, x : 0, y : 0, rotation : 0, elasticity : 0, velocity_x : 0, velocity_y : 0, rotational_velocity : 0, max_velocity_x : 0, max_velocity_y : 0, max_velocity_length : 0, max_rotational_velocity : 10000, drag_x : 0, drag_y : 0, drag_length : 0, rotational_drag : 0, gravity_scale : 1};
};
echo_Body.prototype = {
	id: null
	,shapes: null
	,children: null
	,kinematic: null
	,mass: null
	,elasticity: null
	,velocity: null
	,acceleration: null
	,rotational_velocity: null
	,max_velocity: null
	,max_velocity_length: null
	,max_rotational_velocity: null
	,drag: null
	,drag_length: null
	,rotational_drag: null
	,gravity_scale: null
	,inverse_mass: null
	,active: null
	,disposed: null
	,sleeping: null
	,world: null
	,data: null
	,collided: null
	,frame: null
	,dirty: null
	,on_move: null
	,on_rotate: null
	,last_x: null
	,last_y: null
	,last_rotation: null
	,sync_locked: null
	,quadtree_data: null
	,parent_frame: null
	,load_options: function(options) {
		options = echo_util_JSON.copy_fields(options,echo_Body.get_defaults());
		var _g = 0;
		var _g1 = this.shapes;
		while(_g < _g1.length) {
			var shape = _g1[_g];
			++_g;
			shape.put();
		}
		this.shapes.length = 0;
		var value = options.x;
		if(value != this.frame.get_offset().x) {
			var tmp = this.frame;
			var this1 = this.frame.get_offset();
			var y = this.frame.get_offset().y;
			var self = this1;
			self.x = value;
			self.y = y;
			tmp.set_offset(self);
			this.dirty = true;
			if(!this.sync_locked) {
				if(this.shapes.length > 0) {
					var _g = 0;
					var _g1 = this.shapes;
					while(_g < _g1.length) {
						var shape = _g1[_g];
						++_g;
						shape.sync();
					}
				}
				if(this.mass <= 0 && this.world != null) {
					this.bounds(this.quadtree_data.bounds);
					this.world.static_quadtree.update(this.quadtree_data);
				}
				if(this.on_move != null) {
					this.on_move(this.frame.get_offset().x,this.frame.get_offset().y);
				}
			}
		}
		this.frame.get_offset();
		var value = options.y;
		if(value != this.frame.get_offset().y) {
			var tmp = this.frame;
			var self = this.frame.get_offset();
			self.x = this.frame.get_offset().x;
			self.y = value;
			tmp.set_offset(self);
			this.dirty = true;
			if(!this.sync_locked) {
				if(this.shapes.length > 0) {
					var _g = 0;
					var _g1 = this.shapes;
					while(_g < _g1.length) {
						var shape = _g1[_g];
						++_g;
						shape.sync();
					}
				}
				if(this.mass <= 0 && this.world != null) {
					this.bounds(this.quadtree_data.bounds);
					this.world.static_quadtree.update(this.quadtree_data);
				}
				if(this.on_move != null) {
					this.on_move(this.frame.get_offset().x,this.frame.get_offset().y);
				}
			}
		}
		this.frame.get_offset();
		var value = options.rotation;
		if(value != this.frame.get_angleDegrees()) {
			this.frame.set_angleDegrees(value);
			this.dirty = true;
			if(!this.sync_locked) {
				if(this.shapes.length > 0) {
					var _g = 0;
					var _g1 = this.shapes;
					while(_g < _g1.length) {
						var shape = _g1[_g];
						++_g;
						shape.sync();
					}
				}
				if(this.mass <= 0 && this.world != null) {
					this.bounds(this.quadtree_data.bounds);
					this.world.static_quadtree.update(this.quadtree_data);
				}
				if(this.on_rotate != null) {
					this.on_rotate(this.frame.get_angleDegrees());
				}
			}
		}
		this.frame.get_angleDegrees();
		this.kinematic = options.kinematic;
		var value = options.mass;
		if(value < 0.0001) {
			this.mass = this.inverse_mass = 0;
			if(this.mass <= 0 && this.world != null) {
				this.bounds(this.quadtree_data.bounds);
				this.world.static_quadtree.update(this.quadtree_data);
			}
		} else {
			if(this.mass <= 0 && this.world != null) {
				this.world.static_quadtree.remove(this.quadtree_data);
			}
			this.mass = value;
			this.inverse_mass = 1 / this.mass;
		}
		this.elasticity = options.elasticity;
		var self = this.velocity;
		self.x = options.velocity_x;
		self.y = options.velocity_y;
		this.rotational_velocity = options.rotational_velocity;
		var self = this.max_velocity;
		self.x = options.max_velocity_x;
		self.y = options.max_velocity_y;
		this.max_velocity_length = options.max_velocity_length;
		this.max_rotational_velocity = options.max_rotational_velocity;
		var self = this.drag;
		self.x = options.drag_x;
		self.y = options.drag_y;
		this.drag_length = options.drag_length;
		this.rotational_drag = options.rotational_drag;
		this.gravity_scale = options.gravity_scale;
		this.last_x = NaN;
		this.last_y = NaN;
		this.last_rotation = NaN;
		this.dirty = true;
		if(options.shape != null) {
			var s = echo_Shape.get(options.shape);
			var position = -1;
			if(position == null) {
				position = -1;
			}
			if(this.shapes.indexOf(s) == -1) {
				if(position > -1) {
					this.shapes[position] = s;
				} else {
					this.shapes.push(s);
				}
				s.set_parent(this.frame);
				this.dirty = true;
				if(this.mass <= 0 && this.world != null) {
					this.bounds(this.quadtree_data.bounds);
					this.world.static_quadtree.update(this.quadtree_data);
				}
			}
		}
		if(options.shapes != null) {
			var _g = 0;
			var _g1 = options.shapes;
			while(_g < _g1.length) {
				var shape = _g1[_g];
				++_g;
				var s = echo_Shape.get(shape);
				var position = -1;
				if(position == null) {
					position = -1;
				}
				if(this.shapes.indexOf(s) == -1) {
					if(position > -1) {
						this.shapes[position] = s;
					} else {
						this.shapes.push(s);
					}
					s.set_parent(this.frame);
					this.dirty = true;
					if(this.mass <= 0 && this.world != null) {
						this.bounds(this.quadtree_data.bounds);
						this.world.static_quadtree.update(this.quadtree_data);
					}
				}
			}
		}
	}
	,clone: function() {
		var b = new echo_Body();
		var value = this.frame.get_offset().x;
		if(value != b.frame.get_offset().x) {
			var b1 = b.frame;
			var this1 = b.frame.get_offset();
			var y = b.frame.get_offset().y;
			var self = this1;
			self.x = value;
			self.y = y;
			b1.set_offset(self);
			b.dirty = true;
			if(!b.sync_locked) {
				if(b.shapes.length > 0) {
					var _g = 0;
					var _g1 = b.shapes;
					while(_g < _g1.length) {
						var shape = _g1[_g];
						++_g;
						shape.sync();
					}
				}
				if(b.mass <= 0 && b.world != null) {
					b.bounds(b.quadtree_data.bounds);
					b.world.static_quadtree.update(b.quadtree_data);
				}
				if(b.on_move != null) {
					b.on_move(b.frame.get_offset().x,b.frame.get_offset().y);
				}
			}
		}
		b.frame.get_offset();
		var value = this.frame.get_offset().y;
		if(value != b.frame.get_offset().y) {
			var b1 = b.frame;
			var self = b.frame.get_offset();
			self.x = b.frame.get_offset().x;
			self.y = value;
			b1.set_offset(self);
			b.dirty = true;
			if(!b.sync_locked) {
				if(b.shapes.length > 0) {
					var _g = 0;
					var _g1 = b.shapes;
					while(_g < _g1.length) {
						var shape = _g1[_g];
						++_g;
						shape.sync();
					}
				}
				if(b.mass <= 0 && b.world != null) {
					b.bounds(b.quadtree_data.bounds);
					b.world.static_quadtree.update(b.quadtree_data);
				}
				if(b.on_move != null) {
					b.on_move(b.frame.get_offset().x,b.frame.get_offset().y);
				}
			}
		}
		b.frame.get_offset();
		var value = this.frame.get_angleDegrees();
		if(value != b.frame.get_angleDegrees()) {
			b.frame.set_angleDegrees(value);
			b.dirty = true;
			if(!b.sync_locked) {
				if(b.shapes.length > 0) {
					var _g = 0;
					var _g1 = b.shapes;
					while(_g < _g1.length) {
						var shape = _g1[_g];
						++_g;
						shape.sync();
					}
				}
				if(b.mass <= 0 && b.world != null) {
					b.bounds(b.quadtree_data.bounds);
					b.world.static_quadtree.update(b.quadtree_data);
				}
				if(b.on_rotate != null) {
					b.on_rotate(b.frame.get_angleDegrees());
				}
			}
		}
		b.frame.get_angleDegrees();
		b.kinematic = this.kinematic;
		var value = this.mass;
		if(value < 0.0001) {
			b.mass = b.inverse_mass = 0;
			if(b.mass <= 0 && b.world != null) {
				b.bounds(b.quadtree_data.bounds);
				b.world.static_quadtree.update(b.quadtree_data);
			}
		} else {
			if(b.mass <= 0 && b.world != null) {
				b.world.static_quadtree.remove(b.quadtree_data);
			}
			b.mass = value;
			b.inverse_mass = 1 / b.mass;
		}
		b.elasticity = this.elasticity;
		var self = b.velocity;
		self.x = this.velocity.x;
		self.y = this.velocity.y;
		b.rotational_velocity = this.rotational_velocity;
		var self = b.max_velocity;
		self.x = this.max_velocity.x;
		self.y = this.max_velocity.y;
		b.max_velocity_length = this.max_velocity_length;
		b.max_rotational_velocity = this.max_rotational_velocity;
		var self = b.drag;
		self.x = this.drag.x;
		self.y = this.drag.y;
		b.drag_length = this.drag_length;
		b.rotational_drag = this.rotational_drag;
		b.gravity_scale = this.gravity_scale;
		b.last_x = this.last_x;
		b.last_y = this.last_y;
		b.last_rotation = this.last_rotation;
		var _this = this.shapes;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var sc = _this[i].clone();
			sc.set_parent(b.frame);
			result[i] = sc;
		}
		b.shapes = result;
		return b;
	}
	,sync: function() {
	}
	,lock_sync: function() {
		this.sync_locked = true;
	}
	,unlock_sync: function() {
		this.sync_locked = false;
		if(this.dirty) {
			if(this.shapes.length > 0) {
				var _g = 0;
				var _g1 = this.shapes;
				while(_g < _g1.length) {
					var shape = _g1[_g];
					++_g;
					shape.sync();
				}
			}
			if(this.mass <= 0 && this.world != null) {
				this.bounds(this.quadtree_data.bounds);
				this.world.static_quadtree.update(this.quadtree_data);
			}
			if(this.on_move != null) {
				this.on_move(this.frame.get_offset().x,this.frame.get_offset().y);
			}
			if(this.on_rotate != null) {
				this.on_rotate(this.frame.get_angleDegrees());
			}
		}
	}
	,add_child: function(child) {
		if(this.children.indexOf(child) == -1) {
			child.parent_frame = this.frame;
		}
	}
	,sync_children: function() {
		if(this.children.length > 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
			}
		}
	}
	,create_shape: function(options,position) {
		if(position == null) {
			position = -1;
		}
		var s = echo_Shape.get(options);
		var position1 = position;
		if(position1 == null) {
			position1 = -1;
		}
		if(this.shapes.indexOf(s) == -1) {
			if(position1 > -1) {
				this.shapes[position1] = s;
			} else {
				this.shapes.push(s);
			}
			s.set_parent(this.frame);
			this.dirty = true;
			if(this.mass <= 0 && this.world != null) {
				this.bounds(this.quadtree_data.bounds);
				this.world.static_quadtree.update(this.quadtree_data);
			}
		}
		return s;
	}
	,add_shape: function(shape,position) {
		if(position == null) {
			position = -1;
		}
		if(this.shapes.indexOf(shape) == -1) {
			if(position > -1) {
				this.shapes[position] = shape;
			} else {
				this.shapes.push(shape);
			}
			shape.set_parent(this.frame);
			this.dirty = true;
			if(this.mass <= 0 && this.world != null) {
				this.bounds(this.quadtree_data.bounds);
				this.world.static_quadtree.update(this.quadtree_data);
			}
		}
		return shape;
	}
	,remove_shape: function(shape) {
		if(HxOverrides.remove(this.shapes,shape)) {
			shape.set_parent();
			this.dirty = true;
			if(this.mass <= 0 && this.world != null) {
				this.bounds(this.quadtree_data.bounds);
				this.world.static_quadtree.update(this.quadtree_data);
			}
		}
		return shape;
	}
	,sync_shapes: function() {
		if(this.shapes.length > 0) {
			var _g = 0;
			var _g1 = this.shapes;
			while(_g < _g1.length) {
				var shape = _g1[_g];
				++_g;
				shape.sync();
			}
		}
	}
	,clear_shapes: function() {
		var _g = 0;
		var _g1 = this.shapes;
		while(_g < _g1.length) {
			var shape = _g1[_g];
			++_g;
			shape.put();
		}
		this.shapes.length = 0;
	}
	,get_position: function(vec2) {
		if(vec2 == null) {
			var self = this.frame.get_offset();
			var this1 = new hxmath_math_Vector2Default(self.x,self.y);
			return this1;
		} else {
			var x = this.frame.get_offset().x;
			var y = this.frame.get_offset().y;
			var self = vec2;
			self.x = x;
			self.y = y;
			return self;
		}
	}
	,set_position: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != this.frame.get_offset().x) {
			var tmp = this.frame;
			var this1 = this.frame.get_offset();
			var y1 = this.frame.get_offset().y;
			var self = this1;
			self.x = x;
			self.y = y1;
			tmp.set_offset(self);
			this.dirty = true;
			if(!this.sync_locked) {
				if(this.shapes.length > 0) {
					var _g = 0;
					var _g1 = this.shapes;
					while(_g < _g1.length) {
						var shape = _g1[_g];
						++_g;
						shape.sync();
					}
				}
				if(this.mass <= 0 && this.world != null) {
					this.bounds(this.quadtree_data.bounds);
					this.world.static_quadtree.update(this.quadtree_data);
				}
				if(this.on_move != null) {
					this.on_move(this.frame.get_offset().x,this.frame.get_offset().y);
				}
			}
		}
		this.frame.get_offset();
		if(y != this.frame.get_offset().y) {
			var tmp = this.frame;
			var self = this.frame.get_offset();
			self.x = this.frame.get_offset().x;
			self.y = y;
			tmp.set_offset(self);
			this.dirty = true;
			if(!this.sync_locked) {
				if(this.shapes.length > 0) {
					var _g = 0;
					var _g1 = this.shapes;
					while(_g < _g1.length) {
						var shape = _g1[_g];
						++_g;
						shape.sync();
					}
				}
				if(this.mass <= 0 && this.world != null) {
					this.bounds(this.quadtree_data.bounds);
					this.world.static_quadtree.update(this.quadtree_data);
				}
				if(this.on_move != null) {
					this.on_move(this.frame.get_offset().x,this.frame.get_offset().y);
				}
			}
		}
		this.frame.get_offset();
	}
	,push: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.acceleration.x += x;
		this.acceleration.y += y;
	}
	,bounds: function(aabb) {
		if(this.shapes.length == 0) {
			return null;
		}
		var b1 = this.shapes[0].bounds();
		if(this.shapes.length > 1) {
			var _g = 1;
			var _g1 = this.shapes.length;
			while(_g < _g1) {
				var i = _g++;
				var b2 = this.shapes[i].bounds();
				if(b1.min_x > b2.min_x) {
					b1.min_x = b2.min_x;
				}
				if(b1.min_y > b2.min_y) {
					b1.min_y = b2.min_y;
				}
				if(b1.max_x < b2.max_x) {
					b1.max_x = b2.max_x;
				}
				if(b1.max_y < b2.max_y) {
					b1.max_y = b2.max_y;
				}
				b2.put();
			}
		}
		if(aabb == null) {
			var aabb1 = echo_util_AABB._pool.get();
			var x = 0;
			var y = 0;
			var width = 1;
			var height = 0;
			if(height == null) {
				height = 1;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			width *= 0.5;
			height *= 0.5;
			aabb1.min_x = x - width;
			aabb1.min_y = y - height;
			aabb1.max_x = x + width;
			aabb1.max_y = y + height;
			aabb1.pooled = false;
			aabb = aabb1;
		}
		aabb.min_x = b1.min_x;
		aabb.max_x = b1.max_x;
		aabb.min_y = b1.min_y;
		aabb.max_y = b1.max_y;
		b1.put();
		return aabb;
	}
	,remove: function() {
		if(this.world != null) {
			this.world.remove(this);
		}
		if(this.quadtree_data != null && this.quadtree_data.bounds != null) {
			this.quadtree_data.bounds.put();
		}
		return this;
	}
	,is_dynamic: function() {
		return this.mass > 0;
	}
	,is_static: function() {
		return this.mass <= 0;
	}
	,update_static_bounds: function() {
		if(this.mass <= 0 && this.world != null) {
			this.bounds(this.quadtree_data.bounds);
			this.world.static_quadtree.update(this.quadtree_data);
		}
	}
	,moved: function() {
		var tmp;
		var a = this.frame.get_offset().x;
		var diff = 0.001;
		if(diff == null) {
			diff = 0.00001;
		}
		if(Math.abs(a - this.last_x) <= diff) {
			var a = this.frame.get_offset().y;
			var diff = 0.001;
			if(diff == null) {
				diff = 0.00001;
			}
			tmp = !(Math.abs(a - this.last_y) <= diff);
		} else {
			tmp = true;
		}
		if(!tmp) {
			var a = this.frame.get_angleDegrees();
			var diff = 0.001;
			if(diff == null) {
				diff = 0.00001;
			}
			return !(Math.abs(a - this.last_rotation) <= diff);
		} else {
			return true;
		}
	}
	,dispose: function() {
		this.disposed = true;
		if(this.world != null) {
			this.world.remove(this);
		}
		if(this.quadtree_data != null && this.quadtree_data.bounds != null) {
			this.quadtree_data.bounds.put();
		}
		var _g = 0;
		var _g1 = this.shapes;
		while(_g < _g1.length) {
			var shape = _g1[_g];
			++_g;
			shape.put();
		}
		this.shapes = null;
		this.velocity = null;
		this.max_velocity = null;
		this.drag = null;
		this.data = null;
		this.on_move = null;
		this.on_rotate = null;
		this.quadtree_data = null;
	}
	,toString: function() {
		return "Body: {id: " + this.id + ", x: " + this.frame.get_offset().x + ", y: " + this.frame.get_offset().y + ", rotation: " + this.frame.get_angleDegrees() + "}";
	}
	,get_x: function() {
		return this.frame.get_offset().x;
	}
	,get_y: function() {
		return this.frame.get_offset().y;
	}
	,get_rotation: function() {
		return this.frame.get_angleDegrees();
	}
	,get_shape: function() {
		return this.shapes[0];
	}
	,set_x: function(value) {
		if(value != this.frame.get_offset().x) {
			var tmp = this.frame;
			var this1 = this.frame.get_offset();
			var y = this.frame.get_offset().y;
			var self = this1;
			self.x = value;
			self.y = y;
			tmp.set_offset(self);
			this.dirty = true;
			if(!this.sync_locked) {
				if(this.shapes.length > 0) {
					var _g = 0;
					var _g1 = this.shapes;
					while(_g < _g1.length) {
						var shape = _g1[_g];
						++_g;
						shape.sync();
					}
				}
				if(this.mass <= 0 && this.world != null) {
					this.bounds(this.quadtree_data.bounds);
					this.world.static_quadtree.update(this.quadtree_data);
				}
				if(this.on_move != null) {
					this.on_move(this.frame.get_offset().x,this.frame.get_offset().y);
				}
			}
		}
		return this.frame.get_offset().x;
	}
	,set_y: function(value) {
		if(value != this.frame.get_offset().y) {
			var tmp = this.frame;
			var self = this.frame.get_offset();
			self.x = this.frame.get_offset().x;
			self.y = value;
			tmp.set_offset(self);
			this.dirty = true;
			if(!this.sync_locked) {
				if(this.shapes.length > 0) {
					var _g = 0;
					var _g1 = this.shapes;
					while(_g < _g1.length) {
						var shape = _g1[_g];
						++_g;
						shape.sync();
					}
				}
				if(this.mass <= 0 && this.world != null) {
					this.bounds(this.quadtree_data.bounds);
					this.world.static_quadtree.update(this.quadtree_data);
				}
				if(this.on_move != null) {
					this.on_move(this.frame.get_offset().x,this.frame.get_offset().y);
				}
			}
		}
		return this.frame.get_offset().y;
	}
	,set_shape: function(value) {
		if(this.shapes[0] != null) {
			this.shapes[0].put();
		}
		this.shapes[0] = value;
		this.shapes[0].set_parent(this.frame);
		this.dirty = true;
		if(this.mass <= 0 && this.world != null) {
			this.bounds(this.quadtree_data.bounds);
			this.world.static_quadtree.update(this.quadtree_data);
		}
		return this.shapes[0];
	}
	,set_rotation: function(value) {
		if(value != this.frame.get_angleDegrees()) {
			this.frame.set_angleDegrees(value);
			this.dirty = true;
			if(!this.sync_locked) {
				if(this.shapes.length > 0) {
					var _g = 0;
					var _g1 = this.shapes;
					while(_g < _g1.length) {
						var shape = _g1[_g];
						++_g;
						shape.sync();
					}
				}
				if(this.mass <= 0 && this.world != null) {
					this.bounds(this.quadtree_data.bounds);
					this.world.static_quadtree.update(this.quadtree_data);
				}
				if(this.on_rotate != null) {
					this.on_rotate(this.frame.get_angleDegrees());
				}
			}
		}
		return this.frame.get_angleDegrees();
	}
	,set_mass: function(value) {
		if(value < 0.0001) {
			this.mass = this.inverse_mass = 0;
			if(this.mass <= 0 && this.world != null) {
				this.bounds(this.quadtree_data.bounds);
				this.world.static_quadtree.update(this.quadtree_data);
			}
		} else {
			if(this.mass <= 0 && this.world != null) {
				this.world.static_quadtree.remove(this.quadtree_data);
			}
			this.mass = value;
			this.inverse_mass = 1 / this.mass;
		}
		return this.mass;
	}
	,object: null
	,__class__: echo_Body
	,__properties__: {set_rotation:"set_rotation",get_rotation:"get_rotation",set_mass:"set_mass",set_shape:"set_shape",get_shape:"get_shape",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var echo_Collisions = function() { };
$hxClasses["echo.Collisions"] = echo_Collisions;
echo_Collisions.__name__ = true;
echo_Collisions.update_quadtree = function(world) {
	var _g = 0;
	var _g1 = world.members;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(!b.disposed) {
			b.collided = false;
			var _g2 = 0;
			var _g3 = b.shapes;
			while(_g2 < _g3.length) {
				var shape = _g3[_g2];
				++_g2;
				shape.collided = false;
				if(shape.type == 0) {
					var r = shape;
					if(r.transformed_rect != null) {
						r.transformed_rect.collided = false;
					}
				}
			}
			if(b.active && b.mass > 0 && b.dirty) {
				if(b.quadtree_data.bounds == null) {
					b.quadtree_data.bounds = b.bounds();
				} else {
					b.bounds(b.quadtree_data.bounds);
				}
				world.quadtree.update(b.quadtree_data);
			}
			b.dirty = false;
		}
	}
};
echo_Collisions.query = function(world,listeners) {
	echo_Collisions.update_quadtree(world);
	var members = listeners == null ? world.listeners.members : listeners.members;
	var _g = 0;
	while(_g < members.length) {
		var listener = members[_g];
		++_g;
		listener.quadtree_results.length = 0;
		var _g1 = listener.a;
		switch(_g1._hx_index) {
		case 0:
			var ba = _g1.v;
			var _g2 = listener.b;
			switch(_g2._hx_index) {
			case 0:
				var bb = _g2.v;
				var col = echo_Collisions.body_and_body(ba,bb);
				if(col != null) {
					listener.quadtree_results.push(col);
				}
				break;
			case 1:
				var ab = _g2.v;
				echo_Collisions.body_and_bodies(ba,ab,world,listener.quadtree_results,world.quadtree);
				break;
			}
			break;
		case 1:
			var aa = _g1.v;
			var _g3 = listener.b;
			switch(_g3._hx_index) {
			case 0:
				var bb1 = _g3.v;
				echo_Collisions.body_and_bodies(bb1,aa,world,listener.quadtree_results,world.quadtree);
				break;
			case 1:
				var ab1 = _g3.v;
				echo_Collisions.bodies_and_bodies(aa,ab1,world,listener.quadtree_results,world.quadtree);
				break;
			}
			break;
		}
		var _g4 = 0;
		var _g5 = listener.last_collisions;
		while(_g4 < _g5.length) {
			var collision = _g5[_g4];
			++_g4;
			collision.put();
		}
		listener.last_collisions = listener.collisions.slice();
		listener.collisions.length = 0;
		var _g6 = 0;
		var _g7 = listener.quadtree_results;
		while(_g6 < _g7.length) {
			var result = _g7[_g6];
			++_g6;
			if(result.a.disposed || result.b.disposed) {
				result.put();
				continue;
			}
			if(result.a.id == result.b.id) {
				result.put();
				continue;
			}
			var flag = false;
			var _g8 = 0;
			var _g9 = listener.collisions;
			while(_g8 < _g9.length) {
				var collision1 = _g9[_g8];
				++_g8;
				if(collision1.a.id == result.a.id && collision1.b.id == result.b.id || collision1.b.id == result.a.id && collision1.a.id == result.b.id) {
					flag = true;
					break;
				}
			}
			if(flag) {
				result.put();
				continue;
			}
			if(result.a.shapes.length == 1 && result.b.shapes.length == 1) {
				var col1 = result.a.shapes[0].collides(result.b.shapes[0]);
				if(col1 != null) {
					result.data.push(col1);
				}
			} else {
				var sa = result.a.shapes;
				var _g10 = 0;
				var _g11 = sa.length;
				while(_g10 < _g11) {
					var i = _g10++;
					var sb = result.b.shapes;
					var b1 = sa[i].bounds();
					var _g12 = 0;
					var _g13 = sb.length;
					while(_g12 < _g13) {
						var j = _g12++;
						var b2 = sb[j].bounds();
						if(b1.min_x < b2.max_x && b1.max_x >= b2.min_x && b1.min_y < b2.max_y && b1.max_y >= b2.min_y) {
							var col2 = sa[i].collides(sb[j]);
							if(col2 != null) {
								result.data.push(col2);
							}
						}
						b2.put();
					}
					b1.put();
				}
			}
			if(result.data.length == 0) {
				result.put();
				continue;
			}
			if(listener.condition != null) {
				if(!listener.condition(result.a,result.b,result.data) || result.a.disposed || result.b.disposed) {
					result.put();
					continue;
				}
			}
			var _g14 = 0;
			var _g15 = result.data;
			while(_g14 < _g15.length) {
				var data = _g15[_g14];
				++_g14;
				data.sa.collided = data.sb.collided = true;
			}
			result.a.collided = result.b.collided = true;
			listener.collisions.push(result);
		}
	}
};
echo_Collisions.notify = function(world,listeners) {
	var members = listeners == null ? world.listeners.members : listeners.members;
	var _g = 0;
	while(_g < members.length) {
		var listener = members[_g];
		++_g;
		if(listener.enter != null || listener.stay != null) {
			var _g1 = 0;
			var _g2 = listener.collisions;
			while(_g1 < _g2.length) {
				var c = [_g2[_g1]];
				++_g1;
				if(!c[0].a.disposed && !c[0].b.disposed) {
					if(listener.enter != null && Lambda.find(listener.last_collisions,(function(c) {
						return function(f) {
							if(!(f.a == c[0].a && f.b == c[0].b)) {
								if(f.a == c[0].b) {
									return f.b == c[0].a;
								} else {
									return false;
								}
							} else {
								return true;
							}
						};
					})(c)) == null) {
						listener.enter(c[0].a,c[0].b,c[0].data);
					} else if(listener.stay != null) {
						listener.stay(c[0].a,c[0].b,c[0].data);
					}
				}
			}
		}
		if(listener.exit != null) {
			var _g3 = 0;
			var _g4 = listener.last_collisions;
			while(_g3 < _g4.length) {
				var lc = [_g4[_g3]];
				++_g3;
				if(!lc[0].a.disposed && !lc[0].b.disposed && Lambda.find(listener.collisions,(function(lc) {
					return function(f) {
						if(!(f.a == lc[0].a && f.b == lc[0].b)) {
							if(f.a == lc[0].b) {
								return f.b == lc[0].a;
							} else {
								return false;
							}
						} else {
							return true;
						}
					};
				})(lc)) == null) {
					listener.exit(lc[0].a,lc[0].b);
				}
			}
		}
	}
};
echo_Collisions.bodies_and_bodies = function(a,b,world,results,quadtree) {
	if(a.length == 0 || b.length == 0) {
		return;
	}
	var _g = 0;
	while(_g < a.length) {
		var body = a[_g];
		++_g;
		if(!body.disposed && body.active && body.mass > 0) {
			echo_Collisions.body_and_bodies(body,b,world,results,quadtree);
		}
	}
};
echo_Collisions.body_and_bodies = function(body,bodies,world,results,quadtree) {
	if(!body.disposed && body.shapes.length == 0 || !body.active || body.mass <= 0) {
		return;
	}
	var bounds = body.bounds();
	echo_Collisions.qr.length = 0;
	echo_Collisions.sqr.length = 0;
	quadtree.query(bounds,echo_Collisions.qr);
	world.static_quadtree.query(bounds,echo_Collisions.sqr);
	var _g = 0;
	while(_g < bodies.length) {
		var member = bodies[_g];
		++_g;
		if(member.disposed) {
			continue;
		}
		var _g1 = 0;
		var _g2 = member.mass > 0 ? echo_Collisions.qr : echo_Collisions.sqr;
		while(_g1 < _g2.length) {
			var result = _g2[_g1];
			++_g1;
			if(result.id == member.id) {
				var c = echo_data_Collision._pool.get();
				c.a = body;
				c.b = member;
				c.data.length = 0;
				c.pooled = false;
				results.push(c);
			}
		}
	}
	bounds.put();
};
echo_Collisions.body_and_body = function(a,b) {
	if(a.disposed || b.disposed || a.shapes.length == 0 || b.shapes.length == 0 || !a.active || !b.active || a == b || a.mass <= 0 && b.mass <= 0) {
		return null;
	}
	var ab = a.bounds();
	var bb = b.bounds();
	var col = ab.min_x < bb.max_x && ab.max_x >= bb.min_x && ab.min_y < bb.max_y && ab.max_y >= bb.min_y;
	ab.put();
	bb.put();
	if(col) {
		var c = echo_data_Collision._pool.get();
		c.a = a;
		c.b = b;
		c.data.length = 0;
		c.pooled = false;
		return c;
	} else {
		return null;
	}
};
var echo_Listeners = function(members) {
	this.members = members == null ? [] : members;
};
$hxClasses["echo.Listeners"] = echo_Listeners;
echo_Listeners.__name__ = true;
echo_Listeners.__interfaces__ = [echo_util_IDisposable];
echo_Listeners.prototype = {
	members: null
	,add: function(a,b,options) {
		options = echo_util_JSON.copy_fields(options,echo_Listener.get_defaults());
		var listener = new echo_Listener(a,b,options.separate,[],[],null,null,null,null,[],options.percent_correction,options.correction_threshold);
		if(options.enter != null) {
			listener.enter = options.enter;
		}
		if(options.stay != null) {
			listener.stay = options.stay;
		}
		if(options.exit != null) {
			listener.exit = options.exit;
		}
		if(options.condition != null) {
			listener.condition = options.condition;
		}
		this.members.push(listener);
		return listener;
	}
	,remove: function(listener) {
		HxOverrides.remove(this.members,listener);
		return listener;
	}
	,clear: function() {
		this.members.length = 0;
	}
	,dispose: function() {
		this.members = null;
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.members);
	}
	,__class__: echo_Listeners
};
var echo_Echo = $hx_exports["echo"]["Echo"] = function() { };
$hxClasses["echo.Echo"] = echo_Echo;
echo_Echo.__name__ = true;
echo_Echo.start = function(options) {
	return new echo_World(options);
};
echo_Echo.make = function(world,options) {
	return world.add(new echo_Body(options));
};
echo_Echo.listen = function(world,a,b,options) {
	if(a == null) {
		if(b == null) {
			return world.listeners.add(haxe_ds_Either.Right(world.members),haxe_ds_Either.Right(world.members),options);
		} else {
			return world.listeners.add(b,b,options);
		}
	}
	if(b == null) {
		return world.listeners.add(a,a,options);
	}
	return world.listeners.add(a,b,options);
};
echo_Echo.check = function(world,a,b,options) {
	echo_Echo.listeners.clear();
	if(a == null && b == null) {
		echo_Echo.listeners.add(haxe_ds_Either.Right(world.members),haxe_ds_Either.Right(world.members),options);
	} else if(a == null) {
		echo_Echo.listeners.add(b,b,options);
	} else if(b == null) {
		echo_Echo.listeners.add(a,a,options);
	} else {
		echo_Echo.listeners.add(a,b,options);
	}
	echo_Collisions.query(world,echo_Echo.listeners);
	echo_Physics.separate(world,echo_Echo.listeners);
	echo_Collisions.notify(world,echo_Echo.listeners);
};
echo_Echo.step = function(world,dt) {
	if(world.history != null) {
		var world1 = world.history;
		var _g = [];
		var _g1 = 0;
		var _g2 = world.members;
		while(_g1 < _g2.length) {
			var b = _g2[_g1];
			++_g1;
			_g.push(new echo_data_BodyState(b.id,b.frame.get_offset().x,b.frame.get_offset().y,b.frame.get_angleDegrees(),b.velocity,b.acceleration,b.rotational_velocity));
		}
		world1.add(_g);
	}
	var fdt = dt / world.iterations;
	var _g = 0;
	var _g1 = world.iterations;
	while(_g < _g1) {
		var i = _g++;
		echo_Physics.step(world,fdt);
		echo_Collisions.query(world);
		echo_Physics.separate(world);
		echo_Collisions.notify(world);
	}
};
echo_Echo.linecast_floats = function(x,y,dx,dy,test) {
	var x1 = x;
	var y1 = y;
	var dx1 = dx;
	var dy1 = dy;
	if(dy1 == null) {
		dy1 = 1;
	}
	if(dx1 == null) {
		dx1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var line = echo_Line._pool.get();
	var x = x1;
	var y = y1;
	var dx = dx1;
	var dy = dy1;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var self = line.start;
	self.x = x;
	self.y = y;
	var self = line.end;
	self.x = dx;
	self.y = dy;
	line.pooled = false;
	var line1 = line;
	var closest = null;
	var min_x = Math.min(line1.start.x,line1.end.x);
	var min_y = Math.min(line1.start.y,line1.end.y);
	var max_x = Math.max(line1.start.x,line1.end.x);
	var max_y = Math.max(line1.start.y,line1.end.y);
	var aabb = echo_util_AABB._pool.get();
	aabb.min_x = min_x;
	aabb.max_x = max_x;
	aabb.min_y = min_y;
	aabb.max_y = max_y;
	aabb.pooled = false;
	var lb = aabb;
	var _g = test;
	switch(_g._hx_index) {
	case 0:
		var body = _g.v;
		var bb = body.bounds();
		if(lb.min_x < bb.max_x && lb.max_x >= bb.min_x && lb.min_y < bb.max_y && lb.max_y >= bb.min_y) {
			var _g1 = 0;
			var _g2 = body.shapes.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var result = body.shapes[i].intersect(line1);
				if(result != null) {
					if(closest == null) {
						var i1 = echo_data_Intersection._pool.get();
						i1.line = line1;
						i1.body = body;
						i1.data.length = 0;
						i1.pooled = false;
						closest = i1;
					}
					closest.data.push(result);
				}
			}
		}
		bb.put();
		break;
	case 1:
		var arr = _g.v;
		var _g = 0;
		while(_g < arr.length) {
			var body = arr[_g];
			++_g;
			if(body == null) {
				continue;
			}
			var bb = body.bounds();
			var i = echo_data_Intersection._pool.get();
			i.line = line1;
			i.body = body;
			i.data.length = 0;
			i.pooled = false;
			var temp = i;
			if(lb.min_x < bb.max_x && lb.max_x >= bb.min_x && lb.min_y < bb.max_y && lb.max_y >= bb.min_y) {
				var _g1 = 0;
				var _g2 = body.shapes.length;
				while(_g1 < _g2) {
					var i1 = _g1++;
					var result = body.shapes[i1].intersect(line1);
					if(result != null) {
						temp.data.push(result);
					}
				}
			}
			bb.put();
			var tmp;
			if(temp.data.length > 0) {
				if(closest != null) {
					var tmp1;
					if(closest.data.length == 0) {
						tmp1 = null;
					} else if(closest.data.length == 1) {
						tmp1 = closest.data[0];
					} else {
						var closest1 = closest.data[0];
						var _g3 = 1;
						var _g4 = closest.data.length;
						while(_g3 < _g4) {
							var i2 = _g3++;
							if(closest.data[i2] != null && closest.data[i2].distance < closest1.distance) {
								closest1 = closest.data[i2];
							}
						}
						tmp1 = closest1;
					}
					var tmp2 = tmp1.distance;
					var tmp3;
					if(temp.data.length == 0) {
						tmp3 = null;
					} else if(temp.data.length == 1) {
						tmp3 = temp.data[0];
					} else {
						var closest2 = temp.data[0];
						var _g5 = 1;
						var _g6 = temp.data.length;
						while(_g5 < _g6) {
							var i3 = _g5++;
							if(temp.data[i3] != null && temp.data[i3].distance < closest2.distance) {
								closest2 = temp.data[i3];
							}
						}
						tmp3 = closest2;
					}
					tmp = tmp2 > tmp3.distance;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				if(closest != null) {
					closest.put();
				}
				closest = temp;
			} else {
				temp.put();
			}
		}
		break;
	}
	lb.put();
	var result = closest;
	if(!line1.pooled) {
		line1.pooled = true;
		echo_Line._pool.put_unsafe(line1);
	}
	return result;
};
echo_Echo.linecast_vector = function(start,angle,length,test) {
	var line = echo_Line._pool.get();
	line.set_from_vector(start,angle,length);
	line.pooled = false;
	var line1 = line;
	var closest = null;
	var min_x = Math.min(line1.start.x,line1.end.x);
	var min_y = Math.min(line1.start.y,line1.end.y);
	var max_x = Math.max(line1.start.x,line1.end.x);
	var max_y = Math.max(line1.start.y,line1.end.y);
	var aabb = echo_util_AABB._pool.get();
	aabb.min_x = min_x;
	aabb.max_x = max_x;
	aabb.min_y = min_y;
	aabb.max_y = max_y;
	aabb.pooled = false;
	var lb = aabb;
	var _g = test;
	switch(_g._hx_index) {
	case 0:
		var body = _g.v;
		var bb = body.bounds();
		if(lb.min_x < bb.max_x && lb.max_x >= bb.min_x && lb.min_y < bb.max_y && lb.max_y >= bb.min_y) {
			var _g1 = 0;
			var _g2 = body.shapes.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var result = body.shapes[i].intersect(line1);
				if(result != null) {
					if(closest == null) {
						var i1 = echo_data_Intersection._pool.get();
						i1.line = line1;
						i1.body = body;
						i1.data.length = 0;
						i1.pooled = false;
						closest = i1;
					}
					closest.data.push(result);
				}
			}
		}
		bb.put();
		break;
	case 1:
		var arr = _g.v;
		var _g = 0;
		while(_g < arr.length) {
			var body = arr[_g];
			++_g;
			if(body == null) {
				continue;
			}
			var bb = body.bounds();
			var i = echo_data_Intersection._pool.get();
			i.line = line1;
			i.body = body;
			i.data.length = 0;
			i.pooled = false;
			var temp = i;
			if(lb.min_x < bb.max_x && lb.max_x >= bb.min_x && lb.min_y < bb.max_y && lb.max_y >= bb.min_y) {
				var _g1 = 0;
				var _g2 = body.shapes.length;
				while(_g1 < _g2) {
					var i1 = _g1++;
					var result = body.shapes[i1].intersect(line1);
					if(result != null) {
						temp.data.push(result);
					}
				}
			}
			bb.put();
			var tmp;
			if(temp.data.length > 0) {
				if(closest != null) {
					var tmp1;
					if(closest.data.length == 0) {
						tmp1 = null;
					} else if(closest.data.length == 1) {
						tmp1 = closest.data[0];
					} else {
						var closest1 = closest.data[0];
						var _g3 = 1;
						var _g4 = closest.data.length;
						while(_g3 < _g4) {
							var i2 = _g3++;
							if(closest.data[i2] != null && closest.data[i2].distance < closest1.distance) {
								closest1 = closest.data[i2];
							}
						}
						tmp1 = closest1;
					}
					var tmp2 = tmp1.distance;
					var tmp3;
					if(temp.data.length == 0) {
						tmp3 = null;
					} else if(temp.data.length == 1) {
						tmp3 = temp.data[0];
					} else {
						var closest2 = temp.data[0];
						var _g5 = 1;
						var _g6 = temp.data.length;
						while(_g5 < _g6) {
							var i3 = _g5++;
							if(temp.data[i3] != null && temp.data[i3].distance < closest2.distance) {
								closest2 = temp.data[i3];
							}
						}
						tmp3 = closest2;
					}
					tmp = tmp2 > tmp3.distance;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				if(closest != null) {
					closest.put();
				}
				closest = temp;
			} else {
				temp.put();
			}
		}
		break;
	}
	lb.put();
	var result = closest;
	if(!line1.pooled) {
		line1.pooled = true;
		echo_Line._pool.put_unsafe(line1);
	}
	return result;
};
echo_Echo.linecast_vectors = function(start,end,test) {
	var x = start.x;
	var y = start.y;
	var dx = end.x;
	var dy = end.y;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var line = echo_Line._pool.get();
	var x1 = x;
	var y1 = y;
	var dx1 = dx;
	var dy1 = dy;
	if(dy1 == null) {
		dy1 = 1;
	}
	if(dx1 == null) {
		dx1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var self = line.start;
	self.x = x1;
	self.y = y1;
	var self = line.end;
	self.x = dx1;
	self.y = dy1;
	line.pooled = false;
	var line1 = line;
	var closest = null;
	var min_x = Math.min(line1.start.x,line1.end.x);
	var min_y = Math.min(line1.start.y,line1.end.y);
	var max_x = Math.max(line1.start.x,line1.end.x);
	var max_y = Math.max(line1.start.y,line1.end.y);
	var aabb = echo_util_AABB._pool.get();
	aabb.min_x = min_x;
	aabb.max_x = max_x;
	aabb.min_y = min_y;
	aabb.max_y = max_y;
	aabb.pooled = false;
	var lb = aabb;
	var _g = test;
	switch(_g._hx_index) {
	case 0:
		var body = _g.v;
		var bb = body.bounds();
		if(lb.min_x < bb.max_x && lb.max_x >= bb.min_x && lb.min_y < bb.max_y && lb.max_y >= bb.min_y) {
			var _g1 = 0;
			var _g2 = body.shapes.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var result = body.shapes[i].intersect(line1);
				if(result != null) {
					if(closest == null) {
						var i1 = echo_data_Intersection._pool.get();
						i1.line = line1;
						i1.body = body;
						i1.data.length = 0;
						i1.pooled = false;
						closest = i1;
					}
					closest.data.push(result);
				}
			}
		}
		bb.put();
		break;
	case 1:
		var arr = _g.v;
		var _g = 0;
		while(_g < arr.length) {
			var body = arr[_g];
			++_g;
			if(body == null) {
				continue;
			}
			var bb = body.bounds();
			var i = echo_data_Intersection._pool.get();
			i.line = line1;
			i.body = body;
			i.data.length = 0;
			i.pooled = false;
			var temp = i;
			if(lb.min_x < bb.max_x && lb.max_x >= bb.min_x && lb.min_y < bb.max_y && lb.max_y >= bb.min_y) {
				var _g1 = 0;
				var _g2 = body.shapes.length;
				while(_g1 < _g2) {
					var i1 = _g1++;
					var result = body.shapes[i1].intersect(line1);
					if(result != null) {
						temp.data.push(result);
					}
				}
			}
			bb.put();
			var tmp;
			if(temp.data.length > 0) {
				if(closest != null) {
					var tmp1;
					if(closest.data.length == 0) {
						tmp1 = null;
					} else if(closest.data.length == 1) {
						tmp1 = closest.data[0];
					} else {
						var closest1 = closest.data[0];
						var _g3 = 1;
						var _g4 = closest.data.length;
						while(_g3 < _g4) {
							var i2 = _g3++;
							if(closest.data[i2] != null && closest.data[i2].distance < closest1.distance) {
								closest1 = closest.data[i2];
							}
						}
						tmp1 = closest1;
					}
					var tmp2 = tmp1.distance;
					var tmp3;
					if(temp.data.length == 0) {
						tmp3 = null;
					} else if(temp.data.length == 1) {
						tmp3 = temp.data[0];
					} else {
						var closest2 = temp.data[0];
						var _g5 = 1;
						var _g6 = temp.data.length;
						while(_g5 < _g6) {
							var i3 = _g5++;
							if(temp.data[i3] != null && temp.data[i3].distance < closest2.distance) {
								closest2 = temp.data[i3];
							}
						}
						tmp3 = closest2;
					}
					tmp = tmp2 > tmp3.distance;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				if(closest != null) {
					closest.put();
				}
				closest = temp;
			} else {
				temp.put();
			}
		}
		break;
	}
	lb.put();
	var result = closest;
	if(!line1.pooled) {
		line1.pooled = true;
		echo_Line._pool.put_unsafe(line1);
	}
	return result;
};
echo_Echo.linecast = function(line,test) {
	var closest = null;
	var min_x = Math.min(line.start.x,line.end.x);
	var min_y = Math.min(line.start.y,line.end.y);
	var max_x = Math.max(line.start.x,line.end.x);
	var max_y = Math.max(line.start.y,line.end.y);
	var aabb = echo_util_AABB._pool.get();
	aabb.min_x = min_x;
	aabb.max_x = max_x;
	aabb.min_y = min_y;
	aabb.max_y = max_y;
	aabb.pooled = false;
	var lb = aabb;
	var _g = test;
	switch(_g._hx_index) {
	case 0:
		var body = _g.v;
		var bb = body.bounds();
		if(lb.min_x < bb.max_x && lb.max_x >= bb.min_x && lb.min_y < bb.max_y && lb.max_y >= bb.min_y) {
			var _g1 = 0;
			var _g2 = body.shapes.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var result = body.shapes[i].intersect(line);
				if(result != null) {
					if(closest == null) {
						var i1 = echo_data_Intersection._pool.get();
						i1.line = line;
						i1.body = body;
						i1.data.length = 0;
						i1.pooled = false;
						closest = i1;
					}
					closest.data.push(result);
				}
			}
		}
		bb.put();
		break;
	case 1:
		var arr = _g.v;
		var _g = 0;
		while(_g < arr.length) {
			var body = arr[_g];
			++_g;
			if(body == null) {
				continue;
			}
			var bb = body.bounds();
			var i = echo_data_Intersection._pool.get();
			i.line = line;
			i.body = body;
			i.data.length = 0;
			i.pooled = false;
			var temp = i;
			if(lb.min_x < bb.max_x && lb.max_x >= bb.min_x && lb.min_y < bb.max_y && lb.max_y >= bb.min_y) {
				var _g1 = 0;
				var _g2 = body.shapes.length;
				while(_g1 < _g2) {
					var i1 = _g1++;
					var result = body.shapes[i1].intersect(line);
					if(result != null) {
						temp.data.push(result);
					}
				}
			}
			bb.put();
			var tmp;
			if(temp.data.length > 0) {
				if(closest != null) {
					var tmp1;
					if(closest.data.length == 0) {
						tmp1 = null;
					} else if(closest.data.length == 1) {
						tmp1 = closest.data[0];
					} else {
						var closest1 = closest.data[0];
						var _g3 = 1;
						var _g4 = closest.data.length;
						while(_g3 < _g4) {
							var i2 = _g3++;
							if(closest.data[i2] != null && closest.data[i2].distance < closest1.distance) {
								closest1 = closest.data[i2];
							}
						}
						tmp1 = closest1;
					}
					var tmp2 = tmp1.distance;
					var tmp3;
					if(temp.data.length == 0) {
						tmp3 = null;
					} else if(temp.data.length == 1) {
						tmp3 = temp.data[0];
					} else {
						var closest2 = temp.data[0];
						var _g5 = 1;
						var _g6 = temp.data.length;
						while(_g5 < _g6) {
							var i3 = _g5++;
							if(temp.data[i3] != null && temp.data[i3].distance < closest2.distance) {
								closest2 = temp.data[i3];
							}
						}
						tmp3 = closest2;
					}
					tmp = tmp2 > tmp3.distance;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				if(closest != null) {
					closest.put();
				}
				closest = temp;
			} else {
				temp.put();
			}
		}
		break;
	}
	lb.put();
	return closest;
};
echo_Echo.linecast_all = function(line,test) {
	var intersections = [];
	var min_x = Math.min(line.start.x,line.end.x);
	var min_y = Math.min(line.start.y,line.end.y);
	var max_x = Math.max(line.start.x,line.end.x);
	var max_y = Math.max(line.start.y,line.end.y);
	var aabb = echo_util_AABB._pool.get();
	aabb.min_x = min_x;
	aabb.max_x = max_x;
	aabb.min_y = min_y;
	aabb.max_y = max_y;
	aabb.pooled = false;
	var lb = aabb;
	var _g = test;
	switch(_g._hx_index) {
	case 0:
		var body = _g.v;
		var i = echo_data_Intersection._pool.get();
		i.line = line;
		i.body = body;
		i.data.length = 0;
		i.pooled = false;
		var temp = i;
		var bb = body.bounds();
		if(lb.min_x < bb.max_x && lb.max_x >= bb.min_x && lb.min_y < bb.max_y && lb.max_y >= bb.min_y) {
			var _g1 = 0;
			var _g2 = body.shapes.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var result = body.shapes[i].intersect(line);
				if(result != null) {
					temp.data.push(result);
				}
			}
		}
		bb.put();
		if(temp.data.length > 0) {
			intersections.push(temp);
		} else {
			temp.put();
		}
		break;
	case 1:
		var arr = _g.v;
		var _g = 0;
		while(_g < arr.length) {
			var body = arr[_g];
			++_g;
			if(body == null) {
				continue;
			}
			var bb = body.bounds();
			var i = echo_data_Intersection._pool.get();
			i.line = line;
			i.body = body;
			i.data.length = 0;
			i.pooled = false;
			var temp = i;
			if(lb.min_x < bb.max_x && lb.max_x >= bb.min_x && lb.min_y < bb.max_y && lb.max_y >= bb.min_y) {
				var _g1 = 0;
				var _g2 = body.shapes.length;
				while(_g1 < _g2) {
					var i1 = _g1++;
					var result = body.shapes[i1].intersect(line);
					if(result != null) {
						temp.data.push(result);
					}
				}
			}
			bb.put();
			if(temp.data.length > 0) {
				intersections.push(temp);
			} else {
				temp.put();
			}
		}
		break;
	}
	lb.put();
	return intersections;
};
echo_Echo.undo = function(world) {
	if(world.history != null) {
		var state = world.history.undo();
		if(state != null) {
			var _g = 0;
			while(_g < state.length) {
				var item = state[_g];
				++_g;
				var _g1 = 0;
				var _g2 = world.members;
				while(_g1 < _g2.length) {
					var body = _g2[_g1];
					++_g1;
					if(item.id == body.id) {
						var value = item.x;
						if(value != body.frame.get_offset().x) {
							var body1 = body.frame;
							var this1 = body.frame.get_offset();
							var y = body.frame.get_offset().y;
							var self = this1;
							self.x = value;
							self.y = y;
							body1.set_offset(self);
							body.dirty = true;
							if(!body.sync_locked) {
								if(body.shapes.length > 0) {
									var _g3 = 0;
									var _g4 = body.shapes;
									while(_g3 < _g4.length) {
										var shape = _g4[_g3];
										++_g3;
										shape.sync();
									}
								}
								if(body.mass <= 0 && body.world != null) {
									body.bounds(body.quadtree_data.bounds);
									body.world.static_quadtree.update(body.quadtree_data);
								}
								if(body.on_move != null) {
									body.on_move(body.frame.get_offset().x,body.frame.get_offset().y);
								}
							}
						}
						body.frame.get_offset();
						var value1 = item.y;
						if(value1 != body.frame.get_offset().y) {
							var body2 = body.frame;
							var self1 = body.frame.get_offset();
							self1.x = body.frame.get_offset().x;
							self1.y = value1;
							body2.set_offset(self1);
							body.dirty = true;
							if(!body.sync_locked) {
								if(body.shapes.length > 0) {
									var _g5 = 0;
									var _g6 = body.shapes;
									while(_g5 < _g6.length) {
										var shape1 = _g6[_g5];
										++_g5;
										shape1.sync();
									}
								}
								if(body.mass <= 0 && body.world != null) {
									body.bounds(body.quadtree_data.bounds);
									body.world.static_quadtree.update(body.quadtree_data);
								}
								if(body.on_move != null) {
									body.on_move(body.frame.get_offset().x,body.frame.get_offset().y);
								}
							}
						}
						body.frame.get_offset();
						var value2 = item.rotation;
						if(value2 != body.frame.get_angleDegrees()) {
							body.frame.set_angleDegrees(value2);
							body.dirty = true;
							if(!body.sync_locked) {
								if(body.shapes.length > 0) {
									var _g7 = 0;
									var _g8 = body.shapes;
									while(_g7 < _g8.length) {
										var shape2 = _g8[_g7];
										++_g7;
										shape2.sync();
									}
								}
								if(body.mass <= 0 && body.world != null) {
									body.bounds(body.quadtree_data.bounds);
									body.world.static_quadtree.update(body.quadtree_data);
								}
								if(body.on_rotate != null) {
									body.on_rotate(body.frame.get_angleDegrees());
								}
							}
						}
						body.frame.get_angleDegrees();
						body.velocity = item.velocity;
					}
				}
			}
			world.reset_quadtrees();
		}
	}
	return world;
};
echo_Echo.redo = function(world) {
	if(world.history != null) {
		var state = world.history.redo();
		if(state != null) {
			var _g = 0;
			while(_g < state.length) {
				var item = state[_g];
				++_g;
				var _g1 = 0;
				var _g2 = world.members;
				while(_g1 < _g2.length) {
					var body = _g2[_g1];
					++_g1;
					if(item.id == body.id) {
						var value = item.x;
						if(value != body.frame.get_offset().x) {
							var body1 = body.frame;
							var this1 = body.frame.get_offset();
							var y = body.frame.get_offset().y;
							var self = this1;
							self.x = value;
							self.y = y;
							body1.set_offset(self);
							body.dirty = true;
							if(!body.sync_locked) {
								if(body.shapes.length > 0) {
									var _g3 = 0;
									var _g4 = body.shapes;
									while(_g3 < _g4.length) {
										var shape = _g4[_g3];
										++_g3;
										shape.sync();
									}
								}
								if(body.mass <= 0 && body.world != null) {
									body.bounds(body.quadtree_data.bounds);
									body.world.static_quadtree.update(body.quadtree_data);
								}
								if(body.on_move != null) {
									body.on_move(body.frame.get_offset().x,body.frame.get_offset().y);
								}
							}
						}
						body.frame.get_offset();
						var value1 = item.y;
						if(value1 != body.frame.get_offset().y) {
							var body2 = body.frame;
							var self1 = body.frame.get_offset();
							self1.x = body.frame.get_offset().x;
							self1.y = value1;
							body2.set_offset(self1);
							body.dirty = true;
							if(!body.sync_locked) {
								if(body.shapes.length > 0) {
									var _g5 = 0;
									var _g6 = body.shapes;
									while(_g5 < _g6.length) {
										var shape1 = _g6[_g5];
										++_g5;
										shape1.sync();
									}
								}
								if(body.mass <= 0 && body.world != null) {
									body.bounds(body.quadtree_data.bounds);
									body.world.static_quadtree.update(body.quadtree_data);
								}
								if(body.on_move != null) {
									body.on_move(body.frame.get_offset().x,body.frame.get_offset().y);
								}
							}
						}
						body.frame.get_offset();
						var value2 = item.rotation;
						if(value2 != body.frame.get_angleDegrees()) {
							body.frame.set_angleDegrees(value2);
							body.dirty = true;
							if(!body.sync_locked) {
								if(body.shapes.length > 0) {
									var _g7 = 0;
									var _g8 = body.shapes;
									while(_g7 < _g8.length) {
										var shape2 = _g8[_g7];
										++_g7;
										shape2.sync();
									}
								}
								if(body.mass <= 0 && body.world != null) {
									body.bounds(body.quadtree_data.bounds);
									body.world.static_quadtree.update(body.quadtree_data);
								}
								if(body.on_rotate != null) {
									body.on_rotate(body.frame.get_angleDegrees());
								}
							}
						}
						body.frame.get_angleDegrees();
						body.velocity = item.velocity;
						body.acceleration = item.acceleration;
						body.rotational_velocity = item.rotational_velocity;
					}
				}
			}
		}
		world.reset_quadtrees();
	}
	return world;
};
var echo_util_IPooled = function() { };
$hxClasses["echo.util.IPooled"] = echo_util_IPooled;
echo_util_IPooled.__name__ = true;
echo_util_IPooled.__isInterface__ = true;
echo_util_IPooled.prototype = {
	put: null
	,pooled: null
	,__class__: echo_util_IPooled
};
var echo_util_IProxy = function() { };
$hxClasses["echo.util.IProxy"] = echo_util_IProxy;
echo_util_IProxy.__name__ = true;
echo_util_IProxy.__isInterface__ = true;
var echo_util_IPool = function() { };
$hxClasses["echo.util.IPool"] = echo_util_IPool;
echo_util_IPool.__name__ = true;
echo_util_IPool.__isInterface__ = true;
echo_util_IPool.prototype = {
	pre_allocate: null
	,clear: null
	,__class__: echo_util_IPool
};
var echo_util_Pool = function(type) {
	this.type = type;
	this.pool = [];
	this.count = 0;
};
$hxClasses["echo.util.Pool"] = echo_util_Pool;
echo_util_Pool.__name__ = true;
echo_util_Pool.__interfaces__ = [echo_util_IPool];
echo_util_Pool.prototype = {
	length: null
	,pool: null
	,type: null
	,count: null
	,get: function() {
		if(this.count == 0) {
			return Type.createInstance(this.type,[]);
		}
		return this.pool[--this.count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this.pool.indexOf(obj);
			if(i == -1 || i >= this.count) {
				this.pool[this.count++] = obj;
			}
		}
	}
	,put_unsafe: function(obj) {
		if(obj != null) {
			this.pool[this.count++] = obj;
		}
	}
	,pre_allocate: function(amount) {
		while(amount-- > 0) this.pool[this.count++] = Type.createInstance(this.type,[]);
	}
	,clear: function() {
		this.count = 0;
		var old_pool = this.pool;
		this.pool = [];
		return old_pool;
	}
	,get_length: function() {
		return this.count;
	}
	,__class__: echo_util_Pool
	,__properties__: {get_length:"get_length"}
};
var echo_Line = function(x,y,dx,dy) {
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new hxmath_math_Vector2Default(x,y);
	this.start = this1;
	var this1 = new hxmath_math_Vector2Default(dx,dy);
	this.end = this1;
};
$hxClasses["echo.Line"] = echo_Line;
echo_Line.__name__ = true;
echo_Line.__interfaces__ = [echo_util_IPooled];
echo_Line.__properties__ = {get_pool:"get_pool"};
echo_Line.get = function(x,y,dx,dy) {
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var line = echo_Line._pool.get();
	var x1 = x;
	var y1 = y;
	var dx1 = dx;
	var dy1 = dy;
	if(dy1 == null) {
		dy1 = 1;
	}
	if(dx1 == null) {
		dx1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var self = line.start;
	self.x = x1;
	self.y = y1;
	var self = line.end;
	self.x = dx1;
	self.y = dy1;
	line.pooled = false;
	return line;
};
echo_Line.get_from_vector = function(start,angle,length) {
	var line = echo_Line._pool.get();
	line.set_from_vector(start,angle,length);
	line.pooled = false;
	return line;
};
echo_Line.get_from_vectors = function(start,end) {
	var x = start.x;
	var y = start.y;
	var dx = end.x;
	var dy = end.y;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var line = echo_Line._pool.get();
	var x1 = x;
	var y1 = y;
	var dx1 = dx;
	var dy1 = dy;
	if(dy1 == null) {
		dy1 = 1;
	}
	if(dx1 == null) {
		dx1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var self = line.start;
	self.x = x1;
	self.y = y1;
	var self = line.end;
	self.x = dx1;
	self.y = dy1;
	line.pooled = false;
	return line;
};
echo_Line.get_pool = function() {
	return echo_Line._pool;
};
echo_Line.prototype = {
	start: null
	,end: null
	,pooled: null
	,set: function(x,y,dx,dy) {
		if(dy == null) {
			dy = 1;
		}
		if(dx == null) {
			dx = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var self = this.start;
		self.x = x;
		self.y = y;
		var self = this.end;
		self.x = dx;
		self.y = dy;
		return this;
	}
	,set_from_vector: function(start,angle,length) {
		angle = Math.PI / 180 * angle;
		var end_x = start.x + length * Math.cos(angle);
		var end_y = start.y + length * Math.sin(angle);
		var x = start.x;
		var y = start.y;
		var dx = end_x;
		var dy = end_y;
		if(dy == null) {
			dy = 1;
		}
		if(dx == null) {
			dx = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var self = this.start;
		self.x = x;
		self.y = y;
		var self = this.end;
		self.x = dx;
		self.y = dy;
		return this;
	}
	,set_from_vectors: function(start,end) {
		var x = start.x;
		var y = start.y;
		var dx = end.x;
		var dy = end.y;
		if(dy == null) {
			dy = 1;
		}
		if(dx == null) {
			dx = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var self = this.start;
		self.x = x;
		self.y = y;
		var self = this.end;
		self.x = dx;
		self.y = dy;
		return this;
	}
	,put: function() {
		if(!this.pooled) {
			this.pooled = true;
			echo_Line._pool.put_unsafe(this);
		}
	}
	,contains: function(v) {
		var m = (this.get_dy() - this.get_y()) / (this.get_dx() - this.get_y());
		var b = this.get_y() - m * this.get_x();
		return v.y == m * v.x + b;
	}
	,intersect: function(shape) {
		return shape.intersect(this);
	}
	,point_along_ratio: function(ratio) {
		var _g = ratio;
		var b = this.end;
		var self = this.start;
		var self_x = self.x;
		var self_y = self.y;
		self_x -= b.x;
		self_y -= b.y;
		var b_x = self_x;
		var b_y = self_y;
		b_x *= _g;
		b_y *= _g;
		var self = this.start;
		var this1 = new hxmath_math_Vector2Default(self.x,self.y);
		var self = this1;
		self.x -= b_x;
		self.y -= b_y;
		return self;
	}
	,side: function(point,set) {
		var rad = (this.get_dx() - this.get_x()) * (point.y - this.get_y()) - (this.get_dy() - this.get_y()) * (point.x - this.get_x());
		var b = this.end;
		var self = this.start;
		var dir_x = self.x;
		var dir_y = self.y;
		dir_x -= b.x;
		dir_y -= b.y;
		var normal;
		if(set == null) {
			var this1 = new hxmath_math_Vector2Default(0,0);
			normal = this1;
		} else {
			normal = set;
		}
		if(rad > 0) {
			var self = normal;
			self.x = dir_y;
			self.y = -dir_x;
		} else {
			var self = normal;
			self.x = -dir_y;
			self.y = dir_x;
		}
		var self = normal;
		var self1 = self;
		var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
		if(length > 0.0) {
			var self1 = self;
			self1.x /= length;
			self1.y /= length;
		}
		return self;
	}
	,get_length: function() {
		var b = this.end;
		var self = this.start;
		var self1 = self;
		var self_x = self1.x;
		var self_y = self1.y;
		self_x -= b.x;
		self_y -= b.y;
		return Math.sqrt(self_x * self_x + self_y * self_y);
	}
	,get_radians: function() {
		return Math.atan2(this.get_dy() - this.get_y(),this.get_dx() - this.get_x());
	}
	,set_length: function(l) {
		var b = this.end;
		var self = this.start;
		var self1 = self;
		var self_x = self1.x;
		var self_y = self1.y;
		self_x -= b.x;
		self_y -= b.y;
		var old = Math.sqrt(self_x * self_x + self_y * self_y);
		if(old > 0) {
			l /= old;
		}
		this.set_dx(this.get_x() + (this.get_dx() - this.get_x()) * l);
		this.set_dy(this.get_y() + (this.get_dy() - this.get_y()) * l);
		return l;
	}
	,set_radians: function(r) {
		var b = this.end;
		var self = this.start;
		var self1 = self;
		var self_x = self1.x;
		var self_y = self1.y;
		self_x -= b.x;
		self_y -= b.y;
		var len = Math.sqrt(self_x * self_x + self_y * self_y);
		this.set_dx(this.get_x() + Math.cos(r) * len);
		this.set_dy(this.get_y() + Math.sin(r) * len);
		return r;
	}
	,toString: function() {
		return "Line: {start: " + Std.string(this.start) + ", end: " + Std.string(this.end) + "}";
	}
	,get_x: function() {
		return this.start.x;
	}
	,set_x: function(value) {
		return this.start.x = value;
	}
	,get_y: function() {
		return this.start.y;
	}
	,set_y: function(value) {
		return this.start.y = value;
	}
	,get_dx: function() {
		return this.end.x;
	}
	,set_dx: function(value) {
		return this.end.x = value;
	}
	,get_dy: function() {
		return this.end.y;
	}
	,set_dy: function(value) {
		return this.end.y = value;
	}
	,__class__: echo_Line
	,__properties__: {get_radians:"get_radians",get_length:"get_length",set_dy:"set_dy",get_dy:"get_dy",set_dx:"set_dx",get_dx:"get_dx",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var echo_Listener = function(a,b,separate,collisions,last_collisions,enter,stay,exit,condition,quadtree_results,percent_correction,correction_threshold) {
	this.a = a;
	this.b = b;
	this.separate = separate;
	this.collisions = collisions;
	this.last_collisions = last_collisions;
	this.enter = enter;
	this.stay = stay;
	this.exit = exit;
	this.condition = condition;
	this.quadtree_results = quadtree_results;
	this.percent_correction = percent_correction;
	this.correction_threshold = correction_threshold;
};
$hxClasses["echo.Listener"] = echo_Listener;
echo_Listener.__name__ = true;
echo_Listener.__properties__ = {get_defaults:"get_defaults"};
echo_Listener.defaults = null;
echo_Listener.get_defaults = function() {
	return { separate : true, percent_correction : 0.9, correction_threshold : 0.013};
};
echo_Listener.prototype = {
	a: null
	,b: null
	,separate: null
	,collisions: null
	,last_collisions: null
	,enter: null
	,stay: null
	,exit: null
	,condition: null
	,quadtree_results: null
	,percent_correction: null
	,correction_threshold: null
	,__class__: echo_Listener
};
var hxmath_math_Vector2Default = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["hxmath.math.Vector2Default"] = hxmath_math_Vector2Default;
hxmath_math_Vector2Default.__name__ = true;
hxmath_math_Vector2Default.prototype = {
	x: null
	,y: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,__class__: hxmath_math_Vector2Default
};
var echo_Physics = function() { };
$hxClasses["echo.Physics"] = echo_Physics;
echo_Physics.__name__ = true;
echo_Physics.step = function(world,dt) {
	var _g = 0;
	var _g1 = world.members;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.mass > 0) {
			if(!b.disposed && b.active) {
				b.sync_locked = true;
				b.last_x = b.frame.get_offset().x;
				b.last_y = b.frame.get_offset().y;
				b.last_rotation = b.frame.get_angleDegrees();
				var accel_x = b.acceleration.x;
				var accel_y = b.acceleration.y;
				if(!b.kinematic) {
					accel_x += world.gravity.x * b.gravity_scale;
					accel_y += world.gravity.y * b.gravity_scale;
				}
				var v = b.velocity.x;
				var d = b.drag.x;
				var m = b.max_velocity.x;
				if(!(Math.abs(accel_x) <= 0.00001)) {
					v += accel_x * dt;
				} else if(!(Math.abs(d) <= 0.00001)) {
					d *= dt;
					if(v - d > 0) {
						v -= d;
					} else if(v + d < 0) {
						v += d;
					} else {
						v = 0;
					}
				}
				if(!(Math.abs(m) <= 0.00001)) {
					var min = -m;
					if(v < min) {
						v = min;
					} else if(v > m) {
						v = m;
					}
				}
				b.velocity.x = v;
				var v1 = b.velocity.y;
				var d1 = b.drag.y;
				var m1 = b.max_velocity.y;
				if(!(Math.abs(accel_y) <= 0.00001)) {
					v1 += accel_y * dt;
				} else if(!(Math.abs(d1) <= 0.00001)) {
					d1 *= dt;
					if(v1 - d1 > 0) {
						v1 -= d1;
					} else if(v1 + d1 < 0) {
						v1 += d1;
					} else {
						v1 = 0;
					}
				}
				if(!(Math.abs(m1) <= 0.00001)) {
					var min1 = -m1;
					if(v1 < min1) {
						v1 = min1;
					} else if(v1 > m1) {
						v1 = m1;
					}
				}
				b.velocity.y = v1;
				var tmp;
				if(b.drag_length > 0) {
					var a = b.acceleration;
					var b1 = echo_Physics.zero;
					tmp = a == null && b1 == null || a != null && b1 != null && a.x == b1.x && a.y == b1.y;
				} else {
					tmp = false;
				}
				if(tmp && b.velocity != echo_Physics.zero) {
					var self = b.velocity;
					var newLength = Math.sqrt(self.x * self.x + self.y * self.y) - b.drag_length * dt;
					var self1 = b.velocity;
					var self2 = self1;
					var self3 = self2;
					var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
					if(length > 0.0) {
						var self4 = self2;
						self4.x /= length;
						self4.y /= length;
					}
					var self5 = self1;
					self5.x *= newLength;
					self5.y *= newLength;
				}
				var tmp1;
				if(b.max_velocity_length > 0) {
					var self6 = b.velocity;
					tmp1 = Math.sqrt(self6.x * self6.x + self6.y * self6.y) > b.max_velocity_length;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					var newLength1 = b.max_velocity_length;
					var self7 = b.velocity;
					var self8 = self7;
					var self9 = self8;
					var length1 = Math.sqrt(self9.x * self9.x + self9.y * self9.y);
					if(length1 > 0.0) {
						var self10 = self8;
						self10.x /= length1;
						self10.y /= length1;
					}
					var self11 = self7;
					self11.x *= newLength1;
					self11.y *= newLength1;
				}
				var _g2 = b;
				var value = _g2.frame.get_offset().x + b.velocity.x * b.inverse_mass * dt;
				if(value != _g2.frame.get_offset().x) {
					var _g3 = _g2.frame;
					var this1 = _g2.frame.get_offset();
					var y = _g2.frame.get_offset().y;
					var self12 = this1;
					self12.x = value;
					self12.y = y;
					_g3.set_offset(self12);
					_g2.dirty = true;
					if(!_g2.sync_locked) {
						if(_g2.shapes.length > 0) {
							var _g4 = 0;
							var _g5 = _g2.shapes;
							while(_g4 < _g5.length) {
								var shape = _g5[_g4];
								++_g4;
								shape.sync();
							}
						}
						if(_g2.mass <= 0 && _g2.world != null) {
							_g2.bounds(_g2.quadtree_data.bounds);
							_g2.world.static_quadtree.update(_g2.quadtree_data);
						}
						if(_g2.on_move != null) {
							_g2.on_move(_g2.frame.get_offset().x,_g2.frame.get_offset().y);
						}
					}
				}
				_g2.frame.get_offset();
				var _g6 = b;
				var value1 = _g6.frame.get_offset().y + b.velocity.y * b.inverse_mass * dt;
				if(value1 != _g6.frame.get_offset().y) {
					var _g7 = _g6.frame;
					var self13 = _g6.frame.get_offset();
					self13.x = _g6.frame.get_offset().x;
					self13.y = value1;
					_g7.set_offset(self13);
					_g6.dirty = true;
					if(!_g6.sync_locked) {
						if(_g6.shapes.length > 0) {
							var _g8 = 0;
							var _g9 = _g6.shapes;
							while(_g8 < _g9.length) {
								var shape1 = _g9[_g8];
								++_g8;
								shape1.sync();
							}
						}
						if(_g6.mass <= 0 && _g6.world != null) {
							_g6.bounds(_g6.quadtree_data.bounds);
							_g6.world.static_quadtree.update(_g6.quadtree_data);
						}
						if(_g6.on_move != null) {
							_g6.on_move(_g6.frame.get_offset().x,_g6.frame.get_offset().y);
						}
					}
				}
				_g6.frame.get_offset();
				if(b.max_rotational_velocity > 0) {
					var value2 = b.rotational_velocity;
					var min2 = -b.max_rotational_velocity;
					var max = b.max_rotational_velocity;
					b.rotational_velocity = value2 < min2 ? min2 : value2 > max ? max : value2;
				}
				if(b.rotational_drag > 0) {
					if(b.rotational_velocity > 0) {
						b.rotational_velocity -= b.rotational_drag * dt;
						if(b.rotational_velocity < 0) {
							b.rotational_velocity = 0;
						}
					} else {
						b.rotational_velocity += b.rotational_drag * dt;
						if(b.rotational_velocity > 0) {
							b.rotational_velocity = 0;
						}
					}
				}
				var _g10 = b;
				var value3 = _g10.frame.get_angleDegrees() + b.rotational_velocity * dt;
				if(value3 != _g10.frame.get_angleDegrees()) {
					_g10.frame.set_angleDegrees(value3);
					_g10.dirty = true;
					if(!_g10.sync_locked) {
						if(_g10.shapes.length > 0) {
							var _g11 = 0;
							var _g12 = _g10.shapes;
							while(_g11 < _g12.length) {
								var shape2 = _g12[_g11];
								++_g11;
								shape2.sync();
							}
						}
						if(_g10.mass <= 0 && _g10.world != null) {
							_g10.bounds(_g10.quadtree_data.bounds);
							_g10.world.static_quadtree.update(_g10.quadtree_data);
						}
						if(_g10.on_rotate != null) {
							_g10.on_rotate(_g10.frame.get_angleDegrees());
						}
					}
				}
				_g10.frame.get_angleDegrees();
				b.sync_locked = false;
				if(b.dirty) {
					if(b.shapes.length > 0) {
						var _g13 = 0;
						var _g14 = b.shapes;
						while(_g13 < _g14.length) {
							var shape3 = _g14[_g13];
							++_g13;
							shape3.sync();
						}
					}
					if(b.mass <= 0 && b.world != null) {
						b.bounds(b.quadtree_data.bounds);
						b.world.static_quadtree.update(b.quadtree_data);
					}
					if(b.on_move != null) {
						b.on_move(b.frame.get_offset().x,b.frame.get_offset().y);
					}
					if(b.on_rotate != null) {
						b.on_rotate(b.frame.get_angleDegrees());
					}
				}
			}
		}
	}
};
echo_Physics.separate = function(world,listeners) {
	var members = listeners == null ? world.listeners.members : listeners.members;
	var _g = 0;
	while(_g < members.length) {
		var listener = members[_g];
		++_g;
		if(listener.separate) {
			var _g1 = 0;
			var _g2 = listener.collisions;
			while(_g1 < _g2.length) {
				var collision = _g2[_g1];
				++_g1;
				var _g3 = 0;
				var _g4 = collision.data.length;
				while(_g3 < _g4) {
					var i = _g3++;
					echo_Physics.resolve(collision.a,collision.b,collision.data[i],listener.correction_threshold,listener.percent_correction);
				}
			}
		}
	}
};
echo_Physics.resolve = function(a,b,cd,correction_threshold,percent_correction) {
	if(percent_correction == null) {
		percent_correction = 0.9;
	}
	if(correction_threshold == null) {
		correction_threshold = 0.013;
	}
	if(!cd.sa.solid || !cd.sb.solid || !a.active || !b.active || a.disposed || b.disposed || a.mass <= 0 && b.mass <= 0) {
		return;
	}
	a.sync_locked = true;
	b.sync_locked = true;
	var rvx = a.velocity.x - b.velocity.x;
	var rvy = a.velocity.y - b.velocity.y;
	var vel_to_normal = rvx * cd.normal.x + rvy * cd.normal.y;
	var inv_mass_sum = a.inverse_mass + b.inverse_mass;
	if(vel_to_normal > 0) {
		var e = (a.elasticity + b.elasticity) * 0.5;
		var j = -(1 + e) * vel_to_normal / inv_mass_sum;
		var impulse_x = -j * cd.normal.x;
		var impulse_y = -j * cd.normal.y;
		var mass_sum = a.mass + b.mass;
		var ratio = a.mass / mass_sum;
		if(!a.kinematic) {
			a.velocity.x -= impulse_x * a.inverse_mass;
			a.velocity.y -= impulse_y * a.inverse_mass;
		}
		ratio = b.mass / mass_sum;
		if(!b.kinematic) {
			b.velocity.x += impulse_x * b.inverse_mass;
			b.velocity.y += impulse_y * b.inverse_mass;
		}
	}
	var correction = Math.max(cd.overlap - correction_threshold,0) / inv_mass_sum * percent_correction;
	var cx = correction * cd.normal.x;
	var cy = correction * cd.normal.y;
	if(!a.kinematic) {
		var _g = a;
		var value = _g.frame.get_offset().x - a.inverse_mass * cx;
		if(value != _g.frame.get_offset().x) {
			var _g1 = _g.frame;
			var this1 = _g.frame.get_offset();
			var y = _g.frame.get_offset().y;
			var self = this1;
			self.x = value;
			self.y = y;
			_g1.set_offset(self);
			_g.dirty = true;
			if(!_g.sync_locked) {
				if(_g.shapes.length > 0) {
					var _g1 = 0;
					var _g2 = _g.shapes;
					while(_g1 < _g2.length) {
						var shape = _g2[_g1];
						++_g1;
						shape.sync();
					}
				}
				if(_g.mass <= 0 && _g.world != null) {
					_g.bounds(_g.quadtree_data.bounds);
					_g.world.static_quadtree.update(_g.quadtree_data);
				}
				if(_g.on_move != null) {
					_g.on_move(_g.frame.get_offset().x,_g.frame.get_offset().y);
				}
			}
		}
		_g.frame.get_offset();
		var _g = a;
		var value = _g.frame.get_offset().y - a.inverse_mass * cy;
		if(value != _g.frame.get_offset().y) {
			var _g1 = _g.frame;
			var self = _g.frame.get_offset();
			self.x = _g.frame.get_offset().x;
			self.y = value;
			_g1.set_offset(self);
			_g.dirty = true;
			if(!_g.sync_locked) {
				if(_g.shapes.length > 0) {
					var _g1 = 0;
					var _g2 = _g.shapes;
					while(_g1 < _g2.length) {
						var shape = _g2[_g1];
						++_g1;
						shape.sync();
					}
				}
				if(_g.mass <= 0 && _g.world != null) {
					_g.bounds(_g.quadtree_data.bounds);
					_g.world.static_quadtree.update(_g.quadtree_data);
				}
				if(_g.on_move != null) {
					_g.on_move(_g.frame.get_offset().x,_g.frame.get_offset().y);
				}
			}
		}
		_g.frame.get_offset();
	}
	if(!b.kinematic) {
		var _g = b;
		var value = _g.frame.get_offset().x + b.inverse_mass * cx;
		if(value != _g.frame.get_offset().x) {
			var _g1 = _g.frame;
			var this1 = _g.frame.get_offset();
			var y = _g.frame.get_offset().y;
			var self = this1;
			self.x = value;
			self.y = y;
			_g1.set_offset(self);
			_g.dirty = true;
			if(!_g.sync_locked) {
				if(_g.shapes.length > 0) {
					var _g1 = 0;
					var _g2 = _g.shapes;
					while(_g1 < _g2.length) {
						var shape = _g2[_g1];
						++_g1;
						shape.sync();
					}
				}
				if(_g.mass <= 0 && _g.world != null) {
					_g.bounds(_g.quadtree_data.bounds);
					_g.world.static_quadtree.update(_g.quadtree_data);
				}
				if(_g.on_move != null) {
					_g.on_move(_g.frame.get_offset().x,_g.frame.get_offset().y);
				}
			}
		}
		_g.frame.get_offset();
		var _g = b;
		var value = _g.frame.get_offset().y + b.inverse_mass * cy;
		if(value != _g.frame.get_offset().y) {
			var _g1 = _g.frame;
			var self = _g.frame.get_offset();
			self.x = _g.frame.get_offset().x;
			self.y = value;
			_g1.set_offset(self);
			_g.dirty = true;
			if(!_g.sync_locked) {
				if(_g.shapes.length > 0) {
					var _g1 = 0;
					var _g2 = _g.shapes;
					while(_g1 < _g2.length) {
						var shape = _g2[_g1];
						++_g1;
						shape.sync();
					}
				}
				if(_g.mass <= 0 && _g.world != null) {
					_g.bounds(_g.quadtree_data.bounds);
					_g.world.static_quadtree.update(_g.quadtree_data);
				}
				if(_g.on_move != null) {
					_g.on_move(_g.frame.get_offset().x,_g.frame.get_offset().y);
				}
			}
		}
		_g.frame.get_offset();
	}
	a.sync_locked = false;
	if(a.dirty) {
		if(a.shapes.length > 0) {
			var _g = 0;
			var _g1 = a.shapes;
			while(_g < _g1.length) {
				var shape = _g1[_g];
				++_g;
				shape.sync();
			}
		}
		if(a.mass <= 0 && a.world != null) {
			a.bounds(a.quadtree_data.bounds);
			a.world.static_quadtree.update(a.quadtree_data);
		}
		if(a.on_move != null) {
			a.on_move(a.frame.get_offset().x,a.frame.get_offset().y);
		}
		if(a.on_rotate != null) {
			a.on_rotate(a.frame.get_angleDegrees());
		}
	}
	b.sync_locked = false;
	if(b.dirty) {
		if(b.shapes.length > 0) {
			var _g = 0;
			var _g1 = b.shapes;
			while(_g < _g1.length) {
				var shape = _g1[_g];
				++_g;
				shape.sync();
			}
		}
		if(b.mass <= 0 && b.world != null) {
			b.bounds(b.quadtree_data.bounds);
			b.world.static_quadtree.update(b.quadtree_data);
		}
		if(b.on_move != null) {
			b.on_move(b.frame.get_offset().x,b.frame.get_offset().y);
		}
		if(b.on_rotate != null) {
			b.on_rotate(b.frame.get_angleDegrees());
		}
	}
};
echo_Physics.compute_velocity = function(v,a,d,m,dt) {
	if(!(Math.abs(a) <= 0.00001)) {
		v += a * dt;
	} else if(!(Math.abs(d) <= 0.00001)) {
		d *= dt;
		if(v - d > 0) {
			v -= d;
		} else if(v + d < 0) {
			v += d;
		} else {
			v = 0;
		}
	}
	if(!(Math.abs(m) <= 0.00001)) {
		var min = -m;
		if(v < min) {
			v = min;
		} else if(v > m) {
			v = m;
		}
	}
	return v;
};
var echo_Shape = function(x,y,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new hxmath_math_Vector2Default(0,0);
	this.sync_pos = this1;
	this.solid = true;
	this.sync_locked = false;
	this.local_x = this._x = x;
	if(this.parent_frame != null) {
		if(!this.sync_locked) {
			this.sync();
		}
	} else {
		this._x = this.local_x;
	}
	this.local_y = this._y = y;
	if(this.parent_frame != null) {
		if(!this.sync_locked) {
			this.sync();
		}
	} else {
		this._y = this.local_y;
	}
	this.local_rotation = this._rotation = rotation;
	if(this.parent_frame != null) {
		if(!this.sync_locked) {
			this.sync();
		}
	} else {
		this._rotation = this.local_rotation;
	}
};
$hxClasses["echo.Shape"] = echo_Shape;
echo_Shape.__name__ = true;
echo_Shape.__properties__ = {get_defaults:"get_defaults"};
echo_Shape.defaults = null;
echo_Shape.get = function(options) {
	options = echo_util_JSON.copy_fields(options,echo_Shape.get_defaults());
	var s;
	switch(options.type) {
	case 0:
		var x = options.offset_x;
		var y = options.offset_y;
		var width = options.width;
		var height = options.height;
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var rect = echo_shape_Rect._pool.get();
		var x1 = x;
		var y1 = y;
		var width1 = width;
		var height1 = height;
		var rotation = 0;
		if(rotation == null) {
			rotation = 0;
		}
		if(height1 == null) {
			height1 = 0;
		}
		if(width1 == null) {
			width1 = 1;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		rect.local_x = x1;
		if(rect.parent_frame != null) {
			if(!rect.sync_locked) {
				if(rect.parent_frame != null) {
					if(rect.local_x == 0 && rect.local_y == 0) {
						rect._x = rect.parent_frame.get_offset().x;
						rect._y = rect.parent_frame.get_offset().y;
					} else {
						var self = rect.sync_pos;
						self.x = rect.local_x;
						self.y = rect.local_y;
						var p = rect.sync_pos;
						var self = rect.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						rect._x = pos_x;
						rect._y = pos_y;
					}
					rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
				} else {
					rect._x = rect.local_x;
					rect._y = rect.local_x;
					rect._rotation = rect.local_rotation;
				}
				if(rect.transformed_rect == null && rect._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = polygon.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					polygon.lock_sync();
					polygon.local_x = rect.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = rect.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = rect.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					rect.transformed_rect = polygon;
					rect.transformed_rect.set_parent(rect.parent_frame);
				} else if(rect.transformed_rect != null) {
					var _this = rect.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = _this.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					_this.lock_sync();
					_this.local_x = rect.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = rect.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = rect.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			rect._x = rect.local_x;
		}
		rect.local_y = y1;
		if(rect.parent_frame != null) {
			if(!rect.sync_locked) {
				if(rect.parent_frame != null) {
					if(rect.local_x == 0 && rect.local_y == 0) {
						rect._x = rect.parent_frame.get_offset().x;
						rect._y = rect.parent_frame.get_offset().y;
					} else {
						var self = rect.sync_pos;
						self.x = rect.local_x;
						self.y = rect.local_y;
						var p = rect.sync_pos;
						var self = rect.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						rect._x = pos_x;
						rect._y = pos_y;
					}
					rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
				} else {
					rect._x = rect.local_x;
					rect._y = rect.local_x;
					rect._rotation = rect.local_rotation;
				}
				if(rect.transformed_rect == null && rect._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = polygon.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					polygon.lock_sync();
					polygon.local_x = rect.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = rect.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = rect.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					rect.transformed_rect = polygon;
					rect.transformed_rect.set_parent(rect.parent_frame);
				} else if(rect.transformed_rect != null) {
					var _this = rect.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = _this.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					_this.lock_sync();
					_this.local_x = rect.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = rect.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = rect.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			rect._y = rect.local_y;
		}
		rect.ex = width1 * 0.5;
		if(rect.transformed_rect != null) {
			var _this = rect.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = _this.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			_this.lock_sync();
			_this.local_x = rect.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = rect.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = rect.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		rect.ey = (height1 <= 0 ? width1 : height1) * 0.5;
		if(rect.transformed_rect != null) {
			var _this = rect.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = _this.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			_this.lock_sync();
			_this.local_x = rect.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = rect.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = rect.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		rect.local_rotation = rotation;
		if(rect.parent_frame != null) {
			if(!rect.sync_locked) {
				if(rect.parent_frame != null) {
					if(rect.local_x == 0 && rect.local_y == 0) {
						rect._x = rect.parent_frame.get_offset().x;
						rect._y = rect.parent_frame.get_offset().y;
					} else {
						var self = rect.sync_pos;
						self.x = rect.local_x;
						self.y = rect.local_y;
						var p = rect.sync_pos;
						var self = rect.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						rect._x = pos_x;
						rect._y = pos_y;
					}
					rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
				} else {
					rect._x = rect.local_x;
					rect._y = rect.local_x;
					rect._rotation = rect.local_rotation;
				}
				if(rect.transformed_rect == null && rect._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = polygon.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					polygon.lock_sync();
					polygon.local_x = rect.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = rect.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = rect.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					rect.transformed_rect = polygon;
					rect.transformed_rect.set_parent(rect.parent_frame);
				} else if(rect.transformed_rect != null) {
					var _this = rect.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = _this.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					_this.lock_sync();
					_this.local_x = rect.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = rect.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = rect.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			rect._rotation = rect.local_rotation;
		}
		rect.pooled = false;
		s = rect;
		break;
	case 1:
		var x = options.offset_x;
		var y = options.offset_y;
		var radius = options.radius;
		if(radius == null) {
			radius = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var circle = echo_shape_Circle._pool.get();
		var x1 = x;
		var y1 = y;
		var radius1 = radius;
		var rotation = 0;
		if(rotation == null) {
			rotation = 0;
		}
		if(radius1 == null) {
			radius1 = 1;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		circle.local_x = x1;
		if(circle.parent_frame != null) {
			if(!circle.sync_locked) {
				if(circle.parent_frame != null) {
					if(circle.local_x == 0 && circle.local_y == 0) {
						circle._x = circle.parent_frame.get_offset().x;
						circle._y = circle.parent_frame.get_offset().y;
					} else {
						var self = circle.sync_pos;
						self.x = circle.local_x;
						self.y = circle.local_y;
						var p = circle.sync_pos;
						var self = circle.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						circle._x = pos_x;
						circle._y = pos_y;
					}
					circle._rotation = circle.parent_frame.get_angleDegrees() + circle.local_rotation;
				} else {
					circle._x = circle.local_x;
					circle._y = circle.local_x;
					circle._rotation = circle.local_rotation;
				}
			}
		} else {
			circle._x = circle.local_x;
		}
		circle.local_y = y1;
		if(circle.parent_frame != null) {
			if(!circle.sync_locked) {
				if(circle.parent_frame != null) {
					if(circle.local_x == 0 && circle.local_y == 0) {
						circle._x = circle.parent_frame.get_offset().x;
						circle._y = circle.parent_frame.get_offset().y;
					} else {
						var self = circle.sync_pos;
						self.x = circle.local_x;
						self.y = circle.local_y;
						var p = circle.sync_pos;
						var self = circle.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						circle._x = pos_x;
						circle._y = pos_y;
					}
					circle._rotation = circle.parent_frame.get_angleDegrees() + circle.local_rotation;
				} else {
					circle._x = circle.local_x;
					circle._y = circle.local_x;
					circle._rotation = circle.local_rotation;
				}
			}
		} else {
			circle._y = circle.local_y;
		}
		circle.local_rotation = rotation;
		if(circle.parent_frame != null) {
			if(!circle.sync_locked) {
				if(circle.parent_frame != null) {
					if(circle.local_x == 0 && circle.local_y == 0) {
						circle._x = circle.parent_frame.get_offset().x;
						circle._y = circle.parent_frame.get_offset().y;
					} else {
						var self = circle.sync_pos;
						self.x = circle.local_x;
						self.y = circle.local_y;
						var p = circle.sync_pos;
						var self = circle.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						circle._x = pos_x;
						circle._y = pos_y;
					}
					circle._rotation = circle.parent_frame.get_angleDegrees() + circle.local_rotation;
				} else {
					circle._x = circle.local_x;
					circle._y = circle.local_x;
					circle._rotation = circle.local_rotation;
				}
			}
		} else {
			circle._rotation = circle.local_rotation;
		}
		circle.radius = radius1;
		circle.pooled = false;
		s = circle;
		break;
	case 2:
		if(options.vertices != null) {
			var x = options.offset_x;
			var y = options.offset_y;
			var vertices = options.vertices;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var polygon = echo_shape_Polygon._pool.get();
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			polygon.lock_sync();
			polygon.local_x = x1;
			if(polygon.parent_frame != null) {
				if(!polygon.sync_locked) {
					if(polygon.parent_frame != null) {
						if(polygon.local_x == 0 && polygon.local_y == 0) {
							polygon._x = polygon.parent_frame.get_offset().x;
							polygon._y = polygon.parent_frame.get_offset().y;
						} else {
							var self = polygon.sync_pos;
							self.x = polygon.local_x;
							self.y = polygon.local_y;
							var p = polygon.sync_pos;
							var self = polygon.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							polygon._x = pos_x;
							polygon._y = pos_y;
						}
						polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
					} else {
						polygon._x = polygon.local_x;
						polygon._y = polygon.local_x;
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
				}
			} else {
				polygon._x = polygon.local_x;
			}
			polygon.local_y = y1;
			if(polygon.parent_frame != null) {
				if(!polygon.sync_locked) {
					if(polygon.parent_frame != null) {
						if(polygon.local_x == 0 && polygon.local_y == 0) {
							polygon._x = polygon.parent_frame.get_offset().x;
							polygon._y = polygon.parent_frame.get_offset().y;
						} else {
							var self = polygon.sync_pos;
							self.x = polygon.local_x;
							self.y = polygon.local_y;
							var p = polygon.sync_pos;
							var self = polygon.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							polygon._x = pos_x;
							polygon._y = pos_y;
						}
						polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
					} else {
						polygon._x = polygon.local_x;
						polygon._y = polygon.local_x;
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
				}
			} else {
				polygon._y = polygon.local_y;
			}
			polygon.local_rotation = 0;
			if(polygon.parent_frame != null) {
				if(!polygon.sync_locked) {
					if(polygon.parent_frame != null) {
						if(polygon.local_x == 0 && polygon.local_y == 0) {
							polygon._x = polygon.parent_frame.get_offset().x;
							polygon._y = polygon.parent_frame.get_offset().y;
						} else {
							var self = polygon.sync_pos;
							self.x = polygon.local_x;
							self.y = polygon.local_y;
							var p = polygon.sync_pos;
							var self = polygon.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							polygon._x = pos_x;
							polygon._y = pos_y;
						}
						polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
					} else {
						polygon._x = polygon.local_x;
						polygon._y = polygon.local_x;
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
				}
			} else {
				polygon._rotation = polygon.local_rotation;
			}
			var count = null;
			polygon.local_vertices = vertices == null ? [] : vertices;
			polygon.count = count != null && count >= 0 ? count : polygon.local_vertices.length;
			if(count > polygon.local_vertices.length) {
				var _g = polygon.local_vertices.length;
				var _g1 = count;
				while(_g < _g1) {
					var i = _g++;
					var polygon1 = polygon.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					polygon1[i] = this1;
				}
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
			polygon.unlock_sync();
			polygon.pooled = false;
			s = polygon;
		} else {
			var x = options.offset_x;
			var y = options.offset_y;
			var sides = options.sides;
			var radius = options.radius;
			if(radius == null) {
				radius = 1;
			}
			if(sides == null) {
				sides = 3;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			if(sides < 3) {
				throw haxe_Exception.thrown("Polygons require 3 sides as a minimum");
			}
			var polygon = echo_shape_Polygon._pool.get();
			var rot = Math.PI * 2 / sides;
			var angle;
			var verts = [];
			var _g = 0;
			var _g1 = sides;
			while(_g < _g1) {
				var i = _g++;
				angle = i * rot + (Math.PI - rot) * 0.5;
				var this1 = new hxmath_math_Vector2Default(Math.cos(angle) * radius,Math.sin(angle) * radius);
				var vector = this1;
				verts.push(vector);
			}
			var x1 = x;
			var y1 = y;
			var rotation = 0;
			if(rotation == null) {
				rotation = 0;
			}
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			polygon.lock_sync();
			polygon.local_x = x1;
			if(polygon.parent_frame != null) {
				if(!polygon.sync_locked) {
					if(polygon.parent_frame != null) {
						if(polygon.local_x == 0 && polygon.local_y == 0) {
							polygon._x = polygon.parent_frame.get_offset().x;
							polygon._y = polygon.parent_frame.get_offset().y;
						} else {
							var self = polygon.sync_pos;
							self.x = polygon.local_x;
							self.y = polygon.local_y;
							var p = polygon.sync_pos;
							var self = polygon.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							polygon._x = pos_x;
							polygon._y = pos_y;
						}
						polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
					} else {
						polygon._x = polygon.local_x;
						polygon._y = polygon.local_x;
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
				}
			} else {
				polygon._x = polygon.local_x;
			}
			polygon.local_y = y1;
			if(polygon.parent_frame != null) {
				if(!polygon.sync_locked) {
					if(polygon.parent_frame != null) {
						if(polygon.local_x == 0 && polygon.local_y == 0) {
							polygon._x = polygon.parent_frame.get_offset().x;
							polygon._y = polygon.parent_frame.get_offset().y;
						} else {
							var self = polygon.sync_pos;
							self.x = polygon.local_x;
							self.y = polygon.local_y;
							var p = polygon.sync_pos;
							var self = polygon.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							polygon._x = pos_x;
							polygon._y = pos_y;
						}
						polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
					} else {
						polygon._x = polygon.local_x;
						polygon._y = polygon.local_x;
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
				}
			} else {
				polygon._y = polygon.local_y;
			}
			polygon.local_rotation = rotation;
			if(polygon.parent_frame != null) {
				if(!polygon.sync_locked) {
					if(polygon.parent_frame != null) {
						if(polygon.local_x == 0 && polygon.local_y == 0) {
							polygon._x = polygon.parent_frame.get_offset().x;
							polygon._y = polygon.parent_frame.get_offset().y;
						} else {
							var self = polygon.sync_pos;
							self.x = polygon.local_x;
							self.y = polygon.local_y;
							var p = polygon.sync_pos;
							var self = polygon.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							polygon._x = pos_x;
							polygon._y = pos_y;
						}
						polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
					} else {
						polygon._x = polygon.local_x;
						polygon._y = polygon.local_x;
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
				}
			} else {
				polygon._rotation = polygon.local_rotation;
			}
			var count = null;
			polygon.local_vertices = verts == null ? [] : verts;
			polygon.count = count != null && count >= 0 ? count : polygon.local_vertices.length;
			if(count > polygon.local_vertices.length) {
				var _g = polygon.local_vertices.length;
				var _g1 = count;
				while(_g < _g1) {
					var i = _g++;
					var polygon1 = polygon.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					polygon1[i] = this1;
				}
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
			polygon.unlock_sync();
			polygon.pooled = false;
			s = polygon;
		}
		break;
	}
	s.solid = options.solid;
	return s;
};
echo_Shape.rect = function(x,y,width,height) {
	var x1 = x;
	var y1 = y;
	var width1 = width;
	var height1 = height;
	if(height1 == null) {
		height1 = 0;
	}
	if(width1 == null) {
		width1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var rect = echo_shape_Rect._pool.get();
	var x = x1;
	var y = y1;
	var width = width1;
	var height = height1;
	var rotation = 0;
	if(rotation == null) {
		rotation = 0;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	rect.local_x = x;
	if(rect.parent_frame != null) {
		if(!rect.sync_locked) {
			if(rect.parent_frame != null) {
				if(rect.local_x == 0 && rect.local_y == 0) {
					rect._x = rect.parent_frame.get_offset().x;
					rect._y = rect.parent_frame.get_offset().y;
				} else {
					var self = rect.sync_pos;
					self.x = rect.local_x;
					self.y = rect.local_y;
					var p = rect.sync_pos;
					var self = rect.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					rect._x = pos_x;
					rect._y = pos_y;
				}
				rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
			} else {
				rect._x = rect.local_x;
				rect._y = rect.local_x;
				rect._rotation = rect.local_rotation;
			}
			if(rect.transformed_rect == null && rect._rotation != 0) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g1 = polygon.count;
				while(_g < _g1) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						var polygon1 = polygon.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon1[i] = this1;
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				polygon.lock_sync();
				polygon.local_x = rect.local_x;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._x = polygon.local_x;
				}
				polygon.local_y = rect.local_y;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._y = polygon.local_y;
				}
				polygon.local_rotation = rect.local_rotation;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.unlock_sync();
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent_frame);
			} else if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
		}
	} else {
		rect._x = rect.local_x;
	}
	rect.local_y = y;
	if(rect.parent_frame != null) {
		if(!rect.sync_locked) {
			if(rect.parent_frame != null) {
				if(rect.local_x == 0 && rect.local_y == 0) {
					rect._x = rect.parent_frame.get_offset().x;
					rect._y = rect.parent_frame.get_offset().y;
				} else {
					var self = rect.sync_pos;
					self.x = rect.local_x;
					self.y = rect.local_y;
					var p = rect.sync_pos;
					var self = rect.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					rect._x = pos_x;
					rect._y = pos_y;
				}
				rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
			} else {
				rect._x = rect.local_x;
				rect._y = rect.local_x;
				rect._rotation = rect.local_rotation;
			}
			if(rect.transformed_rect == null && rect._rotation != 0) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g1 = polygon.count;
				while(_g < _g1) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						var polygon1 = polygon.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon1[i] = this1;
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				polygon.lock_sync();
				polygon.local_x = rect.local_x;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._x = polygon.local_x;
				}
				polygon.local_y = rect.local_y;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._y = polygon.local_y;
				}
				polygon.local_rotation = rect.local_rotation;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.unlock_sync();
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent_frame);
			} else if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
		}
	} else {
		rect._y = rect.local_y;
	}
	rect.ex = width * 0.5;
	if(rect.transformed_rect != null) {
		var _this = rect.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				var _this1 = _this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				_this1[i] = this1;
			}
		}
		var self = _this.local_vertices[0];
		self.x = -rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[1];
		self.x = rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[2];
		self.x = rect.ex;
		self.y = rect.ey;
		var self = _this.local_vertices[3];
		self.x = -rect.ex;
		self.y = rect.ey;
		_this.lock_sync();
		_this.local_x = rect.local_x;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._x = _this.local_x;
		}
		_this.local_y = rect.local_y;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._y = _this.local_y;
		}
		_this.local_rotation = rect.local_rotation;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._rotation = _this.local_rotation;
		}
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
		_this.unlock_sync();
	}
	rect.ey = (height <= 0 ? width : height) * 0.5;
	if(rect.transformed_rect != null) {
		var _this = rect.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				var _this1 = _this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				_this1[i] = this1;
			}
		}
		var self = _this.local_vertices[0];
		self.x = -rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[1];
		self.x = rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[2];
		self.x = rect.ex;
		self.y = rect.ey;
		var self = _this.local_vertices[3];
		self.x = -rect.ex;
		self.y = rect.ey;
		_this.lock_sync();
		_this.local_x = rect.local_x;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._x = _this.local_x;
		}
		_this.local_y = rect.local_y;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._y = _this.local_y;
		}
		_this.local_rotation = rect.local_rotation;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._rotation = _this.local_rotation;
		}
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
		_this.unlock_sync();
	}
	rect.local_rotation = rotation;
	if(rect.parent_frame != null) {
		if(!rect.sync_locked) {
			if(rect.parent_frame != null) {
				if(rect.local_x == 0 && rect.local_y == 0) {
					rect._x = rect.parent_frame.get_offset().x;
					rect._y = rect.parent_frame.get_offset().y;
				} else {
					var self = rect.sync_pos;
					self.x = rect.local_x;
					self.y = rect.local_y;
					var p = rect.sync_pos;
					var self = rect.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					rect._x = pos_x;
					rect._y = pos_y;
				}
				rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
			} else {
				rect._x = rect.local_x;
				rect._y = rect.local_x;
				rect._rotation = rect.local_rotation;
			}
			if(rect.transformed_rect == null && rect._rotation != 0) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g1 = polygon.count;
				while(_g < _g1) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						var polygon1 = polygon.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon1[i] = this1;
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				polygon.lock_sync();
				polygon.local_x = rect.local_x;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._x = polygon.local_x;
				}
				polygon.local_y = rect.local_y;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._y = polygon.local_y;
				}
				polygon.local_rotation = rect.local_rotation;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.unlock_sync();
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent_frame);
			} else if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
		}
	} else {
		rect._rotation = rect.local_rotation;
	}
	rect.pooled = false;
	return rect;
};
echo_Shape.square = function(x,y,width) {
	var x1 = x;
	var y1 = y;
	var width1 = width;
	var height = width;
	if(height == null) {
		height = 0;
	}
	if(width1 == null) {
		width1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var rect = echo_shape_Rect._pool.get();
	var x = x1;
	var y = y1;
	var width = width1;
	var height1 = height;
	var rotation = 0;
	if(rotation == null) {
		rotation = 0;
	}
	if(height1 == null) {
		height1 = 0;
	}
	if(width == null) {
		width = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	rect.local_x = x;
	if(rect.parent_frame != null) {
		if(!rect.sync_locked) {
			if(rect.parent_frame != null) {
				if(rect.local_x == 0 && rect.local_y == 0) {
					rect._x = rect.parent_frame.get_offset().x;
					rect._y = rect.parent_frame.get_offset().y;
				} else {
					var self = rect.sync_pos;
					self.x = rect.local_x;
					self.y = rect.local_y;
					var p = rect.sync_pos;
					var self = rect.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					rect._x = pos_x;
					rect._y = pos_y;
				}
				rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
			} else {
				rect._x = rect.local_x;
				rect._y = rect.local_x;
				rect._rotation = rect.local_rotation;
			}
			if(rect.transformed_rect == null && rect._rotation != 0) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g1 = polygon.count;
				while(_g < _g1) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						var polygon1 = polygon.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon1[i] = this1;
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				polygon.lock_sync();
				polygon.local_x = rect.local_x;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._x = polygon.local_x;
				}
				polygon.local_y = rect.local_y;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._y = polygon.local_y;
				}
				polygon.local_rotation = rect.local_rotation;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.unlock_sync();
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent_frame);
			} else if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
		}
	} else {
		rect._x = rect.local_x;
	}
	rect.local_y = y;
	if(rect.parent_frame != null) {
		if(!rect.sync_locked) {
			if(rect.parent_frame != null) {
				if(rect.local_x == 0 && rect.local_y == 0) {
					rect._x = rect.parent_frame.get_offset().x;
					rect._y = rect.parent_frame.get_offset().y;
				} else {
					var self = rect.sync_pos;
					self.x = rect.local_x;
					self.y = rect.local_y;
					var p = rect.sync_pos;
					var self = rect.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					rect._x = pos_x;
					rect._y = pos_y;
				}
				rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
			} else {
				rect._x = rect.local_x;
				rect._y = rect.local_x;
				rect._rotation = rect.local_rotation;
			}
			if(rect.transformed_rect == null && rect._rotation != 0) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g1 = polygon.count;
				while(_g < _g1) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						var polygon1 = polygon.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon1[i] = this1;
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				polygon.lock_sync();
				polygon.local_x = rect.local_x;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._x = polygon.local_x;
				}
				polygon.local_y = rect.local_y;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._y = polygon.local_y;
				}
				polygon.local_rotation = rect.local_rotation;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.unlock_sync();
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent_frame);
			} else if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
		}
	} else {
		rect._y = rect.local_y;
	}
	rect.ex = width * 0.5;
	if(rect.transformed_rect != null) {
		var _this = rect.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				var _this1 = _this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				_this1[i] = this1;
			}
		}
		var self = _this.local_vertices[0];
		self.x = -rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[1];
		self.x = rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[2];
		self.x = rect.ex;
		self.y = rect.ey;
		var self = _this.local_vertices[3];
		self.x = -rect.ex;
		self.y = rect.ey;
		_this.lock_sync();
		_this.local_x = rect.local_x;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._x = _this.local_x;
		}
		_this.local_y = rect.local_y;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._y = _this.local_y;
		}
		_this.local_rotation = rect.local_rotation;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._rotation = _this.local_rotation;
		}
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
		_this.unlock_sync();
	}
	rect.ey = (height1 <= 0 ? width : height1) * 0.5;
	if(rect.transformed_rect != null) {
		var _this = rect.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				var _this1 = _this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				_this1[i] = this1;
			}
		}
		var self = _this.local_vertices[0];
		self.x = -rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[1];
		self.x = rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[2];
		self.x = rect.ex;
		self.y = rect.ey;
		var self = _this.local_vertices[3];
		self.x = -rect.ex;
		self.y = rect.ey;
		_this.lock_sync();
		_this.local_x = rect.local_x;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._x = _this.local_x;
		}
		_this.local_y = rect.local_y;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._y = _this.local_y;
		}
		_this.local_rotation = rect.local_rotation;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._rotation = _this.local_rotation;
		}
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
		_this.unlock_sync();
	}
	rect.local_rotation = rotation;
	if(rect.parent_frame != null) {
		if(!rect.sync_locked) {
			if(rect.parent_frame != null) {
				if(rect.local_x == 0 && rect.local_y == 0) {
					rect._x = rect.parent_frame.get_offset().x;
					rect._y = rect.parent_frame.get_offset().y;
				} else {
					var self = rect.sync_pos;
					self.x = rect.local_x;
					self.y = rect.local_y;
					var p = rect.sync_pos;
					var self = rect.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					rect._x = pos_x;
					rect._y = pos_y;
				}
				rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
			} else {
				rect._x = rect.local_x;
				rect._y = rect.local_x;
				rect._rotation = rect.local_rotation;
			}
			if(rect.transformed_rect == null && rect._rotation != 0) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g1 = polygon.count;
				while(_g < _g1) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						var polygon1 = polygon.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon1[i] = this1;
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				polygon.lock_sync();
				polygon.local_x = rect.local_x;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._x = polygon.local_x;
				}
				polygon.local_y = rect.local_y;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._y = polygon.local_y;
				}
				polygon.local_rotation = rect.local_rotation;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.unlock_sync();
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent_frame);
			} else if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
		}
	} else {
		rect._rotation = rect.local_rotation;
	}
	rect.pooled = false;
	return rect;
};
echo_Shape.circle = function(x,y,radius) {
	var x1 = x;
	var y1 = y;
	var radius1 = radius;
	if(radius1 == null) {
		radius1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var circle = echo_shape_Circle._pool.get();
	var x = x1;
	var y = y1;
	var radius = radius1;
	var rotation = 0;
	if(rotation == null) {
		rotation = 0;
	}
	if(radius == null) {
		radius = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	circle.local_x = x;
	if(circle.parent_frame != null) {
		if(!circle.sync_locked) {
			if(circle.parent_frame != null) {
				if(circle.local_x == 0 && circle.local_y == 0) {
					circle._x = circle.parent_frame.get_offset().x;
					circle._y = circle.parent_frame.get_offset().y;
				} else {
					var self = circle.sync_pos;
					self.x = circle.local_x;
					self.y = circle.local_y;
					var p = circle.sync_pos;
					var self = circle.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					circle._x = pos_x;
					circle._y = pos_y;
				}
				circle._rotation = circle.parent_frame.get_angleDegrees() + circle.local_rotation;
			} else {
				circle._x = circle.local_x;
				circle._y = circle.local_x;
				circle._rotation = circle.local_rotation;
			}
		}
	} else {
		circle._x = circle.local_x;
	}
	circle.local_y = y;
	if(circle.parent_frame != null) {
		if(!circle.sync_locked) {
			if(circle.parent_frame != null) {
				if(circle.local_x == 0 && circle.local_y == 0) {
					circle._x = circle.parent_frame.get_offset().x;
					circle._y = circle.parent_frame.get_offset().y;
				} else {
					var self = circle.sync_pos;
					self.x = circle.local_x;
					self.y = circle.local_y;
					var p = circle.sync_pos;
					var self = circle.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					circle._x = pos_x;
					circle._y = pos_y;
				}
				circle._rotation = circle.parent_frame.get_angleDegrees() + circle.local_rotation;
			} else {
				circle._x = circle.local_x;
				circle._y = circle.local_x;
				circle._rotation = circle.local_rotation;
			}
		}
	} else {
		circle._y = circle.local_y;
	}
	circle.local_rotation = rotation;
	if(circle.parent_frame != null) {
		if(!circle.sync_locked) {
			if(circle.parent_frame != null) {
				if(circle.local_x == 0 && circle.local_y == 0) {
					circle._x = circle.parent_frame.get_offset().x;
					circle._y = circle.parent_frame.get_offset().y;
				} else {
					var self = circle.sync_pos;
					self.x = circle.local_x;
					self.y = circle.local_y;
					var p = circle.sync_pos;
					var self = circle.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					circle._x = pos_x;
					circle._y = pos_y;
				}
				circle._rotation = circle.parent_frame.get_angleDegrees() + circle.local_rotation;
			} else {
				circle._x = circle.local_x;
				circle._y = circle.local_x;
				circle._rotation = circle.local_rotation;
			}
		}
	} else {
		circle._rotation = circle.local_rotation;
	}
	circle.radius = radius;
	circle.pooled = false;
	return circle;
};
echo_Shape.get_defaults = function() {
	return { type : 0, radius : 1, width : 1, height : 0, sides : 3, rotation : 0, offset_x : 0, offset_y : 0, solid : true};
};
echo_Shape.prototype = {
	type: null
	,local_x: null
	,local_y: null
	,local_rotation: null
	,solid: null
	,collided: null
	,sync_locked: null
	,parent_frame: null
	,sync_pos: null
	,_x: null
	,_y: null
	,_rotation: null
	,put: function() {
		this.parent_frame = null;
	}
	,sync: function() {
	}
	,get_position: function() {
		var this1 = new hxmath_math_Vector2Default(this._x,this._y);
		return this1;
	}
	,get_local_position: function() {
		var this1 = new hxmath_math_Vector2Default(this.local_x,this.local_y);
		return this1;
	}
	,set_position: function(value) {
		var value1 = value.x;
		if(this.parent_frame == null) {
			this.local_x = value1;
			if(this.parent_frame != null) {
				if(!this.sync_locked) {
					this.sync();
				}
			} else {
				this._x = this.local_x;
			}
		} else {
			var self_x = value1;
			var self_y = this._y;
			var self = this.parent_frame;
			var self1 = self;
			var self2 = self1.get_matrix();
			var self_a = self2.a;
			var self_b = self2.b;
			var self_c = self2.c;
			var self_d = self2.d;
			var b = self.get_offset();
			var v_x = self_x;
			var v_y = self_y;
			v_x -= b.x;
			v_y -= b.y;
			var value_x = self_a * v_x + self_b * v_y;
			var value_y = self_c * v_x + self_d * v_y;
			this.local_x = value_x;
			if(this.parent_frame != null) {
				if(!this.sync_locked) {
					this.sync();
				}
			} else {
				this._x = this.local_x;
			}
			this.local_y = value_y;
			if(this.parent_frame != null) {
				if(!this.sync_locked) {
					this.sync();
				}
			} else {
				this._y = this.local_y;
			}
		}
		var value1 = value.y;
		if(this.parent_frame == null) {
			this.local_y = value1;
			if(this.parent_frame != null) {
				if(!this.sync_locked) {
					this.sync();
				}
			} else {
				this._y = this.local_y;
			}
		} else {
			var self_x = this._x;
			var self_y = value1;
			var self = this.parent_frame;
			var self1 = self;
			var self2 = self1.get_matrix();
			var self_a = self2.a;
			var self_b = self2.b;
			var self_c = self2.c;
			var self_d = self2.d;
			var b = self.get_offset();
			var v_x = self_x;
			var v_y = self_y;
			v_x -= b.x;
			v_y -= b.y;
			var value_x = self_a * v_x + self_b * v_y;
			var value_y = self_c * v_x + self_d * v_y;
			this.local_x = value_x;
			if(this.parent_frame != null) {
				if(!this.sync_locked) {
					this.sync();
				}
			} else {
				this._x = this.local_x;
			}
			this.local_y = value_y;
			if(this.parent_frame != null) {
				if(!this.sync_locked) {
					this.sync();
				}
			} else {
				this._y = this.local_y;
			}
		}
	}
	,set_local_position: function(value) {
		this.local_x = value.x;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				this.sync();
			}
		} else {
			this._x = this.local_x;
		}
		this.local_y = value.y;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				this.sync();
			}
		} else {
			this._y = this.local_y;
		}
	}
	,set_parent: function(frame) {
		if(this.parent_frame == frame) {
			return;
		}
		this.parent_frame = frame;
		this.sync();
	}
	,lock_sync: function() {
		this.sync_locked = true;
	}
	,unlock_sync: function() {
		this.sync_locked = false;
		this.sync();
	}
	,bounds: function(aabb) {
		if(aabb == null) {
			var x = this._x;
			var y = this._y;
			var width = 0;
			var height = 0;
			if(height == null) {
				height = 0;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var aabb1 = echo_util_AABB._pool.get();
			var x1 = x;
			var y1 = y;
			var width1 = width;
			var height1 = height;
			if(height1 == null) {
				height1 = 1;
			}
			if(width1 == null) {
				width1 = 1;
			}
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			width1 *= 0.5;
			height1 *= 0.5;
			aabb1.min_x = x1 - width1;
			aabb1.min_y = y1 - height1;
			aabb1.max_x = x1 + width1;
			aabb1.max_y = y1 + height1;
			aabb1.pooled = false;
			return aabb1;
		} else {
			var x = this._x;
			var y = this._y;
			var width = 0;
			var height = 0;
			if(height == null) {
				height = 1;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			width *= 0.5;
			height *= 0.5;
			aabb.min_x = x - width;
			aabb.min_y = y - height;
			aabb.max_x = x + width;
			aabb.max_y = y + height;
			return aabb;
		}
	}
	,clone: function() {
		return new echo_Shape(this._x,this._y,this._rotation);
	}
	,contains: function(v) {
		var this1 = new hxmath_math_Vector2Default(this._x,this._y);
		var a = this1;
		if(!(a == null && v == null)) {
			if(a != null && v != null && a.x == v.x) {
				return a.y == v.y;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,intersect: function(l) {
		return null;
	}
	,overlaps: function(s) {
		var this1 = new hxmath_math_Vector2Default(s._x,s._y);
		return this.contains(this1);
	}
	,collides: function(s) {
		return null;
	}
	,collide_rect: function(r) {
		return null;
	}
	,collide_circle: function(c) {
		return null;
	}
	,collide_polygon: function(p) {
		return null;
	}
	,toString: function() {
		var s;
		switch(this.type) {
		case 0:
			s = "rect";
			break;
		case 1:
			s = "circle";
			break;
		case 2:
			s = "polygon";
			break;
		}
		return "Shape: {type: " + s + ", x: " + this._x + ", y: " + this._y + ", rotation: " + this._rotation + "}";
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,get_rotation: function() {
		return this._rotation;
	}
	,get_top: function() {
		return this._y;
	}
	,get_bottom: function() {
		return this._y;
	}
	,get_left: function() {
		return this._x;
	}
	,get_right: function() {
		return this._x;
	}
	,set_x: function(value) {
		if(this.parent_frame == null) {
			this.local_x = value;
			if(this.parent_frame != null) {
				if(!this.sync_locked) {
					this.sync();
				}
			} else {
				this._x = this.local_x;
			}
			return this.local_x;
		}
		var self_x = value;
		var self_y = this._y;
		var self = this.parent_frame;
		var self1 = self;
		var self2 = self1.get_matrix();
		var self_a = self2.a;
		var self_b = self2.b;
		var self_c = self2.c;
		var self_d = self2.d;
		var b = self.get_offset();
		var v_x = self_x;
		var v_y = self_y;
		v_x -= b.x;
		v_y -= b.y;
		var value_x = self_a * v_x + self_b * v_y;
		var value_y = self_c * v_x + self_d * v_y;
		this.local_x = value_x;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				this.sync();
			}
		} else {
			this._x = this.local_x;
		}
		this.local_y = value_y;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				this.sync();
			}
		} else {
			this._y = this.local_y;
		}
		return this._x;
	}
	,set_y: function(value) {
		if(this.parent_frame == null) {
			this.local_y = value;
			if(this.parent_frame != null) {
				if(!this.sync_locked) {
					this.sync();
				}
			} else {
				this._y = this.local_y;
			}
			return this.local_y;
		}
		var self_x = this._x;
		var self_y = value;
		var self = this.parent_frame;
		var self1 = self;
		var self2 = self1.get_matrix();
		var self_a = self2.a;
		var self_b = self2.b;
		var self_c = self2.c;
		var self_d = self2.d;
		var b = self.get_offset();
		var v_x = self_x;
		var v_y = self_y;
		v_x -= b.x;
		v_y -= b.y;
		var value_x = self_a * v_x + self_b * v_y;
		var value_y = self_c * v_x + self_d * v_y;
		this.local_x = value_x;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				this.sync();
			}
		} else {
			this._x = this.local_x;
		}
		this.local_y = value_y;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				this.sync();
			}
		} else {
			this._y = this.local_y;
		}
		return this._y;
	}
	,set_rotation: function(value) {
		if(this.parent_frame == null) {
			this.local_rotation = value;
			if(this.parent_frame != null) {
				if(!this.sync_locked) {
					this.sync();
				}
			} else {
				this._rotation = this.local_rotation;
			}
			return this.local_rotation;
		}
		this.local_rotation = value - this.parent_frame.get_angleDegrees();
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				this.sync();
			}
		} else {
			this._rotation = this.local_rotation;
		}
		return this._rotation;
	}
	,set_local_x: function(value) {
		this.local_x = value;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				this.sync();
			}
		} else {
			this._x = this.local_x;
		}
		return this.local_x;
	}
	,set_local_y: function(value) {
		this.local_y = value;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				this.sync();
			}
		} else {
			this._y = this.local_y;
		}
		return this.local_y;
	}
	,set_local_rotation: function(value) {
		this.local_rotation = value;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				this.sync();
			}
		} else {
			this._rotation = this.local_rotation;
		}
		return this.local_rotation;
	}
	,__class__: echo_Shape
	,__properties__: {get_right:"get_right",get_left:"get_left",get_bottom:"get_bottom",get_top:"get_top",set_local_rotation:"set_local_rotation",set_local_y:"set_local_y",set_local_x:"set_local_x",set_rotation:"set_rotation",get_rotation:"get_rotation",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var echo_World = function(options) {
	this.members = options.members == null ? [] : options.members;
	this.init = false;
	var value;
	if(options.width < 1) {
		throw haxe_Exception.thrown("World must have a width of at least 1");
	} else {
		value = options.width;
	}
	this.width = value;
	if(this.init) {
		this.reset_quadtrees();
	}
	var value;
	if(options.height < 1) {
		throw haxe_Exception.thrown("World must have a width of at least 1");
	} else {
		value = options.height;
	}
	this.height = value;
	if(this.init) {
		this.reset_quadtrees();
	}
	this.x = options.x == null ? 0 : options.x;
	if(this.init) {
		this.reset_quadtrees();
	}
	this.y = options.y == null ? 0 : options.y;
	if(this.init) {
		this.reset_quadtrees();
	}
	var this1 = new hxmath_math_Vector2Default(options.gravity_x == null ? 0 : options.gravity_x,options.gravity_y == null ? 0 : options.gravity_y);
	this.gravity = this1;
	this.reset_quadtrees();
	this.listeners = new echo_Listeners(options.listeners);
	this.iterations = options.iterations == null ? 5 : options.iterations;
	if(options.history != null) {
		this.history = new echo_util_History_$Array_$echo_$data_$BodyState(options.history);
	}
};
$hxClasses["echo.World"] = echo_World;
echo_World.__name__ = true;
echo_World.__interfaces__ = [echo_util_IDisposable];
echo_World.prototype = {
	width: null
	,height: null
	,x: null
	,y: null
	,gravity: null
	,quadtree: null
	,static_quadtree: null
	,listeners: null
	,members: null
	,iterations: null
	,history: null
	,init: null
	,set_from_shape: function(s) {
		this.x = s.get_left();
		if(this.init) {
			this.reset_quadtrees();
		}
		this.y = s.get_top();
		if(this.init) {
			this.reset_quadtrees();
		}
		this.width = s.get_right() - this.x;
		if(this.init) {
			this.reset_quadtrees();
		}
		this.height = s.get_bottom() - this.y;
		if(this.init) {
			this.reset_quadtrees();
		}
	}
	,center: function(rect) {
		if(rect != null) {
			var x = this.x + this.width * 0.5;
			var y = this.y + this.height * 0.5;
			var width = this.width;
			var height = this.height;
			if(height == null) {
				height = 0;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			rect.local_x = x;
			if(rect.parent_frame != null) {
				if(!rect.sync_locked) {
					if(rect.parent_frame != null) {
						if(rect.local_x == 0 && rect.local_y == 0) {
							rect._x = rect.parent_frame.get_offset().x;
							rect._y = rect.parent_frame.get_offset().y;
						} else {
							var self = rect.sync_pos;
							self.x = rect.local_x;
							self.y = rect.local_y;
							var p = rect.sync_pos;
							var self = rect.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							rect._x = pos_x;
							rect._y = pos_y;
						}
						rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
					} else {
						rect._x = rect.local_x;
						rect._y = rect.local_x;
						rect._rotation = rect.local_rotation;
					}
					if(rect.transformed_rect == null && rect._rotation != 0) {
						var polygon = echo_shape_Polygon._pool.get();
						polygon.count = 4;
						var _g = 0;
						var _g1 = polygon.count;
						while(_g < _g1) {
							var i = _g++;
							if(polygon.local_vertices[i] == null) {
								var polygon1 = polygon.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								polygon1[i] = this1;
							}
						}
						var self = polygon.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = polygon.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						polygon.lock_sync();
						polygon.local_x = rect.local_x;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._x = polygon.local_x;
						}
						polygon.local_y = rect.local_y;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._y = polygon.local_y;
						}
						polygon.local_rotation = rect.local_rotation;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
						polygon.unlock_sync();
						polygon.pooled = false;
						rect.transformed_rect = polygon;
						rect.transformed_rect.set_parent(rect.parent_frame);
					} else if(rect.transformed_rect != null) {
						var _this = rect.transformed_rect;
						_this.count = 4;
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								var _this1 = _this.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
						}
						var self = _this.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = _this.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						_this.lock_sync();
						_this.local_x = rect.local_x;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._x = _this.local_x;
						}
						_this.local_y = rect.local_y;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._y = _this.local_y;
						}
						_this.local_rotation = rect.local_rotation;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
						_this.unlock_sync();
					}
				}
			} else {
				rect._x = rect.local_x;
			}
			rect.local_y = y;
			if(rect.parent_frame != null) {
				if(!rect.sync_locked) {
					if(rect.parent_frame != null) {
						if(rect.local_x == 0 && rect.local_y == 0) {
							rect._x = rect.parent_frame.get_offset().x;
							rect._y = rect.parent_frame.get_offset().y;
						} else {
							var self = rect.sync_pos;
							self.x = rect.local_x;
							self.y = rect.local_y;
							var p = rect.sync_pos;
							var self = rect.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							rect._x = pos_x;
							rect._y = pos_y;
						}
						rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
					} else {
						rect._x = rect.local_x;
						rect._y = rect.local_x;
						rect._rotation = rect.local_rotation;
					}
					if(rect.transformed_rect == null && rect._rotation != 0) {
						var polygon = echo_shape_Polygon._pool.get();
						polygon.count = 4;
						var _g = 0;
						var _g1 = polygon.count;
						while(_g < _g1) {
							var i = _g++;
							if(polygon.local_vertices[i] == null) {
								var polygon1 = polygon.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								polygon1[i] = this1;
							}
						}
						var self = polygon.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = polygon.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						polygon.lock_sync();
						polygon.local_x = rect.local_x;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._x = polygon.local_x;
						}
						polygon.local_y = rect.local_y;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._y = polygon.local_y;
						}
						polygon.local_rotation = rect.local_rotation;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
						polygon.unlock_sync();
						polygon.pooled = false;
						rect.transformed_rect = polygon;
						rect.transformed_rect.set_parent(rect.parent_frame);
					} else if(rect.transformed_rect != null) {
						var _this = rect.transformed_rect;
						_this.count = 4;
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								var _this1 = _this.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
						}
						var self = _this.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = _this.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						_this.lock_sync();
						_this.local_x = rect.local_x;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._x = _this.local_x;
						}
						_this.local_y = rect.local_y;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._y = _this.local_y;
						}
						_this.local_rotation = rect.local_rotation;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
						_this.unlock_sync();
					}
				}
			} else {
				rect._y = rect.local_y;
			}
			rect.ex = width * 0.5;
			if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
			rect.ey = (height <= 0 ? width : height) * 0.5;
			if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
			rect.local_rotation = 0;
			if(rect.parent_frame != null) {
				if(!rect.sync_locked) {
					if(rect.parent_frame != null) {
						if(rect.local_x == 0 && rect.local_y == 0) {
							rect._x = rect.parent_frame.get_offset().x;
							rect._y = rect.parent_frame.get_offset().y;
						} else {
							var self = rect.sync_pos;
							self.x = rect.local_x;
							self.y = rect.local_y;
							var p = rect.sync_pos;
							var self = rect.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							rect._x = pos_x;
							rect._y = pos_y;
						}
						rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
					} else {
						rect._x = rect.local_x;
						rect._y = rect.local_x;
						rect._rotation = rect.local_rotation;
					}
					if(rect.transformed_rect == null && rect._rotation != 0) {
						var polygon = echo_shape_Polygon._pool.get();
						polygon.count = 4;
						var _g = 0;
						var _g1 = polygon.count;
						while(_g < _g1) {
							var i = _g++;
							if(polygon.local_vertices[i] == null) {
								var polygon1 = polygon.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								polygon1[i] = this1;
							}
						}
						var self = polygon.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = polygon.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						polygon.lock_sync();
						polygon.local_x = rect.local_x;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._x = polygon.local_x;
						}
						polygon.local_y = rect.local_y;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._y = polygon.local_y;
						}
						polygon.local_rotation = rect.local_rotation;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
						polygon.unlock_sync();
						polygon.pooled = false;
						rect.transformed_rect = polygon;
						rect.transformed_rect.set_parent(rect.parent_frame);
					} else if(rect.transformed_rect != null) {
						var _this = rect.transformed_rect;
						_this.count = 4;
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								var _this1 = _this.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
						}
						var self = _this.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = _this.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						_this.lock_sync();
						_this.local_x = rect.local_x;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._x = _this.local_x;
						}
						_this.local_y = rect.local_y;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._y = _this.local_y;
						}
						_this.local_rotation = rect.local_rotation;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
						_this.unlock_sync();
					}
				}
			} else {
				rect._rotation = rect.local_rotation;
			}
			return rect;
		} else {
			var x = this.x + this.width * 0.5;
			var y = this.y + this.height * 0.5;
			var width = this.width;
			var height = this.height;
			if(height == null) {
				height = 0;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var rect = echo_shape_Rect._pool.get();
			var x1 = x;
			var y1 = y;
			var width1 = width;
			var height1 = height;
			var rotation = 0;
			if(rotation == null) {
				rotation = 0;
			}
			if(height1 == null) {
				height1 = 0;
			}
			if(width1 == null) {
				width1 = 1;
			}
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			rect.local_x = x1;
			if(rect.parent_frame != null) {
				if(!rect.sync_locked) {
					if(rect.parent_frame != null) {
						if(rect.local_x == 0 && rect.local_y == 0) {
							rect._x = rect.parent_frame.get_offset().x;
							rect._y = rect.parent_frame.get_offset().y;
						} else {
							var self = rect.sync_pos;
							self.x = rect.local_x;
							self.y = rect.local_y;
							var p = rect.sync_pos;
							var self = rect.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							rect._x = pos_x;
							rect._y = pos_y;
						}
						rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
					} else {
						rect._x = rect.local_x;
						rect._y = rect.local_x;
						rect._rotation = rect.local_rotation;
					}
					if(rect.transformed_rect == null && rect._rotation != 0) {
						var polygon = echo_shape_Polygon._pool.get();
						polygon.count = 4;
						var _g = 0;
						var _g1 = polygon.count;
						while(_g < _g1) {
							var i = _g++;
							if(polygon.local_vertices[i] == null) {
								var polygon1 = polygon.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								polygon1[i] = this1;
							}
						}
						var self = polygon.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = polygon.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						polygon.lock_sync();
						polygon.local_x = rect.local_x;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._x = polygon.local_x;
						}
						polygon.local_y = rect.local_y;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._y = polygon.local_y;
						}
						polygon.local_rotation = rect.local_rotation;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
						polygon.unlock_sync();
						polygon.pooled = false;
						rect.transformed_rect = polygon;
						rect.transformed_rect.set_parent(rect.parent_frame);
					} else if(rect.transformed_rect != null) {
						var _this = rect.transformed_rect;
						_this.count = 4;
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								var _this1 = _this.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
						}
						var self = _this.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = _this.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						_this.lock_sync();
						_this.local_x = rect.local_x;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._x = _this.local_x;
						}
						_this.local_y = rect.local_y;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._y = _this.local_y;
						}
						_this.local_rotation = rect.local_rotation;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
						_this.unlock_sync();
					}
				}
			} else {
				rect._x = rect.local_x;
			}
			rect.local_y = y1;
			if(rect.parent_frame != null) {
				if(!rect.sync_locked) {
					if(rect.parent_frame != null) {
						if(rect.local_x == 0 && rect.local_y == 0) {
							rect._x = rect.parent_frame.get_offset().x;
							rect._y = rect.parent_frame.get_offset().y;
						} else {
							var self = rect.sync_pos;
							self.x = rect.local_x;
							self.y = rect.local_y;
							var p = rect.sync_pos;
							var self = rect.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							rect._x = pos_x;
							rect._y = pos_y;
						}
						rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
					} else {
						rect._x = rect.local_x;
						rect._y = rect.local_x;
						rect._rotation = rect.local_rotation;
					}
					if(rect.transformed_rect == null && rect._rotation != 0) {
						var polygon = echo_shape_Polygon._pool.get();
						polygon.count = 4;
						var _g = 0;
						var _g1 = polygon.count;
						while(_g < _g1) {
							var i = _g++;
							if(polygon.local_vertices[i] == null) {
								var polygon1 = polygon.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								polygon1[i] = this1;
							}
						}
						var self = polygon.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = polygon.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						polygon.lock_sync();
						polygon.local_x = rect.local_x;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._x = polygon.local_x;
						}
						polygon.local_y = rect.local_y;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._y = polygon.local_y;
						}
						polygon.local_rotation = rect.local_rotation;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
						polygon.unlock_sync();
						polygon.pooled = false;
						rect.transformed_rect = polygon;
						rect.transformed_rect.set_parent(rect.parent_frame);
					} else if(rect.transformed_rect != null) {
						var _this = rect.transformed_rect;
						_this.count = 4;
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								var _this1 = _this.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
						}
						var self = _this.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = _this.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						_this.lock_sync();
						_this.local_x = rect.local_x;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._x = _this.local_x;
						}
						_this.local_y = rect.local_y;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._y = _this.local_y;
						}
						_this.local_rotation = rect.local_rotation;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
						_this.unlock_sync();
					}
				}
			} else {
				rect._y = rect.local_y;
			}
			rect.ex = width1 * 0.5;
			if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
			rect.ey = (height1 <= 0 ? width1 : height1) * 0.5;
			if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
			rect.local_rotation = rotation;
			if(rect.parent_frame != null) {
				if(!rect.sync_locked) {
					if(rect.parent_frame != null) {
						if(rect.local_x == 0 && rect.local_y == 0) {
							rect._x = rect.parent_frame.get_offset().x;
							rect._y = rect.parent_frame.get_offset().y;
						} else {
							var self = rect.sync_pos;
							self.x = rect.local_x;
							self.y = rect.local_y;
							var p = rect.sync_pos;
							var self = rect.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							rect._x = pos_x;
							rect._y = pos_y;
						}
						rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
					} else {
						rect._x = rect.local_x;
						rect._y = rect.local_x;
						rect._rotation = rect.local_rotation;
					}
					if(rect.transformed_rect == null && rect._rotation != 0) {
						var polygon = echo_shape_Polygon._pool.get();
						polygon.count = 4;
						var _g = 0;
						var _g1 = polygon.count;
						while(_g < _g1) {
							var i = _g++;
							if(polygon.local_vertices[i] == null) {
								var polygon1 = polygon.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								polygon1[i] = this1;
							}
						}
						var self = polygon.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = polygon.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						polygon.lock_sync();
						polygon.local_x = rect.local_x;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._x = polygon.local_x;
						}
						polygon.local_y = rect.local_y;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._y = polygon.local_y;
						}
						polygon.local_rotation = rect.local_rotation;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
						polygon.unlock_sync();
						polygon.pooled = false;
						rect.transformed_rect = polygon;
						rect.transformed_rect.set_parent(rect.parent_frame);
					} else if(rect.transformed_rect != null) {
						var _this = rect.transformed_rect;
						_this.count = 4;
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								var _this1 = _this.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
						}
						var self = _this.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = _this.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						_this.lock_sync();
						_this.local_x = rect.local_x;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._x = _this.local_x;
						}
						_this.local_y = rect.local_y;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._y = _this.local_y;
						}
						_this.local_rotation = rect.local_rotation;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
						_this.unlock_sync();
					}
				}
			} else {
				rect._rotation = rect.local_rotation;
			}
			rect.pooled = false;
			return rect;
		}
	}
	,add: function(body) {
		if(body.world == this) {
			return body;
		}
		if(body.world != null) {
			if(body.world != null) {
				body.world.remove(body);
			}
			if(body.quadtree_data != null && body.quadtree_data.bounds != null) {
				body.quadtree_data.bounds.put();
			}
		}
		body.world = this;
		this.members.push(body);
		body.quadtree_data = new echo_data_QuadTreeData(body.id,body.bounds(),false);
		if(body.mass <= 0) {
			this.static_quadtree.insert(body.quadtree_data);
		} else {
			this.quadtree.insert(body.quadtree_data);
		}
		return body;
	}
	,remove: function(body) {
		this.quadtree.remove(body.quadtree_data);
		this.static_quadtree.remove(body.quadtree_data);
		HxOverrides.remove(this.members,body);
		body.world = null;
		return body;
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.members);
	}
	,dynamics: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.members;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(v.mass > 0) {
				_g.push(v);
			}
		}
		return _g;
	}
	,statics: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.members;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(v.mass <= 0) {
				_g.push(v);
			}
		}
		return _g;
	}
	,for_each: function(f,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var _g = 0;
		var _g1 = this.members;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			f(b);
		}
	}
	,for_each_dynamic: function(f,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var _g = 0;
		var _g1 = this.members;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.mass > 0) {
				f(b);
			}
		}
	}
	,for_each_static: function(f,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var _g = 0;
		var _g1 = this.members;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.mass <= 0) {
				f(b);
			}
		}
	}
	,clear: function() {
		this.members.length = 0;
		this.reset_quadtrees();
		this.listeners.clear();
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.members;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.world != null) {
				b.world.remove(b);
			}
			if(b.quadtree_data != null && b.quadtree_data.bounds != null) {
				b.quadtree_data.bounds.put();
			}
		}
		this.members = null;
		this.gravity = null;
		var _this = this.quadtree;
		if(!_this.pooled) {
			_this.pooled = true;
			var _g = 0;
			var _g1 = _this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(!child.pooled) {
					child.pooled = true;
					var _g2 = 0;
					var _g3 = child.children;
					while(_g2 < _g3.length) {
						var child1 = _g3[_g2];
						++_g2;
						child1.put();
					}
					child.children.length = 0;
					child.contents.length = 0;
					child.nodes_list.length = 0;
					echo_util_QuadTree._pool.put_unsafe(child);
				}
			}
			_this.children.length = 0;
			_this.contents.length = 0;
			_this.nodes_list.length = 0;
			echo_util_QuadTree._pool.put_unsafe(_this);
		}
		this.listeners.dispose();
		this.listeners = null;
		this.history = null;
	}
	,reset_quadtrees: function() {
		var _gthis = this;
		this.init = true;
		if(this.quadtree != null) {
			var _this = this.quadtree;
			if(!_this.pooled) {
				_this.pooled = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					if(!child.pooled) {
						child.pooled = true;
						var _g2 = 0;
						var _g3 = child.children;
						while(_g2 < _g3.length) {
							var child1 = _g3[_g2];
							++_g2;
							child1.put();
						}
						child.children.length = 0;
						child.contents.length = 0;
						child.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(child);
					}
				}
				_this.children.length = 0;
				_this.contents.length = 0;
				_this.nodes_list.length = 0;
				echo_util_QuadTree._pool.put_unsafe(_this);
			}
		}
		var qt = echo_util_QuadTree._pool.get();
		var x = 0;
		var y = 0;
		var width = 0;
		var height = 0;
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		width *= 0.5;
		height *= 0.5;
		qt.min_x = x - width;
		qt.min_y = y - height;
		qt.max_x = x + width;
		qt.max_y = y + height;
		var _g = 0;
		var _g1 = qt.children.length;
		while(_g < _g1) {
			var i = _g++;
			var _this = qt.children[i];
			var _g2 = 0;
			var _g3 = _this.children.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				_this.children[i1].clear_children();
				var _this1 = _this.children[i1];
				if(!_this1.pooled) {
					_this1.pooled = true;
					var _g4 = 0;
					var _g5 = _this1.children;
					while(_g4 < _g5.length) {
						var child = _g5[_g4];
						++_g4;
						if(!child.pooled) {
							child.pooled = true;
							var _g6 = 0;
							var _g7 = child.children;
							while(_g6 < _g7.length) {
								var child1 = _g7[_g6];
								++_g6;
								child1.put();
							}
							child.children.length = 0;
							child.contents.length = 0;
							child.nodes_list.length = 0;
							echo_util_QuadTree._pool.put_unsafe(child);
						}
					}
					_this1.children.length = 0;
					_this1.contents.length = 0;
					_this1.nodes_list.length = 0;
					echo_util_QuadTree._pool.put_unsafe(_this1);
				}
			}
			_this.children.length = 0;
			var _this2 = qt.children[i];
			if(!_this2.pooled) {
				_this2.pooled = true;
				var _g8 = 0;
				var _g9 = _this2.children;
				while(_g8 < _g9.length) {
					var child2 = _g9[_g8];
					++_g8;
					if(!child2.pooled) {
						child2.pooled = true;
						var _g10 = 0;
						var _g11 = child2.children;
						while(_g10 < _g11.length) {
							var child3 = _g11[_g10];
							++_g10;
							child3.put();
						}
						child2.children.length = 0;
						child2.contents.length = 0;
						child2.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(child2);
					}
				}
				_this2.children.length = 0;
				_this2.contents.length = 0;
				_this2.nodes_list.length = 0;
				echo_util_QuadTree._pool.put_unsafe(_this2);
			}
		}
		qt.children.length = 0;
		qt.pooled = false;
		this.quadtree = qt;
		if(this.static_quadtree != null) {
			var _this = this.static_quadtree;
			if(!_this.pooled) {
				_this.pooled = true;
				var _g = 0;
				var _g1 = _this.children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					if(!child.pooled) {
						child.pooled = true;
						var _g2 = 0;
						var _g3 = child.children;
						while(_g2 < _g3.length) {
							var child1 = _g3[_g2];
							++_g2;
							child1.put();
						}
						child.children.length = 0;
						child.contents.length = 0;
						child.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(child);
					}
				}
				_this.children.length = 0;
				_this.contents.length = 0;
				_this.nodes_list.length = 0;
				echo_util_QuadTree._pool.put_unsafe(_this);
			}
		}
		var qt = echo_util_QuadTree._pool.get();
		var x = 0;
		var y = 0;
		var width = 0;
		var height = 0;
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		width *= 0.5;
		height *= 0.5;
		qt.min_x = x - width;
		qt.min_y = y - height;
		qt.max_x = x + width;
		qt.max_y = y + height;
		var _g = 0;
		var _g1 = qt.children.length;
		while(_g < _g1) {
			var i = _g++;
			var _this = qt.children[i];
			var _g2 = 0;
			var _g3 = _this.children.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				_this.children[i1].clear_children();
				var _this1 = _this.children[i1];
				if(!_this1.pooled) {
					_this1.pooled = true;
					var _g4 = 0;
					var _g5 = _this1.children;
					while(_g4 < _g5.length) {
						var child = _g5[_g4];
						++_g4;
						if(!child.pooled) {
							child.pooled = true;
							var _g6 = 0;
							var _g7 = child.children;
							while(_g6 < _g7.length) {
								var child1 = _g7[_g6];
								++_g6;
								child1.put();
							}
							child.children.length = 0;
							child.contents.length = 0;
							child.nodes_list.length = 0;
							echo_util_QuadTree._pool.put_unsafe(child);
						}
					}
					_this1.children.length = 0;
					_this1.contents.length = 0;
					_this1.nodes_list.length = 0;
					echo_util_QuadTree._pool.put_unsafe(_this1);
				}
			}
			_this.children.length = 0;
			var _this2 = qt.children[i];
			if(!_this2.pooled) {
				_this2.pooled = true;
				var _g8 = 0;
				var _g9 = _this2.children;
				while(_g8 < _g9.length) {
					var child2 = _g9[_g8];
					++_g8;
					if(!child2.pooled) {
						child2.pooled = true;
						var _g10 = 0;
						var _g11 = child2.children;
						while(_g10 < _g11.length) {
							var child3 = _g11[_g10];
							++_g10;
							child3.put();
						}
						child2.children.length = 0;
						child2.contents.length = 0;
						child2.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(child2);
					}
				}
				_this2.children.length = 0;
				_this2.contents.length = 0;
				_this2.nodes_list.length = 0;
				echo_util_QuadTree._pool.put_unsafe(_this2);
			}
		}
		qt.children.length = 0;
		qt.pooled = false;
		this.static_quadtree = qt;
		var rect = null;
		var r;
		if(rect != null) {
			var x = this.x + this.width * 0.5;
			var y = this.y + this.height * 0.5;
			var width = this.width;
			var height = this.height;
			if(height == null) {
				height = 0;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			rect.local_x = x;
			if(rect.parent_frame != null) {
				if(!rect.sync_locked) {
					if(rect.parent_frame != null) {
						if(rect.local_x == 0 && rect.local_y == 0) {
							rect._x = rect.parent_frame.get_offset().x;
							rect._y = rect.parent_frame.get_offset().y;
						} else {
							var self = rect.sync_pos;
							self.x = rect.local_x;
							self.y = rect.local_y;
							var p = rect.sync_pos;
							var self = rect.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							rect._x = pos_x;
							rect._y = pos_y;
						}
						rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
					} else {
						rect._x = rect.local_x;
						rect._y = rect.local_x;
						rect._rotation = rect.local_rotation;
					}
					if(rect.transformed_rect == null && rect._rotation != 0) {
						var polygon = echo_shape_Polygon._pool.get();
						polygon.count = 4;
						var _g = 0;
						var _g1 = polygon.count;
						while(_g < _g1) {
							var i = _g++;
							if(polygon.local_vertices[i] == null) {
								var polygon1 = polygon.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								polygon1[i] = this1;
							}
						}
						var self = polygon.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = polygon.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						polygon.lock_sync();
						polygon.local_x = rect.local_x;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._x = polygon.local_x;
						}
						polygon.local_y = rect.local_y;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._y = polygon.local_y;
						}
						polygon.local_rotation = rect.local_rotation;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
						polygon.unlock_sync();
						polygon.pooled = false;
						rect.transformed_rect = polygon;
						rect.transformed_rect.set_parent(rect.parent_frame);
					} else if(rect.transformed_rect != null) {
						var _this = rect.transformed_rect;
						_this.count = 4;
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								var _this1 = _this.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
						}
						var self = _this.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = _this.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						_this.lock_sync();
						_this.local_x = rect.local_x;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._x = _this.local_x;
						}
						_this.local_y = rect.local_y;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._y = _this.local_y;
						}
						_this.local_rotation = rect.local_rotation;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
						_this.unlock_sync();
					}
				}
			} else {
				rect._x = rect.local_x;
			}
			rect.local_y = y;
			if(rect.parent_frame != null) {
				if(!rect.sync_locked) {
					if(rect.parent_frame != null) {
						if(rect.local_x == 0 && rect.local_y == 0) {
							rect._x = rect.parent_frame.get_offset().x;
							rect._y = rect.parent_frame.get_offset().y;
						} else {
							var self = rect.sync_pos;
							self.x = rect.local_x;
							self.y = rect.local_y;
							var p = rect.sync_pos;
							var self = rect.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							rect._x = pos_x;
							rect._y = pos_y;
						}
						rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
					} else {
						rect._x = rect.local_x;
						rect._y = rect.local_x;
						rect._rotation = rect.local_rotation;
					}
					if(rect.transformed_rect == null && rect._rotation != 0) {
						var polygon = echo_shape_Polygon._pool.get();
						polygon.count = 4;
						var _g = 0;
						var _g1 = polygon.count;
						while(_g < _g1) {
							var i = _g++;
							if(polygon.local_vertices[i] == null) {
								var polygon1 = polygon.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								polygon1[i] = this1;
							}
						}
						var self = polygon.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = polygon.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						polygon.lock_sync();
						polygon.local_x = rect.local_x;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._x = polygon.local_x;
						}
						polygon.local_y = rect.local_y;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._y = polygon.local_y;
						}
						polygon.local_rotation = rect.local_rotation;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
						polygon.unlock_sync();
						polygon.pooled = false;
						rect.transformed_rect = polygon;
						rect.transformed_rect.set_parent(rect.parent_frame);
					} else if(rect.transformed_rect != null) {
						var _this = rect.transformed_rect;
						_this.count = 4;
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								var _this1 = _this.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
						}
						var self = _this.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = _this.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						_this.lock_sync();
						_this.local_x = rect.local_x;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._x = _this.local_x;
						}
						_this.local_y = rect.local_y;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._y = _this.local_y;
						}
						_this.local_rotation = rect.local_rotation;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
						_this.unlock_sync();
					}
				}
			} else {
				rect._y = rect.local_y;
			}
			rect.ex = width * 0.5;
			if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
			rect.ey = (height <= 0 ? width : height) * 0.5;
			if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
			rect.local_rotation = 0;
			if(rect.parent_frame != null) {
				if(!rect.sync_locked) {
					if(rect.parent_frame != null) {
						if(rect.local_x == 0 && rect.local_y == 0) {
							rect._x = rect.parent_frame.get_offset().x;
							rect._y = rect.parent_frame.get_offset().y;
						} else {
							var self = rect.sync_pos;
							self.x = rect.local_x;
							self.y = rect.local_y;
							var p = rect.sync_pos;
							var self = rect.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							rect._x = pos_x;
							rect._y = pos_y;
						}
						rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
					} else {
						rect._x = rect.local_x;
						rect._y = rect.local_x;
						rect._rotation = rect.local_rotation;
					}
					if(rect.transformed_rect == null && rect._rotation != 0) {
						var polygon = echo_shape_Polygon._pool.get();
						polygon.count = 4;
						var _g = 0;
						var _g1 = polygon.count;
						while(_g < _g1) {
							var i = _g++;
							if(polygon.local_vertices[i] == null) {
								var polygon1 = polygon.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								polygon1[i] = this1;
							}
						}
						var self = polygon.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = polygon.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						polygon.lock_sync();
						polygon.local_x = rect.local_x;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._x = polygon.local_x;
						}
						polygon.local_y = rect.local_y;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._y = polygon.local_y;
						}
						polygon.local_rotation = rect.local_rotation;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
						polygon.unlock_sync();
						polygon.pooled = false;
						rect.transformed_rect = polygon;
						rect.transformed_rect.set_parent(rect.parent_frame);
					} else if(rect.transformed_rect != null) {
						var _this = rect.transformed_rect;
						_this.count = 4;
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								var _this1 = _this.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
						}
						var self = _this.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = _this.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						_this.lock_sync();
						_this.local_x = rect.local_x;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._x = _this.local_x;
						}
						_this.local_y = rect.local_y;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._y = _this.local_y;
						}
						_this.local_rotation = rect.local_rotation;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
						_this.unlock_sync();
					}
				}
			} else {
				rect._rotation = rect.local_rotation;
			}
			r = rect;
		} else {
			var x = this.x + this.width * 0.5;
			var y = this.y + this.height * 0.5;
			var width = this.width;
			var height = this.height;
			if(height == null) {
				height = 0;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var rect = echo_shape_Rect._pool.get();
			var x1 = x;
			var y1 = y;
			var width1 = width;
			var height1 = height;
			var rotation = 0;
			if(rotation == null) {
				rotation = 0;
			}
			if(height1 == null) {
				height1 = 0;
			}
			if(width1 == null) {
				width1 = 1;
			}
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			rect.local_x = x1;
			if(rect.parent_frame != null) {
				if(!rect.sync_locked) {
					if(rect.parent_frame != null) {
						if(rect.local_x == 0 && rect.local_y == 0) {
							rect._x = rect.parent_frame.get_offset().x;
							rect._y = rect.parent_frame.get_offset().y;
						} else {
							var self = rect.sync_pos;
							self.x = rect.local_x;
							self.y = rect.local_y;
							var p = rect.sync_pos;
							var self = rect.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							rect._x = pos_x;
							rect._y = pos_y;
						}
						rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
					} else {
						rect._x = rect.local_x;
						rect._y = rect.local_x;
						rect._rotation = rect.local_rotation;
					}
					if(rect.transformed_rect == null && rect._rotation != 0) {
						var polygon = echo_shape_Polygon._pool.get();
						polygon.count = 4;
						var _g = 0;
						var _g1 = polygon.count;
						while(_g < _g1) {
							var i = _g++;
							if(polygon.local_vertices[i] == null) {
								var polygon1 = polygon.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								polygon1[i] = this1;
							}
						}
						var self = polygon.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = polygon.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						polygon.lock_sync();
						polygon.local_x = rect.local_x;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._x = polygon.local_x;
						}
						polygon.local_y = rect.local_y;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._y = polygon.local_y;
						}
						polygon.local_rotation = rect.local_rotation;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
						polygon.unlock_sync();
						polygon.pooled = false;
						rect.transformed_rect = polygon;
						rect.transformed_rect.set_parent(rect.parent_frame);
					} else if(rect.transformed_rect != null) {
						var _this = rect.transformed_rect;
						_this.count = 4;
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								var _this1 = _this.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
						}
						var self = _this.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = _this.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						_this.lock_sync();
						_this.local_x = rect.local_x;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._x = _this.local_x;
						}
						_this.local_y = rect.local_y;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._y = _this.local_y;
						}
						_this.local_rotation = rect.local_rotation;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
						_this.unlock_sync();
					}
				}
			} else {
				rect._x = rect.local_x;
			}
			rect.local_y = y1;
			if(rect.parent_frame != null) {
				if(!rect.sync_locked) {
					if(rect.parent_frame != null) {
						if(rect.local_x == 0 && rect.local_y == 0) {
							rect._x = rect.parent_frame.get_offset().x;
							rect._y = rect.parent_frame.get_offset().y;
						} else {
							var self = rect.sync_pos;
							self.x = rect.local_x;
							self.y = rect.local_y;
							var p = rect.sync_pos;
							var self = rect.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							rect._x = pos_x;
							rect._y = pos_y;
						}
						rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
					} else {
						rect._x = rect.local_x;
						rect._y = rect.local_x;
						rect._rotation = rect.local_rotation;
					}
					if(rect.transformed_rect == null && rect._rotation != 0) {
						var polygon = echo_shape_Polygon._pool.get();
						polygon.count = 4;
						var _g = 0;
						var _g1 = polygon.count;
						while(_g < _g1) {
							var i = _g++;
							if(polygon.local_vertices[i] == null) {
								var polygon1 = polygon.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								polygon1[i] = this1;
							}
						}
						var self = polygon.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = polygon.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						polygon.lock_sync();
						polygon.local_x = rect.local_x;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._x = polygon.local_x;
						}
						polygon.local_y = rect.local_y;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._y = polygon.local_y;
						}
						polygon.local_rotation = rect.local_rotation;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
						polygon.unlock_sync();
						polygon.pooled = false;
						rect.transformed_rect = polygon;
						rect.transformed_rect.set_parent(rect.parent_frame);
					} else if(rect.transformed_rect != null) {
						var _this = rect.transformed_rect;
						_this.count = 4;
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								var _this1 = _this.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
						}
						var self = _this.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = _this.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						_this.lock_sync();
						_this.local_x = rect.local_x;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._x = _this.local_x;
						}
						_this.local_y = rect.local_y;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._y = _this.local_y;
						}
						_this.local_rotation = rect.local_rotation;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
						_this.unlock_sync();
					}
				}
			} else {
				rect._y = rect.local_y;
			}
			rect.ex = width1 * 0.5;
			if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
			rect.ey = (height1 <= 0 ? width1 : height1) * 0.5;
			if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
			rect.local_rotation = rotation;
			if(rect.parent_frame != null) {
				if(!rect.sync_locked) {
					if(rect.parent_frame != null) {
						if(rect.local_x == 0 && rect.local_y == 0) {
							rect._x = rect.parent_frame.get_offset().x;
							rect._y = rect.parent_frame.get_offset().y;
						} else {
							var self = rect.sync_pos;
							self.x = rect.local_x;
							self.y = rect.local_y;
							var p = rect.sync_pos;
							var self = rect.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							rect._x = pos_x;
							rect._y = pos_y;
						}
						rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
					} else {
						rect._x = rect.local_x;
						rect._y = rect.local_x;
						rect._rotation = rect.local_rotation;
					}
					if(rect.transformed_rect == null && rect._rotation != 0) {
						var polygon = echo_shape_Polygon._pool.get();
						polygon.count = 4;
						var _g = 0;
						var _g1 = polygon.count;
						while(_g < _g1) {
							var i = _g++;
							if(polygon.local_vertices[i] == null) {
								var polygon1 = polygon.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								polygon1[i] = this1;
							}
						}
						var self = polygon.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = polygon.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = polygon.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						polygon.lock_sync();
						polygon.local_x = rect.local_x;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._x = polygon.local_x;
						}
						polygon.local_y = rect.local_y;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._y = polygon.local_y;
						}
						polygon.local_rotation = rect.local_rotation;
						if(polygon.parent_frame != null) {
							if(!polygon.sync_locked) {
								if(polygon.parent_frame != null) {
									if(polygon.local_x == 0 && polygon.local_y == 0) {
										polygon._x = polygon.parent_frame.get_offset().x;
										polygon._y = polygon.parent_frame.get_offset().y;
									} else {
										var self = polygon.sync_pos;
										self.x = polygon.local_x;
										self.y = polygon.local_y;
										var p = polygon.sync_pos;
										var self = polygon.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										polygon._x = pos_x;
										polygon._y = pos_y;
									}
									polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
								} else {
									polygon._x = polygon.local_x;
									polygon._y = polygon.local_x;
									polygon._rotation = polygon.local_rotation;
								}
								polygon.dirty_vertices = true;
								polygon.dirty_bounds = true;
							}
						} else {
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
						polygon.unlock_sync();
						polygon.pooled = false;
						rect.transformed_rect = polygon;
						rect.transformed_rect.set_parent(rect.parent_frame);
					} else if(rect.transformed_rect != null) {
						var _this = rect.transformed_rect;
						_this.count = 4;
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								var _this1 = _this.local_vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
						}
						var self = _this.local_vertices[0];
						self.x = -rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[1];
						self.x = rect.ex;
						self.y = -rect.ey;
						var self = _this.local_vertices[2];
						self.x = rect.ex;
						self.y = rect.ey;
						var self = _this.local_vertices[3];
						self.x = -rect.ex;
						self.y = rect.ey;
						_this.lock_sync();
						_this.local_x = rect.local_x;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._x = _this.local_x;
						}
						_this.local_y = rect.local_y;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._y = _this.local_y;
						}
						_this.local_rotation = rect.local_rotation;
						if(_this.parent_frame != null) {
							if(!_this.sync_locked) {
								if(_this.parent_frame != null) {
									if(_this.local_x == 0 && _this.local_y == 0) {
										_this._x = _this.parent_frame.get_offset().x;
										_this._y = _this.parent_frame.get_offset().y;
									} else {
										var self = _this.sync_pos;
										self.x = _this.local_x;
										self.y = _this.local_y;
										var p = _this.sync_pos;
										var self = _this.parent_frame;
										var m = self.get_matrix();
										var self = m;
										var m_a = self.a;
										var m_b = self.b;
										var m_c = self.c;
										var m_d = self.d;
										var self_x = m_a * p.x + m_c * p.y;
										var self_y = m_b * p.x + m_d * p.y;
										var self = m;
										var b_x = self.tx;
										var b_y = self.ty;
										var pos_x = self_x;
										var pos_y = self_y;
										pos_x += b_x;
										pos_y += b_y;
										_this._x = pos_x;
										_this._y = pos_y;
									}
									_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
								} else {
									_this._x = _this.local_x;
									_this._y = _this.local_x;
									_this._rotation = _this.local_rotation;
								}
								_this.dirty_vertices = true;
								_this.dirty_bounds = true;
							}
						} else {
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
						_this.unlock_sync();
					}
				}
			} else {
				rect._rotation = rect.local_rotation;
			}
			rect.pooled = false;
			r = rect;
		}
		var r1 = r.to_aabb(true);
		var _this = this.quadtree;
		_this.min_x = r1.min_x;
		_this.max_x = r1.max_x;
		_this.min_y = r1.min_y;
		_this.max_y = r1.max_y;
		var _this = this.static_quadtree;
		_this.min_x = r1.min_x;
		_this.max_x = r1.max_x;
		_this.min_y = r1.min_y;
		_this.max_y = r1.max_y;
		var _g = 0;
		var _g1 = this.members;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.mass > 0) {
				b.dirty = true;
			} else {
				b.bounds(b.quadtree_data.bounds);
				_gthis.static_quadtree.update(b.quadtree_data);
			}
		}
	}
	,get_count: function() {
		return this.members.length;
	}
	,set_x: function(value) {
		this.x = value;
		if(this.init) {
			this.reset_quadtrees();
		}
		return this.x;
	}
	,set_y: function(value) {
		this.y = value;
		if(this.init) {
			this.reset_quadtrees();
		}
		return this.y;
	}
	,set_width: function(value) {
		this.width = value;
		if(this.init) {
			this.reset_quadtrees();
		}
		return this.height;
	}
	,set_height: function(value) {
		this.height = value;
		if(this.init) {
			this.reset_quadtrees();
		}
		return this.height;
	}
	,__class__: echo_World
	,__properties__: {get_count:"get_count",set_y:"set_y",set_x:"set_x",set_height:"set_height",set_width:"set_width"}
};
var echo_data_BodyState = function(id,x,y,rotation,velocity,acceleration,rotational_velocity) {
	this.id = id;
	this.x = x;
	this.y = y;
	this.rotation = rotation;
	var self = velocity;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	this.velocity = this1;
	var self = velocity;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	this.acceleration = this1;
	this.rotational_velocity = rotational_velocity;
};
$hxClasses["echo.data.BodyState"] = echo_data_BodyState;
echo_data_BodyState.__name__ = true;
echo_data_BodyState.prototype = {
	id: null
	,x: null
	,y: null
	,rotation: null
	,velocity: null
	,acceleration: null
	,rotational_velocity: null
	,__class__: echo_data_BodyState
};
var echo_data_Collision = function() {
	this.data = [];
};
$hxClasses["echo.data.Collision"] = echo_data_Collision;
echo_data_Collision.__name__ = true;
echo_data_Collision.__interfaces__ = [echo_util_IPooled];
echo_data_Collision.__properties__ = {get_pool:"get_pool"};
echo_data_Collision.get = function(a,b) {
	var c = echo_data_Collision._pool.get();
	c.a = a;
	c.b = b;
	c.data.length = 0;
	c.pooled = false;
	return c;
};
echo_data_Collision.get_pool = function() {
	return echo_data_Collision._pool;
};
echo_data_Collision.prototype = {
	a: null
	,b: null
	,data: null
	,pooled: null
	,put: function() {
		if(!this.pooled) {
			var _g = 0;
			var _g1 = this.data;
			while(_g < _g1.length) {
				var d = _g1[_g];
				++_g;
				d.put();
			}
			this.pooled = true;
			echo_data_Collision._pool.put_unsafe(this);
		}
	}
	,__class__: echo_data_Collision
};
var echo_data_CollisionData = function() {
	var this1 = new hxmath_math_Vector2Default(0,0);
	this.normal = this1;
};
$hxClasses["echo.data.CollisionData"] = echo_data_CollisionData;
echo_data_CollisionData.__name__ = true;
echo_data_CollisionData.__interfaces__ = [echo_util_IPooled];
echo_data_CollisionData.__properties__ = {get_pool:"get_pool"};
echo_data_CollisionData.get = function(overlap,x,y) {
	var c = echo_data_CollisionData._pool.get();
	c.sa = null;
	c.sb = null;
	c.overlap = overlap;
	var self = c.normal;
	self.x = x;
	self.y = y;
	c.pooled = false;
	return c;
};
echo_data_CollisionData.get_pool = function() {
	return echo_data_CollisionData._pool;
};
echo_data_CollisionData.prototype = {
	sa: null
	,sb: null
	,overlap: null
	,normal: null
	,pooled: null
	,set: function(overlap,x,y) {
		this.overlap = overlap;
		var self = this.normal;
		self.x = x;
		self.y = y;
	}
	,put: function() {
		if(!this.pooled) {
			this.pooled = true;
			echo_data_CollisionData._pool.put_unsafe(this);
		}
	}
	,__class__: echo_data_CollisionData
};
var echo_data_Intersection = function() {
	this.data = [];
};
$hxClasses["echo.data.Intersection"] = echo_data_Intersection;
echo_data_Intersection.__name__ = true;
echo_data_Intersection.__interfaces__ = [echo_util_IPooled];
echo_data_Intersection.__properties__ = {get_pool:"get_pool"};
echo_data_Intersection.get = function(line,body) {
	var i = echo_data_Intersection._pool.get();
	i.line = line;
	i.body = body;
	i.data.length = 0;
	i.pooled = false;
	return i;
};
echo_data_Intersection.get_pool = function() {
	return echo_data_Intersection._pool;
};
echo_data_Intersection.prototype = {
	line: null
	,body: null
	,data: null
	,pooled: null
	,put: function() {
		if(!this.pooled) {
			var _g = 0;
			var _g1 = this.data;
			while(_g < _g1.length) {
				var d = _g1[_g];
				++_g;
				d.put();
			}
			this.pooled = true;
			echo_data_Intersection._pool.put_unsafe(this);
		}
	}
	,get_closest: function() {
		if(this.data.length == 0) {
			return null;
		}
		if(this.data.length == 1) {
			return this.data[0];
		}
		var closest = this.data[0];
		var _g = 1;
		var _g1 = this.data.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.data[i] != null && this.data[i].distance < closest.distance) {
				closest = this.data[i];
			}
		}
		return closest;
	}
	,__class__: echo_data_Intersection
	,__properties__: {get_closest:"get_closest"}
};
var echo_data_IntersectionData = function() {
	var this1 = new hxmath_math_Vector2Default(0,0);
	this.hit = this1;
	var this1 = new hxmath_math_Vector2Default(0,0);
	this.normal = this1;
};
$hxClasses["echo.data.IntersectionData"] = echo_data_IntersectionData;
echo_data_IntersectionData.__name__ = true;
echo_data_IntersectionData.__interfaces__ = [echo_util_IPooled];
echo_data_IntersectionData.__properties__ = {get_pool:"get_pool"};
echo_data_IntersectionData.get = function(distance,overlap,x,y,normal_x,normal_y) {
	var i = echo_data_IntersectionData._pool.get();
	i.line = null;
	i.shape = null;
	i.distance = distance;
	i.overlap = overlap;
	var self = i.hit;
	self.x = x;
	self.y = y;
	var self = i.normal;
	self.x = normal_x;
	self.y = normal_y;
	i.pooled = false;
	return i;
};
echo_data_IntersectionData.get_pool = function() {
	return echo_data_IntersectionData._pool;
};
echo_data_IntersectionData.prototype = {
	line: null
	,shape: null
	,hit: null
	,distance: null
	,overlap: null
	,normal: null
	,pooled: null
	,set: function(distance,overlap,x,y,normal_x,normal_y) {
		this.distance = distance;
		this.overlap = overlap;
		var self = this.hit;
		self.x = x;
		self.y = y;
		var self = this.normal;
		self.x = normal_x;
		self.y = normal_y;
	}
	,put: function() {
		if(!this.pooled) {
			this.pooled = true;
			echo_data_IntersectionData._pool.put_unsafe(this);
		}
	}
	,__class__: echo_data_IntersectionData
};
var echo_data_QuadTreeData = function(id,bounds,flag) {
	this.id = id;
	this.bounds = bounds;
	this.flag = flag;
};
$hxClasses["echo.data.QuadTreeData"] = echo_data_QuadTreeData;
echo_data_QuadTreeData.__name__ = true;
echo_data_QuadTreeData.prototype = {
	id: null
	,bounds: null
	,flag: null
	,__class__: echo_data_QuadTreeData
};
var echo_shape_Circle = function() {
	echo_Shape.call(this);
	this.type = 1;
	this.radius = 0;
};
$hxClasses["echo.shape.Circle"] = echo_shape_Circle;
echo_shape_Circle.__name__ = true;
echo_shape_Circle.__interfaces__ = [echo_util_IPooled];
echo_shape_Circle.__properties__ = {get_pool:"get_pool"};
echo_shape_Circle.get = function(x,y,radius,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(radius == null) {
		radius = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var circle = echo_shape_Circle._pool.get();
	var x1 = x;
	var y1 = y;
	var radius1 = radius;
	var rotation1 = rotation;
	if(rotation1 == null) {
		rotation1 = 0;
	}
	if(radius1 == null) {
		radius1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	circle.local_x = x1;
	if(circle.parent_frame != null) {
		if(!circle.sync_locked) {
			if(circle.parent_frame != null) {
				if(circle.local_x == 0 && circle.local_y == 0) {
					circle._x = circle.parent_frame.get_offset().x;
					circle._y = circle.parent_frame.get_offset().y;
				} else {
					var self = circle.sync_pos;
					self.x = circle.local_x;
					self.y = circle.local_y;
					var p = circle.sync_pos;
					var self = circle.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					circle._x = pos_x;
					circle._y = pos_y;
				}
				circle._rotation = circle.parent_frame.get_angleDegrees() + circle.local_rotation;
			} else {
				circle._x = circle.local_x;
				circle._y = circle.local_x;
				circle._rotation = circle.local_rotation;
			}
		}
	} else {
		circle._x = circle.local_x;
	}
	circle.local_y = y1;
	if(circle.parent_frame != null) {
		if(!circle.sync_locked) {
			if(circle.parent_frame != null) {
				if(circle.local_x == 0 && circle.local_y == 0) {
					circle._x = circle.parent_frame.get_offset().x;
					circle._y = circle.parent_frame.get_offset().y;
				} else {
					var self = circle.sync_pos;
					self.x = circle.local_x;
					self.y = circle.local_y;
					var p = circle.sync_pos;
					var self = circle.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					circle._x = pos_x;
					circle._y = pos_y;
				}
				circle._rotation = circle.parent_frame.get_angleDegrees() + circle.local_rotation;
			} else {
				circle._x = circle.local_x;
				circle._y = circle.local_x;
				circle._rotation = circle.local_rotation;
			}
		}
	} else {
		circle._y = circle.local_y;
	}
	circle.local_rotation = rotation1;
	if(circle.parent_frame != null) {
		if(!circle.sync_locked) {
			if(circle.parent_frame != null) {
				if(circle.local_x == 0 && circle.local_y == 0) {
					circle._x = circle.parent_frame.get_offset().x;
					circle._y = circle.parent_frame.get_offset().y;
				} else {
					var self = circle.sync_pos;
					self.x = circle.local_x;
					self.y = circle.local_y;
					var p = circle.sync_pos;
					var self = circle.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					circle._x = pos_x;
					circle._y = pos_y;
				}
				circle._rotation = circle.parent_frame.get_angleDegrees() + circle.local_rotation;
			} else {
				circle._x = circle.local_x;
				circle._y = circle.local_x;
				circle._rotation = circle.local_rotation;
			}
		}
	} else {
		circle._rotation = circle.local_rotation;
	}
	circle.radius = radius1;
	circle.pooled = false;
	return circle;
};
echo_shape_Circle.get_pool = function() {
	return echo_shape_Circle._pool;
};
echo_shape_Circle.__super__ = echo_Shape;
echo_shape_Circle.prototype = $extend(echo_Shape.prototype,{
	radius: null
	,pooled: null
	,put: function() {
		this.parent_frame = null;
		if(!this.pooled) {
			this.pooled = true;
			echo_shape_Circle._pool.put_unsafe(this);
		}
	}
	,set: function(x,y,radius,rotation) {
		if(rotation == null) {
			rotation = 0;
		}
		if(radius == null) {
			radius = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.local_x = x;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
			}
		} else {
			this._x = this.local_x;
		}
		this.local_y = y;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
			}
		} else {
			this._y = this.local_y;
		}
		this.local_rotation = rotation;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
			}
		} else {
			this._rotation = this.local_rotation;
		}
		this.radius = radius;
		return this;
	}
	,load: function(circle) {
		var x = circle._x;
		var y = circle._y;
		var radius = circle.radius;
		if(radius == null) {
			radius = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.local_x = x;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
			}
		} else {
			this._x = this.local_x;
		}
		this.local_y = y;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
			}
		} else {
			this._y = this.local_y;
		}
		this.local_rotation = 0;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
			}
		} else {
			this._rotation = this.local_rotation;
		}
		this.radius = radius;
		return this;
	}
	,bounds: function(aabb) {
		if(aabb == null) {
			var x = this._x;
			var y = this._y;
			var width = this.radius * 2;
			var height = this.radius * 2;
			if(height == null) {
				height = 0;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var aabb1 = echo_util_AABB._pool.get();
			var x1 = x;
			var y1 = y;
			var width1 = width;
			var height1 = height;
			if(height1 == null) {
				height1 = 1;
			}
			if(width1 == null) {
				width1 = 1;
			}
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			width1 *= 0.5;
			height1 *= 0.5;
			aabb1.min_x = x1 - width1;
			aabb1.min_y = y1 - height1;
			aabb1.max_x = x1 + width1;
			aabb1.max_y = y1 + height1;
			aabb1.pooled = false;
			return aabb1;
		} else {
			var x = this._x;
			var y = this._y;
			var width = this.radius * 2;
			var height = this.radius * 2;
			if(height == null) {
				height = 1;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			width *= 0.5;
			height *= 0.5;
			aabb.min_x = x - width;
			aabb.min_y = y - height;
			aabb.max_x = x + width;
			aabb.max_y = y + height;
			return aabb;
		}
	}
	,clone: function() {
		var x = this.local_x;
		var y = this.local_y;
		var radius = this.radius;
		if(radius == null) {
			radius = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var circle = echo_shape_Circle._pool.get();
		var x1 = x;
		var y1 = y;
		var radius1 = radius;
		var rotation = 0;
		if(rotation == null) {
			rotation = 0;
		}
		if(radius1 == null) {
			radius1 = 1;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		circle.local_x = x1;
		if(circle.parent_frame != null) {
			if(!circle.sync_locked) {
				if(circle.parent_frame != null) {
					if(circle.local_x == 0 && circle.local_y == 0) {
						circle._x = circle.parent_frame.get_offset().x;
						circle._y = circle.parent_frame.get_offset().y;
					} else {
						var self = circle.sync_pos;
						self.x = circle.local_x;
						self.y = circle.local_y;
						var p = circle.sync_pos;
						var self = circle.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						circle._x = pos_x;
						circle._y = pos_y;
					}
					circle._rotation = circle.parent_frame.get_angleDegrees() + circle.local_rotation;
				} else {
					circle._x = circle.local_x;
					circle._y = circle.local_x;
					circle._rotation = circle.local_rotation;
				}
			}
		} else {
			circle._x = circle.local_x;
		}
		circle.local_y = y1;
		if(circle.parent_frame != null) {
			if(!circle.sync_locked) {
				if(circle.parent_frame != null) {
					if(circle.local_x == 0 && circle.local_y == 0) {
						circle._x = circle.parent_frame.get_offset().x;
						circle._y = circle.parent_frame.get_offset().y;
					} else {
						var self = circle.sync_pos;
						self.x = circle.local_x;
						self.y = circle.local_y;
						var p = circle.sync_pos;
						var self = circle.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						circle._x = pos_x;
						circle._y = pos_y;
					}
					circle._rotation = circle.parent_frame.get_angleDegrees() + circle.local_rotation;
				} else {
					circle._x = circle.local_x;
					circle._y = circle.local_x;
					circle._rotation = circle.local_rotation;
				}
			}
		} else {
			circle._y = circle.local_y;
		}
		circle.local_rotation = rotation;
		if(circle.parent_frame != null) {
			if(!circle.sync_locked) {
				if(circle.parent_frame != null) {
					if(circle.local_x == 0 && circle.local_y == 0) {
						circle._x = circle.parent_frame.get_offset().x;
						circle._y = circle.parent_frame.get_offset().y;
					} else {
						var self = circle.sync_pos;
						self.x = circle.local_x;
						self.y = circle.local_y;
						var p = circle.sync_pos;
						var self = circle.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						circle._x = pos_x;
						circle._y = pos_y;
					}
					circle._rotation = circle.parent_frame.get_angleDegrees() + circle.local_rotation;
				} else {
					circle._x = circle.local_x;
					circle._y = circle.local_x;
					circle._rotation = circle.local_rotation;
				}
			}
		} else {
			circle._rotation = circle.local_rotation;
		}
		circle.radius = radius1;
		circle.pooled = false;
		return circle;
	}
	,contains: function(v) {
		var b_x = this._x;
		var b_y = this._y;
		var self = v;
		var self1 = self;
		var self_x = self1.x;
		var self_y = self1.y;
		self_x -= b_x;
		self_y -= b_y;
		return Math.sqrt(self_x * self_x + self_y * self_y) < this.radius;
	}
	,intersect: function(l) {
		return echo_util_SAT.line_intersects_circle(l,this);
	}
	,overlaps: function(s) {
		var cd = s.collides(this);
		if(cd != null) {
			cd.put();
			return true;
		}
		return false;
	}
	,collides: function(s) {
		return s.collide_circle(this);
	}
	,collide_rect: function(r) {
		return echo_util_SAT.rect_and_circle(r,this,true);
	}
	,collide_circle: function(c) {
		return echo_util_SAT.circle_and_circle(c,this);
	}
	,collide_polygon: function(p) {
		return echo_util_SAT.circle_and_polygon(this,p,true);
	}
	,sync: function() {
		if(this.parent_frame != null) {
			if(this.local_x == 0 && this.local_y == 0) {
				this._x = this.parent_frame.get_offset().x;
				this._y = this.parent_frame.get_offset().y;
			} else {
				var self = this.sync_pos;
				self.x = this.local_x;
				self.y = this.local_y;
				var p = this.sync_pos;
				var self = this.parent_frame;
				var m = self.get_matrix();
				var self = m;
				var m_a = self.a;
				var m_b = self.b;
				var m_c = self.c;
				var m_d = self.d;
				var self_x = m_a * p.x + m_c * p.y;
				var self_y = m_b * p.x + m_d * p.y;
				var self = m;
				var b_x = self.tx;
				var b_y = self.ty;
				var pos_x = self_x;
				var pos_y = self_y;
				pos_x += b_x;
				pos_y += b_y;
				this._x = pos_x;
				this._y = pos_y;
			}
			this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
		} else {
			this._x = this.local_x;
			this._y = this.local_x;
			this._rotation = this.local_rotation;
		}
	}
	,get_diameter: function() {
		return this.radius * 2;
	}
	,get_top: function() {
		return this._y - this.radius;
	}
	,get_bottom: function() {
		return this._y + this.radius;
	}
	,get_left: function() {
		return this._x - this.radius;
	}
	,get_right: function() {
		return this._x + this.radius;
	}
	,set_diameter: function(value) {
		this.radius = value * 0.5;
		return value;
	}
	,__class__: echo_shape_Circle
	,__properties__: $extend(echo_Shape.prototype.__properties__,{set_diameter:"set_diameter",get_diameter:"get_diameter"})
});
var echo_shape_Polygon = function(vertices) {
	echo_Shape.call(this);
	this.type = 2;
	this._vertices = [];
	this._normals = [];
	var aabb = echo_util_AABB._pool.get();
	var x = 0;
	var y = 0;
	var width = 1;
	var height = 0;
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	width *= 0.5;
	height *= 0.5;
	aabb.min_x = x - width;
	aabb.min_y = y - height;
	aabb.max_x = x + width;
	aabb.max_y = y + height;
	aabb.pooled = false;
	this._bounds = aabb;
	var this1 = new hxmath_math_Vector2Default(0,0);
	this.local_frame = hxmath_frames_Frame2._new(this1,0);
	var count = null;
	this.local_vertices = vertices == null ? [] : vertices;
	this.count = count != null && count >= 0 ? count : this.local_vertices.length;
	if(count > this.local_vertices.length) {
		var _g = this.local_vertices.length;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var tmp = this.local_vertices;
			var this1 = new hxmath_math_Vector2Default(0,0);
			tmp[i] = this1;
		}
	}
	this.dirty_vertices = true;
	this.dirty_bounds = true;
};
$hxClasses["echo.shape.Polygon"] = echo_shape_Polygon;
echo_shape_Polygon.__name__ = true;
echo_shape_Polygon.__interfaces__ = [echo_util_IPooled];
echo_shape_Polygon.__properties__ = {get_pool:"get_pool"};
echo_shape_Polygon.get = function(x,y,sides,radius,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(radius == null) {
		radius = 1;
	}
	if(sides == null) {
		sides = 3;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(sides < 3) {
		throw haxe_Exception.thrown("Polygons require 3 sides as a minimum");
	}
	var polygon = echo_shape_Polygon._pool.get();
	var rot = Math.PI * 2 / sides;
	var angle;
	var verts = [];
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		angle = i * rot + (Math.PI - rot) * 0.5;
		var this1 = new hxmath_math_Vector2Default(Math.cos(angle) * radius,Math.sin(angle) * radius);
		var vector = this1;
		verts.push(vector);
	}
	var x1 = x;
	var y1 = y;
	var rotation1 = rotation;
	if(rotation1 == null) {
		rotation1 = 0;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	polygon.lock_sync();
	polygon.local_x = x1;
	if(polygon.parent_frame != null) {
		if(!polygon.sync_locked) {
			if(polygon.parent_frame != null) {
				if(polygon.local_x == 0 && polygon.local_y == 0) {
					polygon._x = polygon.parent_frame.get_offset().x;
					polygon._y = polygon.parent_frame.get_offset().y;
				} else {
					var self = polygon.sync_pos;
					self.x = polygon.local_x;
					self.y = polygon.local_y;
					var p = polygon.sync_pos;
					var self = polygon.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					polygon._x = pos_x;
					polygon._y = pos_y;
				}
				polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
			} else {
				polygon._x = polygon.local_x;
				polygon._y = polygon.local_x;
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
		}
	} else {
		polygon._x = polygon.local_x;
	}
	polygon.local_y = y1;
	if(polygon.parent_frame != null) {
		if(!polygon.sync_locked) {
			if(polygon.parent_frame != null) {
				if(polygon.local_x == 0 && polygon.local_y == 0) {
					polygon._x = polygon.parent_frame.get_offset().x;
					polygon._y = polygon.parent_frame.get_offset().y;
				} else {
					var self = polygon.sync_pos;
					self.x = polygon.local_x;
					self.y = polygon.local_y;
					var p = polygon.sync_pos;
					var self = polygon.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					polygon._x = pos_x;
					polygon._y = pos_y;
				}
				polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
			} else {
				polygon._x = polygon.local_x;
				polygon._y = polygon.local_x;
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
		}
	} else {
		polygon._y = polygon.local_y;
	}
	polygon.local_rotation = rotation1;
	if(polygon.parent_frame != null) {
		if(!polygon.sync_locked) {
			if(polygon.parent_frame != null) {
				if(polygon.local_x == 0 && polygon.local_y == 0) {
					polygon._x = polygon.parent_frame.get_offset().x;
					polygon._y = polygon.parent_frame.get_offset().y;
				} else {
					var self = polygon.sync_pos;
					self.x = polygon.local_x;
					self.y = polygon.local_y;
					var p = polygon.sync_pos;
					var self = polygon.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					polygon._x = pos_x;
					polygon._y = pos_y;
				}
				polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
			} else {
				polygon._x = polygon.local_x;
				polygon._y = polygon.local_x;
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
		}
	} else {
		polygon._rotation = polygon.local_rotation;
	}
	var count = null;
	polygon.local_vertices = verts == null ? [] : verts;
	polygon.count = count != null && count >= 0 ? count : polygon.local_vertices.length;
	if(count > polygon.local_vertices.length) {
		var _g = polygon.local_vertices.length;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var polygon1 = polygon.local_vertices;
			var this1 = new hxmath_math_Vector2Default(0,0);
			polygon1[i] = this1;
		}
	}
	polygon.dirty_vertices = true;
	polygon.dirty_bounds = true;
	polygon.unlock_sync();
	polygon.pooled = false;
	return polygon;
};
echo_shape_Polygon.get_from_vertices = function(x,y,rotation,vertices) {
	if(rotation == null) {
		rotation = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var polygon = echo_shape_Polygon._pool.get();
	var x1 = x;
	var y1 = y;
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	polygon.lock_sync();
	polygon.local_x = x1;
	if(polygon.parent_frame != null) {
		if(!polygon.sync_locked) {
			if(polygon.parent_frame != null) {
				if(polygon.local_x == 0 && polygon.local_y == 0) {
					polygon._x = polygon.parent_frame.get_offset().x;
					polygon._y = polygon.parent_frame.get_offset().y;
				} else {
					var self = polygon.sync_pos;
					self.x = polygon.local_x;
					self.y = polygon.local_y;
					var p = polygon.sync_pos;
					var self = polygon.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					polygon._x = pos_x;
					polygon._y = pos_y;
				}
				polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
			} else {
				polygon._x = polygon.local_x;
				polygon._y = polygon.local_x;
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
		}
	} else {
		polygon._x = polygon.local_x;
	}
	polygon.local_y = y1;
	if(polygon.parent_frame != null) {
		if(!polygon.sync_locked) {
			if(polygon.parent_frame != null) {
				if(polygon.local_x == 0 && polygon.local_y == 0) {
					polygon._x = polygon.parent_frame.get_offset().x;
					polygon._y = polygon.parent_frame.get_offset().y;
				} else {
					var self = polygon.sync_pos;
					self.x = polygon.local_x;
					self.y = polygon.local_y;
					var p = polygon.sync_pos;
					var self = polygon.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					polygon._x = pos_x;
					polygon._y = pos_y;
				}
				polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
			} else {
				polygon._x = polygon.local_x;
				polygon._y = polygon.local_x;
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
		}
	} else {
		polygon._y = polygon.local_y;
	}
	polygon.local_rotation = 0;
	if(polygon.parent_frame != null) {
		if(!polygon.sync_locked) {
			if(polygon.parent_frame != null) {
				if(polygon.local_x == 0 && polygon.local_y == 0) {
					polygon._x = polygon.parent_frame.get_offset().x;
					polygon._y = polygon.parent_frame.get_offset().y;
				} else {
					var self = polygon.sync_pos;
					self.x = polygon.local_x;
					self.y = polygon.local_y;
					var p = polygon.sync_pos;
					var self = polygon.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					polygon._x = pos_x;
					polygon._y = pos_y;
				}
				polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
			} else {
				polygon._x = polygon.local_x;
				polygon._y = polygon.local_x;
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
		}
	} else {
		polygon._rotation = polygon.local_rotation;
	}
	var count = null;
	polygon.local_vertices = vertices == null ? [] : vertices;
	polygon.count = count != null && count >= 0 ? count : polygon.local_vertices.length;
	if(count > polygon.local_vertices.length) {
		var _g = polygon.local_vertices.length;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var polygon1 = polygon.local_vertices;
			var this1 = new hxmath_math_Vector2Default(0,0);
			polygon1[i] = this1;
		}
	}
	polygon.dirty_vertices = true;
	polygon.dirty_bounds = true;
	polygon.unlock_sync();
	polygon.pooled = false;
	return polygon;
};
echo_shape_Polygon.get_from_rect = function(rect) {
	var polygon = echo_shape_Polygon._pool.get();
	polygon.count = 4;
	var _g = 0;
	var _g1 = polygon.count;
	while(_g < _g1) {
		var i = _g++;
		if(polygon.local_vertices[i] == null) {
			var polygon1 = polygon.local_vertices;
			var this1 = new hxmath_math_Vector2Default(0,0);
			polygon1[i] = this1;
		}
	}
	var self = polygon.local_vertices[0];
	self.x = -rect.ex;
	self.y = -rect.ey;
	var self = polygon.local_vertices[1];
	self.x = rect.ex;
	self.y = -rect.ey;
	var self = polygon.local_vertices[2];
	self.x = rect.ex;
	self.y = rect.ey;
	var self = polygon.local_vertices[3];
	self.x = -rect.ex;
	self.y = rect.ey;
	polygon.lock_sync();
	polygon.local_x = rect.local_x;
	if(polygon.parent_frame != null) {
		if(!polygon.sync_locked) {
			if(polygon.parent_frame != null) {
				if(polygon.local_x == 0 && polygon.local_y == 0) {
					polygon._x = polygon.parent_frame.get_offset().x;
					polygon._y = polygon.parent_frame.get_offset().y;
				} else {
					var self = polygon.sync_pos;
					self.x = polygon.local_x;
					self.y = polygon.local_y;
					var p = polygon.sync_pos;
					var self = polygon.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					polygon._x = pos_x;
					polygon._y = pos_y;
				}
				polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
			} else {
				polygon._x = polygon.local_x;
				polygon._y = polygon.local_x;
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
		}
	} else {
		polygon._x = polygon.local_x;
	}
	polygon.local_y = rect.local_y;
	if(polygon.parent_frame != null) {
		if(!polygon.sync_locked) {
			if(polygon.parent_frame != null) {
				if(polygon.local_x == 0 && polygon.local_y == 0) {
					polygon._x = polygon.parent_frame.get_offset().x;
					polygon._y = polygon.parent_frame.get_offset().y;
				} else {
					var self = polygon.sync_pos;
					self.x = polygon.local_x;
					self.y = polygon.local_y;
					var p = polygon.sync_pos;
					var self = polygon.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					polygon._x = pos_x;
					polygon._y = pos_y;
				}
				polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
			} else {
				polygon._x = polygon.local_x;
				polygon._y = polygon.local_x;
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
		}
	} else {
		polygon._y = polygon.local_y;
	}
	polygon.local_rotation = rect.local_rotation;
	if(polygon.parent_frame != null) {
		if(!polygon.sync_locked) {
			if(polygon.parent_frame != null) {
				if(polygon.local_x == 0 && polygon.local_y == 0) {
					polygon._x = polygon.parent_frame.get_offset().x;
					polygon._y = polygon.parent_frame.get_offset().y;
				} else {
					var self = polygon.sync_pos;
					self.x = polygon.local_x;
					self.y = polygon.local_y;
					var p = polygon.sync_pos;
					var self = polygon.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					polygon._x = pos_x;
					polygon._y = pos_y;
				}
				polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
			} else {
				polygon._x = polygon.local_x;
				polygon._y = polygon.local_x;
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
		}
	} else {
		polygon._rotation = polygon.local_rotation;
	}
	polygon.dirty_vertices = true;
	polygon.dirty_bounds = true;
	polygon.unlock_sync();
	polygon.pooled = false;
	return polygon;
};
echo_shape_Polygon.get_pool = function() {
	return echo_shape_Polygon._pool;
};
echo_shape_Polygon.__super__ = echo_Shape;
echo_shape_Polygon.prototype = $extend(echo_Shape.prototype,{
	count: null
	,pooled: null
	,local_frame: null
	,local_vertices: null
	,_vertices: null
	,_normals: null
	,_bounds: null
	,dirty_vertices: null
	,dirty_bounds: null
	,put: function() {
		this.parent_frame = null;
		if(!this.pooled) {
			this.pooled = true;
			echo_shape_Polygon._pool.put_unsafe(this);
		}
	}
	,set: function(x,y,rotation,vertices) {
		if(rotation == null) {
			rotation = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.lock_sync();
		this.local_x = x;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				this.dirty_vertices = true;
				this.dirty_bounds = true;
			}
		} else {
			this._x = this.local_x;
		}
		this.local_y = y;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				this.dirty_vertices = true;
				this.dirty_bounds = true;
			}
		} else {
			this._y = this.local_y;
		}
		this.local_rotation = rotation;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				this.dirty_vertices = true;
				this.dirty_bounds = true;
			}
		} else {
			this._rotation = this.local_rotation;
		}
		var count = null;
		this.local_vertices = vertices == null ? [] : vertices;
		this.count = count != null && count >= 0 ? count : this.local_vertices.length;
		if(count > this.local_vertices.length) {
			var _g = this.local_vertices.length;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				var tmp = this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				tmp[i] = this1;
			}
		}
		this.dirty_vertices = true;
		this.dirty_bounds = true;
		this.unlock_sync();
		return this;
	}
	,set_from_rect: function(rect) {
		this.count = 4;
		var _g = 0;
		var _g1 = this.count;
		while(_g < _g1) {
			var i = _g++;
			if(this.local_vertices[i] == null) {
				var tmp = this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				tmp[i] = this1;
			}
		}
		var self = this.local_vertices[0];
		self.x = -rect.ex;
		self.y = -rect.ey;
		var self = this.local_vertices[1];
		self.x = rect.ex;
		self.y = -rect.ey;
		var self = this.local_vertices[2];
		self.x = rect.ex;
		self.y = rect.ey;
		var self = this.local_vertices[3];
		self.x = -rect.ex;
		self.y = rect.ey;
		this.lock_sync();
		this.local_x = rect.local_x;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				this.dirty_vertices = true;
				this.dirty_bounds = true;
			}
		} else {
			this._x = this.local_x;
		}
		this.local_y = rect.local_y;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				this.dirty_vertices = true;
				this.dirty_bounds = true;
			}
		} else {
			this._y = this.local_y;
		}
		this.local_rotation = rect.local_rotation;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				this.dirty_vertices = true;
				this.dirty_bounds = true;
			}
		} else {
			this._rotation = this.local_rotation;
		}
		this.dirty_vertices = true;
		this.dirty_bounds = true;
		this.unlock_sync();
		return this;
	}
	,load: function(polygon) {
		var x = polygon._x;
		var y = polygon._y;
		var rotation = polygon._rotation;
		var vertices = polygon.local_vertices;
		if(rotation == null) {
			rotation = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.lock_sync();
		this.local_x = x;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				this.dirty_vertices = true;
				this.dirty_bounds = true;
			}
		} else {
			this._x = this.local_x;
		}
		this.local_y = y;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				this.dirty_vertices = true;
				this.dirty_bounds = true;
			}
		} else {
			this._y = this.local_y;
		}
		this.local_rotation = rotation;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				this.dirty_vertices = true;
				this.dirty_bounds = true;
			}
		} else {
			this._rotation = this.local_rotation;
		}
		var count = null;
		this.local_vertices = vertices == null ? [] : vertices;
		this.count = count != null && count >= 0 ? count : this.local_vertices.length;
		if(count > this.local_vertices.length) {
			var _g = this.local_vertices.length;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				var tmp = this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				tmp[i] = this1;
			}
		}
		this.dirty_vertices = true;
		this.dirty_bounds = true;
		this.unlock_sync();
		return this;
	}
	,bounds: function(aabb) {
		if(this.dirty_bounds) {
			this.dirty_bounds = false;
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				var self = this.local_frame.get_offset();
				self.x = this.local_x;
				self.y = this.local_y;
				this.local_frame.set_angleDegrees(this.local_rotation);
				if(this.parent_frame != null) {
					var self = this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var left = this.local_frame;
					var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
					left.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					if(this.local_vertices[i] == null) {
						continue;
					}
					if(this._vertices[i] == null) {
						var left = this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						left[i] = this1;
					}
					var p = this.local_vertices[i];
					var self = this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = this.sync_pos;
					var self = this._vertices[(i + 1) % this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = this._vertices[i];
					var self5 = this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(this._normals[i] == null) {
						var left = this._normals;
						var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						left[i] = this1;
					} else {
						var y = this.sync_pos.x;
						var self6 = this._normals[i];
						self6.x = -this.sync_pos.y;
						self6.y = y;
					}
					var self7 = this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			var left = this._vertices[0].x;
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				var self = this.local_frame.get_offset();
				self.x = this.local_x;
				self.y = this.local_y;
				this.local_frame.set_angleDegrees(this.local_rotation);
				if(this.parent_frame != null) {
					var self = this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var top = this.local_frame;
					var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
					top.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					if(this.local_vertices[i] == null) {
						continue;
					}
					if(this._vertices[i] == null) {
						var top = this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						top[i] = this1;
					}
					var p = this.local_vertices[i];
					var self = this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = this.sync_pos;
					var self = this._vertices[(i + 1) % this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = this._vertices[i];
					var self5 = this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(this._normals[i] == null) {
						var top = this._normals;
						var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						top[i] = this1;
					} else {
						var y = this.sync_pos.x;
						var self6 = this._normals[i];
						self6.x = -this.sync_pos.y;
						self6.y = y;
					}
					var self7 = this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			var top = this._vertices[0].y;
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				var self = this.local_frame.get_offset();
				self.x = this.local_x;
				self.y = this.local_y;
				this.local_frame.set_angleDegrees(this.local_rotation);
				if(this.parent_frame != null) {
					var self = this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var right = this.local_frame;
					var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
					right.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					if(this.local_vertices[i] == null) {
						continue;
					}
					if(this._vertices[i] == null) {
						var right = this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						right[i] = this1;
					}
					var p = this.local_vertices[i];
					var self = this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = this.sync_pos;
					var self = this._vertices[(i + 1) % this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = this._vertices[i];
					var self5 = this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(this._normals[i] == null) {
						var right = this._normals;
						var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						right[i] = this1;
					} else {
						var y = this.sync_pos.x;
						var self6 = this._normals[i];
						self6.x = -this.sync_pos.y;
						self6.y = y;
					}
					var self7 = this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			var right = this._vertices[0].x;
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				var self = this.local_frame.get_offset();
				self.x = this.local_x;
				self.y = this.local_y;
				this.local_frame.set_angleDegrees(this.local_rotation);
				if(this.parent_frame != null) {
					var self = this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var bottom = this.local_frame;
					var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
					bottom.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					if(this.local_vertices[i] == null) {
						continue;
					}
					if(this._vertices[i] == null) {
						var bottom = this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						bottom[i] = this1;
					}
					var p = this.local_vertices[i];
					var self = this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = this.sync_pos;
					var self = this._vertices[(i + 1) % this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = this._vertices[i];
					var self5 = this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(this._normals[i] == null) {
						var bottom = this._normals;
						var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						bottom[i] = this1;
					} else {
						var y = this.sync_pos.x;
						var self6 = this._normals[i];
						self6.x = -this.sync_pos.y;
						self6.y = y;
					}
					var self7 = this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			var bottom = this._vertices[0].y;
			var _g = 1;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				if(this.dirty_vertices) {
					this.dirty_vertices = false;
					var self = this.local_frame.get_offset();
					self.x = this.local_x;
					self.y = this.local_y;
					this.local_frame.set_angleDegrees(this.local_rotation);
					if(this.parent_frame != null) {
						var self1 = this.parent_frame;
						var self2 = self1.get_matrix();
						var m_a = self2.a;
						var m_b = self2.b;
						var m_c = self2.c;
						var m_d = self2.d;
						var v = this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var tmp = this.local_frame;
						var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
						tmp.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self3 = this.local_frame.get_offset();
						self3.x = pos_x;
						self3.y = pos_y;
					}
					while(this._vertices.length > this.count) this._vertices.pop();
					var _g2 = 0;
					var _g3 = this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(this.local_vertices[i1] == null) {
							continue;
						}
						if(this._vertices[i1] == null) {
							var tmp1 = this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							tmp1[i1] = this1;
						}
						var p = this.local_vertices[i1];
						var self4 = this.local_frame;
						var m = self4.get_matrix();
						var self5 = m;
						var m_a1 = self5.a;
						var m_b1 = self5.b;
						var m_c1 = self5.c;
						var m_d1 = self5.d;
						var self_x = m_a1 * p.x + m_c1 * p.y;
						var self_y = m_b1 * p.x + m_d1 * p.y;
						var self6 = m;
						var b_x = self6.tx;
						var b_y = self6.ty;
						var pos_x1 = self_x;
						var pos_y1 = self_y;
						pos_x1 += b_x;
						pos_y1 += b_y;
						var self7 = this._vertices[i1];
						self7.x = pos_x1;
						self7.y = pos_y1;
					}
					var _g4 = 0;
					var _g5 = this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = this.sync_pos;
						var self8 = this._vertices[(i2 + 1) % this.count];
						var self9 = self8;
						var value = self9.x;
						var self10 = target;
						self10.x = value;
						var self11 = self8;
						var value1 = self11.y;
						var self12 = target;
						self12.y = value1;
						var a1 = this._vertices[i2];
						var self13 = this.sync_pos;
						self13.x -= a1.x;
						self13.y -= a1.y;
						if(this._normals[i2] == null) {
							var tmp2 = this._normals;
							var this2 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
							tmp2[i2] = this2;
						} else {
							var y = this.sync_pos.x;
							var self14 = this._normals[i2];
							self14.x = -this.sync_pos.y;
							self14.y = y;
						}
						var self15 = this._normals[i2];
						var self16 = self15;
						var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
						if(length > 0.0) {
							var self17 = self15;
							self17.x /= length;
							self17.y /= length;
						}
					}
				}
				if(this._vertices[i].x < left) {
					if(this.dirty_vertices) {
						this.dirty_vertices = false;
						var self18 = this.local_frame.get_offset();
						self18.x = this.local_x;
						self18.y = this.local_y;
						this.local_frame.set_angleDegrees(this.local_rotation);
						if(this.parent_frame != null) {
							var self19 = this.parent_frame;
							var self20 = self19.get_matrix();
							var m_a2 = self20.a;
							var m_b2 = self20.b;
							var m_c2 = self20.c;
							var m_d2 = self20.d;
							var v1 = this.local_frame.get_offset();
							var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
							var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
							var a2 = this.parent_frame.get_offset();
							pos_x2 += a2.x;
							pos_y2 += a2.y;
							var left1 = this.local_frame;
							var x1 = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
							left1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self21 = this.local_frame.get_offset();
							self21.x = pos_x2;
							self21.y = pos_y2;
						}
						while(this._vertices.length > this.count) this._vertices.pop();
						var _g6 = 0;
						var _g7 = this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(this.local_vertices[i3] == null) {
								continue;
							}
							if(this._vertices[i3] == null) {
								var left2 = this._vertices;
								var this3 = new hxmath_math_Vector2Default(0,0);
								left2[i3] = this3;
							}
							var p1 = this.local_vertices[i3];
							var self22 = this.local_frame;
							var m1 = self22.get_matrix();
							var self23 = m1;
							var m_a3 = self23.a;
							var m_b3 = self23.b;
							var m_c3 = self23.c;
							var m_d3 = self23.d;
							var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
							var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
							var self24 = m1;
							var b_x1 = self24.tx;
							var b_y1 = self24.ty;
							var pos_x3 = self_x1;
							var pos_y3 = self_y1;
							pos_x3 += b_x1;
							pos_y3 += b_y1;
							var self25 = this._vertices[i3];
							self25.x = pos_x3;
							self25.y = pos_y3;
						}
						var _g8 = 0;
						var _g9 = this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = this.sync_pos;
							var self26 = this._vertices[(i4 + 1) % this.count];
							var self27 = self26;
							var value2 = self27.x;
							var self28 = target1;
							self28.x = value2;
							var self29 = self26;
							var value3 = self29.y;
							var self30 = target1;
							self30.y = value3;
							var a3 = this._vertices[i4];
							var self31 = this.sync_pos;
							self31.x -= a3.x;
							self31.y -= a3.y;
							if(this._normals[i4] == null) {
								var left3 = this._normals;
								var this4 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
								left3[i4] = this4;
							} else {
								var y1 = this.sync_pos.x;
								var self32 = this._normals[i4];
								self32.x = -this.sync_pos.y;
								self32.y = y1;
							}
							var self33 = this._normals[i4];
							var self34 = self33;
							var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
							if(length1 > 0.0) {
								var self35 = self33;
								self35.x /= length1;
								self35.y /= length1;
							}
						}
					}
					left = this._vertices[i].x;
				}
				if(this.dirty_vertices) {
					this.dirty_vertices = false;
					var self36 = this.local_frame.get_offset();
					self36.x = this.local_x;
					self36.y = this.local_y;
					this.local_frame.set_angleDegrees(this.local_rotation);
					if(this.parent_frame != null) {
						var self37 = this.parent_frame;
						var self38 = self37.get_matrix();
						var m_a4 = self38.a;
						var m_b4 = self38.b;
						var m_c4 = self38.c;
						var m_d4 = self38.d;
						var v2 = this.local_frame.get_offset();
						var pos_x4 = m_a4 * v2.x + m_c4 * v2.y;
						var pos_y4 = m_b4 * v2.x + m_d4 * v2.y;
						var a4 = this.parent_frame.get_offset();
						pos_x4 += a4.x;
						pos_y4 += a4.y;
						var tmp3 = this.local_frame;
						var x2 = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
						tmp3.set_angleDegrees(x2 < 0 ? 360 - -x2 % 360 : x2 % 360);
						var self39 = this.local_frame.get_offset();
						self39.x = pos_x4;
						self39.y = pos_y4;
					}
					while(this._vertices.length > this.count) this._vertices.pop();
					var _g10 = 0;
					var _g11 = this.count;
					while(_g10 < _g11) {
						var i5 = _g10++;
						if(this.local_vertices[i5] == null) {
							continue;
						}
						if(this._vertices[i5] == null) {
							var tmp4 = this._vertices;
							var this5 = new hxmath_math_Vector2Default(0,0);
							tmp4[i5] = this5;
						}
						var p2 = this.local_vertices[i5];
						var self40 = this.local_frame;
						var m2 = self40.get_matrix();
						var self41 = m2;
						var m_a5 = self41.a;
						var m_b5 = self41.b;
						var m_c5 = self41.c;
						var m_d5 = self41.d;
						var self_x2 = m_a5 * p2.x + m_c5 * p2.y;
						var self_y2 = m_b5 * p2.x + m_d5 * p2.y;
						var self42 = m2;
						var b_x2 = self42.tx;
						var b_y2 = self42.ty;
						var pos_x5 = self_x2;
						var pos_y5 = self_y2;
						pos_x5 += b_x2;
						pos_y5 += b_y2;
						var self43 = this._vertices[i5];
						self43.x = pos_x5;
						self43.y = pos_y5;
					}
					var _g12 = 0;
					var _g13 = this.count;
					while(_g12 < _g13) {
						var i6 = _g12++;
						var target2 = this.sync_pos;
						var self44 = this._vertices[(i6 + 1) % this.count];
						var self45 = self44;
						var value4 = self45.x;
						var self46 = target2;
						self46.x = value4;
						var self47 = self44;
						var value5 = self47.y;
						var self48 = target2;
						self48.y = value5;
						var a5 = this._vertices[i6];
						var self49 = this.sync_pos;
						self49.x -= a5.x;
						self49.y -= a5.y;
						if(this._normals[i6] == null) {
							var tmp5 = this._normals;
							var this6 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
							tmp5[i6] = this6;
						} else {
							var y2 = this.sync_pos.x;
							var self50 = this._normals[i6];
							self50.x = -this.sync_pos.y;
							self50.y = y2;
						}
						var self51 = this._normals[i6];
						var self52 = self51;
						var length2 = Math.sqrt(self52.x * self52.x + self52.y * self52.y);
						if(length2 > 0.0) {
							var self53 = self51;
							self53.x /= length2;
							self53.y /= length2;
						}
					}
				}
				if(this._vertices[i].y < top) {
					if(this.dirty_vertices) {
						this.dirty_vertices = false;
						var self54 = this.local_frame.get_offset();
						self54.x = this.local_x;
						self54.y = this.local_y;
						this.local_frame.set_angleDegrees(this.local_rotation);
						if(this.parent_frame != null) {
							var self55 = this.parent_frame;
							var self56 = self55.get_matrix();
							var m_a6 = self56.a;
							var m_b6 = self56.b;
							var m_c6 = self56.c;
							var m_d6 = self56.d;
							var v3 = this.local_frame.get_offset();
							var pos_x6 = m_a6 * v3.x + m_c6 * v3.y;
							var pos_y6 = m_b6 * v3.x + m_d6 * v3.y;
							var a6 = this.parent_frame.get_offset();
							pos_x6 += a6.x;
							pos_y6 += a6.y;
							var top1 = this.local_frame;
							var x3 = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
							top1.set_angleDegrees(x3 < 0 ? 360 - -x3 % 360 : x3 % 360);
							var self57 = this.local_frame.get_offset();
							self57.x = pos_x6;
							self57.y = pos_y6;
						}
						while(this._vertices.length > this.count) this._vertices.pop();
						var _g14 = 0;
						var _g15 = this.count;
						while(_g14 < _g15) {
							var i7 = _g14++;
							if(this.local_vertices[i7] == null) {
								continue;
							}
							if(this._vertices[i7] == null) {
								var top2 = this._vertices;
								var this7 = new hxmath_math_Vector2Default(0,0);
								top2[i7] = this7;
							}
							var p3 = this.local_vertices[i7];
							var self58 = this.local_frame;
							var m3 = self58.get_matrix();
							var self59 = m3;
							var m_a7 = self59.a;
							var m_b7 = self59.b;
							var m_c7 = self59.c;
							var m_d7 = self59.d;
							var self_x3 = m_a7 * p3.x + m_c7 * p3.y;
							var self_y3 = m_b7 * p3.x + m_d7 * p3.y;
							var self60 = m3;
							var b_x3 = self60.tx;
							var b_y3 = self60.ty;
							var pos_x7 = self_x3;
							var pos_y7 = self_y3;
							pos_x7 += b_x3;
							pos_y7 += b_y3;
							var self61 = this._vertices[i7];
							self61.x = pos_x7;
							self61.y = pos_y7;
						}
						var _g16 = 0;
						var _g17 = this.count;
						while(_g16 < _g17) {
							var i8 = _g16++;
							var target3 = this.sync_pos;
							var self62 = this._vertices[(i8 + 1) % this.count];
							var self63 = self62;
							var value6 = self63.x;
							var self64 = target3;
							self64.x = value6;
							var self65 = self62;
							var value7 = self65.y;
							var self66 = target3;
							self66.y = value7;
							var a7 = this._vertices[i8];
							var self67 = this.sync_pos;
							self67.x -= a7.x;
							self67.y -= a7.y;
							if(this._normals[i8] == null) {
								var top3 = this._normals;
								var this8 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
								top3[i8] = this8;
							} else {
								var y3 = this.sync_pos.x;
								var self68 = this._normals[i8];
								self68.x = -this.sync_pos.y;
								self68.y = y3;
							}
							var self69 = this._normals[i8];
							var self70 = self69;
							var length3 = Math.sqrt(self70.x * self70.x + self70.y * self70.y);
							if(length3 > 0.0) {
								var self71 = self69;
								self71.x /= length3;
								self71.y /= length3;
							}
						}
					}
					top = this._vertices[i].y;
				}
				if(this.dirty_vertices) {
					this.dirty_vertices = false;
					var self72 = this.local_frame.get_offset();
					self72.x = this.local_x;
					self72.y = this.local_y;
					this.local_frame.set_angleDegrees(this.local_rotation);
					if(this.parent_frame != null) {
						var self73 = this.parent_frame;
						var self74 = self73.get_matrix();
						var m_a8 = self74.a;
						var m_b8 = self74.b;
						var m_c8 = self74.c;
						var m_d8 = self74.d;
						var v4 = this.local_frame.get_offset();
						var pos_x8 = m_a8 * v4.x + m_c8 * v4.y;
						var pos_y8 = m_b8 * v4.x + m_d8 * v4.y;
						var a8 = this.parent_frame.get_offset();
						pos_x8 += a8.x;
						pos_y8 += a8.y;
						var tmp6 = this.local_frame;
						var x4 = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
						tmp6.set_angleDegrees(x4 < 0 ? 360 - -x4 % 360 : x4 % 360);
						var self75 = this.local_frame.get_offset();
						self75.x = pos_x8;
						self75.y = pos_y8;
					}
					while(this._vertices.length > this.count) this._vertices.pop();
					var _g18 = 0;
					var _g19 = this.count;
					while(_g18 < _g19) {
						var i9 = _g18++;
						if(this.local_vertices[i9] == null) {
							continue;
						}
						if(this._vertices[i9] == null) {
							var tmp7 = this._vertices;
							var this9 = new hxmath_math_Vector2Default(0,0);
							tmp7[i9] = this9;
						}
						var p4 = this.local_vertices[i9];
						var self76 = this.local_frame;
						var m4 = self76.get_matrix();
						var self77 = m4;
						var m_a9 = self77.a;
						var m_b9 = self77.b;
						var m_c9 = self77.c;
						var m_d9 = self77.d;
						var self_x4 = m_a9 * p4.x + m_c9 * p4.y;
						var self_y4 = m_b9 * p4.x + m_d9 * p4.y;
						var self78 = m4;
						var b_x4 = self78.tx;
						var b_y4 = self78.ty;
						var pos_x9 = self_x4;
						var pos_y9 = self_y4;
						pos_x9 += b_x4;
						pos_y9 += b_y4;
						var self79 = this._vertices[i9];
						self79.x = pos_x9;
						self79.y = pos_y9;
					}
					var _g20 = 0;
					var _g21 = this.count;
					while(_g20 < _g21) {
						var i10 = _g20++;
						var target4 = this.sync_pos;
						var self80 = this._vertices[(i10 + 1) % this.count];
						var self81 = self80;
						var value8 = self81.x;
						var self82 = target4;
						self82.x = value8;
						var self83 = self80;
						var value9 = self83.y;
						var self84 = target4;
						self84.y = value9;
						var a9 = this._vertices[i10];
						var self85 = this.sync_pos;
						self85.x -= a9.x;
						self85.y -= a9.y;
						if(this._normals[i10] == null) {
							var tmp8 = this._normals;
							var this10 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
							tmp8[i10] = this10;
						} else {
							var y4 = this.sync_pos.x;
							var self86 = this._normals[i10];
							self86.x = -this.sync_pos.y;
							self86.y = y4;
						}
						var self87 = this._normals[i10];
						var self88 = self87;
						var length4 = Math.sqrt(self88.x * self88.x + self88.y * self88.y);
						if(length4 > 0.0) {
							var self89 = self87;
							self89.x /= length4;
							self89.y /= length4;
						}
					}
				}
				if(this._vertices[i].x > right) {
					if(this.dirty_vertices) {
						this.dirty_vertices = false;
						var self90 = this.local_frame.get_offset();
						self90.x = this.local_x;
						self90.y = this.local_y;
						this.local_frame.set_angleDegrees(this.local_rotation);
						if(this.parent_frame != null) {
							var self91 = this.parent_frame;
							var self92 = self91.get_matrix();
							var m_a10 = self92.a;
							var m_b10 = self92.b;
							var m_c10 = self92.c;
							var m_d10 = self92.d;
							var v5 = this.local_frame.get_offset();
							var pos_x10 = m_a10 * v5.x + m_c10 * v5.y;
							var pos_y10 = m_b10 * v5.x + m_d10 * v5.y;
							var a10 = this.parent_frame.get_offset();
							pos_x10 += a10.x;
							pos_y10 += a10.y;
							var right1 = this.local_frame;
							var x5 = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
							right1.set_angleDegrees(x5 < 0 ? 360 - -x5 % 360 : x5 % 360);
							var self93 = this.local_frame.get_offset();
							self93.x = pos_x10;
							self93.y = pos_y10;
						}
						while(this._vertices.length > this.count) this._vertices.pop();
						var _g22 = 0;
						var _g23 = this.count;
						while(_g22 < _g23) {
							var i11 = _g22++;
							if(this.local_vertices[i11] == null) {
								continue;
							}
							if(this._vertices[i11] == null) {
								var right2 = this._vertices;
								var this11 = new hxmath_math_Vector2Default(0,0);
								right2[i11] = this11;
							}
							var p5 = this.local_vertices[i11];
							var self94 = this.local_frame;
							var m5 = self94.get_matrix();
							var self95 = m5;
							var m_a11 = self95.a;
							var m_b11 = self95.b;
							var m_c11 = self95.c;
							var m_d11 = self95.d;
							var self_x5 = m_a11 * p5.x + m_c11 * p5.y;
							var self_y5 = m_b11 * p5.x + m_d11 * p5.y;
							var self96 = m5;
							var b_x5 = self96.tx;
							var b_y5 = self96.ty;
							var pos_x11 = self_x5;
							var pos_y11 = self_y5;
							pos_x11 += b_x5;
							pos_y11 += b_y5;
							var self97 = this._vertices[i11];
							self97.x = pos_x11;
							self97.y = pos_y11;
						}
						var _g24 = 0;
						var _g25 = this.count;
						while(_g24 < _g25) {
							var i12 = _g24++;
							var target5 = this.sync_pos;
							var self98 = this._vertices[(i12 + 1) % this.count];
							var self99 = self98;
							var value10 = self99.x;
							var self100 = target5;
							self100.x = value10;
							var self101 = self98;
							var value11 = self101.y;
							var self102 = target5;
							self102.y = value11;
							var a11 = this._vertices[i12];
							var self103 = this.sync_pos;
							self103.x -= a11.x;
							self103.y -= a11.y;
							if(this._normals[i12] == null) {
								var right3 = this._normals;
								var this12 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
								right3[i12] = this12;
							} else {
								var y5 = this.sync_pos.x;
								var self104 = this._normals[i12];
								self104.x = -this.sync_pos.y;
								self104.y = y5;
							}
							var self105 = this._normals[i12];
							var self106 = self105;
							var length5 = Math.sqrt(self106.x * self106.x + self106.y * self106.y);
							if(length5 > 0.0) {
								var self107 = self105;
								self107.x /= length5;
								self107.y /= length5;
							}
						}
					}
					right = this._vertices[i].x;
				}
				if(this.dirty_vertices) {
					this.dirty_vertices = false;
					var self108 = this.local_frame.get_offset();
					self108.x = this.local_x;
					self108.y = this.local_y;
					this.local_frame.set_angleDegrees(this.local_rotation);
					if(this.parent_frame != null) {
						var self109 = this.parent_frame;
						var self110 = self109.get_matrix();
						var m_a12 = self110.a;
						var m_b12 = self110.b;
						var m_c12 = self110.c;
						var m_d12 = self110.d;
						var v6 = this.local_frame.get_offset();
						var pos_x12 = m_a12 * v6.x + m_c12 * v6.y;
						var pos_y12 = m_b12 * v6.x + m_d12 * v6.y;
						var a12 = this.parent_frame.get_offset();
						pos_x12 += a12.x;
						pos_y12 += a12.y;
						var tmp9 = this.local_frame;
						var x6 = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
						tmp9.set_angleDegrees(x6 < 0 ? 360 - -x6 % 360 : x6 % 360);
						var self111 = this.local_frame.get_offset();
						self111.x = pos_x12;
						self111.y = pos_y12;
					}
					while(this._vertices.length > this.count) this._vertices.pop();
					var _g26 = 0;
					var _g27 = this.count;
					while(_g26 < _g27) {
						var i13 = _g26++;
						if(this.local_vertices[i13] == null) {
							continue;
						}
						if(this._vertices[i13] == null) {
							var tmp10 = this._vertices;
							var this13 = new hxmath_math_Vector2Default(0,0);
							tmp10[i13] = this13;
						}
						var p6 = this.local_vertices[i13];
						var self112 = this.local_frame;
						var m6 = self112.get_matrix();
						var self113 = m6;
						var m_a13 = self113.a;
						var m_b13 = self113.b;
						var m_c13 = self113.c;
						var m_d13 = self113.d;
						var self_x6 = m_a13 * p6.x + m_c13 * p6.y;
						var self_y6 = m_b13 * p6.x + m_d13 * p6.y;
						var self114 = m6;
						var b_x6 = self114.tx;
						var b_y6 = self114.ty;
						var pos_x13 = self_x6;
						var pos_y13 = self_y6;
						pos_x13 += b_x6;
						pos_y13 += b_y6;
						var self115 = this._vertices[i13];
						self115.x = pos_x13;
						self115.y = pos_y13;
					}
					var _g28 = 0;
					var _g29 = this.count;
					while(_g28 < _g29) {
						var i14 = _g28++;
						var target6 = this.sync_pos;
						var self116 = this._vertices[(i14 + 1) % this.count];
						var self117 = self116;
						var value12 = self117.x;
						var self118 = target6;
						self118.x = value12;
						var self119 = self116;
						var value13 = self119.y;
						var self120 = target6;
						self120.y = value13;
						var a13 = this._vertices[i14];
						var self121 = this.sync_pos;
						self121.x -= a13.x;
						self121.y -= a13.y;
						if(this._normals[i14] == null) {
							var tmp11 = this._normals;
							var this14 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
							tmp11[i14] = this14;
						} else {
							var y6 = this.sync_pos.x;
							var self122 = this._normals[i14];
							self122.x = -this.sync_pos.y;
							self122.y = y6;
						}
						var self123 = this._normals[i14];
						var self124 = self123;
						var length6 = Math.sqrt(self124.x * self124.x + self124.y * self124.y);
						if(length6 > 0.0) {
							var self125 = self123;
							self125.x /= length6;
							self125.y /= length6;
						}
					}
				}
				if(this._vertices[i].y > bottom) {
					if(this.dirty_vertices) {
						this.dirty_vertices = false;
						var self126 = this.local_frame.get_offset();
						self126.x = this.local_x;
						self126.y = this.local_y;
						this.local_frame.set_angleDegrees(this.local_rotation);
						if(this.parent_frame != null) {
							var self127 = this.parent_frame;
							var self128 = self127.get_matrix();
							var m_a14 = self128.a;
							var m_b14 = self128.b;
							var m_c14 = self128.c;
							var m_d14 = self128.d;
							var v7 = this.local_frame.get_offset();
							var pos_x14 = m_a14 * v7.x + m_c14 * v7.y;
							var pos_y14 = m_b14 * v7.x + m_d14 * v7.y;
							var a14 = this.parent_frame.get_offset();
							pos_x14 += a14.x;
							pos_y14 += a14.y;
							var bottom1 = this.local_frame;
							var x7 = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
							bottom1.set_angleDegrees(x7 < 0 ? 360 - -x7 % 360 : x7 % 360);
							var self129 = this.local_frame.get_offset();
							self129.x = pos_x14;
							self129.y = pos_y14;
						}
						while(this._vertices.length > this.count) this._vertices.pop();
						var _g30 = 0;
						var _g31 = this.count;
						while(_g30 < _g31) {
							var i15 = _g30++;
							if(this.local_vertices[i15] == null) {
								continue;
							}
							if(this._vertices[i15] == null) {
								var bottom2 = this._vertices;
								var this15 = new hxmath_math_Vector2Default(0,0);
								bottom2[i15] = this15;
							}
							var p7 = this.local_vertices[i15];
							var self130 = this.local_frame;
							var m7 = self130.get_matrix();
							var self131 = m7;
							var m_a15 = self131.a;
							var m_b15 = self131.b;
							var m_c15 = self131.c;
							var m_d15 = self131.d;
							var self_x7 = m_a15 * p7.x + m_c15 * p7.y;
							var self_y7 = m_b15 * p7.x + m_d15 * p7.y;
							var self132 = m7;
							var b_x7 = self132.tx;
							var b_y7 = self132.ty;
							var pos_x15 = self_x7;
							var pos_y15 = self_y7;
							pos_x15 += b_x7;
							pos_y15 += b_y7;
							var self133 = this._vertices[i15];
							self133.x = pos_x15;
							self133.y = pos_y15;
						}
						var _g32 = 0;
						var _g33 = this.count;
						while(_g32 < _g33) {
							var i16 = _g32++;
							var target7 = this.sync_pos;
							var self134 = this._vertices[(i16 + 1) % this.count];
							var self135 = self134;
							var value14 = self135.x;
							var self136 = target7;
							self136.x = value14;
							var self137 = self134;
							var value15 = self137.y;
							var self138 = target7;
							self138.y = value15;
							var a15 = this._vertices[i16];
							var self139 = this.sync_pos;
							self139.x -= a15.x;
							self139.y -= a15.y;
							if(this._normals[i16] == null) {
								var bottom3 = this._normals;
								var this16 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
								bottom3[i16] = this16;
							} else {
								var y7 = this.sync_pos.x;
								var self140 = this._normals[i16];
								self140.x = -this.sync_pos.y;
								self140.y = y7;
							}
							var self141 = this._normals[i16];
							var self142 = self141;
							var length7 = Math.sqrt(self142.x * self142.x + self142.y * self142.y);
							if(length7 > 0.0) {
								var self143 = self141;
								self143.x /= length7;
								self143.y /= length7;
							}
						}
					}
					bottom = this._vertices[i].y;
				}
			}
			var _this = this._bounds;
			_this.min_x = left;
			_this.max_x = right;
			_this.min_y = top;
			_this.max_y = bottom;
		}
		if(aabb == null) {
			var _this = this._bounds;
			var min_x = _this.min_x;
			var min_y = _this.min_y;
			var max_x = _this.max_x;
			var max_y = _this.max_y;
			var aabb1 = echo_util_AABB._pool.get();
			aabb1.min_x = min_x;
			aabb1.max_x = max_x;
			aabb1.min_y = min_y;
			aabb1.max_y = max_y;
			aabb1.pooled = false;
			return aabb1;
		} else {
			var aabb1 = this._bounds;
			aabb.min_x = aabb1.min_x;
			aabb.max_x = aabb1.max_x;
			aabb.min_y = aabb1.min_y;
			aabb.max_y = aabb1.max_y;
			return aabb;
		}
	}
	,clone: function() {
		var x = this._x;
		var y = this._y;
		var rotation = this._rotation;
		var vertices = this.local_vertices;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var polygon = echo_shape_Polygon._pool.get();
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		polygon.lock_sync();
		polygon.local_x = x1;
		if(polygon.parent_frame != null) {
			if(!polygon.sync_locked) {
				if(polygon.parent_frame != null) {
					if(polygon.local_x == 0 && polygon.local_y == 0) {
						polygon._x = polygon.parent_frame.get_offset().x;
						polygon._y = polygon.parent_frame.get_offset().y;
					} else {
						var self = polygon.sync_pos;
						self.x = polygon.local_x;
						self.y = polygon.local_y;
						var p = polygon.sync_pos;
						var self = polygon.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						polygon._x = pos_x;
						polygon._y = pos_y;
					}
					polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
				} else {
					polygon._x = polygon.local_x;
					polygon._y = polygon.local_x;
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
			}
		} else {
			polygon._x = polygon.local_x;
		}
		polygon.local_y = y1;
		if(polygon.parent_frame != null) {
			if(!polygon.sync_locked) {
				if(polygon.parent_frame != null) {
					if(polygon.local_x == 0 && polygon.local_y == 0) {
						polygon._x = polygon.parent_frame.get_offset().x;
						polygon._y = polygon.parent_frame.get_offset().y;
					} else {
						var self = polygon.sync_pos;
						self.x = polygon.local_x;
						self.y = polygon.local_y;
						var p = polygon.sync_pos;
						var self = polygon.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						polygon._x = pos_x;
						polygon._y = pos_y;
					}
					polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
				} else {
					polygon._x = polygon.local_x;
					polygon._y = polygon.local_x;
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
			}
		} else {
			polygon._y = polygon.local_y;
		}
		polygon.local_rotation = 0;
		if(polygon.parent_frame != null) {
			if(!polygon.sync_locked) {
				if(polygon.parent_frame != null) {
					if(polygon.local_x == 0 && polygon.local_y == 0) {
						polygon._x = polygon.parent_frame.get_offset().x;
						polygon._y = polygon.parent_frame.get_offset().y;
					} else {
						var self = polygon.sync_pos;
						self.x = polygon.local_x;
						self.y = polygon.local_y;
						var p = polygon.sync_pos;
						var self = polygon.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						polygon._x = pos_x;
						polygon._y = pos_y;
					}
					polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
				} else {
					polygon._x = polygon.local_x;
					polygon._y = polygon.local_x;
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
			}
		} else {
			polygon._rotation = polygon.local_rotation;
		}
		var count = null;
		polygon.local_vertices = vertices == null ? [] : vertices;
		polygon.count = count != null && count >= 0 ? count : polygon.local_vertices.length;
		if(count > polygon.local_vertices.length) {
			var _g = polygon.local_vertices.length;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				var polygon1 = polygon.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				polygon1[i] = this1;
			}
		}
		polygon.dirty_vertices = true;
		polygon.dirty_bounds = true;
		polygon.unlock_sync();
		polygon.pooled = false;
		return polygon;
	}
	,contains: function(v) {
		var inside = false;
		var j = this.count - 1;
		var _g = 0;
		var _g1 = this.count;
		while(_g < _g1) {
			var i = _g++;
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				var self = this.local_frame.get_offset();
				self.x = this.local_x;
				self.y = this.local_y;
				this.local_frame.set_angleDegrees(this.local_rotation);
				if(this.parent_frame != null) {
					var self1 = this.parent_frame;
					var self2 = self1.get_matrix();
					var m_a = self2.a;
					var m_b = self2.b;
					var m_c = self2.c;
					var m_d = self2.d;
					var v1 = this.local_frame.get_offset();
					var pos_x = m_a * v1.x + m_c * v1.y;
					var pos_y = m_b * v1.x + m_d * v1.y;
					var a = this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var tmp = this.local_frame;
					var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
					tmp.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self3 = this.local_frame.get_offset();
					self3.x = pos_x;
					self3.y = pos_y;
				}
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g2 = 0;
				var _g3 = this.count;
				while(_g2 < _g3) {
					var i1 = _g2++;
					if(this.local_vertices[i1] == null) {
						continue;
					}
					if(this._vertices[i1] == null) {
						var tmp1 = this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						tmp1[i1] = this1;
					}
					var p = this.local_vertices[i1];
					var self4 = this.local_frame;
					var m = self4.get_matrix();
					var self5 = m;
					var m_a1 = self5.a;
					var m_b1 = self5.b;
					var m_c1 = self5.c;
					var m_d1 = self5.d;
					var self_x = m_a1 * p.x + m_c1 * p.y;
					var self_y = m_b1 * p.x + m_d1 * p.y;
					var self6 = m;
					var b_x = self6.tx;
					var b_y = self6.ty;
					var pos_x1 = self_x;
					var pos_y1 = self_y;
					pos_x1 += b_x;
					pos_y1 += b_y;
					var self7 = this._vertices[i1];
					self7.x = pos_x1;
					self7.y = pos_y1;
				}
				var _g4 = 0;
				var _g5 = this.count;
				while(_g4 < _g5) {
					var i2 = _g4++;
					var target = this.sync_pos;
					var self8 = this._vertices[(i2 + 1) % this.count];
					var self9 = self8;
					var value = self9.x;
					var self10 = target;
					self10.x = value;
					var self11 = self8;
					var value1 = self11.y;
					var self12 = target;
					self12.y = value1;
					var a1 = this._vertices[i2];
					var self13 = this.sync_pos;
					self13.x -= a1.x;
					self13.y -= a1.y;
					if(this._normals[i2] == null) {
						var tmp2 = this._normals;
						var this2 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						tmp2[i2] = this2;
					} else {
						var y = this.sync_pos.x;
						var self14 = this._normals[i2];
						self14.x = -this.sync_pos.y;
						self14.y = y;
					}
					var self15 = this._normals[i2];
					var self16 = self15;
					var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
					if(length > 0.0) {
						var self17 = self15;
						self17.x /= length;
						self17.y /= length;
					}
				}
			}
			var v2 = this._vertices;
			var tmp3 = v2[i].y > v.y != v2[j].y > v.y && v.x < (v2[j].x - v2[i].x) * (v.y - v2[i].y) / (v2[j].y - v2[i].y) + v2[i].x;
			j = i;
		}
		return inside;
	}
	,intersect: function(l) {
		return echo_util_SAT.line_intersects_polygon(l,this);
	}
	,overlaps: function(s) {
		var cd = s.collides(this);
		if(cd != null) {
			cd.put();
			return true;
		}
		return false;
	}
	,collides: function(s) {
		return s.collide_polygon(this);
	}
	,collide_rect: function(r) {
		return echo_util_SAT.rect_and_polygon(r,this,true);
	}
	,collide_circle: function(c) {
		return echo_util_SAT.circle_and_polygon(c,this);
	}
	,collide_polygon: function(p) {
		return echo_util_SAT.polygon_and_polygon(p,this,true);
	}
	,sync: function() {
		if(this.parent_frame != null) {
			if(this.local_x == 0 && this.local_y == 0) {
				this._x = this.parent_frame.get_offset().x;
				this._y = this.parent_frame.get_offset().y;
			} else {
				var self = this.sync_pos;
				self.x = this.local_x;
				self.y = this.local_y;
				var p = this.sync_pos;
				var self = this.parent_frame;
				var m = self.get_matrix();
				var self = m;
				var m_a = self.a;
				var m_b = self.b;
				var m_c = self.c;
				var m_d = self.d;
				var self_x = m_a * p.x + m_c * p.y;
				var self_y = m_b * p.x + m_d * p.y;
				var self = m;
				var b_x = self.tx;
				var b_y = self.ty;
				var pos_x = self_x;
				var pos_y = self_y;
				pos_x += b_x;
				pos_y += b_y;
				this._x = pos_x;
				this._y = pos_y;
			}
			this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
		} else {
			this._x = this.local_x;
			this._y = this.local_x;
			this._rotation = this.local_rotation;
		}
		this.dirty_vertices = true;
		this.dirty_bounds = true;
	}
	,get_top: function() {
		var tmp;
		if(this.count != 0) {
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				var self = this.local_frame.get_offset();
				self.x = this.local_x;
				self.y = this.local_y;
				this.local_frame.set_angleDegrees(this.local_rotation);
				if(this.parent_frame != null) {
					var self = this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var tmp1 = this.local_frame;
					var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
					tmp1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					if(this.local_vertices[i] == null) {
						continue;
					}
					if(this._vertices[i] == null) {
						var tmp1 = this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						tmp1[i] = this1;
					}
					var p = this.local_vertices[i];
					var self = this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = this.sync_pos;
					var self = this._vertices[(i + 1) % this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = this._vertices[i];
					var self5 = this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(this._normals[i] == null) {
						var tmp1 = this._normals;
						var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						tmp1[i] = this1;
					} else {
						var y = this.sync_pos.x;
						var self6 = this._normals[i];
						self6.x = -this.sync_pos.y;
						self6.y = y;
					}
					var self7 = this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			tmp = this._vertices[0] == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			return this._y;
		}
		if(this.dirty_vertices) {
			this.dirty_vertices = false;
			var self = this.local_frame.get_offset();
			self.x = this.local_x;
			self.y = this.local_y;
			this.local_frame.set_angleDegrees(this.local_rotation);
			if(this.parent_frame != null) {
				var self = this.parent_frame;
				var self1 = self.get_matrix();
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var v = this.local_frame.get_offset();
				var pos_x = m_a * v.x + m_c * v.y;
				var pos_y = m_b * v.x + m_d * v.y;
				var a = this.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var top = this.local_frame;
				var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
				top.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self = this.local_frame.get_offset();
				self.x = pos_x;
				self.y = pos_y;
			}
			while(this._vertices.length > this.count) this._vertices.pop();
			var _g = 0;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				if(this.local_vertices[i] == null) {
					continue;
				}
				if(this._vertices[i] == null) {
					var top = this._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					top[i] = this1;
				}
				var p = this.local_vertices[i];
				var self = this.local_frame;
				var m = self.get_matrix();
				var self1 = m;
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var self_x = m_a * p.x + m_c * p.y;
				var self_y = m_b * p.x + m_d * p.y;
				var self2 = m;
				var b_x = self2.tx;
				var b_y = self2.ty;
				var pos_x = self_x;
				var pos_y = self_y;
				pos_x += b_x;
				pos_y += b_y;
				var self3 = this._vertices[i];
				self3.x = pos_x;
				self3.y = pos_y;
			}
			var _g = 0;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				var target = this.sync_pos;
				var self = this._vertices[(i + 1) % this.count];
				var self1 = self;
				var value = self1.x;
				var self2 = target;
				self2.x = value;
				var self3 = self;
				var value1 = self3.y;
				var self4 = target;
				self4.y = value1;
				var a = this._vertices[i];
				var self5 = this.sync_pos;
				self5.x -= a.x;
				self5.y -= a.y;
				if(this._normals[i] == null) {
					var top = this._normals;
					var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
					top[i] = this1;
				} else {
					var y = this.sync_pos.x;
					var self6 = this._normals[i];
					self6.x = -this.sync_pos.y;
					self6.y = y;
				}
				var self7 = this._normals[i];
				var self8 = self7;
				var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
				if(length > 0.0) {
					var self9 = self7;
					self9.x /= length;
					self9.y /= length;
				}
			}
		}
		var top = this._vertices[0].y;
		var _g = 1;
		var _g1 = this.count;
		while(_g < _g1) {
			var i = _g++;
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				var self = this.local_frame.get_offset();
				self.x = this.local_x;
				self.y = this.local_y;
				this.local_frame.set_angleDegrees(this.local_rotation);
				if(this.parent_frame != null) {
					var self1 = this.parent_frame;
					var self2 = self1.get_matrix();
					var m_a = self2.a;
					var m_b = self2.b;
					var m_c = self2.c;
					var m_d = self2.d;
					var v = this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var tmp = this.local_frame;
					var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
					tmp.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self3 = this.local_frame.get_offset();
					self3.x = pos_x;
					self3.y = pos_y;
				}
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g2 = 0;
				var _g3 = this.count;
				while(_g2 < _g3) {
					var i1 = _g2++;
					if(this.local_vertices[i1] == null) {
						continue;
					}
					if(this._vertices[i1] == null) {
						var tmp1 = this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						tmp1[i1] = this1;
					}
					var p = this.local_vertices[i1];
					var self4 = this.local_frame;
					var m = self4.get_matrix();
					var self5 = m;
					var m_a1 = self5.a;
					var m_b1 = self5.b;
					var m_c1 = self5.c;
					var m_d1 = self5.d;
					var self_x = m_a1 * p.x + m_c1 * p.y;
					var self_y = m_b1 * p.x + m_d1 * p.y;
					var self6 = m;
					var b_x = self6.tx;
					var b_y = self6.ty;
					var pos_x1 = self_x;
					var pos_y1 = self_y;
					pos_x1 += b_x;
					pos_y1 += b_y;
					var self7 = this._vertices[i1];
					self7.x = pos_x1;
					self7.y = pos_y1;
				}
				var _g4 = 0;
				var _g5 = this.count;
				while(_g4 < _g5) {
					var i2 = _g4++;
					var target = this.sync_pos;
					var self8 = this._vertices[(i2 + 1) % this.count];
					var self9 = self8;
					var value = self9.x;
					var self10 = target;
					self10.x = value;
					var self11 = self8;
					var value1 = self11.y;
					var self12 = target;
					self12.y = value1;
					var a1 = this._vertices[i2];
					var self13 = this.sync_pos;
					self13.x -= a1.x;
					self13.y -= a1.y;
					if(this._normals[i2] == null) {
						var tmp2 = this._normals;
						var this2 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						tmp2[i2] = this2;
					} else {
						var y = this.sync_pos.x;
						var self14 = this._normals[i2];
						self14.x = -this.sync_pos.y;
						self14.y = y;
					}
					var self15 = this._normals[i2];
					var self16 = self15;
					var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
					if(length > 0.0) {
						var self17 = self15;
						self17.x /= length;
						self17.y /= length;
					}
				}
			}
			if(this._vertices[i].y < top) {
				if(this.dirty_vertices) {
					this.dirty_vertices = false;
					var self18 = this.local_frame.get_offset();
					self18.x = this.local_x;
					self18.y = this.local_y;
					this.local_frame.set_angleDegrees(this.local_rotation);
					if(this.parent_frame != null) {
						var self19 = this.parent_frame;
						var self20 = self19.get_matrix();
						var m_a2 = self20.a;
						var m_b2 = self20.b;
						var m_c2 = self20.c;
						var m_d2 = self20.d;
						var v1 = this.local_frame.get_offset();
						var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
						var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
						var a2 = this.parent_frame.get_offset();
						pos_x2 += a2.x;
						pos_y2 += a2.y;
						var top1 = this.local_frame;
						var x1 = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
						top1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
						var self21 = this.local_frame.get_offset();
						self21.x = pos_x2;
						self21.y = pos_y2;
					}
					while(this._vertices.length > this.count) this._vertices.pop();
					var _g6 = 0;
					var _g7 = this.count;
					while(_g6 < _g7) {
						var i3 = _g6++;
						if(this.local_vertices[i3] == null) {
							continue;
						}
						if(this._vertices[i3] == null) {
							var top2 = this._vertices;
							var this3 = new hxmath_math_Vector2Default(0,0);
							top2[i3] = this3;
						}
						var p1 = this.local_vertices[i3];
						var self22 = this.local_frame;
						var m1 = self22.get_matrix();
						var self23 = m1;
						var m_a3 = self23.a;
						var m_b3 = self23.b;
						var m_c3 = self23.c;
						var m_d3 = self23.d;
						var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
						var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
						var self24 = m1;
						var b_x1 = self24.tx;
						var b_y1 = self24.ty;
						var pos_x3 = self_x1;
						var pos_y3 = self_y1;
						pos_x3 += b_x1;
						pos_y3 += b_y1;
						var self25 = this._vertices[i3];
						self25.x = pos_x3;
						self25.y = pos_y3;
					}
					var _g8 = 0;
					var _g9 = this.count;
					while(_g8 < _g9) {
						var i4 = _g8++;
						var target1 = this.sync_pos;
						var self26 = this._vertices[(i4 + 1) % this.count];
						var self27 = self26;
						var value2 = self27.x;
						var self28 = target1;
						self28.x = value2;
						var self29 = self26;
						var value3 = self29.y;
						var self30 = target1;
						self30.y = value3;
						var a3 = this._vertices[i4];
						var self31 = this.sync_pos;
						self31.x -= a3.x;
						self31.y -= a3.y;
						if(this._normals[i4] == null) {
							var top3 = this._normals;
							var this4 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
							top3[i4] = this4;
						} else {
							var y1 = this.sync_pos.x;
							var self32 = this._normals[i4];
							self32.x = -this.sync_pos.y;
							self32.y = y1;
						}
						var self33 = this._normals[i4];
						var self34 = self33;
						var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
						if(length1 > 0.0) {
							var self35 = self33;
							self35.x /= length1;
							self35.y /= length1;
						}
					}
				}
				top = this._vertices[i].y;
			}
		}
		return top;
	}
	,get_bottom: function() {
		var tmp;
		if(this.count != 0) {
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				var self = this.local_frame.get_offset();
				self.x = this.local_x;
				self.y = this.local_y;
				this.local_frame.set_angleDegrees(this.local_rotation);
				if(this.parent_frame != null) {
					var self = this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var tmp1 = this.local_frame;
					var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
					tmp1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					if(this.local_vertices[i] == null) {
						continue;
					}
					if(this._vertices[i] == null) {
						var tmp1 = this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						tmp1[i] = this1;
					}
					var p = this.local_vertices[i];
					var self = this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = this.sync_pos;
					var self = this._vertices[(i + 1) % this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = this._vertices[i];
					var self5 = this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(this._normals[i] == null) {
						var tmp1 = this._normals;
						var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						tmp1[i] = this1;
					} else {
						var y = this.sync_pos.x;
						var self6 = this._normals[i];
						self6.x = -this.sync_pos.y;
						self6.y = y;
					}
					var self7 = this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			tmp = this._vertices[0] == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			return this._y;
		}
		if(this.dirty_vertices) {
			this.dirty_vertices = false;
			var self = this.local_frame.get_offset();
			self.x = this.local_x;
			self.y = this.local_y;
			this.local_frame.set_angleDegrees(this.local_rotation);
			if(this.parent_frame != null) {
				var self = this.parent_frame;
				var self1 = self.get_matrix();
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var v = this.local_frame.get_offset();
				var pos_x = m_a * v.x + m_c * v.y;
				var pos_y = m_b * v.x + m_d * v.y;
				var a = this.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var bottom = this.local_frame;
				var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
				bottom.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self = this.local_frame.get_offset();
				self.x = pos_x;
				self.y = pos_y;
			}
			while(this._vertices.length > this.count) this._vertices.pop();
			var _g = 0;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				if(this.local_vertices[i] == null) {
					continue;
				}
				if(this._vertices[i] == null) {
					var bottom = this._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					bottom[i] = this1;
				}
				var p = this.local_vertices[i];
				var self = this.local_frame;
				var m = self.get_matrix();
				var self1 = m;
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var self_x = m_a * p.x + m_c * p.y;
				var self_y = m_b * p.x + m_d * p.y;
				var self2 = m;
				var b_x = self2.tx;
				var b_y = self2.ty;
				var pos_x = self_x;
				var pos_y = self_y;
				pos_x += b_x;
				pos_y += b_y;
				var self3 = this._vertices[i];
				self3.x = pos_x;
				self3.y = pos_y;
			}
			var _g = 0;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				var target = this.sync_pos;
				var self = this._vertices[(i + 1) % this.count];
				var self1 = self;
				var value = self1.x;
				var self2 = target;
				self2.x = value;
				var self3 = self;
				var value1 = self3.y;
				var self4 = target;
				self4.y = value1;
				var a = this._vertices[i];
				var self5 = this.sync_pos;
				self5.x -= a.x;
				self5.y -= a.y;
				if(this._normals[i] == null) {
					var bottom = this._normals;
					var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
					bottom[i] = this1;
				} else {
					var y = this.sync_pos.x;
					var self6 = this._normals[i];
					self6.x = -this.sync_pos.y;
					self6.y = y;
				}
				var self7 = this._normals[i];
				var self8 = self7;
				var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
				if(length > 0.0) {
					var self9 = self7;
					self9.x /= length;
					self9.y /= length;
				}
			}
		}
		var bottom = this._vertices[0].y;
		var _g = 1;
		var _g1 = this.count;
		while(_g < _g1) {
			var i = _g++;
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				var self = this.local_frame.get_offset();
				self.x = this.local_x;
				self.y = this.local_y;
				this.local_frame.set_angleDegrees(this.local_rotation);
				if(this.parent_frame != null) {
					var self1 = this.parent_frame;
					var self2 = self1.get_matrix();
					var m_a = self2.a;
					var m_b = self2.b;
					var m_c = self2.c;
					var m_d = self2.d;
					var v = this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var tmp = this.local_frame;
					var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
					tmp.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self3 = this.local_frame.get_offset();
					self3.x = pos_x;
					self3.y = pos_y;
				}
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g2 = 0;
				var _g3 = this.count;
				while(_g2 < _g3) {
					var i1 = _g2++;
					if(this.local_vertices[i1] == null) {
						continue;
					}
					if(this._vertices[i1] == null) {
						var tmp1 = this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						tmp1[i1] = this1;
					}
					var p = this.local_vertices[i1];
					var self4 = this.local_frame;
					var m = self4.get_matrix();
					var self5 = m;
					var m_a1 = self5.a;
					var m_b1 = self5.b;
					var m_c1 = self5.c;
					var m_d1 = self5.d;
					var self_x = m_a1 * p.x + m_c1 * p.y;
					var self_y = m_b1 * p.x + m_d1 * p.y;
					var self6 = m;
					var b_x = self6.tx;
					var b_y = self6.ty;
					var pos_x1 = self_x;
					var pos_y1 = self_y;
					pos_x1 += b_x;
					pos_y1 += b_y;
					var self7 = this._vertices[i1];
					self7.x = pos_x1;
					self7.y = pos_y1;
				}
				var _g4 = 0;
				var _g5 = this.count;
				while(_g4 < _g5) {
					var i2 = _g4++;
					var target = this.sync_pos;
					var self8 = this._vertices[(i2 + 1) % this.count];
					var self9 = self8;
					var value = self9.x;
					var self10 = target;
					self10.x = value;
					var self11 = self8;
					var value1 = self11.y;
					var self12 = target;
					self12.y = value1;
					var a1 = this._vertices[i2];
					var self13 = this.sync_pos;
					self13.x -= a1.x;
					self13.y -= a1.y;
					if(this._normals[i2] == null) {
						var tmp2 = this._normals;
						var this2 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						tmp2[i2] = this2;
					} else {
						var y = this.sync_pos.x;
						var self14 = this._normals[i2];
						self14.x = -this.sync_pos.y;
						self14.y = y;
					}
					var self15 = this._normals[i2];
					var self16 = self15;
					var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
					if(length > 0.0) {
						var self17 = self15;
						self17.x /= length;
						self17.y /= length;
					}
				}
			}
			if(this._vertices[i].y > bottom) {
				if(this.dirty_vertices) {
					this.dirty_vertices = false;
					var self18 = this.local_frame.get_offset();
					self18.x = this.local_x;
					self18.y = this.local_y;
					this.local_frame.set_angleDegrees(this.local_rotation);
					if(this.parent_frame != null) {
						var self19 = this.parent_frame;
						var self20 = self19.get_matrix();
						var m_a2 = self20.a;
						var m_b2 = self20.b;
						var m_c2 = self20.c;
						var m_d2 = self20.d;
						var v1 = this.local_frame.get_offset();
						var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
						var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
						var a2 = this.parent_frame.get_offset();
						pos_x2 += a2.x;
						pos_y2 += a2.y;
						var bottom1 = this.local_frame;
						var x1 = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
						bottom1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
						var self21 = this.local_frame.get_offset();
						self21.x = pos_x2;
						self21.y = pos_y2;
					}
					while(this._vertices.length > this.count) this._vertices.pop();
					var _g6 = 0;
					var _g7 = this.count;
					while(_g6 < _g7) {
						var i3 = _g6++;
						if(this.local_vertices[i3] == null) {
							continue;
						}
						if(this._vertices[i3] == null) {
							var bottom2 = this._vertices;
							var this3 = new hxmath_math_Vector2Default(0,0);
							bottom2[i3] = this3;
						}
						var p1 = this.local_vertices[i3];
						var self22 = this.local_frame;
						var m1 = self22.get_matrix();
						var self23 = m1;
						var m_a3 = self23.a;
						var m_b3 = self23.b;
						var m_c3 = self23.c;
						var m_d3 = self23.d;
						var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
						var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
						var self24 = m1;
						var b_x1 = self24.tx;
						var b_y1 = self24.ty;
						var pos_x3 = self_x1;
						var pos_y3 = self_y1;
						pos_x3 += b_x1;
						pos_y3 += b_y1;
						var self25 = this._vertices[i3];
						self25.x = pos_x3;
						self25.y = pos_y3;
					}
					var _g8 = 0;
					var _g9 = this.count;
					while(_g8 < _g9) {
						var i4 = _g8++;
						var target1 = this.sync_pos;
						var self26 = this._vertices[(i4 + 1) % this.count];
						var self27 = self26;
						var value2 = self27.x;
						var self28 = target1;
						self28.x = value2;
						var self29 = self26;
						var value3 = self29.y;
						var self30 = target1;
						self30.y = value3;
						var a3 = this._vertices[i4];
						var self31 = this.sync_pos;
						self31.x -= a3.x;
						self31.y -= a3.y;
						if(this._normals[i4] == null) {
							var bottom3 = this._normals;
							var this4 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
							bottom3[i4] = this4;
						} else {
							var y1 = this.sync_pos.x;
							var self32 = this._normals[i4];
							self32.x = -this.sync_pos.y;
							self32.y = y1;
						}
						var self33 = this._normals[i4];
						var self34 = self33;
						var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
						if(length1 > 0.0) {
							var self35 = self33;
							self35.x /= length1;
							self35.y /= length1;
						}
					}
				}
				bottom = this._vertices[i].y;
			}
		}
		return bottom;
	}
	,get_left: function() {
		var tmp;
		if(this.count != 0) {
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				var self = this.local_frame.get_offset();
				self.x = this.local_x;
				self.y = this.local_y;
				this.local_frame.set_angleDegrees(this.local_rotation);
				if(this.parent_frame != null) {
					var self = this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var tmp1 = this.local_frame;
					var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
					tmp1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					if(this.local_vertices[i] == null) {
						continue;
					}
					if(this._vertices[i] == null) {
						var tmp1 = this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						tmp1[i] = this1;
					}
					var p = this.local_vertices[i];
					var self = this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = this.sync_pos;
					var self = this._vertices[(i + 1) % this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = this._vertices[i];
					var self5 = this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(this._normals[i] == null) {
						var tmp1 = this._normals;
						var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						tmp1[i] = this1;
					} else {
						var y = this.sync_pos.x;
						var self6 = this._normals[i];
						self6.x = -this.sync_pos.y;
						self6.y = y;
					}
					var self7 = this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			tmp = this._vertices[0] == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			return this._x;
		}
		if(this.dirty_vertices) {
			this.dirty_vertices = false;
			var self = this.local_frame.get_offset();
			self.x = this.local_x;
			self.y = this.local_y;
			this.local_frame.set_angleDegrees(this.local_rotation);
			if(this.parent_frame != null) {
				var self = this.parent_frame;
				var self1 = self.get_matrix();
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var v = this.local_frame.get_offset();
				var pos_x = m_a * v.x + m_c * v.y;
				var pos_y = m_b * v.x + m_d * v.y;
				var a = this.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var left = this.local_frame;
				var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
				left.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self = this.local_frame.get_offset();
				self.x = pos_x;
				self.y = pos_y;
			}
			while(this._vertices.length > this.count) this._vertices.pop();
			var _g = 0;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				if(this.local_vertices[i] == null) {
					continue;
				}
				if(this._vertices[i] == null) {
					var left = this._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					left[i] = this1;
				}
				var p = this.local_vertices[i];
				var self = this.local_frame;
				var m = self.get_matrix();
				var self1 = m;
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var self_x = m_a * p.x + m_c * p.y;
				var self_y = m_b * p.x + m_d * p.y;
				var self2 = m;
				var b_x = self2.tx;
				var b_y = self2.ty;
				var pos_x = self_x;
				var pos_y = self_y;
				pos_x += b_x;
				pos_y += b_y;
				var self3 = this._vertices[i];
				self3.x = pos_x;
				self3.y = pos_y;
			}
			var _g = 0;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				var target = this.sync_pos;
				var self = this._vertices[(i + 1) % this.count];
				var self1 = self;
				var value = self1.x;
				var self2 = target;
				self2.x = value;
				var self3 = self;
				var value1 = self3.y;
				var self4 = target;
				self4.y = value1;
				var a = this._vertices[i];
				var self5 = this.sync_pos;
				self5.x -= a.x;
				self5.y -= a.y;
				if(this._normals[i] == null) {
					var left = this._normals;
					var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
					left[i] = this1;
				} else {
					var y = this.sync_pos.x;
					var self6 = this._normals[i];
					self6.x = -this.sync_pos.y;
					self6.y = y;
				}
				var self7 = this._normals[i];
				var self8 = self7;
				var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
				if(length > 0.0) {
					var self9 = self7;
					self9.x /= length;
					self9.y /= length;
				}
			}
		}
		var left = this._vertices[0].x;
		var _g = 1;
		var _g1 = this.count;
		while(_g < _g1) {
			var i = _g++;
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				var self = this.local_frame.get_offset();
				self.x = this.local_x;
				self.y = this.local_y;
				this.local_frame.set_angleDegrees(this.local_rotation);
				if(this.parent_frame != null) {
					var self1 = this.parent_frame;
					var self2 = self1.get_matrix();
					var m_a = self2.a;
					var m_b = self2.b;
					var m_c = self2.c;
					var m_d = self2.d;
					var v = this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var tmp = this.local_frame;
					var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
					tmp.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self3 = this.local_frame.get_offset();
					self3.x = pos_x;
					self3.y = pos_y;
				}
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g2 = 0;
				var _g3 = this.count;
				while(_g2 < _g3) {
					var i1 = _g2++;
					if(this.local_vertices[i1] == null) {
						continue;
					}
					if(this._vertices[i1] == null) {
						var tmp1 = this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						tmp1[i1] = this1;
					}
					var p = this.local_vertices[i1];
					var self4 = this.local_frame;
					var m = self4.get_matrix();
					var self5 = m;
					var m_a1 = self5.a;
					var m_b1 = self5.b;
					var m_c1 = self5.c;
					var m_d1 = self5.d;
					var self_x = m_a1 * p.x + m_c1 * p.y;
					var self_y = m_b1 * p.x + m_d1 * p.y;
					var self6 = m;
					var b_x = self6.tx;
					var b_y = self6.ty;
					var pos_x1 = self_x;
					var pos_y1 = self_y;
					pos_x1 += b_x;
					pos_y1 += b_y;
					var self7 = this._vertices[i1];
					self7.x = pos_x1;
					self7.y = pos_y1;
				}
				var _g4 = 0;
				var _g5 = this.count;
				while(_g4 < _g5) {
					var i2 = _g4++;
					var target = this.sync_pos;
					var self8 = this._vertices[(i2 + 1) % this.count];
					var self9 = self8;
					var value = self9.x;
					var self10 = target;
					self10.x = value;
					var self11 = self8;
					var value1 = self11.y;
					var self12 = target;
					self12.y = value1;
					var a1 = this._vertices[i2];
					var self13 = this.sync_pos;
					self13.x -= a1.x;
					self13.y -= a1.y;
					if(this._normals[i2] == null) {
						var tmp2 = this._normals;
						var this2 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						tmp2[i2] = this2;
					} else {
						var y = this.sync_pos.x;
						var self14 = this._normals[i2];
						self14.x = -this.sync_pos.y;
						self14.y = y;
					}
					var self15 = this._normals[i2];
					var self16 = self15;
					var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
					if(length > 0.0) {
						var self17 = self15;
						self17.x /= length;
						self17.y /= length;
					}
				}
			}
			if(this._vertices[i].x < left) {
				if(this.dirty_vertices) {
					this.dirty_vertices = false;
					var self18 = this.local_frame.get_offset();
					self18.x = this.local_x;
					self18.y = this.local_y;
					this.local_frame.set_angleDegrees(this.local_rotation);
					if(this.parent_frame != null) {
						var self19 = this.parent_frame;
						var self20 = self19.get_matrix();
						var m_a2 = self20.a;
						var m_b2 = self20.b;
						var m_c2 = self20.c;
						var m_d2 = self20.d;
						var v1 = this.local_frame.get_offset();
						var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
						var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
						var a2 = this.parent_frame.get_offset();
						pos_x2 += a2.x;
						pos_y2 += a2.y;
						var left1 = this.local_frame;
						var x1 = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
						left1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
						var self21 = this.local_frame.get_offset();
						self21.x = pos_x2;
						self21.y = pos_y2;
					}
					while(this._vertices.length > this.count) this._vertices.pop();
					var _g6 = 0;
					var _g7 = this.count;
					while(_g6 < _g7) {
						var i3 = _g6++;
						if(this.local_vertices[i3] == null) {
							continue;
						}
						if(this._vertices[i3] == null) {
							var left2 = this._vertices;
							var this3 = new hxmath_math_Vector2Default(0,0);
							left2[i3] = this3;
						}
						var p1 = this.local_vertices[i3];
						var self22 = this.local_frame;
						var m1 = self22.get_matrix();
						var self23 = m1;
						var m_a3 = self23.a;
						var m_b3 = self23.b;
						var m_c3 = self23.c;
						var m_d3 = self23.d;
						var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
						var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
						var self24 = m1;
						var b_x1 = self24.tx;
						var b_y1 = self24.ty;
						var pos_x3 = self_x1;
						var pos_y3 = self_y1;
						pos_x3 += b_x1;
						pos_y3 += b_y1;
						var self25 = this._vertices[i3];
						self25.x = pos_x3;
						self25.y = pos_y3;
					}
					var _g8 = 0;
					var _g9 = this.count;
					while(_g8 < _g9) {
						var i4 = _g8++;
						var target1 = this.sync_pos;
						var self26 = this._vertices[(i4 + 1) % this.count];
						var self27 = self26;
						var value2 = self27.x;
						var self28 = target1;
						self28.x = value2;
						var self29 = self26;
						var value3 = self29.y;
						var self30 = target1;
						self30.y = value3;
						var a3 = this._vertices[i4];
						var self31 = this.sync_pos;
						self31.x -= a3.x;
						self31.y -= a3.y;
						if(this._normals[i4] == null) {
							var left3 = this._normals;
							var this4 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
							left3[i4] = this4;
						} else {
							var y1 = this.sync_pos.x;
							var self32 = this._normals[i4];
							self32.x = -this.sync_pos.y;
							self32.y = y1;
						}
						var self33 = this._normals[i4];
						var self34 = self33;
						var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
						if(length1 > 0.0) {
							var self35 = self33;
							self35.x /= length1;
							self35.y /= length1;
						}
					}
				}
				left = this._vertices[i].x;
			}
		}
		return left;
	}
	,get_right: function() {
		var tmp;
		if(this.count != 0) {
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				var self = this.local_frame.get_offset();
				self.x = this.local_x;
				self.y = this.local_y;
				this.local_frame.set_angleDegrees(this.local_rotation);
				if(this.parent_frame != null) {
					var self = this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var tmp1 = this.local_frame;
					var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
					tmp1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					if(this.local_vertices[i] == null) {
						continue;
					}
					if(this._vertices[i] == null) {
						var tmp1 = this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						tmp1[i] = this1;
					}
					var p = this.local_vertices[i];
					var self = this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = this.sync_pos;
					var self = this._vertices[(i + 1) % this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = this._vertices[i];
					var self5 = this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(this._normals[i] == null) {
						var tmp1 = this._normals;
						var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						tmp1[i] = this1;
					} else {
						var y = this.sync_pos.x;
						var self6 = this._normals[i];
						self6.x = -this.sync_pos.y;
						self6.y = y;
					}
					var self7 = this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			tmp = this._vertices[0] == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			return this._x;
		}
		if(this.dirty_vertices) {
			this.dirty_vertices = false;
			var self = this.local_frame.get_offset();
			self.x = this.local_x;
			self.y = this.local_y;
			this.local_frame.set_angleDegrees(this.local_rotation);
			if(this.parent_frame != null) {
				var self = this.parent_frame;
				var self1 = self.get_matrix();
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var v = this.local_frame.get_offset();
				var pos_x = m_a * v.x + m_c * v.y;
				var pos_y = m_b * v.x + m_d * v.y;
				var a = this.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var right = this.local_frame;
				var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
				right.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self = this.local_frame.get_offset();
				self.x = pos_x;
				self.y = pos_y;
			}
			while(this._vertices.length > this.count) this._vertices.pop();
			var _g = 0;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				if(this.local_vertices[i] == null) {
					continue;
				}
				if(this._vertices[i] == null) {
					var right = this._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					right[i] = this1;
				}
				var p = this.local_vertices[i];
				var self = this.local_frame;
				var m = self.get_matrix();
				var self1 = m;
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var self_x = m_a * p.x + m_c * p.y;
				var self_y = m_b * p.x + m_d * p.y;
				var self2 = m;
				var b_x = self2.tx;
				var b_y = self2.ty;
				var pos_x = self_x;
				var pos_y = self_y;
				pos_x += b_x;
				pos_y += b_y;
				var self3 = this._vertices[i];
				self3.x = pos_x;
				self3.y = pos_y;
			}
			var _g = 0;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				var target = this.sync_pos;
				var self = this._vertices[(i + 1) % this.count];
				var self1 = self;
				var value = self1.x;
				var self2 = target;
				self2.x = value;
				var self3 = self;
				var value1 = self3.y;
				var self4 = target;
				self4.y = value1;
				var a = this._vertices[i];
				var self5 = this.sync_pos;
				self5.x -= a.x;
				self5.y -= a.y;
				if(this._normals[i] == null) {
					var right = this._normals;
					var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
					right[i] = this1;
				} else {
					var y = this.sync_pos.x;
					var self6 = this._normals[i];
					self6.x = -this.sync_pos.y;
					self6.y = y;
				}
				var self7 = this._normals[i];
				var self8 = self7;
				var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
				if(length > 0.0) {
					var self9 = self7;
					self9.x /= length;
					self9.y /= length;
				}
			}
		}
		var right = this._vertices[0].x;
		var _g = 1;
		var _g1 = this.count;
		while(_g < _g1) {
			var i = _g++;
			if(this.dirty_vertices) {
				this.dirty_vertices = false;
				var self = this.local_frame.get_offset();
				self.x = this.local_x;
				self.y = this.local_y;
				this.local_frame.set_angleDegrees(this.local_rotation);
				if(this.parent_frame != null) {
					var self1 = this.parent_frame;
					var self2 = self1.get_matrix();
					var m_a = self2.a;
					var m_b = self2.b;
					var m_c = self2.c;
					var m_d = self2.d;
					var v = this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var tmp = this.local_frame;
					var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
					tmp.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self3 = this.local_frame.get_offset();
					self3.x = pos_x;
					self3.y = pos_y;
				}
				while(this._vertices.length > this.count) this._vertices.pop();
				var _g2 = 0;
				var _g3 = this.count;
				while(_g2 < _g3) {
					var i1 = _g2++;
					if(this.local_vertices[i1] == null) {
						continue;
					}
					if(this._vertices[i1] == null) {
						var tmp1 = this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						tmp1[i1] = this1;
					}
					var p = this.local_vertices[i1];
					var self4 = this.local_frame;
					var m = self4.get_matrix();
					var self5 = m;
					var m_a1 = self5.a;
					var m_b1 = self5.b;
					var m_c1 = self5.c;
					var m_d1 = self5.d;
					var self_x = m_a1 * p.x + m_c1 * p.y;
					var self_y = m_b1 * p.x + m_d1 * p.y;
					var self6 = m;
					var b_x = self6.tx;
					var b_y = self6.ty;
					var pos_x1 = self_x;
					var pos_y1 = self_y;
					pos_x1 += b_x;
					pos_y1 += b_y;
					var self7 = this._vertices[i1];
					self7.x = pos_x1;
					self7.y = pos_y1;
				}
				var _g4 = 0;
				var _g5 = this.count;
				while(_g4 < _g5) {
					var i2 = _g4++;
					var target = this.sync_pos;
					var self8 = this._vertices[(i2 + 1) % this.count];
					var self9 = self8;
					var value = self9.x;
					var self10 = target;
					self10.x = value;
					var self11 = self8;
					var value1 = self11.y;
					var self12 = target;
					self12.y = value1;
					var a1 = this._vertices[i2];
					var self13 = this.sync_pos;
					self13.x -= a1.x;
					self13.y -= a1.y;
					if(this._normals[i2] == null) {
						var tmp2 = this._normals;
						var this2 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
						tmp2[i2] = this2;
					} else {
						var y = this.sync_pos.x;
						var self14 = this._normals[i2];
						self14.x = -this.sync_pos.y;
						self14.y = y;
					}
					var self15 = this._normals[i2];
					var self16 = self15;
					var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
					if(length > 0.0) {
						var self17 = self15;
						self17.x /= length;
						self17.y /= length;
					}
				}
			}
			if(this._vertices[i].x > right) {
				if(this.dirty_vertices) {
					this.dirty_vertices = false;
					var self18 = this.local_frame.get_offset();
					self18.x = this.local_x;
					self18.y = this.local_y;
					this.local_frame.set_angleDegrees(this.local_rotation);
					if(this.parent_frame != null) {
						var self19 = this.parent_frame;
						var self20 = self19.get_matrix();
						var m_a2 = self20.a;
						var m_b2 = self20.b;
						var m_c2 = self20.c;
						var m_d2 = self20.d;
						var v1 = this.local_frame.get_offset();
						var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
						var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
						var a2 = this.parent_frame.get_offset();
						pos_x2 += a2.x;
						pos_y2 += a2.y;
						var right1 = this.local_frame;
						var x1 = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
						right1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
						var self21 = this.local_frame.get_offset();
						self21.x = pos_x2;
						self21.y = pos_y2;
					}
					while(this._vertices.length > this.count) this._vertices.pop();
					var _g6 = 0;
					var _g7 = this.count;
					while(_g6 < _g7) {
						var i3 = _g6++;
						if(this.local_vertices[i3] == null) {
							continue;
						}
						if(this._vertices[i3] == null) {
							var right2 = this._vertices;
							var this3 = new hxmath_math_Vector2Default(0,0);
							right2[i3] = this3;
						}
						var p1 = this.local_vertices[i3];
						var self22 = this.local_frame;
						var m1 = self22.get_matrix();
						var self23 = m1;
						var m_a3 = self23.a;
						var m_b3 = self23.b;
						var m_c3 = self23.c;
						var m_d3 = self23.d;
						var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
						var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
						var self24 = m1;
						var b_x1 = self24.tx;
						var b_y1 = self24.ty;
						var pos_x3 = self_x1;
						var pos_y3 = self_y1;
						pos_x3 += b_x1;
						pos_y3 += b_y1;
						var self25 = this._vertices[i3];
						self25.x = pos_x3;
						self25.y = pos_y3;
					}
					var _g8 = 0;
					var _g9 = this.count;
					while(_g8 < _g9) {
						var i4 = _g8++;
						var target1 = this.sync_pos;
						var self26 = this._vertices[(i4 + 1) % this.count];
						var self27 = self26;
						var value2 = self27.x;
						var self28 = target1;
						self28.x = value2;
						var self29 = self26;
						var value3 = self29.y;
						var self30 = target1;
						self30.y = value3;
						var a3 = this._vertices[i4];
						var self31 = this.sync_pos;
						self31.x -= a3.x;
						self31.y -= a3.y;
						if(this._normals[i4] == null) {
							var right3 = this._normals;
							var this4 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
							right3[i4] = this4;
						} else {
							var y1 = this.sync_pos.x;
							var self32 = this._normals[i4];
							self32.x = -this.sync_pos.y;
							self32.y = y1;
						}
						var self33 = this._normals[i4];
						var self34 = self33;
						var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
						if(length1 > 0.0) {
							var self35 = self33;
							self35.x /= length1;
							self35.y /= length1;
						}
					}
				}
				right = this._vertices[i].x;
			}
		}
		return right;
	}
	,to_rect: function() {
		var _this = this.bounds();
		var put_self = true;
		if(put_self == null) {
			put_self = false;
		}
		if(put_self) {
			_this.put();
		}
		var min_x = _this.min_x;
		var min_y = _this.min_y;
		var max_x = _this.max_x;
		var max_y = _this.max_y;
		var rect = echo_shape_Rect._pool.get();
		var x = (min_x + max_x) * 0.5;
		var y = (min_y + max_y) * 0.5;
		var width = max_x - min_x;
		var height = max_y - min_y;
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		rect.local_x = x;
		if(rect.parent_frame != null) {
			if(!rect.sync_locked) {
				if(rect.parent_frame != null) {
					if(rect.local_x == 0 && rect.local_y == 0) {
						rect._x = rect.parent_frame.get_offset().x;
						rect._y = rect.parent_frame.get_offset().y;
					} else {
						var self = rect.sync_pos;
						self.x = rect.local_x;
						self.y = rect.local_y;
						var p = rect.sync_pos;
						var self = rect.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						rect._x = pos_x;
						rect._y = pos_y;
					}
					rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
				} else {
					rect._x = rect.local_x;
					rect._y = rect.local_x;
					rect._rotation = rect.local_rotation;
				}
				if(rect.transformed_rect == null && rect._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = polygon.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					polygon.lock_sync();
					polygon.local_x = rect.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = rect.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = rect.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					rect.transformed_rect = polygon;
					rect.transformed_rect.set_parent(rect.parent_frame);
				} else if(rect.transformed_rect != null) {
					var _this = rect.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = _this.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					_this.lock_sync();
					_this.local_x = rect.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = rect.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = rect.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			rect._x = rect.local_x;
		}
		rect.local_y = y;
		if(rect.parent_frame != null) {
			if(!rect.sync_locked) {
				if(rect.parent_frame != null) {
					if(rect.local_x == 0 && rect.local_y == 0) {
						rect._x = rect.parent_frame.get_offset().x;
						rect._y = rect.parent_frame.get_offset().y;
					} else {
						var self = rect.sync_pos;
						self.x = rect.local_x;
						self.y = rect.local_y;
						var p = rect.sync_pos;
						var self = rect.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						rect._x = pos_x;
						rect._y = pos_y;
					}
					rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
				} else {
					rect._x = rect.local_x;
					rect._y = rect.local_x;
					rect._rotation = rect.local_rotation;
				}
				if(rect.transformed_rect == null && rect._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = polygon.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					polygon.lock_sync();
					polygon.local_x = rect.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = rect.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = rect.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					rect.transformed_rect = polygon;
					rect.transformed_rect.set_parent(rect.parent_frame);
				} else if(rect.transformed_rect != null) {
					var _this = rect.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = _this.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					_this.lock_sync();
					_this.local_x = rect.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = rect.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = rect.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			rect._y = rect.local_y;
		}
		rect.ex = width * 0.5;
		if(rect.transformed_rect != null) {
			var _this = rect.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = _this.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			_this.lock_sync();
			_this.local_x = rect.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = rect.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = rect.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		rect.ey = (height <= 0 ? width : height) * 0.5;
		if(rect.transformed_rect != null) {
			var _this = rect.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = _this.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			_this.lock_sync();
			_this.local_x = rect.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = rect.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = rect.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		rect.local_rotation = 0;
		if(rect.parent_frame != null) {
			if(!rect.sync_locked) {
				if(rect.parent_frame != null) {
					if(rect.local_x == 0 && rect.local_y == 0) {
						rect._x = rect.parent_frame.get_offset().x;
						rect._y = rect.parent_frame.get_offset().y;
					} else {
						var self = rect.sync_pos;
						self.x = rect.local_x;
						self.y = rect.local_y;
						var p = rect.sync_pos;
						var self = rect.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						rect._x = pos_x;
						rect._y = pos_y;
					}
					rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
				} else {
					rect._x = rect.local_x;
					rect._y = rect.local_x;
					rect._rotation = rect.local_rotation;
				}
				if(rect.transformed_rect == null && rect._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = polygon.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					polygon.lock_sync();
					polygon.local_x = rect.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = rect.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = rect.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					rect.transformed_rect = polygon;
					rect.transformed_rect.set_parent(rect.parent_frame);
				} else if(rect.transformed_rect != null) {
					var _this = rect.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = _this.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					_this.lock_sync();
					_this.local_x = rect.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = rect.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = rect.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			rect._rotation = rect.local_rotation;
		}
		rect.pooled = false;
		return rect;
	}
	,set_vertice: function(index,x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.local_vertices[index] == null) {
			var tmp = this.local_vertices;
			var this1 = new hxmath_math_Vector2Default(x,y);
			tmp[index] = this1;
		} else {
			var self = this.local_vertices[index];
			self.x = x;
			self.y = y;
		}
		this.dirty_vertices = true;
		this.dirty_bounds = true;
	}
	,set_vertices: function(vertices,count) {
		this.local_vertices = vertices == null ? [] : vertices;
		this.count = count != null && count >= 0 ? count : this.local_vertices.length;
		if(count > this.local_vertices.length) {
			var _g = this.local_vertices.length;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				var tmp = this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				tmp[i] = this1;
			}
		}
		this.dirty_vertices = true;
		this.dirty_bounds = true;
	}
	,transform_vertices: function() {
		var self = this.local_frame.get_offset();
		self.x = this.local_x;
		self.y = this.local_y;
		this.local_frame.set_angleDegrees(this.local_rotation);
		if(this.parent_frame != null) {
			var self = this.parent_frame;
			var self1 = self.get_matrix();
			var m_a = self1.a;
			var m_b = self1.b;
			var m_c = self1.c;
			var m_d = self1.d;
			var v = this.local_frame.get_offset();
			var pos_x = m_a * v.x + m_c * v.y;
			var pos_y = m_b * v.x + m_d * v.y;
			var a = this.parent_frame.get_offset();
			pos_x += a.x;
			pos_y += a.y;
			var tmp = this.local_frame;
			var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
			tmp.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
			var self = this.local_frame.get_offset();
			self.x = pos_x;
			self.y = pos_y;
		}
		while(this._vertices.length > this.count) this._vertices.pop();
		var _g = 0;
		var _g1 = this.count;
		while(_g < _g1) {
			var i = _g++;
			if(this.local_vertices[i] == null) {
				continue;
			}
			if(this._vertices[i] == null) {
				var tmp = this._vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				tmp[i] = this1;
			}
			var p = this.local_vertices[i];
			var self = this.local_frame;
			var m = self.get_matrix();
			var self1 = m;
			var m_a = self1.a;
			var m_b = self1.b;
			var m_c = self1.c;
			var m_d = self1.d;
			var self_x = m_a * p.x + m_c * p.y;
			var self_y = m_b * p.x + m_d * p.y;
			var self2 = m;
			var b_x = self2.tx;
			var b_y = self2.ty;
			var pos_x = self_x;
			var pos_y = self_y;
			pos_x += b_x;
			pos_y += b_y;
			var self3 = this._vertices[i];
			self3.x = pos_x;
			self3.y = pos_y;
		}
	}
	,compute_normals: function() {
		var _g = 0;
		var _g1 = this.count;
		while(_g < _g1) {
			var i = _g++;
			var target = this.sync_pos;
			var self = this._vertices[(i + 1) % this.count];
			var self1 = self;
			var value = self1.x;
			var self2 = target;
			self2.x = value;
			var self3 = self;
			var value1 = self3.y;
			var self4 = target;
			self4.y = value1;
			var a = this._vertices[i];
			var self5 = this.sync_pos;
			self5.x -= a.x;
			self5.y -= a.y;
			if(this._normals[i] == null) {
				var tmp = this._normals;
				var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
				tmp[i] = this1;
			} else {
				var y = this.sync_pos.x;
				var self6 = this._normals[i];
				self6.x = -this.sync_pos.y;
				self6.y = y;
			}
			var self7 = this._normals[i];
			var self8 = self7;
			var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
			if(length > 0.0) {
				var self9 = self7;
				self9.x /= length;
				self9.y /= length;
			}
		}
	}
	,get_vertices: function() {
		if(this.dirty_vertices) {
			this.dirty_vertices = false;
			var self = this.local_frame.get_offset();
			self.x = this.local_x;
			self.y = this.local_y;
			this.local_frame.set_angleDegrees(this.local_rotation);
			if(this.parent_frame != null) {
				var self = this.parent_frame;
				var self1 = self.get_matrix();
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var v = this.local_frame.get_offset();
				var pos_x = m_a * v.x + m_c * v.y;
				var pos_y = m_b * v.x + m_d * v.y;
				var a = this.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var tmp = this.local_frame;
				var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
				tmp.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self = this.local_frame.get_offset();
				self.x = pos_x;
				self.y = pos_y;
			}
			while(this._vertices.length > this.count) this._vertices.pop();
			var _g = 0;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				if(this.local_vertices[i] == null) {
					continue;
				}
				if(this._vertices[i] == null) {
					var tmp = this._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					tmp[i] = this1;
				}
				var p = this.local_vertices[i];
				var self = this.local_frame;
				var m = self.get_matrix();
				var self1 = m;
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var self_x = m_a * p.x + m_c * p.y;
				var self_y = m_b * p.x + m_d * p.y;
				var self2 = m;
				var b_x = self2.tx;
				var b_y = self2.ty;
				var pos_x = self_x;
				var pos_y = self_y;
				pos_x += b_x;
				pos_y += b_y;
				var self3 = this._vertices[i];
				self3.x = pos_x;
				self3.y = pos_y;
			}
			var _g = 0;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				var target = this.sync_pos;
				var self = this._vertices[(i + 1) % this.count];
				var self1 = self;
				var value = self1.x;
				var self2 = target;
				self2.x = value;
				var self3 = self;
				var value1 = self3.y;
				var self4 = target;
				self4.y = value1;
				var a = this._vertices[i];
				var self5 = this.sync_pos;
				self5.x -= a.x;
				self5.y -= a.y;
				if(this._normals[i] == null) {
					var tmp = this._normals;
					var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
					tmp[i] = this1;
				} else {
					var y = this.sync_pos.x;
					var self6 = this._normals[i];
					self6.x = -this.sync_pos.y;
					self6.y = y;
				}
				var self7 = this._normals[i];
				var self8 = self7;
				var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
				if(length > 0.0) {
					var self9 = self7;
					self9.x /= length;
					self9.y /= length;
				}
			}
		}
		return this._vertices;
	}
	,get_normals: function() {
		if(this.dirty_vertices) {
			this.dirty_vertices = false;
			var self = this.local_frame.get_offset();
			self.x = this.local_x;
			self.y = this.local_y;
			this.local_frame.set_angleDegrees(this.local_rotation);
			if(this.parent_frame != null) {
				var self = this.parent_frame;
				var self1 = self.get_matrix();
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var v = this.local_frame.get_offset();
				var pos_x = m_a * v.x + m_c * v.y;
				var pos_y = m_b * v.x + m_d * v.y;
				var a = this.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var tmp = this.local_frame;
				var x = this.parent_frame.get_angleDegrees() + this.local_frame.get_angleDegrees();
				tmp.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self = this.local_frame.get_offset();
				self.x = pos_x;
				self.y = pos_y;
			}
			while(this._vertices.length > this.count) this._vertices.pop();
			var _g = 0;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				if(this.local_vertices[i] == null) {
					continue;
				}
				if(this._vertices[i] == null) {
					var tmp = this._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					tmp[i] = this1;
				}
				var p = this.local_vertices[i];
				var self = this.local_frame;
				var m = self.get_matrix();
				var self1 = m;
				var m_a = self1.a;
				var m_b = self1.b;
				var m_c = self1.c;
				var m_d = self1.d;
				var self_x = m_a * p.x + m_c * p.y;
				var self_y = m_b * p.x + m_d * p.y;
				var self2 = m;
				var b_x = self2.tx;
				var b_y = self2.ty;
				var pos_x = self_x;
				var pos_y = self_y;
				pos_x += b_x;
				pos_y += b_y;
				var self3 = this._vertices[i];
				self3.x = pos_x;
				self3.y = pos_y;
			}
			var _g = 0;
			var _g1 = this.count;
			while(_g < _g1) {
				var i = _g++;
				var target = this.sync_pos;
				var self = this._vertices[(i + 1) % this.count];
				var self1 = self;
				var value = self1.x;
				var self2 = target;
				self2.x = value;
				var self3 = self;
				var value1 = self3.y;
				var self4 = target;
				self4.y = value1;
				var a = this._vertices[i];
				var self5 = this.sync_pos;
				self5.x -= a.x;
				self5.y -= a.y;
				if(this._normals[i] == null) {
					var tmp = this._normals;
					var this1 = new hxmath_math_Vector2Default(-this.sync_pos.y,this.sync_pos.x);
					tmp[i] = this1;
				} else {
					var y = this.sync_pos.x;
					var self6 = this._normals[i];
					self6.x = -this.sync_pos.y;
					self6.y = y;
				}
				var self7 = this._normals[i];
				var self8 = self7;
				var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
				if(length > 0.0) {
					var self9 = self7;
					self9.x /= length;
					self9.y /= length;
				}
			}
		}
		return this._normals;
	}
	,__class__: echo_shape_Polygon
	,__properties__: $extend(echo_Shape.prototype.__properties__,{get_normals:"get_normals",get_vertices:"get_vertices"})
});
var echo_shape_Rect = function() {
	echo_Shape.call(this);
	this.ex = 0;
	if(this.transformed_rect != null) {
		var _this = this.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				var _this1 = _this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				_this1[i] = this1;
			}
		}
		var self = _this.local_vertices[0];
		self.x = -this.ex;
		self.y = -this.ey;
		var self = _this.local_vertices[1];
		self.x = this.ex;
		self.y = -this.ey;
		var self = _this.local_vertices[2];
		self.x = this.ex;
		self.y = this.ey;
		var self = _this.local_vertices[3];
		self.x = -this.ex;
		self.y = this.ey;
		_this.lock_sync();
		_this.local_x = this.local_x;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._x = _this.local_x;
		}
		_this.local_y = this.local_y;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._y = _this.local_y;
		}
		_this.local_rotation = this.local_rotation;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._rotation = _this.local_rotation;
		}
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
		_this.unlock_sync();
	}
	this.ey = 0;
	if(this.transformed_rect != null) {
		var _this = this.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				var _this1 = _this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				_this1[i] = this1;
			}
		}
		var self = _this.local_vertices[0];
		self.x = -this.ex;
		self.y = -this.ey;
		var self = _this.local_vertices[1];
		self.x = this.ex;
		self.y = -this.ey;
		var self = _this.local_vertices[2];
		self.x = this.ex;
		self.y = this.ey;
		var self = _this.local_vertices[3];
		self.x = -this.ex;
		self.y = this.ey;
		_this.lock_sync();
		_this.local_x = this.local_x;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._x = _this.local_x;
		}
		_this.local_y = this.local_y;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._y = _this.local_y;
		}
		_this.local_rotation = this.local_rotation;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._rotation = _this.local_rotation;
		}
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
		_this.unlock_sync();
	}
	this.type = 0;
};
$hxClasses["echo.shape.Rect"] = echo_shape_Rect;
echo_shape_Rect.__name__ = true;
echo_shape_Rect.__interfaces__ = [echo_util_IPooled];
echo_shape_Rect.__properties__ = {get_pool:"get_pool"};
echo_shape_Rect.get = function(x,y,width,height,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var rect = echo_shape_Rect._pool.get();
	var x1 = x;
	var y1 = y;
	var width1 = width;
	var height1 = height;
	var rotation1 = rotation;
	if(rotation1 == null) {
		rotation1 = 0;
	}
	if(height1 == null) {
		height1 = 0;
	}
	if(width1 == null) {
		width1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	rect.local_x = x1;
	if(rect.parent_frame != null) {
		if(!rect.sync_locked) {
			if(rect.parent_frame != null) {
				if(rect.local_x == 0 && rect.local_y == 0) {
					rect._x = rect.parent_frame.get_offset().x;
					rect._y = rect.parent_frame.get_offset().y;
				} else {
					var self = rect.sync_pos;
					self.x = rect.local_x;
					self.y = rect.local_y;
					var p = rect.sync_pos;
					var self = rect.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					rect._x = pos_x;
					rect._y = pos_y;
				}
				rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
			} else {
				rect._x = rect.local_x;
				rect._y = rect.local_x;
				rect._rotation = rect.local_rotation;
			}
			if(rect.transformed_rect == null && rect._rotation != 0) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g1 = polygon.count;
				while(_g < _g1) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						var polygon1 = polygon.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon1[i] = this1;
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				polygon.lock_sync();
				polygon.local_x = rect.local_x;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._x = polygon.local_x;
				}
				polygon.local_y = rect.local_y;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._y = polygon.local_y;
				}
				polygon.local_rotation = rect.local_rotation;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.unlock_sync();
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent_frame);
			} else if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
		}
	} else {
		rect._x = rect.local_x;
	}
	rect.local_y = y1;
	if(rect.parent_frame != null) {
		if(!rect.sync_locked) {
			if(rect.parent_frame != null) {
				if(rect.local_x == 0 && rect.local_y == 0) {
					rect._x = rect.parent_frame.get_offset().x;
					rect._y = rect.parent_frame.get_offset().y;
				} else {
					var self = rect.sync_pos;
					self.x = rect.local_x;
					self.y = rect.local_y;
					var p = rect.sync_pos;
					var self = rect.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					rect._x = pos_x;
					rect._y = pos_y;
				}
				rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
			} else {
				rect._x = rect.local_x;
				rect._y = rect.local_x;
				rect._rotation = rect.local_rotation;
			}
			if(rect.transformed_rect == null && rect._rotation != 0) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g1 = polygon.count;
				while(_g < _g1) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						var polygon1 = polygon.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon1[i] = this1;
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				polygon.lock_sync();
				polygon.local_x = rect.local_x;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._x = polygon.local_x;
				}
				polygon.local_y = rect.local_y;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._y = polygon.local_y;
				}
				polygon.local_rotation = rect.local_rotation;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.unlock_sync();
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent_frame);
			} else if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
		}
	} else {
		rect._y = rect.local_y;
	}
	rect.ex = width1 * 0.5;
	if(rect.transformed_rect != null) {
		var _this = rect.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				var _this1 = _this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				_this1[i] = this1;
			}
		}
		var self = _this.local_vertices[0];
		self.x = -rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[1];
		self.x = rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[2];
		self.x = rect.ex;
		self.y = rect.ey;
		var self = _this.local_vertices[3];
		self.x = -rect.ex;
		self.y = rect.ey;
		_this.lock_sync();
		_this.local_x = rect.local_x;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._x = _this.local_x;
		}
		_this.local_y = rect.local_y;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._y = _this.local_y;
		}
		_this.local_rotation = rect.local_rotation;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._rotation = _this.local_rotation;
		}
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
		_this.unlock_sync();
	}
	rect.ey = (height1 <= 0 ? width1 : height1) * 0.5;
	if(rect.transformed_rect != null) {
		var _this = rect.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				var _this1 = _this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				_this1[i] = this1;
			}
		}
		var self = _this.local_vertices[0];
		self.x = -rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[1];
		self.x = rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[2];
		self.x = rect.ex;
		self.y = rect.ey;
		var self = _this.local_vertices[3];
		self.x = -rect.ex;
		self.y = rect.ey;
		_this.lock_sync();
		_this.local_x = rect.local_x;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._x = _this.local_x;
		}
		_this.local_y = rect.local_y;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._y = _this.local_y;
		}
		_this.local_rotation = rect.local_rotation;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._rotation = _this.local_rotation;
		}
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
		_this.unlock_sync();
	}
	rect.local_rotation = rotation1;
	if(rect.parent_frame != null) {
		if(!rect.sync_locked) {
			if(rect.parent_frame != null) {
				if(rect.local_x == 0 && rect.local_y == 0) {
					rect._x = rect.parent_frame.get_offset().x;
					rect._y = rect.parent_frame.get_offset().y;
				} else {
					var self = rect.sync_pos;
					self.x = rect.local_x;
					self.y = rect.local_y;
					var p = rect.sync_pos;
					var self = rect.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					rect._x = pos_x;
					rect._y = pos_y;
				}
				rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
			} else {
				rect._x = rect.local_x;
				rect._y = rect.local_x;
				rect._rotation = rect.local_rotation;
			}
			if(rect.transformed_rect == null && rect._rotation != 0) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g1 = polygon.count;
				while(_g < _g1) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						var polygon1 = polygon.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon1[i] = this1;
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				polygon.lock_sync();
				polygon.local_x = rect.local_x;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._x = polygon.local_x;
				}
				polygon.local_y = rect.local_y;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._y = polygon.local_y;
				}
				polygon.local_rotation = rect.local_rotation;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.unlock_sync();
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent_frame);
			} else if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
		}
	} else {
		rect._rotation = rect.local_rotation;
	}
	rect.pooled = false;
	return rect;
};
echo_shape_Rect.get_from_min_max = function(min_x,min_y,max_x,max_y) {
	var rect = echo_shape_Rect._pool.get();
	var x = (min_x + max_x) * 0.5;
	var y = (min_y + max_y) * 0.5;
	var width = max_x - min_x;
	var height = max_y - min_y;
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	rect.local_x = x;
	if(rect.parent_frame != null) {
		if(!rect.sync_locked) {
			if(rect.parent_frame != null) {
				if(rect.local_x == 0 && rect.local_y == 0) {
					rect._x = rect.parent_frame.get_offset().x;
					rect._y = rect.parent_frame.get_offset().y;
				} else {
					var self = rect.sync_pos;
					self.x = rect.local_x;
					self.y = rect.local_y;
					var p = rect.sync_pos;
					var self = rect.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					rect._x = pos_x;
					rect._y = pos_y;
				}
				rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
			} else {
				rect._x = rect.local_x;
				rect._y = rect.local_x;
				rect._rotation = rect.local_rotation;
			}
			if(rect.transformed_rect == null && rect._rotation != 0) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g1 = polygon.count;
				while(_g < _g1) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						var polygon1 = polygon.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon1[i] = this1;
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				polygon.lock_sync();
				polygon.local_x = rect.local_x;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._x = polygon.local_x;
				}
				polygon.local_y = rect.local_y;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._y = polygon.local_y;
				}
				polygon.local_rotation = rect.local_rotation;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.unlock_sync();
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent_frame);
			} else if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
		}
	} else {
		rect._x = rect.local_x;
	}
	rect.local_y = y;
	if(rect.parent_frame != null) {
		if(!rect.sync_locked) {
			if(rect.parent_frame != null) {
				if(rect.local_x == 0 && rect.local_y == 0) {
					rect._x = rect.parent_frame.get_offset().x;
					rect._y = rect.parent_frame.get_offset().y;
				} else {
					var self = rect.sync_pos;
					self.x = rect.local_x;
					self.y = rect.local_y;
					var p = rect.sync_pos;
					var self = rect.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					rect._x = pos_x;
					rect._y = pos_y;
				}
				rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
			} else {
				rect._x = rect.local_x;
				rect._y = rect.local_x;
				rect._rotation = rect.local_rotation;
			}
			if(rect.transformed_rect == null && rect._rotation != 0) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g1 = polygon.count;
				while(_g < _g1) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						var polygon1 = polygon.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon1[i] = this1;
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				polygon.lock_sync();
				polygon.local_x = rect.local_x;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._x = polygon.local_x;
				}
				polygon.local_y = rect.local_y;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._y = polygon.local_y;
				}
				polygon.local_rotation = rect.local_rotation;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.unlock_sync();
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent_frame);
			} else if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
		}
	} else {
		rect._y = rect.local_y;
	}
	rect.ex = width * 0.5;
	if(rect.transformed_rect != null) {
		var _this = rect.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				var _this1 = _this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				_this1[i] = this1;
			}
		}
		var self = _this.local_vertices[0];
		self.x = -rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[1];
		self.x = rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[2];
		self.x = rect.ex;
		self.y = rect.ey;
		var self = _this.local_vertices[3];
		self.x = -rect.ex;
		self.y = rect.ey;
		_this.lock_sync();
		_this.local_x = rect.local_x;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._x = _this.local_x;
		}
		_this.local_y = rect.local_y;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._y = _this.local_y;
		}
		_this.local_rotation = rect.local_rotation;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._rotation = _this.local_rotation;
		}
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
		_this.unlock_sync();
	}
	rect.ey = (height <= 0 ? width : height) * 0.5;
	if(rect.transformed_rect != null) {
		var _this = rect.transformed_rect;
		_this.count = 4;
		var _g = 0;
		var _g1 = _this.count;
		while(_g < _g1) {
			var i = _g++;
			if(_this.local_vertices[i] == null) {
				var _this1 = _this.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				_this1[i] = this1;
			}
		}
		var self = _this.local_vertices[0];
		self.x = -rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[1];
		self.x = rect.ex;
		self.y = -rect.ey;
		var self = _this.local_vertices[2];
		self.x = rect.ex;
		self.y = rect.ey;
		var self = _this.local_vertices[3];
		self.x = -rect.ex;
		self.y = rect.ey;
		_this.lock_sync();
		_this.local_x = rect.local_x;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._x = _this.local_x;
		}
		_this.local_y = rect.local_y;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._y = _this.local_y;
		}
		_this.local_rotation = rect.local_rotation;
		if(_this.parent_frame != null) {
			if(!_this.sync_locked) {
				if(_this.parent_frame != null) {
					if(_this.local_x == 0 && _this.local_y == 0) {
						_this._x = _this.parent_frame.get_offset().x;
						_this._y = _this.parent_frame.get_offset().y;
					} else {
						var self = _this.sync_pos;
						self.x = _this.local_x;
						self.y = _this.local_y;
						var p = _this.sync_pos;
						var self = _this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						_this._x = pos_x;
						_this._y = pos_y;
					}
					_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
				} else {
					_this._x = _this.local_x;
					_this._y = _this.local_x;
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
			}
		} else {
			_this._rotation = _this.local_rotation;
		}
		_this.dirty_vertices = true;
		_this.dirty_bounds = true;
		_this.unlock_sync();
	}
	rect.local_rotation = 0;
	if(rect.parent_frame != null) {
		if(!rect.sync_locked) {
			if(rect.parent_frame != null) {
				if(rect.local_x == 0 && rect.local_y == 0) {
					rect._x = rect.parent_frame.get_offset().x;
					rect._y = rect.parent_frame.get_offset().y;
				} else {
					var self = rect.sync_pos;
					self.x = rect.local_x;
					self.y = rect.local_y;
					var p = rect.sync_pos;
					var self = rect.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					rect._x = pos_x;
					rect._y = pos_y;
				}
				rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
			} else {
				rect._x = rect.local_x;
				rect._y = rect.local_x;
				rect._rotation = rect.local_rotation;
			}
			if(rect.transformed_rect == null && rect._rotation != 0) {
				var polygon = echo_shape_Polygon._pool.get();
				polygon.count = 4;
				var _g = 0;
				var _g1 = polygon.count;
				while(_g < _g1) {
					var i = _g++;
					if(polygon.local_vertices[i] == null) {
						var polygon1 = polygon.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon1[i] = this1;
					}
				}
				var self = polygon.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = polygon.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = polygon.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				polygon.lock_sync();
				polygon.local_x = rect.local_x;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._x = polygon.local_x;
				}
				polygon.local_y = rect.local_y;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._y = polygon.local_y;
				}
				polygon.local_rotation = rect.local_rotation;
				if(polygon.parent_frame != null) {
					if(!polygon.sync_locked) {
						if(polygon.parent_frame != null) {
							if(polygon.local_x == 0 && polygon.local_y == 0) {
								polygon._x = polygon.parent_frame.get_offset().x;
								polygon._y = polygon.parent_frame.get_offset().y;
							} else {
								var self = polygon.sync_pos;
								self.x = polygon.local_x;
								self.y = polygon.local_y;
								var p = polygon.sync_pos;
								var self = polygon.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								polygon._x = pos_x;
								polygon._y = pos_y;
							}
							polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
						} else {
							polygon._x = polygon.local_x;
							polygon._y = polygon.local_x;
							polygon._rotation = polygon.local_rotation;
						}
						polygon.dirty_vertices = true;
						polygon.dirty_bounds = true;
					}
				} else {
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
				polygon.unlock_sync();
				polygon.pooled = false;
				rect.transformed_rect = polygon;
				rect.transformed_rect.set_parent(rect.parent_frame);
			} else if(rect.transformed_rect != null) {
				var _this = rect.transformed_rect;
				_this.count = 4;
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						var _this1 = _this.local_vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
				}
				var self = _this.local_vertices[0];
				self.x = -rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[1];
				self.x = rect.ex;
				self.y = -rect.ey;
				var self = _this.local_vertices[2];
				self.x = rect.ex;
				self.y = rect.ey;
				var self = _this.local_vertices[3];
				self.x = -rect.ex;
				self.y = rect.ey;
				_this.lock_sync();
				_this.local_x = rect.local_x;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._x = _this.local_x;
				}
				_this.local_y = rect.local_y;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._y = _this.local_y;
				}
				_this.local_rotation = rect.local_rotation;
				if(_this.parent_frame != null) {
					if(!_this.sync_locked) {
						if(_this.parent_frame != null) {
							if(_this.local_x == 0 && _this.local_y == 0) {
								_this._x = _this.parent_frame.get_offset().x;
								_this._y = _this.parent_frame.get_offset().y;
							} else {
								var self = _this.sync_pos;
								self.x = _this.local_x;
								self.y = _this.local_y;
								var p = _this.sync_pos;
								var self = _this.parent_frame;
								var m = self.get_matrix();
								var self = m;
								var m_a = self.a;
								var m_b = self.b;
								var m_c = self.c;
								var m_d = self.d;
								var self_x = m_a * p.x + m_c * p.y;
								var self_y = m_b * p.x + m_d * p.y;
								var self = m;
								var b_x = self.tx;
								var b_y = self.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								_this._x = pos_x;
								_this._y = pos_y;
							}
							_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
						} else {
							_this._x = _this.local_x;
							_this._y = _this.local_x;
							_this._rotation = _this.local_rotation;
						}
						_this.dirty_vertices = true;
						_this.dirty_bounds = true;
					}
				} else {
					_this._rotation = _this.local_rotation;
				}
				_this.dirty_vertices = true;
				_this.dirty_bounds = true;
				_this.unlock_sync();
			}
		}
	} else {
		rect._rotation = rect.local_rotation;
	}
	rect.pooled = false;
	return rect;
};
echo_shape_Rect.get_pool = function() {
	return echo_shape_Rect._pool;
};
echo_shape_Rect.__super__ = echo_Shape;
echo_shape_Rect.prototype = $extend(echo_Shape.prototype,{
	ex: null
	,ey: null
	,min: null
	,max: null
	,pooled: null
	,transformed_rect: null
	,put: function() {
		this.parent_frame = null;
		if(this.transformed_rect != null) {
			var _this = this.transformed_rect;
			_this.parent_frame = null;
			if(!_this.pooled) {
				_this.pooled = true;
				echo_shape_Polygon._pool.put_unsafe(_this);
			}
			this.transformed_rect = null;
		}
		if(!this.pooled) {
			this.pooled = true;
			echo_shape_Rect._pool.put_unsafe(this);
		}
	}
	,set: function(x,y,width,height,rotation) {
		if(rotation == null) {
			rotation = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.local_x = x;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				if(this.transformed_rect == null && this._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = polygon.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					polygon.lock_sync();
					polygon.local_x = this.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = this.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = this.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					this.transformed_rect = polygon;
					this.transformed_rect.set_parent(this.parent_frame);
				} else if(this.transformed_rect != null) {
					var _this = this.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = _this.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					_this.lock_sync();
					_this.local_x = this.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = this.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = this.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			this._x = this.local_x;
		}
		this.local_y = y;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				if(this.transformed_rect == null && this._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = polygon.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					polygon.lock_sync();
					polygon.local_x = this.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = this.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = this.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					this.transformed_rect = polygon;
					this.transformed_rect.set_parent(this.parent_frame);
				} else if(this.transformed_rect != null) {
					var _this = this.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = _this.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					_this.lock_sync();
					_this.local_x = this.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = this.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = this.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			this._y = this.local_y;
		}
		this.ex = width * 0.5;
		if(this.transformed_rect != null) {
			var _this = this.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = _this.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			_this.lock_sync();
			_this.local_x = this.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = this.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = this.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		this.ey = (height <= 0 ? width : height) * 0.5;
		if(this.transformed_rect != null) {
			var _this = this.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = _this.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			_this.lock_sync();
			_this.local_x = this.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = this.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = this.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		this.local_rotation = rotation;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				if(this.transformed_rect == null && this._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = polygon.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					polygon.lock_sync();
					polygon.local_x = this.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = this.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = this.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					this.transformed_rect = polygon;
					this.transformed_rect.set_parent(this.parent_frame);
				} else if(this.transformed_rect != null) {
					var _this = this.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = _this.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					_this.lock_sync();
					_this.local_x = this.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = this.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = this.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			this._rotation = this.local_rotation;
		}
		return this;
	}
	,set_from_min_max: function(min_x,min_y,max_x,max_y) {
		var x = (min_x + max_x) * 0.5;
		var y = (min_y + max_y) * 0.5;
		var width = max_x - min_x;
		var height = max_y - min_y;
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.local_x = x;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				if(this.transformed_rect == null && this._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = polygon.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					polygon.lock_sync();
					polygon.local_x = this.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = this.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = this.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					this.transformed_rect = polygon;
					this.transformed_rect.set_parent(this.parent_frame);
				} else if(this.transformed_rect != null) {
					var _this = this.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = _this.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					_this.lock_sync();
					_this.local_x = this.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = this.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = this.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			this._x = this.local_x;
		}
		this.local_y = y;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				if(this.transformed_rect == null && this._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = polygon.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					polygon.lock_sync();
					polygon.local_x = this.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = this.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = this.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					this.transformed_rect = polygon;
					this.transformed_rect.set_parent(this.parent_frame);
				} else if(this.transformed_rect != null) {
					var _this = this.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = _this.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					_this.lock_sync();
					_this.local_x = this.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = this.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = this.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			this._y = this.local_y;
		}
		this.ex = width * 0.5;
		if(this.transformed_rect != null) {
			var _this = this.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = _this.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			_this.lock_sync();
			_this.local_x = this.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = this.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = this.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		this.ey = (height <= 0 ? width : height) * 0.5;
		if(this.transformed_rect != null) {
			var _this = this.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = _this.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			_this.lock_sync();
			_this.local_x = this.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = this.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = this.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		this.local_rotation = 0;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				if(this.transformed_rect == null && this._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = polygon.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					polygon.lock_sync();
					polygon.local_x = this.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = this.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = this.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					this.transformed_rect = polygon;
					this.transformed_rect.set_parent(this.parent_frame);
				} else if(this.transformed_rect != null) {
					var _this = this.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = _this.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					_this.lock_sync();
					_this.local_x = this.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = this.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = this.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			this._rotation = this.local_rotation;
		}
		return this;
	}
	,load: function(rect) {
		this.local_x = rect.local_x;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				if(this.transformed_rect == null && this._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = polygon.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					polygon.lock_sync();
					polygon.local_x = this.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = this.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = this.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					this.transformed_rect = polygon;
					this.transformed_rect.set_parent(this.parent_frame);
				} else if(this.transformed_rect != null) {
					var _this = this.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = _this.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					_this.lock_sync();
					_this.local_x = this.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = this.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = this.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			this._x = this.local_x;
		}
		this.local_y = rect.local_y;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				if(this.transformed_rect == null && this._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = polygon.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					polygon.lock_sync();
					polygon.local_x = this.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = this.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = this.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					this.transformed_rect = polygon;
					this.transformed_rect.set_parent(this.parent_frame);
				} else if(this.transformed_rect != null) {
					var _this = this.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = _this.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					_this.lock_sync();
					_this.local_x = this.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = this.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = this.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			this._y = this.local_y;
		}
		this.ex = rect.ex;
		if(this.transformed_rect != null) {
			var _this = this.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = _this.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			_this.lock_sync();
			_this.local_x = this.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = this.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = this.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		this.ey = rect.ey;
		if(this.transformed_rect != null) {
			var _this = this.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = _this.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			_this.lock_sync();
			_this.local_x = this.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = this.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = this.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		this.local_rotation = rect.local_rotation;
		if(this.parent_frame != null) {
			if(!this.sync_locked) {
				if(this.parent_frame != null) {
					if(this.local_x == 0 && this.local_y == 0) {
						this._x = this.parent_frame.get_offset().x;
						this._y = this.parent_frame.get_offset().y;
					} else {
						var self = this.sync_pos;
						self.x = this.local_x;
						self.y = this.local_y;
						var p = this.sync_pos;
						var self = this.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						this._x = pos_x;
						this._y = pos_y;
					}
					this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
				} else {
					this._x = this.local_x;
					this._y = this.local_x;
					this._rotation = this.local_rotation;
				}
				if(this.transformed_rect == null && this._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = polygon.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = polygon.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					polygon.lock_sync();
					polygon.local_x = this.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = this.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = this.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					this.transformed_rect = polygon;
					this.transformed_rect.set_parent(this.parent_frame);
				} else if(this.transformed_rect != null) {
					var _this = this.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[1];
					self.x = this.ex;
					self.y = -this.ey;
					var self = _this.local_vertices[2];
					self.x = this.ex;
					self.y = this.ey;
					var self = _this.local_vertices[3];
					self.x = -this.ex;
					self.y = this.ey;
					_this.lock_sync();
					_this.local_x = this.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = this.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = this.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			this._rotation = this.local_rotation;
		}
		return this;
	}
	,to_aabb: function(put_self) {
		if(put_self == null) {
			put_self = false;
		}
		if(put_self) {
			var aabb = null;
			var aabb1;
			if(this.transformed_rect != null && this._rotation != 0) {
				aabb1 = this.transformed_rect.bounds(aabb);
			} else if(aabb == null) {
				var x = this._x;
				var y = this._y;
				var width = this.ex * 2;
				var height = this.ey * 2;
				if(height == null) {
					height = 0;
				}
				if(width == null) {
					width = 1;
				}
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var aabb2 = echo_util_AABB._pool.get();
				var x1 = x;
				var y1 = y;
				var width1 = width;
				var height1 = height;
				if(height1 == null) {
					height1 = 1;
				}
				if(width1 == null) {
					width1 = 1;
				}
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				width1 *= 0.5;
				height1 *= 0.5;
				aabb2.min_x = x1 - width1;
				aabb2.min_y = y1 - height1;
				aabb2.max_x = x1 + width1;
				aabb2.max_y = y1 + height1;
				aabb2.pooled = false;
				aabb1 = aabb2;
			} else {
				var x = this._x;
				var y = this._y;
				var width = this.ex * 2;
				var height = this.ey * 2;
				if(height == null) {
					height = 1;
				}
				if(width == null) {
					width = 1;
				}
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				width *= 0.5;
				height *= 0.5;
				aabb.min_x = x - width;
				aabb.min_y = y - height;
				aabb.max_x = x + width;
				aabb.max_y = y + height;
				aabb1 = aabb;
			}
			this.put();
			return aabb1;
		}
		var aabb = null;
		if(this.transformed_rect != null && this._rotation != 0) {
			return this.transformed_rect.bounds(aabb);
		} else if(aabb == null) {
			var x = this._x;
			var y = this._y;
			var width = this.ex * 2;
			var height = this.ey * 2;
			if(height == null) {
				height = 0;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var aabb1 = echo_util_AABB._pool.get();
			var x1 = x;
			var y1 = y;
			var width1 = width;
			var height1 = height;
			if(height1 == null) {
				height1 = 1;
			}
			if(width1 == null) {
				width1 = 1;
			}
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			width1 *= 0.5;
			height1 *= 0.5;
			aabb1.min_x = x1 - width1;
			aabb1.min_y = y1 - height1;
			aabb1.max_x = x1 + width1;
			aabb1.max_y = y1 + height1;
			aabb1.pooled = false;
			return aabb1;
		} else {
			var x = this._x;
			var y = this._y;
			var width = this.ex * 2;
			var height = this.ey * 2;
			if(height == null) {
				height = 1;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			width *= 0.5;
			height *= 0.5;
			aabb.min_x = x - width;
			aabb.min_y = y - height;
			aabb.max_x = x + width;
			aabb.max_y = y + height;
			return aabb;
		}
	}
	,to_polygon: function(put_self) {
		if(put_self == null) {
			put_self = false;
		}
		if(put_self) {
			var polygon = echo_shape_Polygon._pool.get();
			polygon.count = 4;
			var _g = 0;
			var _g1 = polygon.count;
			while(_g < _g1) {
				var i = _g++;
				if(polygon.local_vertices[i] == null) {
					var polygon1 = polygon.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					polygon1[i] = this1;
				}
			}
			var self = polygon.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = polygon.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = polygon.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = polygon.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			polygon.lock_sync();
			polygon.local_x = this.local_x;
			if(polygon.parent_frame != null) {
				if(!polygon.sync_locked) {
					if(polygon.parent_frame != null) {
						if(polygon.local_x == 0 && polygon.local_y == 0) {
							polygon._x = polygon.parent_frame.get_offset().x;
							polygon._y = polygon.parent_frame.get_offset().y;
						} else {
							var self = polygon.sync_pos;
							self.x = polygon.local_x;
							self.y = polygon.local_y;
							var p = polygon.sync_pos;
							var self = polygon.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							polygon._x = pos_x;
							polygon._y = pos_y;
						}
						polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
					} else {
						polygon._x = polygon.local_x;
						polygon._y = polygon.local_x;
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
				}
			} else {
				polygon._x = polygon.local_x;
			}
			polygon.local_y = this.local_y;
			if(polygon.parent_frame != null) {
				if(!polygon.sync_locked) {
					if(polygon.parent_frame != null) {
						if(polygon.local_x == 0 && polygon.local_y == 0) {
							polygon._x = polygon.parent_frame.get_offset().x;
							polygon._y = polygon.parent_frame.get_offset().y;
						} else {
							var self = polygon.sync_pos;
							self.x = polygon.local_x;
							self.y = polygon.local_y;
							var p = polygon.sync_pos;
							var self = polygon.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							polygon._x = pos_x;
							polygon._y = pos_y;
						}
						polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
					} else {
						polygon._x = polygon.local_x;
						polygon._y = polygon.local_x;
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
				}
			} else {
				polygon._y = polygon.local_y;
			}
			polygon.local_rotation = this.local_rotation;
			if(polygon.parent_frame != null) {
				if(!polygon.sync_locked) {
					if(polygon.parent_frame != null) {
						if(polygon.local_x == 0 && polygon.local_y == 0) {
							polygon._x = polygon.parent_frame.get_offset().x;
							polygon._y = polygon.parent_frame.get_offset().y;
						} else {
							var self = polygon.sync_pos;
							self.x = polygon.local_x;
							self.y = polygon.local_y;
							var p = polygon.sync_pos;
							var self = polygon.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							polygon._x = pos_x;
							polygon._y = pos_y;
						}
						polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
					} else {
						polygon._x = polygon.local_x;
						polygon._y = polygon.local_x;
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
				}
			} else {
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
			polygon.unlock_sync();
			polygon.pooled = false;
			var polygon1 = polygon;
			this.put();
			return polygon1;
		}
		var polygon = echo_shape_Polygon._pool.get();
		polygon.count = 4;
		var _g = 0;
		var _g1 = polygon.count;
		while(_g < _g1) {
			var i = _g++;
			if(polygon.local_vertices[i] == null) {
				var polygon1 = polygon.local_vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				polygon1[i] = this1;
			}
		}
		var self = polygon.local_vertices[0];
		self.x = -this.ex;
		self.y = -this.ey;
		var self = polygon.local_vertices[1];
		self.x = this.ex;
		self.y = -this.ey;
		var self = polygon.local_vertices[2];
		self.x = this.ex;
		self.y = this.ey;
		var self = polygon.local_vertices[3];
		self.x = -this.ex;
		self.y = this.ey;
		polygon.lock_sync();
		polygon.local_x = this.local_x;
		if(polygon.parent_frame != null) {
			if(!polygon.sync_locked) {
				if(polygon.parent_frame != null) {
					if(polygon.local_x == 0 && polygon.local_y == 0) {
						polygon._x = polygon.parent_frame.get_offset().x;
						polygon._y = polygon.parent_frame.get_offset().y;
					} else {
						var self = polygon.sync_pos;
						self.x = polygon.local_x;
						self.y = polygon.local_y;
						var p = polygon.sync_pos;
						var self = polygon.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						polygon._x = pos_x;
						polygon._y = pos_y;
					}
					polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
				} else {
					polygon._x = polygon.local_x;
					polygon._y = polygon.local_x;
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
			}
		} else {
			polygon._x = polygon.local_x;
		}
		polygon.local_y = this.local_y;
		if(polygon.parent_frame != null) {
			if(!polygon.sync_locked) {
				if(polygon.parent_frame != null) {
					if(polygon.local_x == 0 && polygon.local_y == 0) {
						polygon._x = polygon.parent_frame.get_offset().x;
						polygon._y = polygon.parent_frame.get_offset().y;
					} else {
						var self = polygon.sync_pos;
						self.x = polygon.local_x;
						self.y = polygon.local_y;
						var p = polygon.sync_pos;
						var self = polygon.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						polygon._x = pos_x;
						polygon._y = pos_y;
					}
					polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
				} else {
					polygon._x = polygon.local_x;
					polygon._y = polygon.local_x;
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
			}
		} else {
			polygon._y = polygon.local_y;
		}
		polygon.local_rotation = this.local_rotation;
		if(polygon.parent_frame != null) {
			if(!polygon.sync_locked) {
				if(polygon.parent_frame != null) {
					if(polygon.local_x == 0 && polygon.local_y == 0) {
						polygon._x = polygon.parent_frame.get_offset().x;
						polygon._y = polygon.parent_frame.get_offset().y;
					} else {
						var self = polygon.sync_pos;
						self.x = polygon.local_x;
						self.y = polygon.local_y;
						var p = polygon.sync_pos;
						var self = polygon.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						polygon._x = pos_x;
						polygon._y = pos_y;
					}
					polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
				} else {
					polygon._x = polygon.local_x;
					polygon._y = polygon.local_x;
					polygon._rotation = polygon.local_rotation;
				}
				polygon.dirty_vertices = true;
				polygon.dirty_bounds = true;
			}
		} else {
			polygon._rotation = polygon.local_rotation;
		}
		polygon.dirty_vertices = true;
		polygon.dirty_bounds = true;
		polygon.unlock_sync();
		polygon.pooled = false;
		return polygon;
	}
	,bounds: function(aabb) {
		if(this.transformed_rect != null && this._rotation != 0) {
			return this.transformed_rect.bounds(aabb);
		}
		if(aabb == null) {
			var x = this._x;
			var y = this._y;
			var width = this.ex * 2;
			var height = this.ey * 2;
			if(height == null) {
				height = 0;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var aabb1 = echo_util_AABB._pool.get();
			var x1 = x;
			var y1 = y;
			var width1 = width;
			var height1 = height;
			if(height1 == null) {
				height1 = 1;
			}
			if(width1 == null) {
				width1 = 1;
			}
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			width1 *= 0.5;
			height1 *= 0.5;
			aabb1.min_x = x1 - width1;
			aabb1.min_y = y1 - height1;
			aabb1.max_x = x1 + width1;
			aabb1.max_y = y1 + height1;
			aabb1.pooled = false;
			return aabb1;
		} else {
			var x = this._x;
			var y = this._y;
			var width = this.ex * 2;
			var height = this.ey * 2;
			if(height == null) {
				height = 1;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			width *= 0.5;
			height *= 0.5;
			aabb.min_x = x - width;
			aabb.min_y = y - height;
			aabb.max_x = x + width;
			aabb.max_y = y + height;
			return aabb;
		}
	}
	,clone: function() {
		var x = this.local_x;
		var y = this.local_y;
		var width = this.ex * 2;
		var height = this.ey * 2;
		var rotation = this.local_rotation;
		if(rotation == null) {
			rotation = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var rect = echo_shape_Rect._pool.get();
		var x1 = x;
		var y1 = y;
		var width1 = width;
		var height1 = height;
		var rotation1 = rotation;
		if(rotation1 == null) {
			rotation1 = 0;
		}
		if(height1 == null) {
			height1 = 0;
		}
		if(width1 == null) {
			width1 = 1;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		rect.local_x = x1;
		if(rect.parent_frame != null) {
			if(!rect.sync_locked) {
				if(rect.parent_frame != null) {
					if(rect.local_x == 0 && rect.local_y == 0) {
						rect._x = rect.parent_frame.get_offset().x;
						rect._y = rect.parent_frame.get_offset().y;
					} else {
						var self = rect.sync_pos;
						self.x = rect.local_x;
						self.y = rect.local_y;
						var p = rect.sync_pos;
						var self = rect.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						rect._x = pos_x;
						rect._y = pos_y;
					}
					rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
				} else {
					rect._x = rect.local_x;
					rect._y = rect.local_x;
					rect._rotation = rect.local_rotation;
				}
				if(rect.transformed_rect == null && rect._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = polygon.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					polygon.lock_sync();
					polygon.local_x = rect.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = rect.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = rect.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					rect.transformed_rect = polygon;
					rect.transformed_rect.set_parent(rect.parent_frame);
				} else if(rect.transformed_rect != null) {
					var _this = rect.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = _this.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					_this.lock_sync();
					_this.local_x = rect.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = rect.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = rect.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			rect._x = rect.local_x;
		}
		rect.local_y = y1;
		if(rect.parent_frame != null) {
			if(!rect.sync_locked) {
				if(rect.parent_frame != null) {
					if(rect.local_x == 0 && rect.local_y == 0) {
						rect._x = rect.parent_frame.get_offset().x;
						rect._y = rect.parent_frame.get_offset().y;
					} else {
						var self = rect.sync_pos;
						self.x = rect.local_x;
						self.y = rect.local_y;
						var p = rect.sync_pos;
						var self = rect.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						rect._x = pos_x;
						rect._y = pos_y;
					}
					rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
				} else {
					rect._x = rect.local_x;
					rect._y = rect.local_x;
					rect._rotation = rect.local_rotation;
				}
				if(rect.transformed_rect == null && rect._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = polygon.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					polygon.lock_sync();
					polygon.local_x = rect.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = rect.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = rect.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					rect.transformed_rect = polygon;
					rect.transformed_rect.set_parent(rect.parent_frame);
				} else if(rect.transformed_rect != null) {
					var _this = rect.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = _this.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					_this.lock_sync();
					_this.local_x = rect.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = rect.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = rect.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			rect._y = rect.local_y;
		}
		rect.ex = width1 * 0.5;
		if(rect.transformed_rect != null) {
			var _this = rect.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = _this.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			_this.lock_sync();
			_this.local_x = rect.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = rect.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = rect.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		rect.ey = (height1 <= 0 ? width1 : height1) * 0.5;
		if(rect.transformed_rect != null) {
			var _this = rect.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = _this.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			_this.lock_sync();
			_this.local_x = rect.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = rect.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = rect.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		rect.local_rotation = rotation1;
		if(rect.parent_frame != null) {
			if(!rect.sync_locked) {
				if(rect.parent_frame != null) {
					if(rect.local_x == 0 && rect.local_y == 0) {
						rect._x = rect.parent_frame.get_offset().x;
						rect._y = rect.parent_frame.get_offset().y;
					} else {
						var self = rect.sync_pos;
						self.x = rect.local_x;
						self.y = rect.local_y;
						var p = rect.sync_pos;
						var self = rect.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						rect._x = pos_x;
						rect._y = pos_y;
					}
					rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
				} else {
					rect._x = rect.local_x;
					rect._y = rect.local_x;
					rect._rotation = rect.local_rotation;
				}
				if(rect.transformed_rect == null && rect._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = polygon.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					polygon.lock_sync();
					polygon.local_x = rect.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = rect.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = rect.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					rect.transformed_rect = polygon;
					rect.transformed_rect.set_parent(rect.parent_frame);
				} else if(rect.transformed_rect != null) {
					var _this = rect.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = _this.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					_this.lock_sync();
					_this.local_x = rect.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = rect.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = rect.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			rect._rotation = rect.local_rotation;
		}
		rect.pooled = false;
		return rect;
	}
	,contains: function(p) {
		if(this.transformed_rect != null && this._rotation != 0) {
			var polygon = this.transformed_rect;
			var inside = false;
			var j = polygon.count - 1;
			var _g = 0;
			var _g1 = polygon.count;
			while(_g < _g1) {
				var i = _g++;
				if(polygon.dirty_vertices) {
					polygon.dirty_vertices = false;
					var self = polygon.local_frame.get_offset();
					self.x = polygon.local_x;
					self.y = polygon.local_y;
					polygon.local_frame.set_angleDegrees(polygon.local_rotation);
					if(polygon.parent_frame != null) {
						var self1 = polygon.parent_frame;
						var self2 = self1.get_matrix();
						var m_a = self2.a;
						var m_b = self2.b;
						var m_c = self2.c;
						var m_d = self2.d;
						var v = polygon.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = polygon.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var polygon1 = polygon.local_frame;
						var x = polygon.parent_frame.get_angleDegrees() + polygon.local_frame.get_angleDegrees();
						polygon1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self3 = polygon.local_frame.get_offset();
						self3.x = pos_x;
						self3.y = pos_y;
					}
					while(polygon._vertices.length > polygon.count) polygon._vertices.pop();
					var _g2 = 0;
					var _g3 = polygon.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(polygon.local_vertices[i1] == null) {
							continue;
						}
						if(polygon._vertices[i1] == null) {
							var polygon2 = polygon._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon2[i1] = this1;
						}
						var p1 = polygon.local_vertices[i1];
						var self4 = polygon.local_frame;
						var m = self4.get_matrix();
						var self5 = m;
						var m_a1 = self5.a;
						var m_b1 = self5.b;
						var m_c1 = self5.c;
						var m_d1 = self5.d;
						var self_x = m_a1 * p1.x + m_c1 * p1.y;
						var self_y = m_b1 * p1.x + m_d1 * p1.y;
						var self6 = m;
						var b_x = self6.tx;
						var b_y = self6.ty;
						var pos_x1 = self_x;
						var pos_y1 = self_y;
						pos_x1 += b_x;
						pos_y1 += b_y;
						var self7 = polygon._vertices[i1];
						self7.x = pos_x1;
						self7.y = pos_y1;
					}
					var _g4 = 0;
					var _g5 = polygon.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = polygon.sync_pos;
						var self8 = polygon._vertices[(i2 + 1) % polygon.count];
						var self9 = self8;
						var value = self9.x;
						var self10 = target;
						self10.x = value;
						var self11 = self8;
						var value1 = self11.y;
						var self12 = target;
						self12.y = value1;
						var a1 = polygon._vertices[i2];
						var self13 = polygon.sync_pos;
						self13.x -= a1.x;
						self13.y -= a1.y;
						if(polygon._normals[i2] == null) {
							var polygon3 = polygon._normals;
							var this2 = new hxmath_math_Vector2Default(-polygon.sync_pos.y,polygon.sync_pos.x);
							polygon3[i2] = this2;
						} else {
							var y = polygon.sync_pos.x;
							var self14 = polygon._normals[i2];
							self14.x = -polygon.sync_pos.y;
							self14.y = y;
						}
						var self15 = polygon._normals[i2];
						var self16 = self15;
						var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
						if(length > 0.0) {
							var self17 = self15;
							self17.x /= length;
							self17.y /= length;
						}
					}
				}
				var v1 = polygon._vertices;
				var tmp = v1[i].y > p.y != v1[j].y > p.y && p.x < (v1[j].x - v1[i].x) * (p.y - v1[i].y) / (v1[j].y - v1[i].y) + v1[i].x;
				j = i;
			}
			return inside;
		} else {
			var tmp;
			var tmp1;
			var tmp2;
			if(this.transformed_rect == null || this._rotation == 0) {
				tmp2 = this._x - this.ex;
			} else {
				var _this = this.transformed_rect;
				var tmp3;
				if(_this.count != 0) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self = _this.parent_frame;
							var self1 = self.get_matrix();
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var v = _this.local_frame.get_offset();
							var pos_x = m_a * v.x + m_c * v.y;
							var pos_y = m_b * v.x + m_d * v.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
							var self = _this.local_frame.get_offset();
							self.x = pos_x;
							self.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								continue;
							}
							if(_this._vertices[i] == null) {
								var _this1 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
							var p1 = _this.local_vertices[i];
							var self = _this.local_frame;
							var m = self.get_matrix();
							var self1 = m;
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var self_x = m_a * p1.x + m_c * p1.y;
							var self_y = m_b * p1.x + m_d * p1.y;
							var self2 = m;
							var b_x = self2.tx;
							var b_y = self2.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							var self3 = _this._vertices[i];
							self3.x = pos_x;
							self3.y = pos_y;
						}
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							var target = _this.sync_pos;
							var self = _this._vertices[(i + 1) % _this.count];
							var self1 = self;
							var value = self1.x;
							var self2 = target;
							self2.x = value;
							var self3 = self;
							var value1 = self3.y;
							var self4 = target;
							self4.y = value1;
							var a = _this._vertices[i];
							var self5 = _this.sync_pos;
							self5.x -= a.x;
							self5.y -= a.y;
							if(_this._normals[i] == null) {
								var _this1 = _this._normals;
								var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this1[i] = this1;
							} else {
								var y = _this.sync_pos.x;
								var self6 = _this._normals[i];
								self6.x = -_this.sync_pos.y;
								self6.y = y;
							}
							var self7 = _this._normals[i];
							var self8 = self7;
							var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
							if(length > 0.0) {
								var self9 = self7;
								self9.x /= length;
								self9.y /= length;
							}
						}
					}
					tmp3 = _this._vertices[0] == null;
				} else {
					tmp3 = true;
				}
				if(tmp3) {
					tmp2 = _this._x;
				} else {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self = _this.parent_frame;
							var self1 = self.get_matrix();
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var v = _this.local_frame.get_offset();
							var pos_x = m_a * v.x + m_c * v.y;
							var pos_y = m_b * v.x + m_d * v.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
							var self = _this.local_frame.get_offset();
							self.x = pos_x;
							self.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								continue;
							}
							if(_this._vertices[i] == null) {
								var _this1 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
							var p1 = _this.local_vertices[i];
							var self = _this.local_frame;
							var m = self.get_matrix();
							var self1 = m;
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var self_x = m_a * p1.x + m_c * p1.y;
							var self_y = m_b * p1.x + m_d * p1.y;
							var self2 = m;
							var b_x = self2.tx;
							var b_y = self2.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							var self3 = _this._vertices[i];
							self3.x = pos_x;
							self3.y = pos_y;
						}
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							var target = _this.sync_pos;
							var self = _this._vertices[(i + 1) % _this.count];
							var self1 = self;
							var value = self1.x;
							var self2 = target;
							self2.x = value;
							var self3 = self;
							var value1 = self3.y;
							var self4 = target;
							self4.y = value1;
							var a = _this._vertices[i];
							var self5 = _this.sync_pos;
							self5.x -= a.x;
							self5.y -= a.y;
							if(_this._normals[i] == null) {
								var _this1 = _this._normals;
								var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this1[i] = this1;
							} else {
								var y = _this.sync_pos.x;
								var self6 = _this._normals[i];
								self6.x = -_this.sync_pos.y;
								self6.y = y;
							}
							var self7 = _this._normals[i];
							var self8 = self7;
							var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
							if(length > 0.0) {
								var self9 = self7;
								self9.x /= length;
								self9.y /= length;
							}
						}
					}
					var left = _this._vertices[0].x;
					var _g = 1;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self = _this.local_frame.get_offset();
							self.x = _this.local_x;
							self.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self1 = _this.parent_frame;
								var self2 = self1.get_matrix();
								var m_a = self2.a;
								var m_b = self2.b;
								var m_c = self2.c;
								var m_d = self2.d;
								var v = _this.local_frame.get_offset();
								var pos_x = m_a * v.x + m_c * v.y;
								var pos_y = m_b * v.x + m_d * v.y;
								var a = _this.parent_frame.get_offset();
								pos_x += a.x;
								pos_y += a.y;
								var _this1 = _this.local_frame;
								var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
								var self3 = _this.local_frame.get_offset();
								self3.x = pos_x;
								self3.y = pos_y;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g2 = 0;
							var _g3 = _this.count;
							while(_g2 < _g3) {
								var i1 = _g2++;
								if(_this.local_vertices[i1] == null) {
									continue;
								}
								if(_this._vertices[i1] == null) {
									var _this2 = _this._vertices;
									var this1 = new hxmath_math_Vector2Default(0,0);
									_this2[i1] = this1;
								}
								var p1 = _this.local_vertices[i1];
								var self4 = _this.local_frame;
								var m = self4.get_matrix();
								var self5 = m;
								var m_a1 = self5.a;
								var m_b1 = self5.b;
								var m_c1 = self5.c;
								var m_d1 = self5.d;
								var self_x = m_a1 * p1.x + m_c1 * p1.y;
								var self_y = m_b1 * p1.x + m_d1 * p1.y;
								var self6 = m;
								var b_x = self6.tx;
								var b_y = self6.ty;
								var pos_x1 = self_x;
								var pos_y1 = self_y;
								pos_x1 += b_x;
								pos_y1 += b_y;
								var self7 = _this._vertices[i1];
								self7.x = pos_x1;
								self7.y = pos_y1;
							}
							var _g4 = 0;
							var _g5 = _this.count;
							while(_g4 < _g5) {
								var i2 = _g4++;
								var target = _this.sync_pos;
								var self8 = _this._vertices[(i2 + 1) % _this.count];
								var self9 = self8;
								var value = self9.x;
								var self10 = target;
								self10.x = value;
								var self11 = self8;
								var value1 = self11.y;
								var self12 = target;
								self12.y = value1;
								var a1 = _this._vertices[i2];
								var self13 = _this.sync_pos;
								self13.x -= a1.x;
								self13.y -= a1.y;
								if(_this._normals[i2] == null) {
									var _this3 = _this._normals;
									var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this3[i2] = this2;
								} else {
									var y = _this.sync_pos.x;
									var self14 = _this._normals[i2];
									self14.x = -_this.sync_pos.y;
									self14.y = y;
								}
								var self15 = _this._normals[i2];
								var self16 = self15;
								var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
								if(length > 0.0) {
									var self17 = self15;
									self17.x /= length;
									self17.y /= length;
								}
							}
						}
						if(_this._vertices[i].x < left) {
							if(_this.dirty_vertices) {
								_this.dirty_vertices = false;
								var self18 = _this.local_frame.get_offset();
								self18.x = _this.local_x;
								self18.y = _this.local_y;
								_this.local_frame.set_angleDegrees(_this.local_rotation);
								if(_this.parent_frame != null) {
									var self19 = _this.parent_frame;
									var self20 = self19.get_matrix();
									var m_a2 = self20.a;
									var m_b2 = self20.b;
									var m_c2 = self20.c;
									var m_d2 = self20.d;
									var v1 = _this.local_frame.get_offset();
									var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
									var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
									var a2 = _this.parent_frame.get_offset();
									pos_x2 += a2.x;
									pos_y2 += a2.y;
									var _this4 = _this.local_frame;
									var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
									_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
									var self21 = _this.local_frame.get_offset();
									self21.x = pos_x2;
									self21.y = pos_y2;
								}
								while(_this._vertices.length > _this.count) _this._vertices.pop();
								var _g6 = 0;
								var _g7 = _this.count;
								while(_g6 < _g7) {
									var i3 = _g6++;
									if(_this.local_vertices[i3] == null) {
										continue;
									}
									if(_this._vertices[i3] == null) {
										var _this5 = _this._vertices;
										var this3 = new hxmath_math_Vector2Default(0,0);
										_this5[i3] = this3;
									}
									var p2 = _this.local_vertices[i3];
									var self22 = _this.local_frame;
									var m1 = self22.get_matrix();
									var self23 = m1;
									var m_a3 = self23.a;
									var m_b3 = self23.b;
									var m_c3 = self23.c;
									var m_d3 = self23.d;
									var self_x1 = m_a3 * p2.x + m_c3 * p2.y;
									var self_y1 = m_b3 * p2.x + m_d3 * p2.y;
									var self24 = m1;
									var b_x1 = self24.tx;
									var b_y1 = self24.ty;
									var pos_x3 = self_x1;
									var pos_y3 = self_y1;
									pos_x3 += b_x1;
									pos_y3 += b_y1;
									var self25 = _this._vertices[i3];
									self25.x = pos_x3;
									self25.y = pos_y3;
								}
								var _g8 = 0;
								var _g9 = _this.count;
								while(_g8 < _g9) {
									var i4 = _g8++;
									var target1 = _this.sync_pos;
									var self26 = _this._vertices[(i4 + 1) % _this.count];
									var self27 = self26;
									var value2 = self27.x;
									var self28 = target1;
									self28.x = value2;
									var self29 = self26;
									var value3 = self29.y;
									var self30 = target1;
									self30.y = value3;
									var a3 = _this._vertices[i4];
									var self31 = _this.sync_pos;
									self31.x -= a3.x;
									self31.y -= a3.y;
									if(_this._normals[i4] == null) {
										var _this6 = _this._normals;
										var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
										_this6[i4] = this4;
									} else {
										var y1 = _this.sync_pos.x;
										var self32 = _this._normals[i4];
										self32.x = -_this.sync_pos.y;
										self32.y = y1;
									}
									var self33 = _this._normals[i4];
									var self34 = self33;
									var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
									if(length1 > 0.0) {
										var self35 = self33;
										self35.x /= length1;
										self35.y /= length1;
									}
								}
							}
							left = _this._vertices[i].x;
						}
					}
					tmp2 = left;
				}
			}
			if(tmp2 <= p.x) {
				var tmp2;
				if(this.transformed_rect == null || this._rotation == 0) {
					tmp2 = this._x + this.ex;
				} else {
					var _this = this.transformed_rect;
					var tmp3;
					if(_this.count != 0) {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self = _this.local_frame.get_offset();
							self.x = _this.local_x;
							self.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self = _this.parent_frame;
								var self1 = self.get_matrix();
								var m_a = self1.a;
								var m_b = self1.b;
								var m_c = self1.c;
								var m_d = self1.d;
								var v = _this.local_frame.get_offset();
								var pos_x = m_a * v.x + m_c * v.y;
								var pos_y = m_b * v.x + m_d * v.y;
								var a = _this.parent_frame.get_offset();
								pos_x += a.x;
								pos_y += a.y;
								var _this1 = _this.local_frame;
								var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
								var self = _this.local_frame.get_offset();
								self.x = pos_x;
								self.y = pos_y;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								if(_this.local_vertices[i] == null) {
									continue;
								}
								if(_this._vertices[i] == null) {
									var _this1 = _this._vertices;
									var this1 = new hxmath_math_Vector2Default(0,0);
									_this1[i] = this1;
								}
								var p1 = _this.local_vertices[i];
								var self = _this.local_frame;
								var m = self.get_matrix();
								var self1 = m;
								var m_a = self1.a;
								var m_b = self1.b;
								var m_c = self1.c;
								var m_d = self1.d;
								var self_x = m_a * p1.x + m_c * p1.y;
								var self_y = m_b * p1.x + m_d * p1.y;
								var self2 = m;
								var b_x = self2.tx;
								var b_y = self2.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								var self3 = _this._vertices[i];
								self3.x = pos_x;
								self3.y = pos_y;
							}
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								var target = _this.sync_pos;
								var self = _this._vertices[(i + 1) % _this.count];
								var self1 = self;
								var value = self1.x;
								var self2 = target;
								self2.x = value;
								var self3 = self;
								var value1 = self3.y;
								var self4 = target;
								self4.y = value1;
								var a = _this._vertices[i];
								var self5 = _this.sync_pos;
								self5.x -= a.x;
								self5.y -= a.y;
								if(_this._normals[i] == null) {
									var _this1 = _this._normals;
									var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this1[i] = this1;
								} else {
									var y = _this.sync_pos.x;
									var self6 = _this._normals[i];
									self6.x = -_this.sync_pos.y;
									self6.y = y;
								}
								var self7 = _this._normals[i];
								var self8 = self7;
								var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
								if(length > 0.0) {
									var self9 = self7;
									self9.x /= length;
									self9.y /= length;
								}
							}
						}
						tmp3 = _this._vertices[0] == null;
					} else {
						tmp3 = true;
					}
					if(tmp3) {
						tmp2 = _this._x;
					} else {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self = _this.local_frame.get_offset();
							self.x = _this.local_x;
							self.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self = _this.parent_frame;
								var self1 = self.get_matrix();
								var m_a = self1.a;
								var m_b = self1.b;
								var m_c = self1.c;
								var m_d = self1.d;
								var v = _this.local_frame.get_offset();
								var pos_x = m_a * v.x + m_c * v.y;
								var pos_y = m_b * v.x + m_d * v.y;
								var a = _this.parent_frame.get_offset();
								pos_x += a.x;
								pos_y += a.y;
								var _this1 = _this.local_frame;
								var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
								var self = _this.local_frame.get_offset();
								self.x = pos_x;
								self.y = pos_y;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								if(_this.local_vertices[i] == null) {
									continue;
								}
								if(_this._vertices[i] == null) {
									var _this1 = _this._vertices;
									var this1 = new hxmath_math_Vector2Default(0,0);
									_this1[i] = this1;
								}
								var p1 = _this.local_vertices[i];
								var self = _this.local_frame;
								var m = self.get_matrix();
								var self1 = m;
								var m_a = self1.a;
								var m_b = self1.b;
								var m_c = self1.c;
								var m_d = self1.d;
								var self_x = m_a * p1.x + m_c * p1.y;
								var self_y = m_b * p1.x + m_d * p1.y;
								var self2 = m;
								var b_x = self2.tx;
								var b_y = self2.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								var self3 = _this._vertices[i];
								self3.x = pos_x;
								self3.y = pos_y;
							}
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								var target = _this.sync_pos;
								var self = _this._vertices[(i + 1) % _this.count];
								var self1 = self;
								var value = self1.x;
								var self2 = target;
								self2.x = value;
								var self3 = self;
								var value1 = self3.y;
								var self4 = target;
								self4.y = value1;
								var a = _this._vertices[i];
								var self5 = _this.sync_pos;
								self5.x -= a.x;
								self5.y -= a.y;
								if(_this._normals[i] == null) {
									var _this1 = _this._normals;
									var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this1[i] = this1;
								} else {
									var y = _this.sync_pos.x;
									var self6 = _this._normals[i];
									self6.x = -_this.sync_pos.y;
									self6.y = y;
								}
								var self7 = _this._normals[i];
								var self8 = self7;
								var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
								if(length > 0.0) {
									var self9 = self7;
									self9.x /= length;
									self9.y /= length;
								}
							}
						}
						var right = _this._vertices[0].x;
						var _g = 1;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.dirty_vertices) {
								_this.dirty_vertices = false;
								var self = _this.local_frame.get_offset();
								self.x = _this.local_x;
								self.y = _this.local_y;
								_this.local_frame.set_angleDegrees(_this.local_rotation);
								if(_this.parent_frame != null) {
									var self1 = _this.parent_frame;
									var self2 = self1.get_matrix();
									var m_a = self2.a;
									var m_b = self2.b;
									var m_c = self2.c;
									var m_d = self2.d;
									var v = _this.local_frame.get_offset();
									var pos_x = m_a * v.x + m_c * v.y;
									var pos_y = m_b * v.x + m_d * v.y;
									var a = _this.parent_frame.get_offset();
									pos_x += a.x;
									pos_y += a.y;
									var _this1 = _this.local_frame;
									var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
									_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
									var self3 = _this.local_frame.get_offset();
									self3.x = pos_x;
									self3.y = pos_y;
								}
								while(_this._vertices.length > _this.count) _this._vertices.pop();
								var _g2 = 0;
								var _g3 = _this.count;
								while(_g2 < _g3) {
									var i1 = _g2++;
									if(_this.local_vertices[i1] == null) {
										continue;
									}
									if(_this._vertices[i1] == null) {
										var _this2 = _this._vertices;
										var this1 = new hxmath_math_Vector2Default(0,0);
										_this2[i1] = this1;
									}
									var p1 = _this.local_vertices[i1];
									var self4 = _this.local_frame;
									var m = self4.get_matrix();
									var self5 = m;
									var m_a1 = self5.a;
									var m_b1 = self5.b;
									var m_c1 = self5.c;
									var m_d1 = self5.d;
									var self_x = m_a1 * p1.x + m_c1 * p1.y;
									var self_y = m_b1 * p1.x + m_d1 * p1.y;
									var self6 = m;
									var b_x = self6.tx;
									var b_y = self6.ty;
									var pos_x1 = self_x;
									var pos_y1 = self_y;
									pos_x1 += b_x;
									pos_y1 += b_y;
									var self7 = _this._vertices[i1];
									self7.x = pos_x1;
									self7.y = pos_y1;
								}
								var _g4 = 0;
								var _g5 = _this.count;
								while(_g4 < _g5) {
									var i2 = _g4++;
									var target = _this.sync_pos;
									var self8 = _this._vertices[(i2 + 1) % _this.count];
									var self9 = self8;
									var value = self9.x;
									var self10 = target;
									self10.x = value;
									var self11 = self8;
									var value1 = self11.y;
									var self12 = target;
									self12.y = value1;
									var a1 = _this._vertices[i2];
									var self13 = _this.sync_pos;
									self13.x -= a1.x;
									self13.y -= a1.y;
									if(_this._normals[i2] == null) {
										var _this3 = _this._normals;
										var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
										_this3[i2] = this2;
									} else {
										var y = _this.sync_pos.x;
										var self14 = _this._normals[i2];
										self14.x = -_this.sync_pos.y;
										self14.y = y;
									}
									var self15 = _this._normals[i2];
									var self16 = self15;
									var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
									if(length > 0.0) {
										var self17 = self15;
										self17.x /= length;
										self17.y /= length;
									}
								}
							}
							if(_this._vertices[i].x > right) {
								if(_this.dirty_vertices) {
									_this.dirty_vertices = false;
									var self18 = _this.local_frame.get_offset();
									self18.x = _this.local_x;
									self18.y = _this.local_y;
									_this.local_frame.set_angleDegrees(_this.local_rotation);
									if(_this.parent_frame != null) {
										var self19 = _this.parent_frame;
										var self20 = self19.get_matrix();
										var m_a2 = self20.a;
										var m_b2 = self20.b;
										var m_c2 = self20.c;
										var m_d2 = self20.d;
										var v1 = _this.local_frame.get_offset();
										var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
										var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
										var a2 = _this.parent_frame.get_offset();
										pos_x2 += a2.x;
										pos_y2 += a2.y;
										var _this4 = _this.local_frame;
										var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
										_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
										var self21 = _this.local_frame.get_offset();
										self21.x = pos_x2;
										self21.y = pos_y2;
									}
									while(_this._vertices.length > _this.count) _this._vertices.pop();
									var _g6 = 0;
									var _g7 = _this.count;
									while(_g6 < _g7) {
										var i3 = _g6++;
										if(_this.local_vertices[i3] == null) {
											continue;
										}
										if(_this._vertices[i3] == null) {
											var _this5 = _this._vertices;
											var this3 = new hxmath_math_Vector2Default(0,0);
											_this5[i3] = this3;
										}
										var p2 = _this.local_vertices[i3];
										var self22 = _this.local_frame;
										var m1 = self22.get_matrix();
										var self23 = m1;
										var m_a3 = self23.a;
										var m_b3 = self23.b;
										var m_c3 = self23.c;
										var m_d3 = self23.d;
										var self_x1 = m_a3 * p2.x + m_c3 * p2.y;
										var self_y1 = m_b3 * p2.x + m_d3 * p2.y;
										var self24 = m1;
										var b_x1 = self24.tx;
										var b_y1 = self24.ty;
										var pos_x3 = self_x1;
										var pos_y3 = self_y1;
										pos_x3 += b_x1;
										pos_y3 += b_y1;
										var self25 = _this._vertices[i3];
										self25.x = pos_x3;
										self25.y = pos_y3;
									}
									var _g8 = 0;
									var _g9 = _this.count;
									while(_g8 < _g9) {
										var i4 = _g8++;
										var target1 = _this.sync_pos;
										var self26 = _this._vertices[(i4 + 1) % _this.count];
										var self27 = self26;
										var value2 = self27.x;
										var self28 = target1;
										self28.x = value2;
										var self29 = self26;
										var value3 = self29.y;
										var self30 = target1;
										self30.y = value3;
										var a3 = _this._vertices[i4];
										var self31 = _this.sync_pos;
										self31.x -= a3.x;
										self31.y -= a3.y;
										if(_this._normals[i4] == null) {
											var _this6 = _this._normals;
											var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
											_this6[i4] = this4;
										} else {
											var y1 = _this.sync_pos.x;
											var self32 = _this._normals[i4];
											self32.x = -_this.sync_pos.y;
											self32.y = y1;
										}
										var self33 = _this._normals[i4];
										var self34 = self33;
										var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
										if(length1 > 0.0) {
											var self35 = self33;
											self35.x /= length1;
											self35.y /= length1;
										}
									}
								}
								right = _this._vertices[i].x;
							}
						}
						tmp2 = right;
					}
				}
				tmp1 = tmp2 >= p.x;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var tmp1;
				if(this.transformed_rect == null || this._rotation == 0) {
					tmp1 = this._y - this.ey;
				} else {
					var _this = this.transformed_rect;
					var tmp2;
					if(_this.count != 0) {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self = _this.local_frame.get_offset();
							self.x = _this.local_x;
							self.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self = _this.parent_frame;
								var self1 = self.get_matrix();
								var m_a = self1.a;
								var m_b = self1.b;
								var m_c = self1.c;
								var m_d = self1.d;
								var v = _this.local_frame.get_offset();
								var pos_x = m_a * v.x + m_c * v.y;
								var pos_y = m_b * v.x + m_d * v.y;
								var a = _this.parent_frame.get_offset();
								pos_x += a.x;
								pos_y += a.y;
								var _this1 = _this.local_frame;
								var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
								var self = _this.local_frame.get_offset();
								self.x = pos_x;
								self.y = pos_y;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								if(_this.local_vertices[i] == null) {
									continue;
								}
								if(_this._vertices[i] == null) {
									var _this1 = _this._vertices;
									var this1 = new hxmath_math_Vector2Default(0,0);
									_this1[i] = this1;
								}
								var p1 = _this.local_vertices[i];
								var self = _this.local_frame;
								var m = self.get_matrix();
								var self1 = m;
								var m_a = self1.a;
								var m_b = self1.b;
								var m_c = self1.c;
								var m_d = self1.d;
								var self_x = m_a * p1.x + m_c * p1.y;
								var self_y = m_b * p1.x + m_d * p1.y;
								var self2 = m;
								var b_x = self2.tx;
								var b_y = self2.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								var self3 = _this._vertices[i];
								self3.x = pos_x;
								self3.y = pos_y;
							}
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								var target = _this.sync_pos;
								var self = _this._vertices[(i + 1) % _this.count];
								var self1 = self;
								var value = self1.x;
								var self2 = target;
								self2.x = value;
								var self3 = self;
								var value1 = self3.y;
								var self4 = target;
								self4.y = value1;
								var a = _this._vertices[i];
								var self5 = _this.sync_pos;
								self5.x -= a.x;
								self5.y -= a.y;
								if(_this._normals[i] == null) {
									var _this1 = _this._normals;
									var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this1[i] = this1;
								} else {
									var y = _this.sync_pos.x;
									var self6 = _this._normals[i];
									self6.x = -_this.sync_pos.y;
									self6.y = y;
								}
								var self7 = _this._normals[i];
								var self8 = self7;
								var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
								if(length > 0.0) {
									var self9 = self7;
									self9.x /= length;
									self9.y /= length;
								}
							}
						}
						tmp2 = _this._vertices[0] == null;
					} else {
						tmp2 = true;
					}
					if(tmp2) {
						tmp1 = _this._y;
					} else {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self = _this.local_frame.get_offset();
							self.x = _this.local_x;
							self.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self = _this.parent_frame;
								var self1 = self.get_matrix();
								var m_a = self1.a;
								var m_b = self1.b;
								var m_c = self1.c;
								var m_d = self1.d;
								var v = _this.local_frame.get_offset();
								var pos_x = m_a * v.x + m_c * v.y;
								var pos_y = m_b * v.x + m_d * v.y;
								var a = _this.parent_frame.get_offset();
								pos_x += a.x;
								pos_y += a.y;
								var _this1 = _this.local_frame;
								var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
								var self = _this.local_frame.get_offset();
								self.x = pos_x;
								self.y = pos_y;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								if(_this.local_vertices[i] == null) {
									continue;
								}
								if(_this._vertices[i] == null) {
									var _this1 = _this._vertices;
									var this1 = new hxmath_math_Vector2Default(0,0);
									_this1[i] = this1;
								}
								var p1 = _this.local_vertices[i];
								var self = _this.local_frame;
								var m = self.get_matrix();
								var self1 = m;
								var m_a = self1.a;
								var m_b = self1.b;
								var m_c = self1.c;
								var m_d = self1.d;
								var self_x = m_a * p1.x + m_c * p1.y;
								var self_y = m_b * p1.x + m_d * p1.y;
								var self2 = m;
								var b_x = self2.tx;
								var b_y = self2.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								var self3 = _this._vertices[i];
								self3.x = pos_x;
								self3.y = pos_y;
							}
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								var target = _this.sync_pos;
								var self = _this._vertices[(i + 1) % _this.count];
								var self1 = self;
								var value = self1.x;
								var self2 = target;
								self2.x = value;
								var self3 = self;
								var value1 = self3.y;
								var self4 = target;
								self4.y = value1;
								var a = _this._vertices[i];
								var self5 = _this.sync_pos;
								self5.x -= a.x;
								self5.y -= a.y;
								if(_this._normals[i] == null) {
									var _this1 = _this._normals;
									var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this1[i] = this1;
								} else {
									var y = _this.sync_pos.x;
									var self6 = _this._normals[i];
									self6.x = -_this.sync_pos.y;
									self6.y = y;
								}
								var self7 = _this._normals[i];
								var self8 = self7;
								var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
								if(length > 0.0) {
									var self9 = self7;
									self9.x /= length;
									self9.y /= length;
								}
							}
						}
						var top = _this._vertices[0].y;
						var _g = 1;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.dirty_vertices) {
								_this.dirty_vertices = false;
								var self = _this.local_frame.get_offset();
								self.x = _this.local_x;
								self.y = _this.local_y;
								_this.local_frame.set_angleDegrees(_this.local_rotation);
								if(_this.parent_frame != null) {
									var self1 = _this.parent_frame;
									var self2 = self1.get_matrix();
									var m_a = self2.a;
									var m_b = self2.b;
									var m_c = self2.c;
									var m_d = self2.d;
									var v = _this.local_frame.get_offset();
									var pos_x = m_a * v.x + m_c * v.y;
									var pos_y = m_b * v.x + m_d * v.y;
									var a = _this.parent_frame.get_offset();
									pos_x += a.x;
									pos_y += a.y;
									var _this1 = _this.local_frame;
									var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
									_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
									var self3 = _this.local_frame.get_offset();
									self3.x = pos_x;
									self3.y = pos_y;
								}
								while(_this._vertices.length > _this.count) _this._vertices.pop();
								var _g2 = 0;
								var _g3 = _this.count;
								while(_g2 < _g3) {
									var i1 = _g2++;
									if(_this.local_vertices[i1] == null) {
										continue;
									}
									if(_this._vertices[i1] == null) {
										var _this2 = _this._vertices;
										var this1 = new hxmath_math_Vector2Default(0,0);
										_this2[i1] = this1;
									}
									var p1 = _this.local_vertices[i1];
									var self4 = _this.local_frame;
									var m = self4.get_matrix();
									var self5 = m;
									var m_a1 = self5.a;
									var m_b1 = self5.b;
									var m_c1 = self5.c;
									var m_d1 = self5.d;
									var self_x = m_a1 * p1.x + m_c1 * p1.y;
									var self_y = m_b1 * p1.x + m_d1 * p1.y;
									var self6 = m;
									var b_x = self6.tx;
									var b_y = self6.ty;
									var pos_x1 = self_x;
									var pos_y1 = self_y;
									pos_x1 += b_x;
									pos_y1 += b_y;
									var self7 = _this._vertices[i1];
									self7.x = pos_x1;
									self7.y = pos_y1;
								}
								var _g4 = 0;
								var _g5 = _this.count;
								while(_g4 < _g5) {
									var i2 = _g4++;
									var target = _this.sync_pos;
									var self8 = _this._vertices[(i2 + 1) % _this.count];
									var self9 = self8;
									var value = self9.x;
									var self10 = target;
									self10.x = value;
									var self11 = self8;
									var value1 = self11.y;
									var self12 = target;
									self12.y = value1;
									var a1 = _this._vertices[i2];
									var self13 = _this.sync_pos;
									self13.x -= a1.x;
									self13.y -= a1.y;
									if(_this._normals[i2] == null) {
										var _this3 = _this._normals;
										var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
										_this3[i2] = this2;
									} else {
										var y = _this.sync_pos.x;
										var self14 = _this._normals[i2];
										self14.x = -_this.sync_pos.y;
										self14.y = y;
									}
									var self15 = _this._normals[i2];
									var self16 = self15;
									var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
									if(length > 0.0) {
										var self17 = self15;
										self17.x /= length;
										self17.y /= length;
									}
								}
							}
							if(_this._vertices[i].y < top) {
								if(_this.dirty_vertices) {
									_this.dirty_vertices = false;
									var self18 = _this.local_frame.get_offset();
									self18.x = _this.local_x;
									self18.y = _this.local_y;
									_this.local_frame.set_angleDegrees(_this.local_rotation);
									if(_this.parent_frame != null) {
										var self19 = _this.parent_frame;
										var self20 = self19.get_matrix();
										var m_a2 = self20.a;
										var m_b2 = self20.b;
										var m_c2 = self20.c;
										var m_d2 = self20.d;
										var v1 = _this.local_frame.get_offset();
										var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
										var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
										var a2 = _this.parent_frame.get_offset();
										pos_x2 += a2.x;
										pos_y2 += a2.y;
										var _this4 = _this.local_frame;
										var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
										_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
										var self21 = _this.local_frame.get_offset();
										self21.x = pos_x2;
										self21.y = pos_y2;
									}
									while(_this._vertices.length > _this.count) _this._vertices.pop();
									var _g6 = 0;
									var _g7 = _this.count;
									while(_g6 < _g7) {
										var i3 = _g6++;
										if(_this.local_vertices[i3] == null) {
											continue;
										}
										if(_this._vertices[i3] == null) {
											var _this5 = _this._vertices;
											var this3 = new hxmath_math_Vector2Default(0,0);
											_this5[i3] = this3;
										}
										var p2 = _this.local_vertices[i3];
										var self22 = _this.local_frame;
										var m1 = self22.get_matrix();
										var self23 = m1;
										var m_a3 = self23.a;
										var m_b3 = self23.b;
										var m_c3 = self23.c;
										var m_d3 = self23.d;
										var self_x1 = m_a3 * p2.x + m_c3 * p2.y;
										var self_y1 = m_b3 * p2.x + m_d3 * p2.y;
										var self24 = m1;
										var b_x1 = self24.tx;
										var b_y1 = self24.ty;
										var pos_x3 = self_x1;
										var pos_y3 = self_y1;
										pos_x3 += b_x1;
										pos_y3 += b_y1;
										var self25 = _this._vertices[i3];
										self25.x = pos_x3;
										self25.y = pos_y3;
									}
									var _g8 = 0;
									var _g9 = _this.count;
									while(_g8 < _g9) {
										var i4 = _g8++;
										var target1 = _this.sync_pos;
										var self26 = _this._vertices[(i4 + 1) % _this.count];
										var self27 = self26;
										var value2 = self27.x;
										var self28 = target1;
										self28.x = value2;
										var self29 = self26;
										var value3 = self29.y;
										var self30 = target1;
										self30.y = value3;
										var a3 = _this._vertices[i4];
										var self31 = _this.sync_pos;
										self31.x -= a3.x;
										self31.y -= a3.y;
										if(_this._normals[i4] == null) {
											var _this6 = _this._normals;
											var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
											_this6[i4] = this4;
										} else {
											var y1 = _this.sync_pos.x;
											var self32 = _this._normals[i4];
											self32.x = -_this.sync_pos.y;
											self32.y = y1;
										}
										var self33 = _this._normals[i4];
										var self34 = self33;
										var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
										if(length1 > 0.0) {
											var self35 = self33;
											self35.x /= length1;
											self35.y /= length1;
										}
									}
								}
								top = _this._vertices[i].y;
							}
						}
						tmp1 = top;
					}
				}
				tmp = tmp1 <= p.x;
			} else {
				tmp = false;
			}
			if(tmp) {
				var tmp;
				if(this.transformed_rect == null || this._rotation == 0) {
					tmp = this._y + this.ey;
				} else {
					var _this = this.transformed_rect;
					var tmp1;
					if(_this.count != 0) {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self = _this.local_frame.get_offset();
							self.x = _this.local_x;
							self.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self = _this.parent_frame;
								var self1 = self.get_matrix();
								var m_a = self1.a;
								var m_b = self1.b;
								var m_c = self1.c;
								var m_d = self1.d;
								var v = _this.local_frame.get_offset();
								var pos_x = m_a * v.x + m_c * v.y;
								var pos_y = m_b * v.x + m_d * v.y;
								var a = _this.parent_frame.get_offset();
								pos_x += a.x;
								pos_y += a.y;
								var _this1 = _this.local_frame;
								var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
								var self = _this.local_frame.get_offset();
								self.x = pos_x;
								self.y = pos_y;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								if(_this.local_vertices[i] == null) {
									continue;
								}
								if(_this._vertices[i] == null) {
									var _this1 = _this._vertices;
									var this1 = new hxmath_math_Vector2Default(0,0);
									_this1[i] = this1;
								}
								var p1 = _this.local_vertices[i];
								var self = _this.local_frame;
								var m = self.get_matrix();
								var self1 = m;
								var m_a = self1.a;
								var m_b = self1.b;
								var m_c = self1.c;
								var m_d = self1.d;
								var self_x = m_a * p1.x + m_c * p1.y;
								var self_y = m_b * p1.x + m_d * p1.y;
								var self2 = m;
								var b_x = self2.tx;
								var b_y = self2.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								var self3 = _this._vertices[i];
								self3.x = pos_x;
								self3.y = pos_y;
							}
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								var target = _this.sync_pos;
								var self = _this._vertices[(i + 1) % _this.count];
								var self1 = self;
								var value = self1.x;
								var self2 = target;
								self2.x = value;
								var self3 = self;
								var value1 = self3.y;
								var self4 = target;
								self4.y = value1;
								var a = _this._vertices[i];
								var self5 = _this.sync_pos;
								self5.x -= a.x;
								self5.y -= a.y;
								if(_this._normals[i] == null) {
									var _this1 = _this._normals;
									var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this1[i] = this1;
								} else {
									var y = _this.sync_pos.x;
									var self6 = _this._normals[i];
									self6.x = -_this.sync_pos.y;
									self6.y = y;
								}
								var self7 = _this._normals[i];
								var self8 = self7;
								var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
								if(length > 0.0) {
									var self9 = self7;
									self9.x /= length;
									self9.y /= length;
								}
							}
						}
						tmp1 = _this._vertices[0] == null;
					} else {
						tmp1 = true;
					}
					if(tmp1) {
						tmp = _this._y;
					} else {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self = _this.local_frame.get_offset();
							self.x = _this.local_x;
							self.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self = _this.parent_frame;
								var self1 = self.get_matrix();
								var m_a = self1.a;
								var m_b = self1.b;
								var m_c = self1.c;
								var m_d = self1.d;
								var v = _this.local_frame.get_offset();
								var pos_x = m_a * v.x + m_c * v.y;
								var pos_y = m_b * v.x + m_d * v.y;
								var a = _this.parent_frame.get_offset();
								pos_x += a.x;
								pos_y += a.y;
								var _this1 = _this.local_frame;
								var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
								var self = _this.local_frame.get_offset();
								self.x = pos_x;
								self.y = pos_y;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								if(_this.local_vertices[i] == null) {
									continue;
								}
								if(_this._vertices[i] == null) {
									var _this1 = _this._vertices;
									var this1 = new hxmath_math_Vector2Default(0,0);
									_this1[i] = this1;
								}
								var p1 = _this.local_vertices[i];
								var self = _this.local_frame;
								var m = self.get_matrix();
								var self1 = m;
								var m_a = self1.a;
								var m_b = self1.b;
								var m_c = self1.c;
								var m_d = self1.d;
								var self_x = m_a * p1.x + m_c * p1.y;
								var self_y = m_b * p1.x + m_d * p1.y;
								var self2 = m;
								var b_x = self2.tx;
								var b_y = self2.ty;
								var pos_x = self_x;
								var pos_y = self_y;
								pos_x += b_x;
								pos_y += b_y;
								var self3 = _this._vertices[i];
								self3.x = pos_x;
								self3.y = pos_y;
							}
							var _g = 0;
							var _g1 = _this.count;
							while(_g < _g1) {
								var i = _g++;
								var target = _this.sync_pos;
								var self = _this._vertices[(i + 1) % _this.count];
								var self1 = self;
								var value = self1.x;
								var self2 = target;
								self2.x = value;
								var self3 = self;
								var value1 = self3.y;
								var self4 = target;
								self4.y = value1;
								var a = _this._vertices[i];
								var self5 = _this.sync_pos;
								self5.x -= a.x;
								self5.y -= a.y;
								if(_this._normals[i] == null) {
									var _this1 = _this._normals;
									var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this1[i] = this1;
								} else {
									var y = _this.sync_pos.x;
									var self6 = _this._normals[i];
									self6.x = -_this.sync_pos.y;
									self6.y = y;
								}
								var self7 = _this._normals[i];
								var self8 = self7;
								var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
								if(length > 0.0) {
									var self9 = self7;
									self9.x /= length;
									self9.y /= length;
								}
							}
						}
						var bottom = _this._vertices[0].y;
						var _g = 1;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.dirty_vertices) {
								_this.dirty_vertices = false;
								var self = _this.local_frame.get_offset();
								self.x = _this.local_x;
								self.y = _this.local_y;
								_this.local_frame.set_angleDegrees(_this.local_rotation);
								if(_this.parent_frame != null) {
									var self1 = _this.parent_frame;
									var self2 = self1.get_matrix();
									var m_a = self2.a;
									var m_b = self2.b;
									var m_c = self2.c;
									var m_d = self2.d;
									var v = _this.local_frame.get_offset();
									var pos_x = m_a * v.x + m_c * v.y;
									var pos_y = m_b * v.x + m_d * v.y;
									var a = _this.parent_frame.get_offset();
									pos_x += a.x;
									pos_y += a.y;
									var _this1 = _this.local_frame;
									var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
									_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
									var self3 = _this.local_frame.get_offset();
									self3.x = pos_x;
									self3.y = pos_y;
								}
								while(_this._vertices.length > _this.count) _this._vertices.pop();
								var _g2 = 0;
								var _g3 = _this.count;
								while(_g2 < _g3) {
									var i1 = _g2++;
									if(_this.local_vertices[i1] == null) {
										continue;
									}
									if(_this._vertices[i1] == null) {
										var _this2 = _this._vertices;
										var this1 = new hxmath_math_Vector2Default(0,0);
										_this2[i1] = this1;
									}
									var p1 = _this.local_vertices[i1];
									var self4 = _this.local_frame;
									var m = self4.get_matrix();
									var self5 = m;
									var m_a1 = self5.a;
									var m_b1 = self5.b;
									var m_c1 = self5.c;
									var m_d1 = self5.d;
									var self_x = m_a1 * p1.x + m_c1 * p1.y;
									var self_y = m_b1 * p1.x + m_d1 * p1.y;
									var self6 = m;
									var b_x = self6.tx;
									var b_y = self6.ty;
									var pos_x1 = self_x;
									var pos_y1 = self_y;
									pos_x1 += b_x;
									pos_y1 += b_y;
									var self7 = _this._vertices[i1];
									self7.x = pos_x1;
									self7.y = pos_y1;
								}
								var _g4 = 0;
								var _g5 = _this.count;
								while(_g4 < _g5) {
									var i2 = _g4++;
									var target = _this.sync_pos;
									var self8 = _this._vertices[(i2 + 1) % _this.count];
									var self9 = self8;
									var value = self9.x;
									var self10 = target;
									self10.x = value;
									var self11 = self8;
									var value1 = self11.y;
									var self12 = target;
									self12.y = value1;
									var a1 = _this._vertices[i2];
									var self13 = _this.sync_pos;
									self13.x -= a1.x;
									self13.y -= a1.y;
									if(_this._normals[i2] == null) {
										var _this3 = _this._normals;
										var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
										_this3[i2] = this2;
									} else {
										var y = _this.sync_pos.x;
										var self14 = _this._normals[i2];
										self14.x = -_this.sync_pos.y;
										self14.y = y;
									}
									var self15 = _this._normals[i2];
									var self16 = self15;
									var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
									if(length > 0.0) {
										var self17 = self15;
										self17.x /= length;
										self17.y /= length;
									}
								}
							}
							if(_this._vertices[i].y > bottom) {
								if(_this.dirty_vertices) {
									_this.dirty_vertices = false;
									var self18 = _this.local_frame.get_offset();
									self18.x = _this.local_x;
									self18.y = _this.local_y;
									_this.local_frame.set_angleDegrees(_this.local_rotation);
									if(_this.parent_frame != null) {
										var self19 = _this.parent_frame;
										var self20 = self19.get_matrix();
										var m_a2 = self20.a;
										var m_b2 = self20.b;
										var m_c2 = self20.c;
										var m_d2 = self20.d;
										var v1 = _this.local_frame.get_offset();
										var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
										var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
										var a2 = _this.parent_frame.get_offset();
										pos_x2 += a2.x;
										pos_y2 += a2.y;
										var _this4 = _this.local_frame;
										var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
										_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
										var self21 = _this.local_frame.get_offset();
										self21.x = pos_x2;
										self21.y = pos_y2;
									}
									while(_this._vertices.length > _this.count) _this._vertices.pop();
									var _g6 = 0;
									var _g7 = _this.count;
									while(_g6 < _g7) {
										var i3 = _g6++;
										if(_this.local_vertices[i3] == null) {
											continue;
										}
										if(_this._vertices[i3] == null) {
											var _this5 = _this._vertices;
											var this3 = new hxmath_math_Vector2Default(0,0);
											_this5[i3] = this3;
										}
										var p2 = _this.local_vertices[i3];
										var self22 = _this.local_frame;
										var m1 = self22.get_matrix();
										var self23 = m1;
										var m_a3 = self23.a;
										var m_b3 = self23.b;
										var m_c3 = self23.c;
										var m_d3 = self23.d;
										var self_x1 = m_a3 * p2.x + m_c3 * p2.y;
										var self_y1 = m_b3 * p2.x + m_d3 * p2.y;
										var self24 = m1;
										var b_x1 = self24.tx;
										var b_y1 = self24.ty;
										var pos_x3 = self_x1;
										var pos_y3 = self_y1;
										pos_x3 += b_x1;
										pos_y3 += b_y1;
										var self25 = _this._vertices[i3];
										self25.x = pos_x3;
										self25.y = pos_y3;
									}
									var _g8 = 0;
									var _g9 = _this.count;
									while(_g8 < _g9) {
										var i4 = _g8++;
										var target1 = _this.sync_pos;
										var self26 = _this._vertices[(i4 + 1) % _this.count];
										var self27 = self26;
										var value2 = self27.x;
										var self28 = target1;
										self28.x = value2;
										var self29 = self26;
										var value3 = self29.y;
										var self30 = target1;
										self30.y = value3;
										var a3 = _this._vertices[i4];
										var self31 = _this.sync_pos;
										self31.x -= a3.x;
										self31.y -= a3.y;
										if(_this._normals[i4] == null) {
											var _this6 = _this._normals;
											var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
											_this6[i4] = this4;
										} else {
											var y1 = _this.sync_pos.x;
											var self32 = _this._normals[i4];
											self32.x = -_this.sync_pos.y;
											self32.y = y1;
										}
										var self33 = _this._normals[i4];
										var self34 = self33;
										var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
										if(length1 > 0.0) {
											var self35 = self33;
											self35.x /= length1;
											self35.y /= length1;
										}
									}
								}
								bottom = _this._vertices[i].y;
							}
						}
						tmp = bottom;
					}
				}
				return tmp >= p.y;
			} else {
				return false;
			}
		}
	}
	,intersect: function(l) {
		return echo_util_SAT.line_interects_rect(l,this);
	}
	,overlaps: function(s) {
		var cd = this.transformed_rect == null ? s.collides(this) : echo_util_SAT.rect_and_polygon(this,this.transformed_rect);
		if(cd != null) {
			cd.put();
			return true;
		}
		return false;
	}
	,collides: function(s) {
		return s.collide_rect(this);
	}
	,collide_rect: function(r) {
		return echo_util_SAT.rect_and_rect(r,this);
	}
	,collide_circle: function(c) {
		return echo_util_SAT.rect_and_circle(this,c);
	}
	,collide_polygon: function(p) {
		return echo_util_SAT.rect_and_polygon(this,p);
	}
	,sync: function() {
		if(this.parent_frame != null) {
			if(this.local_x == 0 && this.local_y == 0) {
				this._x = this.parent_frame.get_offset().x;
				this._y = this.parent_frame.get_offset().y;
			} else {
				var self = this.sync_pos;
				self.x = this.local_x;
				self.y = this.local_y;
				var p = this.sync_pos;
				var self = this.parent_frame;
				var m = self.get_matrix();
				var self = m;
				var m_a = self.a;
				var m_b = self.b;
				var m_c = self.c;
				var m_d = self.d;
				var self_x = m_a * p.x + m_c * p.y;
				var self_y = m_b * p.x + m_d * p.y;
				var self = m;
				var b_x = self.tx;
				var b_y = self.ty;
				var pos_x = self_x;
				var pos_y = self_y;
				pos_x += b_x;
				pos_y += b_y;
				this._x = pos_x;
				this._y = pos_y;
			}
			this._rotation = this.parent_frame.get_angleDegrees() + this.local_rotation;
		} else {
			this._x = this.local_x;
			this._y = this.local_x;
			this._rotation = this.local_rotation;
		}
		if(this.transformed_rect == null && this._rotation != 0) {
			var polygon = echo_shape_Polygon._pool.get();
			polygon.count = 4;
			var _g = 0;
			var _g1 = polygon.count;
			while(_g < _g1) {
				var i = _g++;
				if(polygon.local_vertices[i] == null) {
					var polygon1 = polygon.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					polygon1[i] = this1;
				}
			}
			var self = polygon.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = polygon.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = polygon.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = polygon.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			polygon.lock_sync();
			polygon.local_x = this.local_x;
			if(polygon.parent_frame != null) {
				if(!polygon.sync_locked) {
					if(polygon.parent_frame != null) {
						if(polygon.local_x == 0 && polygon.local_y == 0) {
							polygon._x = polygon.parent_frame.get_offset().x;
							polygon._y = polygon.parent_frame.get_offset().y;
						} else {
							var self = polygon.sync_pos;
							self.x = polygon.local_x;
							self.y = polygon.local_y;
							var p = polygon.sync_pos;
							var self = polygon.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							polygon._x = pos_x;
							polygon._y = pos_y;
						}
						polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
					} else {
						polygon._x = polygon.local_x;
						polygon._y = polygon.local_x;
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
				}
			} else {
				polygon._x = polygon.local_x;
			}
			polygon.local_y = this.local_y;
			if(polygon.parent_frame != null) {
				if(!polygon.sync_locked) {
					if(polygon.parent_frame != null) {
						if(polygon.local_x == 0 && polygon.local_y == 0) {
							polygon._x = polygon.parent_frame.get_offset().x;
							polygon._y = polygon.parent_frame.get_offset().y;
						} else {
							var self = polygon.sync_pos;
							self.x = polygon.local_x;
							self.y = polygon.local_y;
							var p = polygon.sync_pos;
							var self = polygon.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							polygon._x = pos_x;
							polygon._y = pos_y;
						}
						polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
					} else {
						polygon._x = polygon.local_x;
						polygon._y = polygon.local_x;
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
				}
			} else {
				polygon._y = polygon.local_y;
			}
			polygon.local_rotation = this.local_rotation;
			if(polygon.parent_frame != null) {
				if(!polygon.sync_locked) {
					if(polygon.parent_frame != null) {
						if(polygon.local_x == 0 && polygon.local_y == 0) {
							polygon._x = polygon.parent_frame.get_offset().x;
							polygon._y = polygon.parent_frame.get_offset().y;
						} else {
							var self = polygon.sync_pos;
							self.x = polygon.local_x;
							self.y = polygon.local_y;
							var p = polygon.sync_pos;
							var self = polygon.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							polygon._x = pos_x;
							polygon._y = pos_y;
						}
						polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
					} else {
						polygon._x = polygon.local_x;
						polygon._y = polygon.local_x;
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
				}
			} else {
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
			polygon.unlock_sync();
			polygon.pooled = false;
			this.transformed_rect = polygon;
			this.transformed_rect.set_parent(this.parent_frame);
		} else if(this.transformed_rect != null) {
			var _this = this.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = _this.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			_this.lock_sync();
			_this.local_x = this.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = this.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = this.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
	}
	,set_parent: function(frame) {
		echo_Shape.prototype.set_parent.call(this,frame);
		if(this.transformed_rect != null) {
			this.transformed_rect.set_parent(frame);
		}
	}
	,get_width: function() {
		return this.ex * 2;
	}
	,get_height: function() {
		return this.ey * 2;
	}
	,get_min: function() {
		var x;
		if(this.transformed_rect == null || this._rotation == 0) {
			x = this._x - this.ex;
		} else {
			var _this = this.transformed_rect;
			var x1;
			if(_this.count != 0) {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x2 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x2 < 0 ? 360 - -x2 % 360 : x2 % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				x1 = _this._vertices[0] == null;
			} else {
				x1 = true;
			}
			if(x1) {
				x = _this._x;
			} else {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				var left = _this._vertices[0].x;
				var _g = 1;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self1 = _this.parent_frame;
							var self2 = self1.get_matrix();
							var m_a = self2.a;
							var m_b = self2.b;
							var m_c = self2.c;
							var m_d = self2.d;
							var v = _this.local_frame.get_offset();
							var pos_x = m_a * v.x + m_c * v.y;
							var pos_y = m_b * v.x + m_d * v.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self3 = _this.local_frame.get_offset();
							self3.x = pos_x;
							self3.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g2 = 0;
						var _g3 = _this.count;
						while(_g2 < _g3) {
							var i1 = _g2++;
							if(_this.local_vertices[i1] == null) {
								continue;
							}
							if(_this._vertices[i1] == null) {
								var _this2 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this2[i1] = this1;
							}
							var p = _this.local_vertices[i1];
							var self4 = _this.local_frame;
							var m = self4.get_matrix();
							var self5 = m;
							var m_a1 = self5.a;
							var m_b1 = self5.b;
							var m_c1 = self5.c;
							var m_d1 = self5.d;
							var self_x = m_a1 * p.x + m_c1 * p.y;
							var self_y = m_b1 * p.x + m_d1 * p.y;
							var self6 = m;
							var b_x = self6.tx;
							var b_y = self6.ty;
							var pos_x1 = self_x;
							var pos_y1 = self_y;
							pos_x1 += b_x;
							pos_y1 += b_y;
							var self7 = _this._vertices[i1];
							self7.x = pos_x1;
							self7.y = pos_y1;
						}
						var _g4 = 0;
						var _g5 = _this.count;
						while(_g4 < _g5) {
							var i2 = _g4++;
							var target = _this.sync_pos;
							var self8 = _this._vertices[(i2 + 1) % _this.count];
							var self9 = self8;
							var value = self9.x;
							var self10 = target;
							self10.x = value;
							var self11 = self8;
							var value1 = self11.y;
							var self12 = target;
							self12.y = value1;
							var a1 = _this._vertices[i2];
							var self13 = _this.sync_pos;
							self13.x -= a1.x;
							self13.y -= a1.y;
							if(_this._normals[i2] == null) {
								var _this3 = _this._normals;
								var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this3[i2] = this2;
							} else {
								var y = _this.sync_pos.x;
								var self14 = _this._normals[i2];
								self14.x = -_this.sync_pos.y;
								self14.y = y;
							}
							var self15 = _this._normals[i2];
							var self16 = self15;
							var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
							if(length > 0.0) {
								var self17 = self15;
								self17.x /= length;
								self17.y /= length;
							}
						}
					}
					if(_this._vertices[i].x < left) {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self18 = _this.local_frame.get_offset();
							self18.x = _this.local_x;
							self18.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self19 = _this.parent_frame;
								var self20 = self19.get_matrix();
								var m_a2 = self20.a;
								var m_b2 = self20.b;
								var m_c2 = self20.c;
								var m_d2 = self20.d;
								var v1 = _this.local_frame.get_offset();
								var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
								var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
								var a2 = _this.parent_frame.get_offset();
								pos_x2 += a2.x;
								pos_y2 += a2.y;
								var _this4 = _this.local_frame;
								var x2 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this4.set_angleDegrees(x2 < 0 ? 360 - -x2 % 360 : x2 % 360);
								var self21 = _this.local_frame.get_offset();
								self21.x = pos_x2;
								self21.y = pos_y2;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g6 = 0;
							var _g7 = _this.count;
							while(_g6 < _g7) {
								var i3 = _g6++;
								if(_this.local_vertices[i3] == null) {
									continue;
								}
								if(_this._vertices[i3] == null) {
									var _this5 = _this._vertices;
									var this3 = new hxmath_math_Vector2Default(0,0);
									_this5[i3] = this3;
								}
								var p1 = _this.local_vertices[i3];
								var self22 = _this.local_frame;
								var m1 = self22.get_matrix();
								var self23 = m1;
								var m_a3 = self23.a;
								var m_b3 = self23.b;
								var m_c3 = self23.c;
								var m_d3 = self23.d;
								var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
								var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
								var self24 = m1;
								var b_x1 = self24.tx;
								var b_y1 = self24.ty;
								var pos_x3 = self_x1;
								var pos_y3 = self_y1;
								pos_x3 += b_x1;
								pos_y3 += b_y1;
								var self25 = _this._vertices[i3];
								self25.x = pos_x3;
								self25.y = pos_y3;
							}
							var _g8 = 0;
							var _g9 = _this.count;
							while(_g8 < _g9) {
								var i4 = _g8++;
								var target1 = _this.sync_pos;
								var self26 = _this._vertices[(i4 + 1) % _this.count];
								var self27 = self26;
								var value2 = self27.x;
								var self28 = target1;
								self28.x = value2;
								var self29 = self26;
								var value3 = self29.y;
								var self30 = target1;
								self30.y = value3;
								var a3 = _this._vertices[i4];
								var self31 = _this.sync_pos;
								self31.x -= a3.x;
								self31.y -= a3.y;
								if(_this._normals[i4] == null) {
									var _this6 = _this._normals;
									var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this6[i4] = this4;
								} else {
									var y1 = _this.sync_pos.x;
									var self32 = _this._normals[i4];
									self32.x = -_this.sync_pos.y;
									self32.y = y1;
								}
								var self33 = _this._normals[i4];
								var self34 = self33;
								var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
								if(length1 > 0.0) {
									var self35 = self33;
									self35.x /= length1;
									self35.y /= length1;
								}
							}
						}
						left = _this._vertices[i].x;
					}
				}
				x = left;
			}
		}
		var y;
		if(this.transformed_rect == null || this._rotation == 0) {
			y = this._y - this.ey;
		} else {
			var _this = this.transformed_rect;
			var y1;
			if(_this.count != 0) {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y2 = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y2;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				y1 = _this._vertices[0] == null;
			} else {
				y1 = true;
			}
			if(y1) {
				y = _this._y;
			} else {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y1 = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y1;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				var top = _this._vertices[0].y;
				var _g = 1;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self1 = _this.parent_frame;
							var self2 = self1.get_matrix();
							var m_a = self2.a;
							var m_b = self2.b;
							var m_c = self2.c;
							var m_d = self2.d;
							var v = _this.local_frame.get_offset();
							var pos_x = m_a * v.x + m_c * v.y;
							var pos_y = m_b * v.x + m_d * v.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self3 = _this.local_frame.get_offset();
							self3.x = pos_x;
							self3.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g2 = 0;
						var _g3 = _this.count;
						while(_g2 < _g3) {
							var i1 = _g2++;
							if(_this.local_vertices[i1] == null) {
								continue;
							}
							if(_this._vertices[i1] == null) {
								var _this2 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this2[i1] = this1;
							}
							var p = _this.local_vertices[i1];
							var self4 = _this.local_frame;
							var m = self4.get_matrix();
							var self5 = m;
							var m_a1 = self5.a;
							var m_b1 = self5.b;
							var m_c1 = self5.c;
							var m_d1 = self5.d;
							var self_x = m_a1 * p.x + m_c1 * p.y;
							var self_y = m_b1 * p.x + m_d1 * p.y;
							var self6 = m;
							var b_x = self6.tx;
							var b_y = self6.ty;
							var pos_x1 = self_x;
							var pos_y1 = self_y;
							pos_x1 += b_x;
							pos_y1 += b_y;
							var self7 = _this._vertices[i1];
							self7.x = pos_x1;
							self7.y = pos_y1;
						}
						var _g4 = 0;
						var _g5 = _this.count;
						while(_g4 < _g5) {
							var i2 = _g4++;
							var target = _this.sync_pos;
							var self8 = _this._vertices[(i2 + 1) % _this.count];
							var self9 = self8;
							var value = self9.x;
							var self10 = target;
							self10.x = value;
							var self11 = self8;
							var value1 = self11.y;
							var self12 = target;
							self12.y = value1;
							var a1 = _this._vertices[i2];
							var self13 = _this.sync_pos;
							self13.x -= a1.x;
							self13.y -= a1.y;
							if(_this._normals[i2] == null) {
								var _this3 = _this._normals;
								var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this3[i2] = this2;
							} else {
								var y1 = _this.sync_pos.x;
								var self14 = _this._normals[i2];
								self14.x = -_this.sync_pos.y;
								self14.y = y1;
							}
							var self15 = _this._normals[i2];
							var self16 = self15;
							var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
							if(length > 0.0) {
								var self17 = self15;
								self17.x /= length;
								self17.y /= length;
							}
						}
					}
					if(_this._vertices[i].y < top) {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self18 = _this.local_frame.get_offset();
							self18.x = _this.local_x;
							self18.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self19 = _this.parent_frame;
								var self20 = self19.get_matrix();
								var m_a2 = self20.a;
								var m_b2 = self20.b;
								var m_c2 = self20.c;
								var m_d2 = self20.d;
								var v1 = _this.local_frame.get_offset();
								var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
								var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
								var a2 = _this.parent_frame.get_offset();
								pos_x2 += a2.x;
								pos_y2 += a2.y;
								var _this4 = _this.local_frame;
								var x2 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this4.set_angleDegrees(x2 < 0 ? 360 - -x2 % 360 : x2 % 360);
								var self21 = _this.local_frame.get_offset();
								self21.x = pos_x2;
								self21.y = pos_y2;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g6 = 0;
							var _g7 = _this.count;
							while(_g6 < _g7) {
								var i3 = _g6++;
								if(_this.local_vertices[i3] == null) {
									continue;
								}
								if(_this._vertices[i3] == null) {
									var _this5 = _this._vertices;
									var this3 = new hxmath_math_Vector2Default(0,0);
									_this5[i3] = this3;
								}
								var p1 = _this.local_vertices[i3];
								var self22 = _this.local_frame;
								var m1 = self22.get_matrix();
								var self23 = m1;
								var m_a3 = self23.a;
								var m_b3 = self23.b;
								var m_c3 = self23.c;
								var m_d3 = self23.d;
								var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
								var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
								var self24 = m1;
								var b_x1 = self24.tx;
								var b_y1 = self24.ty;
								var pos_x3 = self_x1;
								var pos_y3 = self_y1;
								pos_x3 += b_x1;
								pos_y3 += b_y1;
								var self25 = _this._vertices[i3];
								self25.x = pos_x3;
								self25.y = pos_y3;
							}
							var _g8 = 0;
							var _g9 = _this.count;
							while(_g8 < _g9) {
								var i4 = _g8++;
								var target1 = _this.sync_pos;
								var self26 = _this._vertices[(i4 + 1) % _this.count];
								var self27 = self26;
								var value2 = self27.x;
								var self28 = target1;
								self28.x = value2;
								var self29 = self26;
								var value3 = self29.y;
								var self30 = target1;
								self30.y = value3;
								var a3 = _this._vertices[i4];
								var self31 = _this.sync_pos;
								self31.x -= a3.x;
								self31.y -= a3.y;
								if(_this._normals[i4] == null) {
									var _this6 = _this._normals;
									var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this6[i4] = this4;
								} else {
									var y2 = _this.sync_pos.x;
									var self32 = _this._normals[i4];
									self32.x = -_this.sync_pos.y;
									self32.y = y2;
								}
								var self33 = _this._normals[i4];
								var self34 = self33;
								var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
								if(length1 > 0.0) {
									var self35 = self33;
									self35.x /= length1;
									self35.y /= length1;
								}
							}
						}
						top = _this._vertices[i].y;
					}
				}
				y = top;
			}
		}
		var this1 = new hxmath_math_Vector2Default(x,y);
		return this1;
	}
	,get_max: function() {
		var x;
		if(this.transformed_rect == null || this._rotation == 0) {
			x = this._y + this.ey;
		} else {
			var _this = this.transformed_rect;
			var x1;
			if(_this.count != 0) {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x2 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x2 < 0 ? 360 - -x2 % 360 : x2 % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				x1 = _this._vertices[0] == null;
			} else {
				x1 = true;
			}
			if(x1) {
				x = _this._y;
			} else {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				var bottom = _this._vertices[0].y;
				var _g = 1;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self1 = _this.parent_frame;
							var self2 = self1.get_matrix();
							var m_a = self2.a;
							var m_b = self2.b;
							var m_c = self2.c;
							var m_d = self2.d;
							var v = _this.local_frame.get_offset();
							var pos_x = m_a * v.x + m_c * v.y;
							var pos_y = m_b * v.x + m_d * v.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self3 = _this.local_frame.get_offset();
							self3.x = pos_x;
							self3.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g2 = 0;
						var _g3 = _this.count;
						while(_g2 < _g3) {
							var i1 = _g2++;
							if(_this.local_vertices[i1] == null) {
								continue;
							}
							if(_this._vertices[i1] == null) {
								var _this2 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this2[i1] = this1;
							}
							var p = _this.local_vertices[i1];
							var self4 = _this.local_frame;
							var m = self4.get_matrix();
							var self5 = m;
							var m_a1 = self5.a;
							var m_b1 = self5.b;
							var m_c1 = self5.c;
							var m_d1 = self5.d;
							var self_x = m_a1 * p.x + m_c1 * p.y;
							var self_y = m_b1 * p.x + m_d1 * p.y;
							var self6 = m;
							var b_x = self6.tx;
							var b_y = self6.ty;
							var pos_x1 = self_x;
							var pos_y1 = self_y;
							pos_x1 += b_x;
							pos_y1 += b_y;
							var self7 = _this._vertices[i1];
							self7.x = pos_x1;
							self7.y = pos_y1;
						}
						var _g4 = 0;
						var _g5 = _this.count;
						while(_g4 < _g5) {
							var i2 = _g4++;
							var target = _this.sync_pos;
							var self8 = _this._vertices[(i2 + 1) % _this.count];
							var self9 = self8;
							var value = self9.x;
							var self10 = target;
							self10.x = value;
							var self11 = self8;
							var value1 = self11.y;
							var self12 = target;
							self12.y = value1;
							var a1 = _this._vertices[i2];
							var self13 = _this.sync_pos;
							self13.x -= a1.x;
							self13.y -= a1.y;
							if(_this._normals[i2] == null) {
								var _this3 = _this._normals;
								var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this3[i2] = this2;
							} else {
								var y = _this.sync_pos.x;
								var self14 = _this._normals[i2];
								self14.x = -_this.sync_pos.y;
								self14.y = y;
							}
							var self15 = _this._normals[i2];
							var self16 = self15;
							var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
							if(length > 0.0) {
								var self17 = self15;
								self17.x /= length;
								self17.y /= length;
							}
						}
					}
					if(_this._vertices[i].y > bottom) {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self18 = _this.local_frame.get_offset();
							self18.x = _this.local_x;
							self18.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self19 = _this.parent_frame;
								var self20 = self19.get_matrix();
								var m_a2 = self20.a;
								var m_b2 = self20.b;
								var m_c2 = self20.c;
								var m_d2 = self20.d;
								var v1 = _this.local_frame.get_offset();
								var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
								var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
								var a2 = _this.parent_frame.get_offset();
								pos_x2 += a2.x;
								pos_y2 += a2.y;
								var _this4 = _this.local_frame;
								var x2 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this4.set_angleDegrees(x2 < 0 ? 360 - -x2 % 360 : x2 % 360);
								var self21 = _this.local_frame.get_offset();
								self21.x = pos_x2;
								self21.y = pos_y2;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g6 = 0;
							var _g7 = _this.count;
							while(_g6 < _g7) {
								var i3 = _g6++;
								if(_this.local_vertices[i3] == null) {
									continue;
								}
								if(_this._vertices[i3] == null) {
									var _this5 = _this._vertices;
									var this3 = new hxmath_math_Vector2Default(0,0);
									_this5[i3] = this3;
								}
								var p1 = _this.local_vertices[i3];
								var self22 = _this.local_frame;
								var m1 = self22.get_matrix();
								var self23 = m1;
								var m_a3 = self23.a;
								var m_b3 = self23.b;
								var m_c3 = self23.c;
								var m_d3 = self23.d;
								var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
								var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
								var self24 = m1;
								var b_x1 = self24.tx;
								var b_y1 = self24.ty;
								var pos_x3 = self_x1;
								var pos_y3 = self_y1;
								pos_x3 += b_x1;
								pos_y3 += b_y1;
								var self25 = _this._vertices[i3];
								self25.x = pos_x3;
								self25.y = pos_y3;
							}
							var _g8 = 0;
							var _g9 = _this.count;
							while(_g8 < _g9) {
								var i4 = _g8++;
								var target1 = _this.sync_pos;
								var self26 = _this._vertices[(i4 + 1) % _this.count];
								var self27 = self26;
								var value2 = self27.x;
								var self28 = target1;
								self28.x = value2;
								var self29 = self26;
								var value3 = self29.y;
								var self30 = target1;
								self30.y = value3;
								var a3 = _this._vertices[i4];
								var self31 = _this.sync_pos;
								self31.x -= a3.x;
								self31.y -= a3.y;
								if(_this._normals[i4] == null) {
									var _this6 = _this._normals;
									var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this6[i4] = this4;
								} else {
									var y1 = _this.sync_pos.x;
									var self32 = _this._normals[i4];
									self32.x = -_this.sync_pos.y;
									self32.y = y1;
								}
								var self33 = _this._normals[i4];
								var self34 = self33;
								var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
								if(length1 > 0.0) {
									var self35 = self33;
									self35.x /= length1;
									self35.y /= length1;
								}
							}
						}
						bottom = _this._vertices[i].y;
					}
				}
				x = bottom;
			}
		}
		var y;
		if(this.transformed_rect == null || this._rotation == 0) {
			y = this._x + this.ex;
		} else {
			var _this = this.transformed_rect;
			var y1;
			if(_this.count != 0) {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y2 = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y2;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				y1 = _this._vertices[0] == null;
			} else {
				y1 = true;
			}
			if(y1) {
				y = _this._x;
			} else {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y1 = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y1;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				var right = _this._vertices[0].x;
				var _g = 1;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self1 = _this.parent_frame;
							var self2 = self1.get_matrix();
							var m_a = self2.a;
							var m_b = self2.b;
							var m_c = self2.c;
							var m_d = self2.d;
							var v = _this.local_frame.get_offset();
							var pos_x = m_a * v.x + m_c * v.y;
							var pos_y = m_b * v.x + m_d * v.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self3 = _this.local_frame.get_offset();
							self3.x = pos_x;
							self3.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g2 = 0;
						var _g3 = _this.count;
						while(_g2 < _g3) {
							var i1 = _g2++;
							if(_this.local_vertices[i1] == null) {
								continue;
							}
							if(_this._vertices[i1] == null) {
								var _this2 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this2[i1] = this1;
							}
							var p = _this.local_vertices[i1];
							var self4 = _this.local_frame;
							var m = self4.get_matrix();
							var self5 = m;
							var m_a1 = self5.a;
							var m_b1 = self5.b;
							var m_c1 = self5.c;
							var m_d1 = self5.d;
							var self_x = m_a1 * p.x + m_c1 * p.y;
							var self_y = m_b1 * p.x + m_d1 * p.y;
							var self6 = m;
							var b_x = self6.tx;
							var b_y = self6.ty;
							var pos_x1 = self_x;
							var pos_y1 = self_y;
							pos_x1 += b_x;
							pos_y1 += b_y;
							var self7 = _this._vertices[i1];
							self7.x = pos_x1;
							self7.y = pos_y1;
						}
						var _g4 = 0;
						var _g5 = _this.count;
						while(_g4 < _g5) {
							var i2 = _g4++;
							var target = _this.sync_pos;
							var self8 = _this._vertices[(i2 + 1) % _this.count];
							var self9 = self8;
							var value = self9.x;
							var self10 = target;
							self10.x = value;
							var self11 = self8;
							var value1 = self11.y;
							var self12 = target;
							self12.y = value1;
							var a1 = _this._vertices[i2];
							var self13 = _this.sync_pos;
							self13.x -= a1.x;
							self13.y -= a1.y;
							if(_this._normals[i2] == null) {
								var _this3 = _this._normals;
								var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this3[i2] = this2;
							} else {
								var y1 = _this.sync_pos.x;
								var self14 = _this._normals[i2];
								self14.x = -_this.sync_pos.y;
								self14.y = y1;
							}
							var self15 = _this._normals[i2];
							var self16 = self15;
							var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
							if(length > 0.0) {
								var self17 = self15;
								self17.x /= length;
								self17.y /= length;
							}
						}
					}
					if(_this._vertices[i].x > right) {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self18 = _this.local_frame.get_offset();
							self18.x = _this.local_x;
							self18.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self19 = _this.parent_frame;
								var self20 = self19.get_matrix();
								var m_a2 = self20.a;
								var m_b2 = self20.b;
								var m_c2 = self20.c;
								var m_d2 = self20.d;
								var v1 = _this.local_frame.get_offset();
								var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
								var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
								var a2 = _this.parent_frame.get_offset();
								pos_x2 += a2.x;
								pos_y2 += a2.y;
								var _this4 = _this.local_frame;
								var x2 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this4.set_angleDegrees(x2 < 0 ? 360 - -x2 % 360 : x2 % 360);
								var self21 = _this.local_frame.get_offset();
								self21.x = pos_x2;
								self21.y = pos_y2;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g6 = 0;
							var _g7 = _this.count;
							while(_g6 < _g7) {
								var i3 = _g6++;
								if(_this.local_vertices[i3] == null) {
									continue;
								}
								if(_this._vertices[i3] == null) {
									var _this5 = _this._vertices;
									var this3 = new hxmath_math_Vector2Default(0,0);
									_this5[i3] = this3;
								}
								var p1 = _this.local_vertices[i3];
								var self22 = _this.local_frame;
								var m1 = self22.get_matrix();
								var self23 = m1;
								var m_a3 = self23.a;
								var m_b3 = self23.b;
								var m_c3 = self23.c;
								var m_d3 = self23.d;
								var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
								var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
								var self24 = m1;
								var b_x1 = self24.tx;
								var b_y1 = self24.ty;
								var pos_x3 = self_x1;
								var pos_y3 = self_y1;
								pos_x3 += b_x1;
								pos_y3 += b_y1;
								var self25 = _this._vertices[i3];
								self25.x = pos_x3;
								self25.y = pos_y3;
							}
							var _g8 = 0;
							var _g9 = _this.count;
							while(_g8 < _g9) {
								var i4 = _g8++;
								var target1 = _this.sync_pos;
								var self26 = _this._vertices[(i4 + 1) % _this.count];
								var self27 = self26;
								var value2 = self27.x;
								var self28 = target1;
								self28.x = value2;
								var self29 = self26;
								var value3 = self29.y;
								var self30 = target1;
								self30.y = value3;
								var a3 = _this._vertices[i4];
								var self31 = _this.sync_pos;
								self31.x -= a3.x;
								self31.y -= a3.y;
								if(_this._normals[i4] == null) {
									var _this6 = _this._normals;
									var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this6[i4] = this4;
								} else {
									var y2 = _this.sync_pos.x;
									var self32 = _this._normals[i4];
									self32.x = -_this.sync_pos.y;
									self32.y = y2;
								}
								var self33 = _this._normals[i4];
								var self34 = self33;
								var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
								if(length1 > 0.0) {
									var self35 = self33;
									self35.x /= length1;
									self35.y /= length1;
								}
							}
						}
						right = _this._vertices[i].x;
					}
				}
				y = right;
			}
		}
		var this1 = new hxmath_math_Vector2Default(x,y);
		return this1;
	}
	,get_top: function() {
		if(this.transformed_rect == null || this._rotation == 0) {
			return this._y - this.ey;
		}
		var _this = this.transformed_rect;
		var tmp;
		if(_this.count != 0) {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			tmp = _this._vertices[0] == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			return _this._y;
		} else {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			var top = _this._vertices[0].y;
			var _g = 1;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self1 = _this.parent_frame;
						var self2 = self1.get_matrix();
						var m_a = self2.a;
						var m_b = self2.b;
						var m_c = self2.c;
						var m_d = self2.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self3 = _this.local_frame.get_offset();
						self3.x = pos_x;
						self3.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g2 = 0;
					var _g3 = _this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.local_vertices[i1] == null) {
							continue;
						}
						if(_this._vertices[i1] == null) {
							var _this2 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this2[i1] = this1;
						}
						var p = _this.local_vertices[i1];
						var self4 = _this.local_frame;
						var m = self4.get_matrix();
						var self5 = m;
						var m_a1 = self5.a;
						var m_b1 = self5.b;
						var m_c1 = self5.c;
						var m_d1 = self5.d;
						var self_x = m_a1 * p.x + m_c1 * p.y;
						var self_y = m_b1 * p.x + m_d1 * p.y;
						var self6 = m;
						var b_x = self6.tx;
						var b_y = self6.ty;
						var pos_x1 = self_x;
						var pos_y1 = self_y;
						pos_x1 += b_x;
						pos_y1 += b_y;
						var self7 = _this._vertices[i1];
						self7.x = pos_x1;
						self7.y = pos_y1;
					}
					var _g4 = 0;
					var _g5 = _this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = _this.sync_pos;
						var self8 = _this._vertices[(i2 + 1) % _this.count];
						var self9 = self8;
						var value = self9.x;
						var self10 = target;
						self10.x = value;
						var self11 = self8;
						var value1 = self11.y;
						var self12 = target;
						self12.y = value1;
						var a1 = _this._vertices[i2];
						var self13 = _this.sync_pos;
						self13.x -= a1.x;
						self13.y -= a1.y;
						if(_this._normals[i2] == null) {
							var _this3 = _this._normals;
							var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this3[i2] = this2;
						} else {
							var y = _this.sync_pos.x;
							var self14 = _this._normals[i2];
							self14.x = -_this.sync_pos.y;
							self14.y = y;
						}
						var self15 = _this._normals[i2];
						var self16 = self15;
						var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
						if(length > 0.0) {
							var self17 = self15;
							self17.x /= length;
							self17.y /= length;
						}
					}
				}
				if(_this._vertices[i].y < top) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self18 = _this.local_frame.get_offset();
						self18.x = _this.local_x;
						self18.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self19 = _this.parent_frame;
							var self20 = self19.get_matrix();
							var m_a2 = self20.a;
							var m_b2 = self20.b;
							var m_c2 = self20.c;
							var m_d2 = self20.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
							var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
							var a2 = _this.parent_frame.get_offset();
							pos_x2 += a2.x;
							pos_y2 += a2.y;
							var _this4 = _this.local_frame;
							var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self21 = _this.local_frame.get_offset();
							self21.x = pos_x2;
							self21.y = pos_y2;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g6 = 0;
						var _g7 = _this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(_this.local_vertices[i3] == null) {
								continue;
							}
							if(_this._vertices[i3] == null) {
								var _this5 = _this._vertices;
								var this3 = new hxmath_math_Vector2Default(0,0);
								_this5[i3] = this3;
							}
							var p1 = _this.local_vertices[i3];
							var self22 = _this.local_frame;
							var m1 = self22.get_matrix();
							var self23 = m1;
							var m_a3 = self23.a;
							var m_b3 = self23.b;
							var m_c3 = self23.c;
							var m_d3 = self23.d;
							var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
							var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
							var self24 = m1;
							var b_x1 = self24.tx;
							var b_y1 = self24.ty;
							var pos_x3 = self_x1;
							var pos_y3 = self_y1;
							pos_x3 += b_x1;
							pos_y3 += b_y1;
							var self25 = _this._vertices[i3];
							self25.x = pos_x3;
							self25.y = pos_y3;
						}
						var _g8 = 0;
						var _g9 = _this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = _this.sync_pos;
							var self26 = _this._vertices[(i4 + 1) % _this.count];
							var self27 = self26;
							var value2 = self27.x;
							var self28 = target1;
							self28.x = value2;
							var self29 = self26;
							var value3 = self29.y;
							var self30 = target1;
							self30.y = value3;
							var a3 = _this._vertices[i4];
							var self31 = _this.sync_pos;
							self31.x -= a3.x;
							self31.y -= a3.y;
							if(_this._normals[i4] == null) {
								var _this6 = _this._normals;
								var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this6[i4] = this4;
							} else {
								var y1 = _this.sync_pos.x;
								var self32 = _this._normals[i4];
								self32.x = -_this.sync_pos.y;
								self32.y = y1;
							}
							var self33 = _this._normals[i4];
							var self34 = self33;
							var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
							if(length1 > 0.0) {
								var self35 = self33;
								self35.x /= length1;
								self35.y /= length1;
							}
						}
					}
					top = _this._vertices[i].y;
				}
			}
			return top;
		}
	}
	,get_bottom: function() {
		if(this.transformed_rect == null || this._rotation == 0) {
			return this._y + this.ey;
		}
		var _this = this.transformed_rect;
		var tmp;
		if(_this.count != 0) {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			tmp = _this._vertices[0] == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			return _this._y;
		} else {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			var bottom = _this._vertices[0].y;
			var _g = 1;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self1 = _this.parent_frame;
						var self2 = self1.get_matrix();
						var m_a = self2.a;
						var m_b = self2.b;
						var m_c = self2.c;
						var m_d = self2.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self3 = _this.local_frame.get_offset();
						self3.x = pos_x;
						self3.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g2 = 0;
					var _g3 = _this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.local_vertices[i1] == null) {
							continue;
						}
						if(_this._vertices[i1] == null) {
							var _this2 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this2[i1] = this1;
						}
						var p = _this.local_vertices[i1];
						var self4 = _this.local_frame;
						var m = self4.get_matrix();
						var self5 = m;
						var m_a1 = self5.a;
						var m_b1 = self5.b;
						var m_c1 = self5.c;
						var m_d1 = self5.d;
						var self_x = m_a1 * p.x + m_c1 * p.y;
						var self_y = m_b1 * p.x + m_d1 * p.y;
						var self6 = m;
						var b_x = self6.tx;
						var b_y = self6.ty;
						var pos_x1 = self_x;
						var pos_y1 = self_y;
						pos_x1 += b_x;
						pos_y1 += b_y;
						var self7 = _this._vertices[i1];
						self7.x = pos_x1;
						self7.y = pos_y1;
					}
					var _g4 = 0;
					var _g5 = _this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = _this.sync_pos;
						var self8 = _this._vertices[(i2 + 1) % _this.count];
						var self9 = self8;
						var value = self9.x;
						var self10 = target;
						self10.x = value;
						var self11 = self8;
						var value1 = self11.y;
						var self12 = target;
						self12.y = value1;
						var a1 = _this._vertices[i2];
						var self13 = _this.sync_pos;
						self13.x -= a1.x;
						self13.y -= a1.y;
						if(_this._normals[i2] == null) {
							var _this3 = _this._normals;
							var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this3[i2] = this2;
						} else {
							var y = _this.sync_pos.x;
							var self14 = _this._normals[i2];
							self14.x = -_this.sync_pos.y;
							self14.y = y;
						}
						var self15 = _this._normals[i2];
						var self16 = self15;
						var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
						if(length > 0.0) {
							var self17 = self15;
							self17.x /= length;
							self17.y /= length;
						}
					}
				}
				if(_this._vertices[i].y > bottom) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self18 = _this.local_frame.get_offset();
						self18.x = _this.local_x;
						self18.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self19 = _this.parent_frame;
							var self20 = self19.get_matrix();
							var m_a2 = self20.a;
							var m_b2 = self20.b;
							var m_c2 = self20.c;
							var m_d2 = self20.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
							var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
							var a2 = _this.parent_frame.get_offset();
							pos_x2 += a2.x;
							pos_y2 += a2.y;
							var _this4 = _this.local_frame;
							var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self21 = _this.local_frame.get_offset();
							self21.x = pos_x2;
							self21.y = pos_y2;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g6 = 0;
						var _g7 = _this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(_this.local_vertices[i3] == null) {
								continue;
							}
							if(_this._vertices[i3] == null) {
								var _this5 = _this._vertices;
								var this3 = new hxmath_math_Vector2Default(0,0);
								_this5[i3] = this3;
							}
							var p1 = _this.local_vertices[i3];
							var self22 = _this.local_frame;
							var m1 = self22.get_matrix();
							var self23 = m1;
							var m_a3 = self23.a;
							var m_b3 = self23.b;
							var m_c3 = self23.c;
							var m_d3 = self23.d;
							var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
							var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
							var self24 = m1;
							var b_x1 = self24.tx;
							var b_y1 = self24.ty;
							var pos_x3 = self_x1;
							var pos_y3 = self_y1;
							pos_x3 += b_x1;
							pos_y3 += b_y1;
							var self25 = _this._vertices[i3];
							self25.x = pos_x3;
							self25.y = pos_y3;
						}
						var _g8 = 0;
						var _g9 = _this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = _this.sync_pos;
							var self26 = _this._vertices[(i4 + 1) % _this.count];
							var self27 = self26;
							var value2 = self27.x;
							var self28 = target1;
							self28.x = value2;
							var self29 = self26;
							var value3 = self29.y;
							var self30 = target1;
							self30.y = value3;
							var a3 = _this._vertices[i4];
							var self31 = _this.sync_pos;
							self31.x -= a3.x;
							self31.y -= a3.y;
							if(_this._normals[i4] == null) {
								var _this6 = _this._normals;
								var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this6[i4] = this4;
							} else {
								var y1 = _this.sync_pos.x;
								var self32 = _this._normals[i4];
								self32.x = -_this.sync_pos.y;
								self32.y = y1;
							}
							var self33 = _this._normals[i4];
							var self34 = self33;
							var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
							if(length1 > 0.0) {
								var self35 = self33;
								self35.x /= length1;
								self35.y /= length1;
							}
						}
					}
					bottom = _this._vertices[i].y;
				}
			}
			return bottom;
		}
	}
	,get_left: function() {
		if(this.transformed_rect == null || this._rotation == 0) {
			return this._x - this.ex;
		}
		var _this = this.transformed_rect;
		var tmp;
		if(_this.count != 0) {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			tmp = _this._vertices[0] == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			return _this._x;
		} else {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			var left = _this._vertices[0].x;
			var _g = 1;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self1 = _this.parent_frame;
						var self2 = self1.get_matrix();
						var m_a = self2.a;
						var m_b = self2.b;
						var m_c = self2.c;
						var m_d = self2.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self3 = _this.local_frame.get_offset();
						self3.x = pos_x;
						self3.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g2 = 0;
					var _g3 = _this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.local_vertices[i1] == null) {
							continue;
						}
						if(_this._vertices[i1] == null) {
							var _this2 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this2[i1] = this1;
						}
						var p = _this.local_vertices[i1];
						var self4 = _this.local_frame;
						var m = self4.get_matrix();
						var self5 = m;
						var m_a1 = self5.a;
						var m_b1 = self5.b;
						var m_c1 = self5.c;
						var m_d1 = self5.d;
						var self_x = m_a1 * p.x + m_c1 * p.y;
						var self_y = m_b1 * p.x + m_d1 * p.y;
						var self6 = m;
						var b_x = self6.tx;
						var b_y = self6.ty;
						var pos_x1 = self_x;
						var pos_y1 = self_y;
						pos_x1 += b_x;
						pos_y1 += b_y;
						var self7 = _this._vertices[i1];
						self7.x = pos_x1;
						self7.y = pos_y1;
					}
					var _g4 = 0;
					var _g5 = _this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = _this.sync_pos;
						var self8 = _this._vertices[(i2 + 1) % _this.count];
						var self9 = self8;
						var value = self9.x;
						var self10 = target;
						self10.x = value;
						var self11 = self8;
						var value1 = self11.y;
						var self12 = target;
						self12.y = value1;
						var a1 = _this._vertices[i2];
						var self13 = _this.sync_pos;
						self13.x -= a1.x;
						self13.y -= a1.y;
						if(_this._normals[i2] == null) {
							var _this3 = _this._normals;
							var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this3[i2] = this2;
						} else {
							var y = _this.sync_pos.x;
							var self14 = _this._normals[i2];
							self14.x = -_this.sync_pos.y;
							self14.y = y;
						}
						var self15 = _this._normals[i2];
						var self16 = self15;
						var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
						if(length > 0.0) {
							var self17 = self15;
							self17.x /= length;
							self17.y /= length;
						}
					}
				}
				if(_this._vertices[i].x < left) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self18 = _this.local_frame.get_offset();
						self18.x = _this.local_x;
						self18.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self19 = _this.parent_frame;
							var self20 = self19.get_matrix();
							var m_a2 = self20.a;
							var m_b2 = self20.b;
							var m_c2 = self20.c;
							var m_d2 = self20.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
							var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
							var a2 = _this.parent_frame.get_offset();
							pos_x2 += a2.x;
							pos_y2 += a2.y;
							var _this4 = _this.local_frame;
							var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self21 = _this.local_frame.get_offset();
							self21.x = pos_x2;
							self21.y = pos_y2;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g6 = 0;
						var _g7 = _this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(_this.local_vertices[i3] == null) {
								continue;
							}
							if(_this._vertices[i3] == null) {
								var _this5 = _this._vertices;
								var this3 = new hxmath_math_Vector2Default(0,0);
								_this5[i3] = this3;
							}
							var p1 = _this.local_vertices[i3];
							var self22 = _this.local_frame;
							var m1 = self22.get_matrix();
							var self23 = m1;
							var m_a3 = self23.a;
							var m_b3 = self23.b;
							var m_c3 = self23.c;
							var m_d3 = self23.d;
							var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
							var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
							var self24 = m1;
							var b_x1 = self24.tx;
							var b_y1 = self24.ty;
							var pos_x3 = self_x1;
							var pos_y3 = self_y1;
							pos_x3 += b_x1;
							pos_y3 += b_y1;
							var self25 = _this._vertices[i3];
							self25.x = pos_x3;
							self25.y = pos_y3;
						}
						var _g8 = 0;
						var _g9 = _this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = _this.sync_pos;
							var self26 = _this._vertices[(i4 + 1) % _this.count];
							var self27 = self26;
							var value2 = self27.x;
							var self28 = target1;
							self28.x = value2;
							var self29 = self26;
							var value3 = self29.y;
							var self30 = target1;
							self30.y = value3;
							var a3 = _this._vertices[i4];
							var self31 = _this.sync_pos;
							self31.x -= a3.x;
							self31.y -= a3.y;
							if(_this._normals[i4] == null) {
								var _this6 = _this._normals;
								var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this6[i4] = this4;
							} else {
								var y1 = _this.sync_pos.x;
								var self32 = _this._normals[i4];
								self32.x = -_this.sync_pos.y;
								self32.y = y1;
							}
							var self33 = _this._normals[i4];
							var self34 = self33;
							var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
							if(length1 > 0.0) {
								var self35 = self33;
								self35.x /= length1;
								self35.y /= length1;
							}
						}
					}
					left = _this._vertices[i].x;
				}
			}
			return left;
		}
	}
	,get_right: function() {
		if(this.transformed_rect == null || this._rotation == 0) {
			return this._x + this.ex;
		}
		var _this = this.transformed_rect;
		var tmp;
		if(_this.count != 0) {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			tmp = _this._vertices[0] == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			return _this._x;
		} else {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			var right = _this._vertices[0].x;
			var _g = 1;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self1 = _this.parent_frame;
						var self2 = self1.get_matrix();
						var m_a = self2.a;
						var m_b = self2.b;
						var m_c = self2.c;
						var m_d = self2.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self3 = _this.local_frame.get_offset();
						self3.x = pos_x;
						self3.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g2 = 0;
					var _g3 = _this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.local_vertices[i1] == null) {
							continue;
						}
						if(_this._vertices[i1] == null) {
							var _this2 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this2[i1] = this1;
						}
						var p = _this.local_vertices[i1];
						var self4 = _this.local_frame;
						var m = self4.get_matrix();
						var self5 = m;
						var m_a1 = self5.a;
						var m_b1 = self5.b;
						var m_c1 = self5.c;
						var m_d1 = self5.d;
						var self_x = m_a1 * p.x + m_c1 * p.y;
						var self_y = m_b1 * p.x + m_d1 * p.y;
						var self6 = m;
						var b_x = self6.tx;
						var b_y = self6.ty;
						var pos_x1 = self_x;
						var pos_y1 = self_y;
						pos_x1 += b_x;
						pos_y1 += b_y;
						var self7 = _this._vertices[i1];
						self7.x = pos_x1;
						self7.y = pos_y1;
					}
					var _g4 = 0;
					var _g5 = _this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = _this.sync_pos;
						var self8 = _this._vertices[(i2 + 1) % _this.count];
						var self9 = self8;
						var value = self9.x;
						var self10 = target;
						self10.x = value;
						var self11 = self8;
						var value1 = self11.y;
						var self12 = target;
						self12.y = value1;
						var a1 = _this._vertices[i2];
						var self13 = _this.sync_pos;
						self13.x -= a1.x;
						self13.y -= a1.y;
						if(_this._normals[i2] == null) {
							var _this3 = _this._normals;
							var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this3[i2] = this2;
						} else {
							var y = _this.sync_pos.x;
							var self14 = _this._normals[i2];
							self14.x = -_this.sync_pos.y;
							self14.y = y;
						}
						var self15 = _this._normals[i2];
						var self16 = self15;
						var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
						if(length > 0.0) {
							var self17 = self15;
							self17.x /= length;
							self17.y /= length;
						}
					}
				}
				if(_this._vertices[i].x > right) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self18 = _this.local_frame.get_offset();
						self18.x = _this.local_x;
						self18.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self19 = _this.parent_frame;
							var self20 = self19.get_matrix();
							var m_a2 = self20.a;
							var m_b2 = self20.b;
							var m_c2 = self20.c;
							var m_d2 = self20.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
							var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
							var a2 = _this.parent_frame.get_offset();
							pos_x2 += a2.x;
							pos_y2 += a2.y;
							var _this4 = _this.local_frame;
							var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self21 = _this.local_frame.get_offset();
							self21.x = pos_x2;
							self21.y = pos_y2;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g6 = 0;
						var _g7 = _this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(_this.local_vertices[i3] == null) {
								continue;
							}
							if(_this._vertices[i3] == null) {
								var _this5 = _this._vertices;
								var this3 = new hxmath_math_Vector2Default(0,0);
								_this5[i3] = this3;
							}
							var p1 = _this.local_vertices[i3];
							var self22 = _this.local_frame;
							var m1 = self22.get_matrix();
							var self23 = m1;
							var m_a3 = self23.a;
							var m_b3 = self23.b;
							var m_c3 = self23.c;
							var m_d3 = self23.d;
							var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
							var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
							var self24 = m1;
							var b_x1 = self24.tx;
							var b_y1 = self24.ty;
							var pos_x3 = self_x1;
							var pos_y3 = self_y1;
							pos_x3 += b_x1;
							pos_y3 += b_y1;
							var self25 = _this._vertices[i3];
							self25.x = pos_x3;
							self25.y = pos_y3;
						}
						var _g8 = 0;
						var _g9 = _this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = _this.sync_pos;
							var self26 = _this._vertices[(i4 + 1) % _this.count];
							var self27 = self26;
							var value2 = self27.x;
							var self28 = target1;
							self28.x = value2;
							var self29 = self26;
							var value3 = self29.y;
							var self30 = target1;
							self30.y = value3;
							var a3 = _this._vertices[i4];
							var self31 = _this.sync_pos;
							self31.x -= a3.x;
							self31.y -= a3.y;
							if(_this._normals[i4] == null) {
								var _this6 = _this._normals;
								var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this6[i4] = this4;
							} else {
								var y1 = _this.sync_pos.x;
								var self32 = _this._normals[i4];
								self32.x = -_this.sync_pos.y;
								self32.y = y1;
							}
							var self33 = _this._normals[i4];
							var self34 = self33;
							var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
							if(length1 > 0.0) {
								var self35 = self33;
								self35.x /= length1;
								self35.y /= length1;
							}
						}
					}
					right = _this._vertices[i].x;
				}
			}
			return right;
		}
	}
	,set_ex: function(value) {
		this.ex = value;
		if(this.transformed_rect != null) {
			var _this = this.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = _this.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			_this.lock_sync();
			_this.local_x = this.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = this.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = this.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		return this.ex;
	}
	,set_ey: function(value) {
		this.ey = value;
		if(this.transformed_rect != null) {
			var _this = this.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = _this.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			_this.lock_sync();
			_this.local_x = this.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = this.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = this.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		return this.ey;
	}
	,set_width: function(value) {
		this.ex = value * 0.5;
		if(this.transformed_rect != null) {
			var _this = this.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = _this.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			_this.lock_sync();
			_this.local_x = this.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = this.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = this.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		return this.ex;
	}
	,set_height: function(value) {
		this.ey = value * 0.5;
		if(this.transformed_rect != null) {
			var _this = this.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[1];
			self.x = this.ex;
			self.y = -this.ey;
			var self = _this.local_vertices[2];
			self.x = this.ex;
			self.y = this.ey;
			var self = _this.local_vertices[3];
			self.x = -this.ex;
			self.y = this.ey;
			_this.lock_sync();
			_this.local_x = this.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = this.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = this.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		return this.ey;
	}
	,__class__: echo_shape_Rect
	,__properties__: $extend(echo_Shape.prototype.__properties__,{get_max:"get_max",get_min:"get_min",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_ey:"set_ey",set_ex:"set_ex"})
});
var echo_util_AABB = function() {
	this.min_x = 0;
	this.max_x = 1;
	this.min_y = 0;
	this.max_y = 1;
};
$hxClasses["echo.util.AABB"] = echo_util_AABB;
echo_util_AABB.__name__ = true;
echo_util_AABB.__interfaces__ = [echo_util_IPooled];
echo_util_AABB.__properties__ = {get_pool:"get_pool"};
echo_util_AABB.get = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var aabb = echo_util_AABB._pool.get();
	var x1 = x;
	var y1 = y;
	var width1 = width;
	var height1 = height;
	if(height1 == null) {
		height1 = 1;
	}
	if(width1 == null) {
		width1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	width1 *= 0.5;
	height1 *= 0.5;
	aabb.min_x = x1 - width1;
	aabb.min_y = y1 - height1;
	aabb.max_x = x1 + width1;
	aabb.max_y = y1 + height1;
	aabb.pooled = false;
	return aabb;
};
echo_util_AABB.get_from_min_max = function(min_x,min_y,max_x,max_y) {
	var aabb = echo_util_AABB._pool.get();
	aabb.min_x = min_x;
	aabb.max_x = max_x;
	aabb.min_y = min_y;
	aabb.max_y = max_y;
	aabb.pooled = false;
	return aabb;
};
echo_util_AABB.get_pool = function() {
	return echo_util_AABB._pool;
};
echo_util_AABB.prototype = {
	min_x: null
	,max_x: null
	,min_y: null
	,max_y: null
	,pooled: null
	,set: function(x,y,width,height) {
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		width *= 0.5;
		height *= 0.5;
		this.min_x = x - width;
		this.min_y = y - height;
		this.max_x = x + width;
		this.max_y = y + height;
		return this;
	}
	,set_from_min_max: function(min_x,min_y,max_x,max_y) {
		this.min_x = min_x;
		this.max_x = max_x;
		this.min_y = min_y;
		this.max_y = max_y;
		return this;
	}
	,to_rect: function(put_self) {
		if(put_self == null) {
			put_self = false;
		}
		if(put_self) {
			this.put();
		}
		var min_x = this.min_x;
		var min_y = this.min_y;
		var max_x = this.max_x;
		var max_y = this.max_y;
		var rect = echo_shape_Rect._pool.get();
		var x = (min_x + max_x) * 0.5;
		var y = (min_y + max_y) * 0.5;
		var width = max_x - min_x;
		var height = max_y - min_y;
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		rect.local_x = x;
		if(rect.parent_frame != null) {
			if(!rect.sync_locked) {
				if(rect.parent_frame != null) {
					if(rect.local_x == 0 && rect.local_y == 0) {
						rect._x = rect.parent_frame.get_offset().x;
						rect._y = rect.parent_frame.get_offset().y;
					} else {
						var self = rect.sync_pos;
						self.x = rect.local_x;
						self.y = rect.local_y;
						var p = rect.sync_pos;
						var self = rect.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						rect._x = pos_x;
						rect._y = pos_y;
					}
					rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
				} else {
					rect._x = rect.local_x;
					rect._y = rect.local_x;
					rect._rotation = rect.local_rotation;
				}
				if(rect.transformed_rect == null && rect._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = polygon.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					polygon.lock_sync();
					polygon.local_x = rect.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = rect.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = rect.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					rect.transformed_rect = polygon;
					rect.transformed_rect.set_parent(rect.parent_frame);
				} else if(rect.transformed_rect != null) {
					var _this = rect.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = _this.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					_this.lock_sync();
					_this.local_x = rect.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = rect.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = rect.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			rect._x = rect.local_x;
		}
		rect.local_y = y;
		if(rect.parent_frame != null) {
			if(!rect.sync_locked) {
				if(rect.parent_frame != null) {
					if(rect.local_x == 0 && rect.local_y == 0) {
						rect._x = rect.parent_frame.get_offset().x;
						rect._y = rect.parent_frame.get_offset().y;
					} else {
						var self = rect.sync_pos;
						self.x = rect.local_x;
						self.y = rect.local_y;
						var p = rect.sync_pos;
						var self = rect.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						rect._x = pos_x;
						rect._y = pos_y;
					}
					rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
				} else {
					rect._x = rect.local_x;
					rect._y = rect.local_x;
					rect._rotation = rect.local_rotation;
				}
				if(rect.transformed_rect == null && rect._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = polygon.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					polygon.lock_sync();
					polygon.local_x = rect.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = rect.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = rect.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					rect.transformed_rect = polygon;
					rect.transformed_rect.set_parent(rect.parent_frame);
				} else if(rect.transformed_rect != null) {
					var _this = rect.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = _this.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					_this.lock_sync();
					_this.local_x = rect.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = rect.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = rect.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			rect._y = rect.local_y;
		}
		rect.ex = width * 0.5;
		if(rect.transformed_rect != null) {
			var _this = rect.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = _this.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			_this.lock_sync();
			_this.local_x = rect.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = rect.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = rect.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		rect.ey = (height <= 0 ? width : height) * 0.5;
		if(rect.transformed_rect != null) {
			var _this = rect.transformed_rect;
			_this.count = 4;
			var _g = 0;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.local_vertices[i] == null) {
					var _this1 = _this.local_vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					_this1[i] = this1;
				}
			}
			var self = _this.local_vertices[0];
			self.x = -rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[1];
			self.x = rect.ex;
			self.y = -rect.ey;
			var self = _this.local_vertices[2];
			self.x = rect.ex;
			self.y = rect.ey;
			var self = _this.local_vertices[3];
			self.x = -rect.ex;
			self.y = rect.ey;
			_this.lock_sync();
			_this.local_x = rect.local_x;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._x = _this.local_x;
			}
			_this.local_y = rect.local_y;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._y = _this.local_y;
			}
			_this.local_rotation = rect.local_rotation;
			if(_this.parent_frame != null) {
				if(!_this.sync_locked) {
					if(_this.parent_frame != null) {
						if(_this.local_x == 0 && _this.local_y == 0) {
							_this._x = _this.parent_frame.get_offset().x;
							_this._y = _this.parent_frame.get_offset().y;
						} else {
							var self = _this.sync_pos;
							self.x = _this.local_x;
							self.y = _this.local_y;
							var p = _this.sync_pos;
							var self = _this.parent_frame;
							var m = self.get_matrix();
							var self = m;
							var m_a = self.a;
							var m_b = self.b;
							var m_c = self.c;
							var m_d = self.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self = m;
							var b_x = self.tx;
							var b_y = self.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							_this._x = pos_x;
							_this._y = pos_y;
						}
						_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
					} else {
						_this._x = _this.local_x;
						_this._y = _this.local_x;
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
				}
			} else {
				_this._rotation = _this.local_rotation;
			}
			_this.dirty_vertices = true;
			_this.dirty_bounds = true;
			_this.unlock_sync();
		}
		rect.local_rotation = 0;
		if(rect.parent_frame != null) {
			if(!rect.sync_locked) {
				if(rect.parent_frame != null) {
					if(rect.local_x == 0 && rect.local_y == 0) {
						rect._x = rect.parent_frame.get_offset().x;
						rect._y = rect.parent_frame.get_offset().y;
					} else {
						var self = rect.sync_pos;
						self.x = rect.local_x;
						self.y = rect.local_y;
						var p = rect.sync_pos;
						var self = rect.parent_frame;
						var m = self.get_matrix();
						var self = m;
						var m_a = self.a;
						var m_b = self.b;
						var m_c = self.c;
						var m_d = self.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self = m;
						var b_x = self.tx;
						var b_y = self.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						rect._x = pos_x;
						rect._y = pos_y;
					}
					rect._rotation = rect.parent_frame.get_angleDegrees() + rect.local_rotation;
				} else {
					rect._x = rect.local_x;
					rect._y = rect.local_x;
					rect._rotation = rect.local_rotation;
				}
				if(rect.transformed_rect == null && rect._rotation != 0) {
					var polygon = echo_shape_Polygon._pool.get();
					polygon.count = 4;
					var _g = 0;
					var _g1 = polygon.count;
					while(_g < _g1) {
						var i = _g++;
						if(polygon.local_vertices[i] == null) {
							var polygon1 = polygon.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							polygon1[i] = this1;
						}
					}
					var self = polygon.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = polygon.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = polygon.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					polygon.lock_sync();
					polygon.local_x = rect.local_x;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._x = polygon.local_x;
					}
					polygon.local_y = rect.local_y;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._y = polygon.local_y;
					}
					polygon.local_rotation = rect.local_rotation;
					if(polygon.parent_frame != null) {
						if(!polygon.sync_locked) {
							if(polygon.parent_frame != null) {
								if(polygon.local_x == 0 && polygon.local_y == 0) {
									polygon._x = polygon.parent_frame.get_offset().x;
									polygon._y = polygon.parent_frame.get_offset().y;
								} else {
									var self = polygon.sync_pos;
									self.x = polygon.local_x;
									self.y = polygon.local_y;
									var p = polygon.sync_pos;
									var self = polygon.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									polygon._x = pos_x;
									polygon._y = pos_y;
								}
								polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
							} else {
								polygon._x = polygon.local_x;
								polygon._y = polygon.local_x;
								polygon._rotation = polygon.local_rotation;
							}
							polygon.dirty_vertices = true;
							polygon.dirty_bounds = true;
						}
					} else {
						polygon._rotation = polygon.local_rotation;
					}
					polygon.dirty_vertices = true;
					polygon.dirty_bounds = true;
					polygon.unlock_sync();
					polygon.pooled = false;
					rect.transformed_rect = polygon;
					rect.transformed_rect.set_parent(rect.parent_frame);
				} else if(rect.transformed_rect != null) {
					var _this = rect.transformed_rect;
					_this.count = 4;
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							var _this1 = _this.local_vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
					}
					var self = _this.local_vertices[0];
					self.x = -rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[1];
					self.x = rect.ex;
					self.y = -rect.ey;
					var self = _this.local_vertices[2];
					self.x = rect.ex;
					self.y = rect.ey;
					var self = _this.local_vertices[3];
					self.x = -rect.ex;
					self.y = rect.ey;
					_this.lock_sync();
					_this.local_x = rect.local_x;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._x = _this.local_x;
					}
					_this.local_y = rect.local_y;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._y = _this.local_y;
					}
					_this.local_rotation = rect.local_rotation;
					if(_this.parent_frame != null) {
						if(!_this.sync_locked) {
							if(_this.parent_frame != null) {
								if(_this.local_x == 0 && _this.local_y == 0) {
									_this._x = _this.parent_frame.get_offset().x;
									_this._y = _this.parent_frame.get_offset().y;
								} else {
									var self = _this.sync_pos;
									self.x = _this.local_x;
									self.y = _this.local_y;
									var p = _this.sync_pos;
									var self = _this.parent_frame;
									var m = self.get_matrix();
									var self = m;
									var m_a = self.a;
									var m_b = self.b;
									var m_c = self.c;
									var m_d = self.d;
									var self_x = m_a * p.x + m_c * p.y;
									var self_y = m_b * p.x + m_d * p.y;
									var self = m;
									var b_x = self.tx;
									var b_y = self.ty;
									var pos_x = self_x;
									var pos_y = self_y;
									pos_x += b_x;
									pos_y += b_y;
									_this._x = pos_x;
									_this._y = pos_y;
								}
								_this._rotation = _this.parent_frame.get_angleDegrees() + _this.local_rotation;
							} else {
								_this._x = _this.local_x;
								_this._y = _this.local_x;
								_this._rotation = _this.local_rotation;
							}
							_this.dirty_vertices = true;
							_this.dirty_bounds = true;
						}
					} else {
						_this._rotation = _this.local_rotation;
					}
					_this.dirty_vertices = true;
					_this.dirty_bounds = true;
					_this.unlock_sync();
				}
			}
		} else {
			rect._rotation = rect.local_rotation;
		}
		rect.pooled = false;
		return rect;
	}
	,overlaps: function(other) {
		if(this.min_x < other.max_x && this.max_x >= other.min_x && this.min_y < other.max_y) {
			return this.max_y >= other.min_y;
		} else {
			return false;
		}
	}
	,load: function(aabb) {
		this.min_x = aabb.min_x;
		this.max_x = aabb.max_x;
		this.min_y = aabb.min_y;
		this.max_y = aabb.max_y;
		return this;
	}
	,add: function(aabb) {
		if(this.min_x > aabb.min_x) {
			this.min_x = aabb.min_x;
		}
		if(this.min_y > aabb.min_y) {
			this.min_y = aabb.min_y;
		}
		if(this.max_x < aabb.max_x) {
			this.max_x = aabb.max_x;
		}
		if(this.max_y < aabb.max_y) {
			this.max_y = aabb.max_y;
		}
	}
	,clone: function() {
		var min_x = this.min_x;
		var min_y = this.min_y;
		var max_x = this.max_x;
		var max_y = this.max_y;
		var aabb = echo_util_AABB._pool.get();
		aabb.min_x = min_x;
		aabb.max_x = max_x;
		aabb.min_y = min_y;
		aabb.max_y = max_y;
		aabb.pooled = false;
		return aabb;
	}
	,put: function() {
		if(!this.pooled) {
			this.pooled = true;
			echo_util_AABB._pool.put_unsafe(this);
		}
	}
	,get_width: function() {
		return this.max_x - this.min_x;
	}
	,get_height: function() {
		return this.max_y - this.min_y;
	}
	,__class__: echo_util_AABB
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var echo_util_BodyOrBodies = {};
echo_util_BodyOrBodies.from_body = function(a) {
	return haxe_ds_Either.Left(a);
};
echo_util_BodyOrBodies.from_bodies = function(b) {
	return haxe_ds_Either.Right(b);
};
echo_util_BodyOrBodies.to_body = function(this1) {
	if(this1._hx_index == 0) {
		var a = this1.v;
		return a;
	} else {
		return null;
	}
};
echo_util_BodyOrBodies.to_bodies = function(this1) {
	if(this1._hx_index == 1) {
		var b = this1.v;
		return b;
	} else {
		return null;
	}
};
var echo_util_Disposable = function() { };
$hxClasses["echo.util.Disposable"] = echo_util_Disposable;
echo_util_Disposable.__name__ = true;
echo_util_Disposable.dispose = function(object) {
	if(object != null) {
		object.dispose();
	}
	return null;
};
echo_util_Disposable.disposeArray = function(array) {
	if(array != null) {
		var _g = 0;
		while(_g < array.length) {
			var e = array[_g];
			++_g;
			echo_util_Disposable.dispose(e);
		}
		array.splice(0,array.length);
	}
	return null;
};
var echo_util_Ext = function() { };
$hxClasses["echo.util.Ext"] = echo_util_Ext;
echo_util_Ext.__name__ = true;
echo_util_Ext.equals = function(a,b,diff) {
	if(diff == null) {
		diff = 0.00001;
	}
	return Math.abs(a - b) <= diff;
};
echo_util_Ext.square_normal = function(normal) {
	var self = normal;
	var len = Math.sqrt(self.x * self.x + self.y * self.y);
	var b_x = 1.0;
	var b_y = 0.0;
	var dot_x = normal.x * b_x + normal.y * b_y;
	var b_x = 0.0;
	var b_y = 1.0;
	var dot_y = normal.x * b_x + normal.y * b_y;
	if(Math.abs(dot_x) > Math.abs(dot_y)) {
		if(dot_x > 0) {
			var self = normal;
			self.x = 1;
			self.y = 0;
		} else {
			var self = normal;
			self.x = -1;
			self.y = 0;
		}
	} else if(dot_y > 0) {
		var self = normal;
		self.x = 0;
		self.y = 1;
	} else {
		var self = normal;
		self.x = 0;
		self.y = -1;
	}
	var self = normal;
	var self1 = self;
	var self2 = self1;
	var length = Math.sqrt(self2.x * self2.x + self2.y * self2.y);
	if(length > 0.0) {
		var self2 = self1;
		self2.x /= length;
		self2.y /= length;
	}
	var self1 = self;
	self1.x *= len;
	self1.y *= len;
	return normal;
};
echo_util_Ext.dispose_bodies = function(arr) {
	var _g = 0;
	while(_g < arr.length) {
		var body = arr[_g];
		++_g;
		body.dispose();
	}
	return arr;
};
var echo_util_History = function(len) {
	this.re = new echo_util_Ring(len);
	this.un = new echo_util_Ring(len);
};
$hxClasses["echo.util.History"] = echo_util_History;
echo_util_History.__name__ = true;
echo_util_History.prototype = {
	re: null
	,un: null
	,redo: function() {
		var r = this.re.pop();
		if(r != null) {
			this.un.push(r);
		}
		return r;
	}
	,undo: function() {
		var u = this.un.pop();
		if(u != null) {
			this.re.push(u);
		}
		return u;
	}
	,add: function(v) {
		this.un.push(v);
		this.re.reset();
	}
	,__class__: echo_util_History
};
var echo_util_Ring = function(len) {
	var this1 = new Array(len);
	this.a = this1;
	this.reset();
};
$hxClasses["echo.util.Ring"] = echo_util_Ring;
echo_util_Ring.__name__ = true;
echo_util_Ring.prototype = {
	get_cap: function() {
		return this.a.length;
	}
	,get_len: function() {
		return this.i + this.left - this.start;
	}
	,i: null
	,start: null
	,left: null
	,a: null
	,pop: function() {
		if(this.i + this.left - this.start <= 0) {
			return null;
		}
		if(this.i == 0) {
			this.i = this.a.length;
			this.left = 0;
		}
		return this.a[--this.i];
	}
	,shift: function() {
		if(this.i + this.left - this.start <= 0) {
			return null;
		}
		if(this.start == this.a.length) {
			this.start = 0;
			this.left = 0;
		}
		return this.a[this.start++];
	}
	,push: function(v) {
		if(this.i == this.a.length) {
			if(this.left > 0 && this.start == this.i) {
				this.start = 0;
			}
			this.i = 0;
			this.left = this.a.length;
		}
		if(this.i + this.left - this.start == this.a.length) {
			this.start++;
		}
		this.a[this.i++] = v;
	}
	,reset: function() {
		this.i = 0;
		this.start = 0;
		this.left = 0;
	}
	,remove: function(v) {
		var cap = this.a.length;
		var max = this.i + this.left - this.start;
		var j = 0;
		var p = 0;
		while(j < max) {
			p = (j + this.start) % cap;
			if(v == this.a[p]) {
				if(p == this.start) {
					++this.start;
				} else {
					if(this.i == 0) {
						this.i = cap;
						this.left = 0;
					}
					--max;
					while(j < max) {
						this.a[(j + this.start) % cap] = this.a[(j + this.start + 1) % cap];
						++j;
					}
					--this.i;
				}
				break;
			}
			++j;
		}
	}
	,toString: function() {
		return "[i: " + this.i + ", start: " + this.start + ", len: " + (this.i + this.left - this.start) + ", left: " + this.left + "]";
	}
	,__class__: echo_util_Ring
	,__properties__: {get_len:"get_len",get_cap:"get_cap"}
};
var echo_util_History_$Array_$echo_$data_$BodyState = function(len) {
	this.re = new echo_util_Ring_$Array_$echo_$data_$BodyState(len);
	this.un = new echo_util_Ring_$Array_$echo_$data_$BodyState(len);
};
$hxClasses["echo.util.History_Array_echo_data_BodyState"] = echo_util_History_$Array_$echo_$data_$BodyState;
echo_util_History_$Array_$echo_$data_$BodyState.__name__ = true;
echo_util_History_$Array_$echo_$data_$BodyState.prototype = {
	re: null
	,un: null
	,redo: function() {
		var r = this.re.pop();
		if(r != null) {
			this.un.push(r);
		}
		return r;
	}
	,undo: function() {
		var u = this.un.pop();
		if(u != null) {
			this.re.push(u);
		}
		return u;
	}
	,add: function(v) {
		this.un.push(v);
		this.re.reset();
	}
	,__class__: echo_util_History_$Array_$echo_$data_$BodyState
};
var echo_util_JSON = function() { };
$hxClasses["echo.util.JSON"] = echo_util_JSON;
echo_util_JSON.__name__ = true;
echo_util_JSON.copy_fields = function(from,into) {
	if(from == null) {
		return into;
	}
	if(into == null) {
		into = Reflect.copy(from);
	} else {
		var _g = 0;
		var _g1 = Reflect.fields(from);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			into[f] = Reflect.field(from,f);
		}
	}
	return into;
};
var echo_util_Proxy = function() { };
$hxClasses["echo.util.Proxy"] = echo_util_Proxy;
echo_util_Proxy.__name__ = true;
var echo_util_QuadTree = function(aabb,depth) {
	if(depth == null) {
		depth = 0;
	}
	this.nodes_list = [];
	this.max_contents = 10;
	this.max_depth = 5;
	echo_util_AABB.call(this);
	if(aabb != null) {
		this.min_x = aabb.min_x;
		this.max_x = aabb.max_x;
		this.min_y = aabb.min_y;
		this.max_y = aabb.max_y;
	}
	this.depth = depth;
	this.children = [];
	this.contents = [];
};
$hxClasses["echo.util.QuadTree"] = echo_util_QuadTree;
echo_util_QuadTree.__name__ = true;
echo_util_QuadTree.__interfaces__ = [echo_util_IPooled];
echo_util_QuadTree.__properties__ = {get_pool:"get_pool"};
echo_util_QuadTree.get = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var qt = echo_util_QuadTree._pool.get();
	var x1 = x;
	var y1 = y;
	var width1 = width;
	var height1 = height;
	if(height1 == null) {
		height1 = 1;
	}
	if(width1 == null) {
		width1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	width1 *= 0.5;
	height1 *= 0.5;
	qt.min_x = x1 - width1;
	qt.min_y = y1 - height1;
	qt.max_x = x1 + width1;
	qt.max_y = y1 + height1;
	var _g = 0;
	var _g1 = qt.children.length;
	while(_g < _g1) {
		var i = _g++;
		var _this = qt.children[i];
		var _g2 = 0;
		var _g3 = _this.children.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			_this.children[i1].clear_children();
			var _this1 = _this.children[i1];
			if(!_this1.pooled) {
				_this1.pooled = true;
				var _g4 = 0;
				var _g5 = _this1.children;
				while(_g4 < _g5.length) {
					var child = _g5[_g4];
					++_g4;
					if(!child.pooled) {
						child.pooled = true;
						var _g6 = 0;
						var _g7 = child.children;
						while(_g6 < _g7.length) {
							var child1 = _g7[_g6];
							++_g6;
							if(!child1.pooled) {
								child1.pooled = true;
								var _g8 = 0;
								var _g9 = child1.children;
								while(_g8 < _g9.length) {
									var child2 = _g9[_g8];
									++_g8;
									child2.put();
								}
								child1.children.length = 0;
								child1.contents.length = 0;
								child1.nodes_list.length = 0;
								echo_util_QuadTree._pool.put_unsafe(child1);
							}
						}
						child.children.length = 0;
						child.contents.length = 0;
						child.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(child);
					}
				}
				_this1.children.length = 0;
				_this1.contents.length = 0;
				_this1.nodes_list.length = 0;
				echo_util_QuadTree._pool.put_unsafe(_this1);
			}
		}
		_this.children.length = 0;
		var _this2 = qt.children[i];
		if(!_this2.pooled) {
			_this2.pooled = true;
			var _g10 = 0;
			var _g11 = _this2.children;
			while(_g10 < _g11.length) {
				var child3 = _g11[_g10];
				++_g10;
				if(!child3.pooled) {
					child3.pooled = true;
					var _g12 = 0;
					var _g13 = child3.children;
					while(_g12 < _g13.length) {
						var child4 = _g13[_g12];
						++_g12;
						child4.put();
					}
					child3.children.length = 0;
					child3.contents.length = 0;
					child3.nodes_list.length = 0;
					echo_util_QuadTree._pool.put_unsafe(child3);
				}
			}
			_this2.children.length = 0;
			_this2.contents.length = 0;
			_this2.nodes_list.length = 0;
			echo_util_QuadTree._pool.put_unsafe(_this2);
		}
	}
	qt.children.length = 0;
	qt.pooled = false;
	return qt;
};
echo_util_QuadTree.get_pool = function() {
	return echo_util_QuadTree._pool;
};
echo_util_QuadTree.__super__ = echo_util_AABB;
echo_util_QuadTree.prototype = $extend(echo_util_AABB.prototype,{
	max_depth: null
	,max_contents: null
	,children: null
	,contents: null
	,count: null
	,leaf: null
	,depth: null
	,nodes_list: null
	,put: function() {
		if(!this.pooled) {
			this.pooled = true;
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.put();
			}
			this.children.length = 0;
			this.contents.length = 0;
			this.nodes_list.length = 0;
			echo_util_QuadTree._pool.put_unsafe(this);
		}
	}
	,insert: function(data) {
		if(data.bounds == null) {
			return;
		}
		var _this = data.bounds;
		if(!(_this.min_x < this.max_x && _this.max_x >= this.min_x && _this.min_y < this.max_y && _this.max_y >= this.min_y)) {
			return;
		}
		if(this.children.length == 0 && this.contents.length + 1 > this.max_contents) {
			this.split();
		}
		if(this.children.length == 0) {
			this.contents.push(data);
		} else {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.insert(data);
			}
		}
	}
	,remove: function(data) {
		if(this.children.length == 0) {
			return HxOverrides.remove(this.contents,data);
		}
		var removed = false;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.remove(data)) {
				removed = true;
			}
		}
		if(removed) {
			return this.shake();
		}
		return false;
	}
	,update: function(data) {
		this.remove(data);
		this.insert(data);
	}
	,query: function(aabb,result) {
		if(!(this.min_x < aabb.max_x && this.max_x >= aabb.min_x && this.min_y < aabb.max_y && this.max_y >= aabb.min_y)) {
			return;
		}
		if(this.children.length == 0) {
			var _g = 0;
			var _g1 = this.contents;
			while(_g < _g1.length) {
				var data = _g1[_g];
				++_g;
				var _this = data.bounds;
				if(_this.min_x < aabb.max_x && _this.max_x >= aabb.min_x && _this.min_y < aabb.max_y && _this.max_y >= aabb.min_y) {
					result.push(data);
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.query(aabb,result);
			}
		}
	}
	,shake: function() {
		if(this.children.length != 0) {
			var len = this.get_count();
			if(len == 0) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var _this = this.children[i];
					var _g2 = 0;
					var _g3 = _this.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						_this.children[i1].clear_children();
						var _this1 = _this.children[i1];
						if(!_this1.pooled) {
							_this1.pooled = true;
							var _g4 = 0;
							var _g5 = _this1.children;
							while(_g4 < _g5.length) {
								var child = _g5[_g4];
								++_g4;
								if(!child.pooled) {
									child.pooled = true;
									var _g6 = 0;
									var _g7 = child.children;
									while(_g6 < _g7.length) {
										var child1 = _g7[_g6];
										++_g6;
										child1.put();
									}
									child.children.length = 0;
									child.contents.length = 0;
									child.nodes_list.length = 0;
									echo_util_QuadTree._pool.put_unsafe(child);
								}
							}
							_this1.children.length = 0;
							_this1.contents.length = 0;
							_this1.nodes_list.length = 0;
							echo_util_QuadTree._pool.put_unsafe(_this1);
						}
					}
					_this.children.length = 0;
					var _this2 = this.children[i];
					if(!_this2.pooled) {
						_this2.pooled = true;
						var _g8 = 0;
						var _g9 = _this2.children;
						while(_g8 < _g9.length) {
							var child2 = _g9[_g8];
							++_g8;
							if(!child2.pooled) {
								child2.pooled = true;
								var _g10 = 0;
								var _g11 = child2.children;
								while(_g10 < _g11.length) {
									var child3 = _g11[_g10];
									++_g10;
									child3.put();
								}
								child2.children.length = 0;
								child2.contents.length = 0;
								child2.nodes_list.length = 0;
								echo_util_QuadTree._pool.put_unsafe(child2);
							}
						}
						_this2.children.length = 0;
						_this2.contents.length = 0;
						_this2.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(_this2);
					}
				}
				this.children.length = 0;
			} else if(len < this.max_contents) {
				this.nodes_list.length = 0;
				this.nodes_list.push(this);
				while(this.nodes_list.length > 0) {
					var node = this.nodes_list.shift();
					if(node != this && node.children.length == 0) {
						var _g = 0;
						var _g1 = node.contents;
						while(_g < _g1.length) {
							var data = _g1[_g];
							++_g;
							if(this.contents.indexOf(data) == -1) {
								this.contents.push(data);
							}
						}
					} else {
						var _g2 = 0;
						var _g3 = node.children;
						while(_g2 < _g3.length) {
							var child = _g3[_g2];
							++_g2;
							this.nodes_list.push(child);
						}
					}
				}
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var _this = this.children[i];
					var _g2 = 0;
					var _g3 = _this.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						_this.children[i1].clear_children();
						var _this1 = _this.children[i1];
						if(!_this1.pooled) {
							_this1.pooled = true;
							var _g4 = 0;
							var _g5 = _this1.children;
							while(_g4 < _g5.length) {
								var child = _g5[_g4];
								++_g4;
								if(!child.pooled) {
									child.pooled = true;
									var _g6 = 0;
									var _g7 = child.children;
									while(_g6 < _g7.length) {
										var child1 = _g7[_g6];
										++_g6;
										child1.put();
									}
									child.children.length = 0;
									child.contents.length = 0;
									child.nodes_list.length = 0;
									echo_util_QuadTree._pool.put_unsafe(child);
								}
							}
							_this1.children.length = 0;
							_this1.contents.length = 0;
							_this1.nodes_list.length = 0;
							echo_util_QuadTree._pool.put_unsafe(_this1);
						}
					}
					_this.children.length = 0;
					var _this2 = this.children[i];
					if(!_this2.pooled) {
						_this2.pooled = true;
						var _g8 = 0;
						var _g9 = _this2.children;
						while(_g8 < _g9.length) {
							var child2 = _g9[_g8];
							++_g8;
							if(!child2.pooled) {
								child2.pooled = true;
								var _g10 = 0;
								var _g11 = child2.children;
								while(_g10 < _g11.length) {
									var child3 = _g11[_g10];
									++_g10;
									child3.put();
								}
								child2.children.length = 0;
								child2.contents.length = 0;
								child2.nodes_list.length = 0;
								echo_util_QuadTree._pool.put_unsafe(child2);
							}
						}
						_this2.children.length = 0;
						_this2.contents.length = 0;
						_this2.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(_this2);
					}
				}
				this.children.length = 0;
				return true;
			}
		}
		return false;
	}
	,split: function() {
		if(this.depth + 1 >= this.max_depth) {
			return;
		}
		var xw = (this.max_x - this.min_x) * 0.5;
		var xh = (this.max_y - this.min_y) * 0.5;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var qt = echo_util_QuadTree._pool.get();
			var x = 0;
			var y = 0;
			var width = 0;
			var height = 0;
			if(height == null) {
				height = 1;
			}
			if(width == null) {
				width = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			width *= 0.5;
			height *= 0.5;
			qt.min_x = x - width;
			qt.min_y = y - height;
			qt.max_x = x + width;
			qt.max_y = y + height;
			var _g1 = 0;
			var _g2 = qt.children.length;
			while(_g1 < _g2) {
				var i1 = _g1++;
				var _this = qt.children[i1];
				var _g3 = 0;
				var _g4 = _this.children.length;
				while(_g3 < _g4) {
					var i2 = _g3++;
					_this.children[i2].clear_children();
					var _this1 = _this.children[i2];
					if(!_this1.pooled) {
						_this1.pooled = true;
						var _g5 = 0;
						var _g6 = _this1.children;
						while(_g5 < _g6.length) {
							var child = _g6[_g5];
							++_g5;
							if(!child.pooled) {
								child.pooled = true;
								var _g7 = 0;
								var _g8 = child.children;
								while(_g7 < _g8.length) {
									var child1 = _g8[_g7];
									++_g7;
									child1.put();
								}
								child.children.length = 0;
								child.contents.length = 0;
								child.nodes_list.length = 0;
								echo_util_QuadTree._pool.put_unsafe(child);
							}
						}
						_this1.children.length = 0;
						_this1.contents.length = 0;
						_this1.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(_this1);
					}
				}
				_this.children.length = 0;
				var _this2 = qt.children[i1];
				if(!_this2.pooled) {
					_this2.pooled = true;
					var _g9 = 0;
					var _g10 = _this2.children;
					while(_g9 < _g10.length) {
						var child2 = _g10[_g9];
						++_g9;
						if(!child2.pooled) {
							child2.pooled = true;
							var _g11 = 0;
							var _g12 = child2.children;
							while(_g11 < _g12.length) {
								var child3 = _g12[_g11];
								++_g11;
								child3.put();
							}
							child2.children.length = 0;
							child2.contents.length = 0;
							child2.nodes_list.length = 0;
							echo_util_QuadTree._pool.put_unsafe(child2);
						}
					}
					_this2.children.length = 0;
					_this2.contents.length = 0;
					_this2.nodes_list.length = 0;
					echo_util_QuadTree._pool.put_unsafe(_this2);
				}
			}
			qt.children.length = 0;
			qt.pooled = false;
			var child4 = qt;
			switch(i) {
			case 0:
				var max_x = this.min_x + xw;
				var max_y = this.min_y + xh;
				child4.min_x = this.min_x;
				child4.max_x = max_x;
				child4.min_y = this.min_y;
				child4.max_y = max_y;
				break;
			case 1:
				var max_y1 = this.min_y + xh;
				child4.min_x = this.min_x + xw;
				child4.max_x = this.max_x;
				child4.min_y = this.min_y;
				child4.max_y = max_y1;
				break;
			case 2:
				var max_x1 = this.min_x + xw;
				child4.min_x = this.min_x;
				child4.max_x = max_x1;
				child4.min_y = this.min_y + xh;
				child4.max_y = this.max_y;
				break;
			case 3:
				child4.min_x = this.min_x + xw;
				child4.max_x = this.max_x;
				child4.min_y = this.min_y + xh;
				child4.max_y = this.max_y;
				break;
			}
			child4.depth = this.depth + 1;
			var value = this.max_depth;
			var _g13 = 0;
			var _g14 = child4.children;
			while(_g13 < _g14.length) {
				var child5 = _g14[_g13];
				++_g13;
				var _g15 = 0;
				var _g16 = child5.children;
				while(_g15 < _g16.length) {
					var child6 = _g16[_g15];
					++_g15;
					child6.set_max_depth(value);
				}
				child5.max_depth = value;
			}
			child4.max_depth = value;
			var value1 = this.max_contents;
			var _g17 = 0;
			var _g18 = child4.children;
			while(_g17 < _g18.length) {
				var child7 = _g18[_g17];
				++_g17;
				var _g19 = 0;
				var _g20 = child7.children;
				while(_g19 < _g20.length) {
					var child8 = _g20[_g19];
					++_g19;
					child8.set_max_contents(value1);
				}
				child7.max_contents = value1;
			}
			child4.max_contents = value1;
			var _g21 = 0;
			var _g22 = this.contents.length;
			while(_g21 < _g22) {
				var j = _g21++;
				child4.insert(this.contents[j]);
			}
			this.children.push(child4);
		}
		this.contents.length = 0;
	}
	,clear: function() {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			var _this = this.children[i];
			var _g2 = 0;
			var _g3 = _this.children.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				_this.children[i1].clear_children();
				var _this1 = _this.children[i1];
				if(!_this1.pooled) {
					_this1.pooled = true;
					var _g4 = 0;
					var _g5 = _this1.children;
					while(_g4 < _g5.length) {
						var child = _g5[_g4];
						++_g4;
						if(!child.pooled) {
							child.pooled = true;
							var _g6 = 0;
							var _g7 = child.children;
							while(_g6 < _g7.length) {
								var child1 = _g7[_g6];
								++_g6;
								child1.put();
							}
							child.children.length = 0;
							child.contents.length = 0;
							child.nodes_list.length = 0;
							echo_util_QuadTree._pool.put_unsafe(child);
						}
					}
					_this1.children.length = 0;
					_this1.contents.length = 0;
					_this1.nodes_list.length = 0;
					echo_util_QuadTree._pool.put_unsafe(_this1);
				}
			}
			_this.children.length = 0;
			var _this2 = this.children[i];
			if(!_this2.pooled) {
				_this2.pooled = true;
				var _g8 = 0;
				var _g9 = _this2.children;
				while(_g8 < _g9.length) {
					var child2 = _g9[_g8];
					++_g8;
					if(!child2.pooled) {
						child2.pooled = true;
						var _g10 = 0;
						var _g11 = child2.children;
						while(_g10 < _g11.length) {
							var child3 = _g11[_g10];
							++_g10;
							child3.put();
						}
						child2.children.length = 0;
						child2.contents.length = 0;
						child2.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(child2);
					}
				}
				_this2.children.length = 0;
				_this2.contents.length = 0;
				_this2.nodes_list.length = 0;
				echo_util_QuadTree._pool.put_unsafe(_this2);
			}
		}
		this.children.length = 0;
		this.contents.length = 0;
	}
	,clear_children: function() {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			this.children[i].clear_children();
			var _this = this.children[i];
			if(!_this.pooled) {
				_this.pooled = true;
				var _g2 = 0;
				var _g3 = _this.children;
				while(_g2 < _g3.length) {
					var child = _g3[_g2];
					++_g2;
					if(!child.pooled) {
						child.pooled = true;
						var _g4 = 0;
						var _g5 = child.children;
						while(_g4 < _g5.length) {
							var child1 = _g5[_g4];
							++_g4;
							child1.put();
						}
						child.children.length = 0;
						child.contents.length = 0;
						child.nodes_list.length = 0;
						echo_util_QuadTree._pool.put_unsafe(child);
					}
				}
				_this.children.length = 0;
				_this.contents.length = 0;
				_this.nodes_list.length = 0;
				echo_util_QuadTree._pool.put_unsafe(_this);
			}
		}
		this.children.length = 0;
	}
	,reset_data_flags: function() {
		if(this.children.length == 0) {
			var _g = 0;
			var _g1 = this.contents.length;
			while(_g < _g1) {
				var i = _g++;
				this.contents[i].flag = false;
			}
		} else {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				this.children[i].reset_data_flags();
			}
		}
	}
	,get_count: function() {
		if(this.children.length == 0) {
			var _g = 0;
			var _g1 = this.contents.length;
			while(_g < _g1) {
				var i = _g++;
				this.contents[i].flag = false;
			}
		} else {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.children[i];
				if(_this.children.length == 0) {
					var _g2 = 0;
					var _g3 = _this.contents.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						_this.contents[i1].flag = false;
					}
				} else {
					var _g4 = 0;
					var _g5 = _this.children.length;
					while(_g4 < _g5) {
						var i2 = _g4++;
						_this.children[i2].reset_data_flags();
					}
				}
			}
		}
		var num = 0;
		var _g = 0;
		var _g1 = this.contents.length;
		while(_g < _g1) {
			var i = _g++;
			this.contents[i].flag = true;
			++num;
		}
		this.nodes_list.length = 0;
		this.nodes_list.push(this);
		while(this.nodes_list.length > 0) {
			var node = this.nodes_list.shift();
			if(node.children.length == 0) {
				var _g = 0;
				var _g1 = node.contents.length;
				while(_g < _g1) {
					var i = _g++;
					if(!node.contents[i].flag) {
						++num;
						node.contents[i].flag = true;
					}
				}
			} else {
				var _g2 = 0;
				var _g3 = node.children.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					this.nodes_list.push(node.children[i1]);
				}
			}
		}
		return num;
	}
	,get_leaf: function() {
		return this.children.length == 0;
	}
	,set_max_depth: function(value) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.set_max_depth(value);
		}
		return this.max_depth = value;
	}
	,set_max_contents: function(value) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.set_max_contents(value);
		}
		return this.max_contents = value;
	}
	,__class__: echo_util_QuadTree
	,__properties__: $extend(echo_util_AABB.prototype.__properties__,{get_leaf:"get_leaf",get_count:"get_count",set_max_contents:"set_max_contents",set_max_depth:"set_max_depth"})
});
var echo_util_Ring_$Array_$echo_$data_$BodyState = function(len) {
	var this1 = new Array(len);
	this.a = this1;
	this.reset();
};
$hxClasses["echo.util.Ring_Array_echo_data_BodyState"] = echo_util_Ring_$Array_$echo_$data_$BodyState;
echo_util_Ring_$Array_$echo_$data_$BodyState.__name__ = true;
echo_util_Ring_$Array_$echo_$data_$BodyState.prototype = {
	get_cap: function() {
		return this.a.length;
	}
	,get_len: function() {
		return this.i + this.left - this.start;
	}
	,i: null
	,start: null
	,left: null
	,a: null
	,pop: function() {
		if(this.i + this.left - this.start <= 0) {
			return null;
		}
		if(this.i == 0) {
			this.i = this.a.length;
			this.left = 0;
		}
		return this.a[--this.i];
	}
	,shift: function() {
		if(this.i + this.left - this.start <= 0) {
			return null;
		}
		if(this.start == this.a.length) {
			this.start = 0;
			this.left = 0;
		}
		return this.a[this.start++];
	}
	,push: function(v) {
		if(this.i == this.a.length) {
			if(this.left > 0 && this.start == this.i) {
				this.start = 0;
			}
			this.i = 0;
			this.left = this.a.length;
		}
		if(this.i + this.left - this.start == this.a.length) {
			this.start++;
		}
		this.a[this.i++] = v;
	}
	,reset: function() {
		this.i = 0;
		this.start = 0;
		this.left = 0;
	}
	,remove: function(v) {
		var cap = this.a.length;
		var max = this.i + this.left - this.start;
		var j = 0;
		var p = 0;
		while(j < max) {
			p = (j + this.start) % cap;
			if(v == this.a[p]) {
				if(p == this.start) {
					++this.start;
				} else {
					if(this.i == 0) {
						this.i = cap;
						this.left = 0;
					}
					--max;
					while(j < max) {
						this.a[(j + this.start) % cap] = this.a[(j + this.start + 1) % cap];
						++j;
					}
					--this.i;
				}
				break;
			}
			++j;
		}
	}
	,toString: function() {
		return "[i: " + this.i + ", start: " + this.start + ", len: " + (this.i + this.left - this.start) + ", left: " + this.left + "]";
	}
	,__class__: echo_util_Ring_$Array_$echo_$data_$BodyState
	,__properties__: {get_len:"get_len",get_cap:"get_cap"}
};
var echo_util_SAT = function() { };
$hxClasses["echo.util.SAT"] = echo_util_SAT;
echo_util_SAT.__name__ = true;
echo_util_SAT.point_in_rect = function(p,r) {
	if(r.transformed_rect != null && r._rotation != 0) {
		var polygon = r.transformed_rect;
		var inside = false;
		var j = polygon.count - 1;
		var _g = 0;
		var _g1 = polygon.count;
		while(_g < _g1) {
			var i = _g++;
			if(polygon.dirty_vertices) {
				polygon.dirty_vertices = false;
				var self = polygon.local_frame.get_offset();
				self.x = polygon.local_x;
				self.y = polygon.local_y;
				polygon.local_frame.set_angleDegrees(polygon.local_rotation);
				if(polygon.parent_frame != null) {
					var self1 = polygon.parent_frame;
					var self2 = self1.get_matrix();
					var m_a = self2.a;
					var m_b = self2.b;
					var m_c = self2.c;
					var m_d = self2.d;
					var v = polygon.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = polygon.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var polygon1 = polygon.local_frame;
					var x = polygon.parent_frame.get_angleDegrees() + polygon.local_frame.get_angleDegrees();
					polygon1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self3 = polygon.local_frame.get_offset();
					self3.x = pos_x;
					self3.y = pos_y;
				}
				while(polygon._vertices.length > polygon.count) polygon._vertices.pop();
				var _g2 = 0;
				var _g3 = polygon.count;
				while(_g2 < _g3) {
					var i1 = _g2++;
					if(polygon.local_vertices[i1] == null) {
						continue;
					}
					if(polygon._vertices[i1] == null) {
						var polygon2 = polygon._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon2[i1] = this1;
					}
					var p1 = polygon.local_vertices[i1];
					var self4 = polygon.local_frame;
					var m = self4.get_matrix();
					var self5 = m;
					var m_a1 = self5.a;
					var m_b1 = self5.b;
					var m_c1 = self5.c;
					var m_d1 = self5.d;
					var self_x = m_a1 * p1.x + m_c1 * p1.y;
					var self_y = m_b1 * p1.x + m_d1 * p1.y;
					var self6 = m;
					var b_x = self6.tx;
					var b_y = self6.ty;
					var pos_x1 = self_x;
					var pos_y1 = self_y;
					pos_x1 += b_x;
					pos_y1 += b_y;
					var self7 = polygon._vertices[i1];
					self7.x = pos_x1;
					self7.y = pos_y1;
				}
				var _g4 = 0;
				var _g5 = polygon.count;
				while(_g4 < _g5) {
					var i2 = _g4++;
					var target = polygon.sync_pos;
					var self8 = polygon._vertices[(i2 + 1) % polygon.count];
					var self9 = self8;
					var value = self9.x;
					var self10 = target;
					self10.x = value;
					var self11 = self8;
					var value1 = self11.y;
					var self12 = target;
					self12.y = value1;
					var a1 = polygon._vertices[i2];
					var self13 = polygon.sync_pos;
					self13.x -= a1.x;
					self13.y -= a1.y;
					if(polygon._normals[i2] == null) {
						var polygon3 = polygon._normals;
						var this2 = new hxmath_math_Vector2Default(-polygon.sync_pos.y,polygon.sync_pos.x);
						polygon3[i2] = this2;
					} else {
						var y = polygon.sync_pos.x;
						var self14 = polygon._normals[i2];
						self14.x = -polygon.sync_pos.y;
						self14.y = y;
					}
					var self15 = polygon._normals[i2];
					var self16 = self15;
					var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
					if(length > 0.0) {
						var self17 = self15;
						self17.x /= length;
						self17.y /= length;
					}
				}
			}
			var v1 = polygon._vertices;
			var tmp = v1[i].y > p.y != v1[j].y > p.y && p.x < (v1[j].x - v1[i].x) * (p.y - v1[i].y) / (v1[j].y - v1[i].y) + v1[i].x;
			j = i;
		}
		return inside;
	}
	var tmp;
	var tmp1;
	var tmp2;
	if(r.transformed_rect == null || r._rotation == 0) {
		tmp2 = r._x - r.ex;
	} else {
		var _this = r.transformed_rect;
		var tmp3;
		if(_this.count != 0) {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p1 = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p1.x + m_c * p1.y;
					var self_y = m_b * p1.x + m_d * p1.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			tmp3 = _this._vertices[0] == null;
		} else {
			tmp3 = true;
		}
		if(tmp3) {
			tmp2 = _this._x;
		} else {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p1 = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p1.x + m_c * p1.y;
					var self_y = m_b * p1.x + m_d * p1.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			var left = _this._vertices[0].x;
			var _g = 1;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self1 = _this.parent_frame;
						var self2 = self1.get_matrix();
						var m_a = self2.a;
						var m_b = self2.b;
						var m_c = self2.c;
						var m_d = self2.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self3 = _this.local_frame.get_offset();
						self3.x = pos_x;
						self3.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g2 = 0;
					var _g3 = _this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.local_vertices[i1] == null) {
							continue;
						}
						if(_this._vertices[i1] == null) {
							var _this2 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this2[i1] = this1;
						}
						var p1 = _this.local_vertices[i1];
						var self4 = _this.local_frame;
						var m = self4.get_matrix();
						var self5 = m;
						var m_a1 = self5.a;
						var m_b1 = self5.b;
						var m_c1 = self5.c;
						var m_d1 = self5.d;
						var self_x = m_a1 * p1.x + m_c1 * p1.y;
						var self_y = m_b1 * p1.x + m_d1 * p1.y;
						var self6 = m;
						var b_x = self6.tx;
						var b_y = self6.ty;
						var pos_x1 = self_x;
						var pos_y1 = self_y;
						pos_x1 += b_x;
						pos_y1 += b_y;
						var self7 = _this._vertices[i1];
						self7.x = pos_x1;
						self7.y = pos_y1;
					}
					var _g4 = 0;
					var _g5 = _this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = _this.sync_pos;
						var self8 = _this._vertices[(i2 + 1) % _this.count];
						var self9 = self8;
						var value = self9.x;
						var self10 = target;
						self10.x = value;
						var self11 = self8;
						var value1 = self11.y;
						var self12 = target;
						self12.y = value1;
						var a1 = _this._vertices[i2];
						var self13 = _this.sync_pos;
						self13.x -= a1.x;
						self13.y -= a1.y;
						if(_this._normals[i2] == null) {
							var _this3 = _this._normals;
							var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this3[i2] = this2;
						} else {
							var y = _this.sync_pos.x;
							var self14 = _this._normals[i2];
							self14.x = -_this.sync_pos.y;
							self14.y = y;
						}
						var self15 = _this._normals[i2];
						var self16 = self15;
						var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
						if(length > 0.0) {
							var self17 = self15;
							self17.x /= length;
							self17.y /= length;
						}
					}
				}
				if(_this._vertices[i].x < left) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self18 = _this.local_frame.get_offset();
						self18.x = _this.local_x;
						self18.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self19 = _this.parent_frame;
							var self20 = self19.get_matrix();
							var m_a2 = self20.a;
							var m_b2 = self20.b;
							var m_c2 = self20.c;
							var m_d2 = self20.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
							var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
							var a2 = _this.parent_frame.get_offset();
							pos_x2 += a2.x;
							pos_y2 += a2.y;
							var _this4 = _this.local_frame;
							var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self21 = _this.local_frame.get_offset();
							self21.x = pos_x2;
							self21.y = pos_y2;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g6 = 0;
						var _g7 = _this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(_this.local_vertices[i3] == null) {
								continue;
							}
							if(_this._vertices[i3] == null) {
								var _this5 = _this._vertices;
								var this3 = new hxmath_math_Vector2Default(0,0);
								_this5[i3] = this3;
							}
							var p2 = _this.local_vertices[i3];
							var self22 = _this.local_frame;
							var m1 = self22.get_matrix();
							var self23 = m1;
							var m_a3 = self23.a;
							var m_b3 = self23.b;
							var m_c3 = self23.c;
							var m_d3 = self23.d;
							var self_x1 = m_a3 * p2.x + m_c3 * p2.y;
							var self_y1 = m_b3 * p2.x + m_d3 * p2.y;
							var self24 = m1;
							var b_x1 = self24.tx;
							var b_y1 = self24.ty;
							var pos_x3 = self_x1;
							var pos_y3 = self_y1;
							pos_x3 += b_x1;
							pos_y3 += b_y1;
							var self25 = _this._vertices[i3];
							self25.x = pos_x3;
							self25.y = pos_y3;
						}
						var _g8 = 0;
						var _g9 = _this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = _this.sync_pos;
							var self26 = _this._vertices[(i4 + 1) % _this.count];
							var self27 = self26;
							var value2 = self27.x;
							var self28 = target1;
							self28.x = value2;
							var self29 = self26;
							var value3 = self29.y;
							var self30 = target1;
							self30.y = value3;
							var a3 = _this._vertices[i4];
							var self31 = _this.sync_pos;
							self31.x -= a3.x;
							self31.y -= a3.y;
							if(_this._normals[i4] == null) {
								var _this6 = _this._normals;
								var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this6[i4] = this4;
							} else {
								var y1 = _this.sync_pos.x;
								var self32 = _this._normals[i4];
								self32.x = -_this.sync_pos.y;
								self32.y = y1;
							}
							var self33 = _this._normals[i4];
							var self34 = self33;
							var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
							if(length1 > 0.0) {
								var self35 = self33;
								self35.x /= length1;
								self35.y /= length1;
							}
						}
					}
					left = _this._vertices[i].x;
				}
			}
			tmp2 = left;
		}
	}
	if(tmp2 <= p.x) {
		var tmp2;
		if(r.transformed_rect == null || r._rotation == 0) {
			tmp2 = r._x + r.ex;
		} else {
			var _this = r.transformed_rect;
			var tmp3;
			if(_this.count != 0) {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p1 = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p1.x + m_c * p1.y;
						var self_y = m_b * p1.x + m_d * p1.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				tmp3 = _this._vertices[0] == null;
			} else {
				tmp3 = true;
			}
			if(tmp3) {
				tmp2 = _this._x;
			} else {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p1 = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p1.x + m_c * p1.y;
						var self_y = m_b * p1.x + m_d * p1.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				var right = _this._vertices[0].x;
				var _g = 1;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self1 = _this.parent_frame;
							var self2 = self1.get_matrix();
							var m_a = self2.a;
							var m_b = self2.b;
							var m_c = self2.c;
							var m_d = self2.d;
							var v = _this.local_frame.get_offset();
							var pos_x = m_a * v.x + m_c * v.y;
							var pos_y = m_b * v.x + m_d * v.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
							var self3 = _this.local_frame.get_offset();
							self3.x = pos_x;
							self3.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g2 = 0;
						var _g3 = _this.count;
						while(_g2 < _g3) {
							var i1 = _g2++;
							if(_this.local_vertices[i1] == null) {
								continue;
							}
							if(_this._vertices[i1] == null) {
								var _this2 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this2[i1] = this1;
							}
							var p1 = _this.local_vertices[i1];
							var self4 = _this.local_frame;
							var m = self4.get_matrix();
							var self5 = m;
							var m_a1 = self5.a;
							var m_b1 = self5.b;
							var m_c1 = self5.c;
							var m_d1 = self5.d;
							var self_x = m_a1 * p1.x + m_c1 * p1.y;
							var self_y = m_b1 * p1.x + m_d1 * p1.y;
							var self6 = m;
							var b_x = self6.tx;
							var b_y = self6.ty;
							var pos_x1 = self_x;
							var pos_y1 = self_y;
							pos_x1 += b_x;
							pos_y1 += b_y;
							var self7 = _this._vertices[i1];
							self7.x = pos_x1;
							self7.y = pos_y1;
						}
						var _g4 = 0;
						var _g5 = _this.count;
						while(_g4 < _g5) {
							var i2 = _g4++;
							var target = _this.sync_pos;
							var self8 = _this._vertices[(i2 + 1) % _this.count];
							var self9 = self8;
							var value = self9.x;
							var self10 = target;
							self10.x = value;
							var self11 = self8;
							var value1 = self11.y;
							var self12 = target;
							self12.y = value1;
							var a1 = _this._vertices[i2];
							var self13 = _this.sync_pos;
							self13.x -= a1.x;
							self13.y -= a1.y;
							if(_this._normals[i2] == null) {
								var _this3 = _this._normals;
								var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this3[i2] = this2;
							} else {
								var y = _this.sync_pos.x;
								var self14 = _this._normals[i2];
								self14.x = -_this.sync_pos.y;
								self14.y = y;
							}
							var self15 = _this._normals[i2];
							var self16 = self15;
							var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
							if(length > 0.0) {
								var self17 = self15;
								self17.x /= length;
								self17.y /= length;
							}
						}
					}
					if(_this._vertices[i].x > right) {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self18 = _this.local_frame.get_offset();
							self18.x = _this.local_x;
							self18.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self19 = _this.parent_frame;
								var self20 = self19.get_matrix();
								var m_a2 = self20.a;
								var m_b2 = self20.b;
								var m_c2 = self20.c;
								var m_d2 = self20.d;
								var v1 = _this.local_frame.get_offset();
								var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
								var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
								var a2 = _this.parent_frame.get_offset();
								pos_x2 += a2.x;
								pos_y2 += a2.y;
								var _this4 = _this.local_frame;
								var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
								var self21 = _this.local_frame.get_offset();
								self21.x = pos_x2;
								self21.y = pos_y2;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g6 = 0;
							var _g7 = _this.count;
							while(_g6 < _g7) {
								var i3 = _g6++;
								if(_this.local_vertices[i3] == null) {
									continue;
								}
								if(_this._vertices[i3] == null) {
									var _this5 = _this._vertices;
									var this3 = new hxmath_math_Vector2Default(0,0);
									_this5[i3] = this3;
								}
								var p2 = _this.local_vertices[i3];
								var self22 = _this.local_frame;
								var m1 = self22.get_matrix();
								var self23 = m1;
								var m_a3 = self23.a;
								var m_b3 = self23.b;
								var m_c3 = self23.c;
								var m_d3 = self23.d;
								var self_x1 = m_a3 * p2.x + m_c3 * p2.y;
								var self_y1 = m_b3 * p2.x + m_d3 * p2.y;
								var self24 = m1;
								var b_x1 = self24.tx;
								var b_y1 = self24.ty;
								var pos_x3 = self_x1;
								var pos_y3 = self_y1;
								pos_x3 += b_x1;
								pos_y3 += b_y1;
								var self25 = _this._vertices[i3];
								self25.x = pos_x3;
								self25.y = pos_y3;
							}
							var _g8 = 0;
							var _g9 = _this.count;
							while(_g8 < _g9) {
								var i4 = _g8++;
								var target1 = _this.sync_pos;
								var self26 = _this._vertices[(i4 + 1) % _this.count];
								var self27 = self26;
								var value2 = self27.x;
								var self28 = target1;
								self28.x = value2;
								var self29 = self26;
								var value3 = self29.y;
								var self30 = target1;
								self30.y = value3;
								var a3 = _this._vertices[i4];
								var self31 = _this.sync_pos;
								self31.x -= a3.x;
								self31.y -= a3.y;
								if(_this._normals[i4] == null) {
									var _this6 = _this._normals;
									var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this6[i4] = this4;
								} else {
									var y1 = _this.sync_pos.x;
									var self32 = _this._normals[i4];
									self32.x = -_this.sync_pos.y;
									self32.y = y1;
								}
								var self33 = _this._normals[i4];
								var self34 = self33;
								var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
								if(length1 > 0.0) {
									var self35 = self33;
									self35.x /= length1;
									self35.y /= length1;
								}
							}
						}
						right = _this._vertices[i].x;
					}
				}
				tmp2 = right;
			}
		}
		tmp1 = tmp2 >= p.x;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		var tmp1;
		if(r.transformed_rect == null || r._rotation == 0) {
			tmp1 = r._y - r.ey;
		} else {
			var _this = r.transformed_rect;
			var tmp2;
			if(_this.count != 0) {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p1 = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p1.x + m_c * p1.y;
						var self_y = m_b * p1.x + m_d * p1.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				tmp2 = _this._vertices[0] == null;
			} else {
				tmp2 = true;
			}
			if(tmp2) {
				tmp1 = _this._y;
			} else {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p1 = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p1.x + m_c * p1.y;
						var self_y = m_b * p1.x + m_d * p1.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				var top = _this._vertices[0].y;
				var _g = 1;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self1 = _this.parent_frame;
							var self2 = self1.get_matrix();
							var m_a = self2.a;
							var m_b = self2.b;
							var m_c = self2.c;
							var m_d = self2.d;
							var v = _this.local_frame.get_offset();
							var pos_x = m_a * v.x + m_c * v.y;
							var pos_y = m_b * v.x + m_d * v.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
							var self3 = _this.local_frame.get_offset();
							self3.x = pos_x;
							self3.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g2 = 0;
						var _g3 = _this.count;
						while(_g2 < _g3) {
							var i1 = _g2++;
							if(_this.local_vertices[i1] == null) {
								continue;
							}
							if(_this._vertices[i1] == null) {
								var _this2 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this2[i1] = this1;
							}
							var p1 = _this.local_vertices[i1];
							var self4 = _this.local_frame;
							var m = self4.get_matrix();
							var self5 = m;
							var m_a1 = self5.a;
							var m_b1 = self5.b;
							var m_c1 = self5.c;
							var m_d1 = self5.d;
							var self_x = m_a1 * p1.x + m_c1 * p1.y;
							var self_y = m_b1 * p1.x + m_d1 * p1.y;
							var self6 = m;
							var b_x = self6.tx;
							var b_y = self6.ty;
							var pos_x1 = self_x;
							var pos_y1 = self_y;
							pos_x1 += b_x;
							pos_y1 += b_y;
							var self7 = _this._vertices[i1];
							self7.x = pos_x1;
							self7.y = pos_y1;
						}
						var _g4 = 0;
						var _g5 = _this.count;
						while(_g4 < _g5) {
							var i2 = _g4++;
							var target = _this.sync_pos;
							var self8 = _this._vertices[(i2 + 1) % _this.count];
							var self9 = self8;
							var value = self9.x;
							var self10 = target;
							self10.x = value;
							var self11 = self8;
							var value1 = self11.y;
							var self12 = target;
							self12.y = value1;
							var a1 = _this._vertices[i2];
							var self13 = _this.sync_pos;
							self13.x -= a1.x;
							self13.y -= a1.y;
							if(_this._normals[i2] == null) {
								var _this3 = _this._normals;
								var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this3[i2] = this2;
							} else {
								var y = _this.sync_pos.x;
								var self14 = _this._normals[i2];
								self14.x = -_this.sync_pos.y;
								self14.y = y;
							}
							var self15 = _this._normals[i2];
							var self16 = self15;
							var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
							if(length > 0.0) {
								var self17 = self15;
								self17.x /= length;
								self17.y /= length;
							}
						}
					}
					if(_this._vertices[i].y < top) {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self18 = _this.local_frame.get_offset();
							self18.x = _this.local_x;
							self18.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self19 = _this.parent_frame;
								var self20 = self19.get_matrix();
								var m_a2 = self20.a;
								var m_b2 = self20.b;
								var m_c2 = self20.c;
								var m_d2 = self20.d;
								var v1 = _this.local_frame.get_offset();
								var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
								var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
								var a2 = _this.parent_frame.get_offset();
								pos_x2 += a2.x;
								pos_y2 += a2.y;
								var _this4 = _this.local_frame;
								var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
								var self21 = _this.local_frame.get_offset();
								self21.x = pos_x2;
								self21.y = pos_y2;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g6 = 0;
							var _g7 = _this.count;
							while(_g6 < _g7) {
								var i3 = _g6++;
								if(_this.local_vertices[i3] == null) {
									continue;
								}
								if(_this._vertices[i3] == null) {
									var _this5 = _this._vertices;
									var this3 = new hxmath_math_Vector2Default(0,0);
									_this5[i3] = this3;
								}
								var p2 = _this.local_vertices[i3];
								var self22 = _this.local_frame;
								var m1 = self22.get_matrix();
								var self23 = m1;
								var m_a3 = self23.a;
								var m_b3 = self23.b;
								var m_c3 = self23.c;
								var m_d3 = self23.d;
								var self_x1 = m_a3 * p2.x + m_c3 * p2.y;
								var self_y1 = m_b3 * p2.x + m_d3 * p2.y;
								var self24 = m1;
								var b_x1 = self24.tx;
								var b_y1 = self24.ty;
								var pos_x3 = self_x1;
								var pos_y3 = self_y1;
								pos_x3 += b_x1;
								pos_y3 += b_y1;
								var self25 = _this._vertices[i3];
								self25.x = pos_x3;
								self25.y = pos_y3;
							}
							var _g8 = 0;
							var _g9 = _this.count;
							while(_g8 < _g9) {
								var i4 = _g8++;
								var target1 = _this.sync_pos;
								var self26 = _this._vertices[(i4 + 1) % _this.count];
								var self27 = self26;
								var value2 = self27.x;
								var self28 = target1;
								self28.x = value2;
								var self29 = self26;
								var value3 = self29.y;
								var self30 = target1;
								self30.y = value3;
								var a3 = _this._vertices[i4];
								var self31 = _this.sync_pos;
								self31.x -= a3.x;
								self31.y -= a3.y;
								if(_this._normals[i4] == null) {
									var _this6 = _this._normals;
									var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this6[i4] = this4;
								} else {
									var y1 = _this.sync_pos.x;
									var self32 = _this._normals[i4];
									self32.x = -_this.sync_pos.y;
									self32.y = y1;
								}
								var self33 = _this._normals[i4];
								var self34 = self33;
								var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
								if(length1 > 0.0) {
									var self35 = self33;
									self35.x /= length1;
									self35.y /= length1;
								}
							}
						}
						top = _this._vertices[i].y;
					}
				}
				tmp1 = top;
			}
		}
		tmp = tmp1 <= p.x;
	} else {
		tmp = false;
	}
	if(tmp) {
		var tmp;
		if(r.transformed_rect == null || r._rotation == 0) {
			tmp = r._y + r.ey;
		} else {
			var _this = r.transformed_rect;
			var tmp1;
			if(_this.count != 0) {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p1 = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p1.x + m_c * p1.y;
						var self_y = m_b * p1.x + m_d * p1.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				tmp1 = _this._vertices[0] == null;
			} else {
				tmp1 = true;
			}
			if(tmp1) {
				tmp = _this._y;
			} else {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p1 = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p1.x + m_c * p1.y;
						var self_y = m_b * p1.x + m_d * p1.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				var bottom = _this._vertices[0].y;
				var _g = 1;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self1 = _this.parent_frame;
							var self2 = self1.get_matrix();
							var m_a = self2.a;
							var m_b = self2.b;
							var m_c = self2.c;
							var m_d = self2.d;
							var v = _this.local_frame.get_offset();
							var pos_x = m_a * v.x + m_c * v.y;
							var pos_y = m_b * v.x + m_d * v.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
							var self3 = _this.local_frame.get_offset();
							self3.x = pos_x;
							self3.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g2 = 0;
						var _g3 = _this.count;
						while(_g2 < _g3) {
							var i1 = _g2++;
							if(_this.local_vertices[i1] == null) {
								continue;
							}
							if(_this._vertices[i1] == null) {
								var _this2 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this2[i1] = this1;
							}
							var p1 = _this.local_vertices[i1];
							var self4 = _this.local_frame;
							var m = self4.get_matrix();
							var self5 = m;
							var m_a1 = self5.a;
							var m_b1 = self5.b;
							var m_c1 = self5.c;
							var m_d1 = self5.d;
							var self_x = m_a1 * p1.x + m_c1 * p1.y;
							var self_y = m_b1 * p1.x + m_d1 * p1.y;
							var self6 = m;
							var b_x = self6.tx;
							var b_y = self6.ty;
							var pos_x1 = self_x;
							var pos_y1 = self_y;
							pos_x1 += b_x;
							pos_y1 += b_y;
							var self7 = _this._vertices[i1];
							self7.x = pos_x1;
							self7.y = pos_y1;
						}
						var _g4 = 0;
						var _g5 = _this.count;
						while(_g4 < _g5) {
							var i2 = _g4++;
							var target = _this.sync_pos;
							var self8 = _this._vertices[(i2 + 1) % _this.count];
							var self9 = self8;
							var value = self9.x;
							var self10 = target;
							self10.x = value;
							var self11 = self8;
							var value1 = self11.y;
							var self12 = target;
							self12.y = value1;
							var a1 = _this._vertices[i2];
							var self13 = _this.sync_pos;
							self13.x -= a1.x;
							self13.y -= a1.y;
							if(_this._normals[i2] == null) {
								var _this3 = _this._normals;
								var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this3[i2] = this2;
							} else {
								var y = _this.sync_pos.x;
								var self14 = _this._normals[i2];
								self14.x = -_this.sync_pos.y;
								self14.y = y;
							}
							var self15 = _this._normals[i2];
							var self16 = self15;
							var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
							if(length > 0.0) {
								var self17 = self15;
								self17.x /= length;
								self17.y /= length;
							}
						}
					}
					if(_this._vertices[i].y > bottom) {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self18 = _this.local_frame.get_offset();
							self18.x = _this.local_x;
							self18.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self19 = _this.parent_frame;
								var self20 = self19.get_matrix();
								var m_a2 = self20.a;
								var m_b2 = self20.b;
								var m_c2 = self20.c;
								var m_d2 = self20.d;
								var v1 = _this.local_frame.get_offset();
								var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
								var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
								var a2 = _this.parent_frame.get_offset();
								pos_x2 += a2.x;
								pos_y2 += a2.y;
								var _this4 = _this.local_frame;
								var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
								var self21 = _this.local_frame.get_offset();
								self21.x = pos_x2;
								self21.y = pos_y2;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g6 = 0;
							var _g7 = _this.count;
							while(_g6 < _g7) {
								var i3 = _g6++;
								if(_this.local_vertices[i3] == null) {
									continue;
								}
								if(_this._vertices[i3] == null) {
									var _this5 = _this._vertices;
									var this3 = new hxmath_math_Vector2Default(0,0);
									_this5[i3] = this3;
								}
								var p2 = _this.local_vertices[i3];
								var self22 = _this.local_frame;
								var m1 = self22.get_matrix();
								var self23 = m1;
								var m_a3 = self23.a;
								var m_b3 = self23.b;
								var m_c3 = self23.c;
								var m_d3 = self23.d;
								var self_x1 = m_a3 * p2.x + m_c3 * p2.y;
								var self_y1 = m_b3 * p2.x + m_d3 * p2.y;
								var self24 = m1;
								var b_x1 = self24.tx;
								var b_y1 = self24.ty;
								var pos_x3 = self_x1;
								var pos_y3 = self_y1;
								pos_x3 += b_x1;
								pos_y3 += b_y1;
								var self25 = _this._vertices[i3];
								self25.x = pos_x3;
								self25.y = pos_y3;
							}
							var _g8 = 0;
							var _g9 = _this.count;
							while(_g8 < _g9) {
								var i4 = _g8++;
								var target1 = _this.sync_pos;
								var self26 = _this._vertices[(i4 + 1) % _this.count];
								var self27 = self26;
								var value2 = self27.x;
								var self28 = target1;
								self28.x = value2;
								var self29 = self26;
								var value3 = self29.y;
								var self30 = target1;
								self30.y = value3;
								var a3 = _this._vertices[i4];
								var self31 = _this.sync_pos;
								self31.x -= a3.x;
								self31.y -= a3.y;
								if(_this._normals[i4] == null) {
									var _this6 = _this._normals;
									var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this6[i4] = this4;
								} else {
									var y1 = _this.sync_pos.x;
									var self32 = _this._normals[i4];
									self32.x = -_this.sync_pos.y;
									self32.y = y1;
								}
								var self33 = _this._normals[i4];
								var self34 = self33;
								var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
								if(length1 > 0.0) {
									var self35 = self33;
									self35.x /= length1;
									self35.y /= length1;
								}
							}
						}
						bottom = _this._vertices[i].y;
					}
				}
				tmp = bottom;
			}
		}
		return tmp >= p.y;
	} else {
		return false;
	}
};
echo_util_SAT.point_in_circle = function(p,c) {
	var b_x = c._x;
	var b_y = c._y;
	var self = p;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	self_x -= b_x;
	self_y -= b_y;
	return Math.sqrt(self_x * self_x + self_y * self_y) < c.radius;
};
echo_util_SAT.point_in_polygon = function(point,polygon) {
	var inside = false;
	var j = polygon.count - 1;
	var _g = 0;
	var _g1 = polygon.count;
	while(_g < _g1) {
		var i = _g++;
		if(polygon.dirty_vertices) {
			polygon.dirty_vertices = false;
			var self = polygon.local_frame.get_offset();
			self.x = polygon.local_x;
			self.y = polygon.local_y;
			polygon.local_frame.set_angleDegrees(polygon.local_rotation);
			if(polygon.parent_frame != null) {
				var self1 = polygon.parent_frame;
				var self2 = self1.get_matrix();
				var m_a = self2.a;
				var m_b = self2.b;
				var m_c = self2.c;
				var m_d = self2.d;
				var v = polygon.local_frame.get_offset();
				var pos_x = m_a * v.x + m_c * v.y;
				var pos_y = m_b * v.x + m_d * v.y;
				var a = polygon.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var polygon1 = polygon.local_frame;
				var x = polygon.parent_frame.get_angleDegrees() + polygon.local_frame.get_angleDegrees();
				polygon1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self3 = polygon.local_frame.get_offset();
				self3.x = pos_x;
				self3.y = pos_y;
			}
			while(polygon._vertices.length > polygon.count) polygon._vertices.pop();
			var _g2 = 0;
			var _g3 = polygon.count;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(polygon.local_vertices[i1] == null) {
					continue;
				}
				if(polygon._vertices[i1] == null) {
					var polygon2 = polygon._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					polygon2[i1] = this1;
				}
				var p = polygon.local_vertices[i1];
				var self4 = polygon.local_frame;
				var m = self4.get_matrix();
				var self5 = m;
				var m_a1 = self5.a;
				var m_b1 = self5.b;
				var m_c1 = self5.c;
				var m_d1 = self5.d;
				var self_x = m_a1 * p.x + m_c1 * p.y;
				var self_y = m_b1 * p.x + m_d1 * p.y;
				var self6 = m;
				var b_x = self6.tx;
				var b_y = self6.ty;
				var pos_x1 = self_x;
				var pos_y1 = self_y;
				pos_x1 += b_x;
				pos_y1 += b_y;
				var self7 = polygon._vertices[i1];
				self7.x = pos_x1;
				self7.y = pos_y1;
			}
			var _g4 = 0;
			var _g5 = polygon.count;
			while(_g4 < _g5) {
				var i2 = _g4++;
				var target = polygon.sync_pos;
				var self8 = polygon._vertices[(i2 + 1) % polygon.count];
				var self9 = self8;
				var value = self9.x;
				var self10 = target;
				self10.x = value;
				var self11 = self8;
				var value1 = self11.y;
				var self12 = target;
				self12.y = value1;
				var a1 = polygon._vertices[i2];
				var self13 = polygon.sync_pos;
				self13.x -= a1.x;
				self13.y -= a1.y;
				if(polygon._normals[i2] == null) {
					var polygon3 = polygon._normals;
					var this2 = new hxmath_math_Vector2Default(-polygon.sync_pos.y,polygon.sync_pos.x);
					polygon3[i2] = this2;
				} else {
					var y = polygon.sync_pos.x;
					var self14 = polygon._normals[i2];
					self14.x = -polygon.sync_pos.y;
					self14.y = y;
				}
				var self15 = polygon._normals[i2];
				var self16 = self15;
				var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
				if(length > 0.0) {
					var self17 = self15;
					self17.x /= length;
					self17.y /= length;
				}
			}
		}
		var v1 = polygon._vertices;
		var tmp = v1[i].y > point.y != v1[j].y > point.y && point.x < (v1[j].x - v1[i].x) * (point.y - v1[i].y) / (v1[j].y - v1[i].y) + v1[i].x;
		j = i;
	}
	return inside;
};
echo_util_SAT.rect_contains = function(r,v) {
	if(r.transformed_rect != null && r._rotation != 0) {
		var polygon = r.transformed_rect;
		var inside = false;
		var j = polygon.count - 1;
		var _g = 0;
		var _g1 = polygon.count;
		while(_g < _g1) {
			var i = _g++;
			if(polygon.dirty_vertices) {
				polygon.dirty_vertices = false;
				var self = polygon.local_frame.get_offset();
				self.x = polygon.local_x;
				self.y = polygon.local_y;
				polygon.local_frame.set_angleDegrees(polygon.local_rotation);
				if(polygon.parent_frame != null) {
					var self1 = polygon.parent_frame;
					var self2 = self1.get_matrix();
					var m_a = self2.a;
					var m_b = self2.b;
					var m_c = self2.c;
					var m_d = self2.d;
					var v1 = polygon.local_frame.get_offset();
					var pos_x = m_a * v1.x + m_c * v1.y;
					var pos_y = m_b * v1.x + m_d * v1.y;
					var a = polygon.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var polygon1 = polygon.local_frame;
					var x = polygon.parent_frame.get_angleDegrees() + polygon.local_frame.get_angleDegrees();
					polygon1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self3 = polygon.local_frame.get_offset();
					self3.x = pos_x;
					self3.y = pos_y;
				}
				while(polygon._vertices.length > polygon.count) polygon._vertices.pop();
				var _g2 = 0;
				var _g3 = polygon.count;
				while(_g2 < _g3) {
					var i1 = _g2++;
					if(polygon.local_vertices[i1] == null) {
						continue;
					}
					if(polygon._vertices[i1] == null) {
						var polygon2 = polygon._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						polygon2[i1] = this1;
					}
					var p = polygon.local_vertices[i1];
					var self4 = polygon.local_frame;
					var m = self4.get_matrix();
					var self5 = m;
					var m_a1 = self5.a;
					var m_b1 = self5.b;
					var m_c1 = self5.c;
					var m_d1 = self5.d;
					var self_x = m_a1 * p.x + m_c1 * p.y;
					var self_y = m_b1 * p.x + m_d1 * p.y;
					var self6 = m;
					var b_x = self6.tx;
					var b_y = self6.ty;
					var pos_x1 = self_x;
					var pos_y1 = self_y;
					pos_x1 += b_x;
					pos_y1 += b_y;
					var self7 = polygon._vertices[i1];
					self7.x = pos_x1;
					self7.y = pos_y1;
				}
				var _g4 = 0;
				var _g5 = polygon.count;
				while(_g4 < _g5) {
					var i2 = _g4++;
					var target = polygon.sync_pos;
					var self8 = polygon._vertices[(i2 + 1) % polygon.count];
					var self9 = self8;
					var value = self9.x;
					var self10 = target;
					self10.x = value;
					var self11 = self8;
					var value1 = self11.y;
					var self12 = target;
					self12.y = value1;
					var a1 = polygon._vertices[i2];
					var self13 = polygon.sync_pos;
					self13.x -= a1.x;
					self13.y -= a1.y;
					if(polygon._normals[i2] == null) {
						var polygon3 = polygon._normals;
						var this2 = new hxmath_math_Vector2Default(-polygon.sync_pos.y,polygon.sync_pos.x);
						polygon3[i2] = this2;
					} else {
						var y = polygon.sync_pos.x;
						var self14 = polygon._normals[i2];
						self14.x = -polygon.sync_pos.y;
						self14.y = y;
					}
					var self15 = polygon._normals[i2];
					var self16 = self15;
					var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
					if(length > 0.0) {
						var self17 = self15;
						self17.x /= length;
						self17.y /= length;
					}
				}
			}
			var v2 = polygon._vertices;
			var tmp = v2[i].y > v.y != v2[j].y > v.y && v.x < (v2[j].x - v2[i].x) * (v.y - v2[i].y) / (v2[j].y - v2[i].y) + v2[i].x;
			j = i;
		}
		return inside;
	} else {
		var tmp;
		var tmp1;
		var tmp2;
		if(r.transformed_rect == null || r._rotation == 0) {
			tmp2 = r._x - r.ex;
		} else {
			var _this = r.transformed_rect;
			var tmp3;
			if(_this.count != 0) {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v1 = _this.local_frame.get_offset();
						var pos_x = m_a * v1.x + m_c * v1.y;
						var pos_y = m_b * v1.x + m_d * v1.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				tmp3 = _this._vertices[0] == null;
			} else {
				tmp3 = true;
			}
			if(tmp3) {
				tmp2 = _this._x;
			} else {
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self = _this.parent_frame;
						var self1 = self.get_matrix();
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var v1 = _this.local_frame.get_offset();
						var pos_x = m_a * v1.x + m_c * v1.y;
						var pos_y = m_b * v1.x + m_d * v1.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self = _this.local_frame.get_offset();
						self.x = pos_x;
						self.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.local_vertices[i] == null) {
							continue;
						}
						if(_this._vertices[i] == null) {
							var _this1 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this1[i] = this1;
						}
						var p = _this.local_vertices[i];
						var self = _this.local_frame;
						var m = self.get_matrix();
						var self1 = m;
						var m_a = self1.a;
						var m_b = self1.b;
						var m_c = self1.c;
						var m_d = self1.d;
						var self_x = m_a * p.x + m_c * p.y;
						var self_y = m_b * p.x + m_d * p.y;
						var self2 = m;
						var b_x = self2.tx;
						var b_y = self2.ty;
						var pos_x = self_x;
						var pos_y = self_y;
						pos_x += b_x;
						pos_y += b_y;
						var self3 = _this._vertices[i];
						self3.x = pos_x;
						self3.y = pos_y;
					}
					var _g = 0;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						var target = _this.sync_pos;
						var self = _this._vertices[(i + 1) % _this.count];
						var self1 = self;
						var value = self1.x;
						var self2 = target;
						self2.x = value;
						var self3 = self;
						var value1 = self3.y;
						var self4 = target;
						self4.y = value1;
						var a = _this._vertices[i];
						var self5 = _this.sync_pos;
						self5.x -= a.x;
						self5.y -= a.y;
						if(_this._normals[i] == null) {
							var _this1 = _this._normals;
							var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this1[i] = this1;
						} else {
							var y = _this.sync_pos.x;
							var self6 = _this._normals[i];
							self6.x = -_this.sync_pos.y;
							self6.y = y;
						}
						var self7 = _this._normals[i];
						var self8 = self7;
						var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
						if(length > 0.0) {
							var self9 = self7;
							self9.x /= length;
							self9.y /= length;
						}
					}
				}
				var left = _this._vertices[0].x;
				var _g = 1;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self1 = _this.parent_frame;
							var self2 = self1.get_matrix();
							var m_a = self2.a;
							var m_b = self2.b;
							var m_c = self2.c;
							var m_d = self2.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x = m_a * v1.x + m_c * v1.y;
							var pos_y = m_b * v1.x + m_d * v1.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
							var self3 = _this.local_frame.get_offset();
							self3.x = pos_x;
							self3.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g2 = 0;
						var _g3 = _this.count;
						while(_g2 < _g3) {
							var i1 = _g2++;
							if(_this.local_vertices[i1] == null) {
								continue;
							}
							if(_this._vertices[i1] == null) {
								var _this2 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this2[i1] = this1;
							}
							var p = _this.local_vertices[i1];
							var self4 = _this.local_frame;
							var m = self4.get_matrix();
							var self5 = m;
							var m_a1 = self5.a;
							var m_b1 = self5.b;
							var m_c1 = self5.c;
							var m_d1 = self5.d;
							var self_x = m_a1 * p.x + m_c1 * p.y;
							var self_y = m_b1 * p.x + m_d1 * p.y;
							var self6 = m;
							var b_x = self6.tx;
							var b_y = self6.ty;
							var pos_x1 = self_x;
							var pos_y1 = self_y;
							pos_x1 += b_x;
							pos_y1 += b_y;
							var self7 = _this._vertices[i1];
							self7.x = pos_x1;
							self7.y = pos_y1;
						}
						var _g4 = 0;
						var _g5 = _this.count;
						while(_g4 < _g5) {
							var i2 = _g4++;
							var target = _this.sync_pos;
							var self8 = _this._vertices[(i2 + 1) % _this.count];
							var self9 = self8;
							var value = self9.x;
							var self10 = target;
							self10.x = value;
							var self11 = self8;
							var value1 = self11.y;
							var self12 = target;
							self12.y = value1;
							var a1 = _this._vertices[i2];
							var self13 = _this.sync_pos;
							self13.x -= a1.x;
							self13.y -= a1.y;
							if(_this._normals[i2] == null) {
								var _this3 = _this._normals;
								var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this3[i2] = this2;
							} else {
								var y = _this.sync_pos.x;
								var self14 = _this._normals[i2];
								self14.x = -_this.sync_pos.y;
								self14.y = y;
							}
							var self15 = _this._normals[i2];
							var self16 = self15;
							var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
							if(length > 0.0) {
								var self17 = self15;
								self17.x /= length;
								self17.y /= length;
							}
						}
					}
					if(_this._vertices[i].x < left) {
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self18 = _this.local_frame.get_offset();
							self18.x = _this.local_x;
							self18.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self19 = _this.parent_frame;
								var self20 = self19.get_matrix();
								var m_a2 = self20.a;
								var m_b2 = self20.b;
								var m_c2 = self20.c;
								var m_d2 = self20.d;
								var v2 = _this.local_frame.get_offset();
								var pos_x2 = m_a2 * v2.x + m_c2 * v2.y;
								var pos_y2 = m_b2 * v2.x + m_d2 * v2.y;
								var a2 = _this.parent_frame.get_offset();
								pos_x2 += a2.x;
								pos_y2 += a2.y;
								var _this4 = _this.local_frame;
								var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
								var self21 = _this.local_frame.get_offset();
								self21.x = pos_x2;
								self21.y = pos_y2;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g6 = 0;
							var _g7 = _this.count;
							while(_g6 < _g7) {
								var i3 = _g6++;
								if(_this.local_vertices[i3] == null) {
									continue;
								}
								if(_this._vertices[i3] == null) {
									var _this5 = _this._vertices;
									var this3 = new hxmath_math_Vector2Default(0,0);
									_this5[i3] = this3;
								}
								var p1 = _this.local_vertices[i3];
								var self22 = _this.local_frame;
								var m1 = self22.get_matrix();
								var self23 = m1;
								var m_a3 = self23.a;
								var m_b3 = self23.b;
								var m_c3 = self23.c;
								var m_d3 = self23.d;
								var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
								var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
								var self24 = m1;
								var b_x1 = self24.tx;
								var b_y1 = self24.ty;
								var pos_x3 = self_x1;
								var pos_y3 = self_y1;
								pos_x3 += b_x1;
								pos_y3 += b_y1;
								var self25 = _this._vertices[i3];
								self25.x = pos_x3;
								self25.y = pos_y3;
							}
							var _g8 = 0;
							var _g9 = _this.count;
							while(_g8 < _g9) {
								var i4 = _g8++;
								var target1 = _this.sync_pos;
								var self26 = _this._vertices[(i4 + 1) % _this.count];
								var self27 = self26;
								var value2 = self27.x;
								var self28 = target1;
								self28.x = value2;
								var self29 = self26;
								var value3 = self29.y;
								var self30 = target1;
								self30.y = value3;
								var a3 = _this._vertices[i4];
								var self31 = _this.sync_pos;
								self31.x -= a3.x;
								self31.y -= a3.y;
								if(_this._normals[i4] == null) {
									var _this6 = _this._normals;
									var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this6[i4] = this4;
								} else {
									var y1 = _this.sync_pos.x;
									var self32 = _this._normals[i4];
									self32.x = -_this.sync_pos.y;
									self32.y = y1;
								}
								var self33 = _this._normals[i4];
								var self34 = self33;
								var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
								if(length1 > 0.0) {
									var self35 = self33;
									self35.x /= length1;
									self35.y /= length1;
								}
							}
						}
						left = _this._vertices[i].x;
					}
				}
				tmp2 = left;
			}
		}
		if(tmp2 <= v.x) {
			var tmp2;
			if(r.transformed_rect == null || r._rotation == 0) {
				tmp2 = r._x + r.ex;
			} else {
				var _this = r.transformed_rect;
				var tmp3;
				if(_this.count != 0) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self = _this.parent_frame;
							var self1 = self.get_matrix();
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x = m_a * v1.x + m_c * v1.y;
							var pos_y = m_b * v1.x + m_d * v1.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
							var self = _this.local_frame.get_offset();
							self.x = pos_x;
							self.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								continue;
							}
							if(_this._vertices[i] == null) {
								var _this1 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
							var p = _this.local_vertices[i];
							var self = _this.local_frame;
							var m = self.get_matrix();
							var self1 = m;
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self2 = m;
							var b_x = self2.tx;
							var b_y = self2.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							var self3 = _this._vertices[i];
							self3.x = pos_x;
							self3.y = pos_y;
						}
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							var target = _this.sync_pos;
							var self = _this._vertices[(i + 1) % _this.count];
							var self1 = self;
							var value = self1.x;
							var self2 = target;
							self2.x = value;
							var self3 = self;
							var value1 = self3.y;
							var self4 = target;
							self4.y = value1;
							var a = _this._vertices[i];
							var self5 = _this.sync_pos;
							self5.x -= a.x;
							self5.y -= a.y;
							if(_this._normals[i] == null) {
								var _this1 = _this._normals;
								var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this1[i] = this1;
							} else {
								var y = _this.sync_pos.x;
								var self6 = _this._normals[i];
								self6.x = -_this.sync_pos.y;
								self6.y = y;
							}
							var self7 = _this._normals[i];
							var self8 = self7;
							var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
							if(length > 0.0) {
								var self9 = self7;
								self9.x /= length;
								self9.y /= length;
							}
						}
					}
					tmp3 = _this._vertices[0] == null;
				} else {
					tmp3 = true;
				}
				if(tmp3) {
					tmp2 = _this._x;
				} else {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self = _this.parent_frame;
							var self1 = self.get_matrix();
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x = m_a * v1.x + m_c * v1.y;
							var pos_y = m_b * v1.x + m_d * v1.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
							var self = _this.local_frame.get_offset();
							self.x = pos_x;
							self.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								continue;
							}
							if(_this._vertices[i] == null) {
								var _this1 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
							var p = _this.local_vertices[i];
							var self = _this.local_frame;
							var m = self.get_matrix();
							var self1 = m;
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self2 = m;
							var b_x = self2.tx;
							var b_y = self2.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							var self3 = _this._vertices[i];
							self3.x = pos_x;
							self3.y = pos_y;
						}
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							var target = _this.sync_pos;
							var self = _this._vertices[(i + 1) % _this.count];
							var self1 = self;
							var value = self1.x;
							var self2 = target;
							self2.x = value;
							var self3 = self;
							var value1 = self3.y;
							var self4 = target;
							self4.y = value1;
							var a = _this._vertices[i];
							var self5 = _this.sync_pos;
							self5.x -= a.x;
							self5.y -= a.y;
							if(_this._normals[i] == null) {
								var _this1 = _this._normals;
								var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this1[i] = this1;
							} else {
								var y = _this.sync_pos.x;
								var self6 = _this._normals[i];
								self6.x = -_this.sync_pos.y;
								self6.y = y;
							}
							var self7 = _this._normals[i];
							var self8 = self7;
							var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
							if(length > 0.0) {
								var self9 = self7;
								self9.x /= length;
								self9.y /= length;
							}
						}
					}
					var right = _this._vertices[0].x;
					var _g = 1;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self = _this.local_frame.get_offset();
							self.x = _this.local_x;
							self.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self1 = _this.parent_frame;
								var self2 = self1.get_matrix();
								var m_a = self2.a;
								var m_b = self2.b;
								var m_c = self2.c;
								var m_d = self2.d;
								var v1 = _this.local_frame.get_offset();
								var pos_x = m_a * v1.x + m_c * v1.y;
								var pos_y = m_b * v1.x + m_d * v1.y;
								var a = _this.parent_frame.get_offset();
								pos_x += a.x;
								pos_y += a.y;
								var _this1 = _this.local_frame;
								var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
								var self3 = _this.local_frame.get_offset();
								self3.x = pos_x;
								self3.y = pos_y;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g2 = 0;
							var _g3 = _this.count;
							while(_g2 < _g3) {
								var i1 = _g2++;
								if(_this.local_vertices[i1] == null) {
									continue;
								}
								if(_this._vertices[i1] == null) {
									var _this2 = _this._vertices;
									var this1 = new hxmath_math_Vector2Default(0,0);
									_this2[i1] = this1;
								}
								var p = _this.local_vertices[i1];
								var self4 = _this.local_frame;
								var m = self4.get_matrix();
								var self5 = m;
								var m_a1 = self5.a;
								var m_b1 = self5.b;
								var m_c1 = self5.c;
								var m_d1 = self5.d;
								var self_x = m_a1 * p.x + m_c1 * p.y;
								var self_y = m_b1 * p.x + m_d1 * p.y;
								var self6 = m;
								var b_x = self6.tx;
								var b_y = self6.ty;
								var pos_x1 = self_x;
								var pos_y1 = self_y;
								pos_x1 += b_x;
								pos_y1 += b_y;
								var self7 = _this._vertices[i1];
								self7.x = pos_x1;
								self7.y = pos_y1;
							}
							var _g4 = 0;
							var _g5 = _this.count;
							while(_g4 < _g5) {
								var i2 = _g4++;
								var target = _this.sync_pos;
								var self8 = _this._vertices[(i2 + 1) % _this.count];
								var self9 = self8;
								var value = self9.x;
								var self10 = target;
								self10.x = value;
								var self11 = self8;
								var value1 = self11.y;
								var self12 = target;
								self12.y = value1;
								var a1 = _this._vertices[i2];
								var self13 = _this.sync_pos;
								self13.x -= a1.x;
								self13.y -= a1.y;
								if(_this._normals[i2] == null) {
									var _this3 = _this._normals;
									var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this3[i2] = this2;
								} else {
									var y = _this.sync_pos.x;
									var self14 = _this._normals[i2];
									self14.x = -_this.sync_pos.y;
									self14.y = y;
								}
								var self15 = _this._normals[i2];
								var self16 = self15;
								var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
								if(length > 0.0) {
									var self17 = self15;
									self17.x /= length;
									self17.y /= length;
								}
							}
						}
						if(_this._vertices[i].x > right) {
							if(_this.dirty_vertices) {
								_this.dirty_vertices = false;
								var self18 = _this.local_frame.get_offset();
								self18.x = _this.local_x;
								self18.y = _this.local_y;
								_this.local_frame.set_angleDegrees(_this.local_rotation);
								if(_this.parent_frame != null) {
									var self19 = _this.parent_frame;
									var self20 = self19.get_matrix();
									var m_a2 = self20.a;
									var m_b2 = self20.b;
									var m_c2 = self20.c;
									var m_d2 = self20.d;
									var v2 = _this.local_frame.get_offset();
									var pos_x2 = m_a2 * v2.x + m_c2 * v2.y;
									var pos_y2 = m_b2 * v2.x + m_d2 * v2.y;
									var a2 = _this.parent_frame.get_offset();
									pos_x2 += a2.x;
									pos_y2 += a2.y;
									var _this4 = _this.local_frame;
									var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
									_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
									var self21 = _this.local_frame.get_offset();
									self21.x = pos_x2;
									self21.y = pos_y2;
								}
								while(_this._vertices.length > _this.count) _this._vertices.pop();
								var _g6 = 0;
								var _g7 = _this.count;
								while(_g6 < _g7) {
									var i3 = _g6++;
									if(_this.local_vertices[i3] == null) {
										continue;
									}
									if(_this._vertices[i3] == null) {
										var _this5 = _this._vertices;
										var this3 = new hxmath_math_Vector2Default(0,0);
										_this5[i3] = this3;
									}
									var p1 = _this.local_vertices[i3];
									var self22 = _this.local_frame;
									var m1 = self22.get_matrix();
									var self23 = m1;
									var m_a3 = self23.a;
									var m_b3 = self23.b;
									var m_c3 = self23.c;
									var m_d3 = self23.d;
									var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
									var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
									var self24 = m1;
									var b_x1 = self24.tx;
									var b_y1 = self24.ty;
									var pos_x3 = self_x1;
									var pos_y3 = self_y1;
									pos_x3 += b_x1;
									pos_y3 += b_y1;
									var self25 = _this._vertices[i3];
									self25.x = pos_x3;
									self25.y = pos_y3;
								}
								var _g8 = 0;
								var _g9 = _this.count;
								while(_g8 < _g9) {
									var i4 = _g8++;
									var target1 = _this.sync_pos;
									var self26 = _this._vertices[(i4 + 1) % _this.count];
									var self27 = self26;
									var value2 = self27.x;
									var self28 = target1;
									self28.x = value2;
									var self29 = self26;
									var value3 = self29.y;
									var self30 = target1;
									self30.y = value3;
									var a3 = _this._vertices[i4];
									var self31 = _this.sync_pos;
									self31.x -= a3.x;
									self31.y -= a3.y;
									if(_this._normals[i4] == null) {
										var _this6 = _this._normals;
										var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
										_this6[i4] = this4;
									} else {
										var y1 = _this.sync_pos.x;
										var self32 = _this._normals[i4];
										self32.x = -_this.sync_pos.y;
										self32.y = y1;
									}
									var self33 = _this._normals[i4];
									var self34 = self33;
									var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
									if(length1 > 0.0) {
										var self35 = self33;
										self35.x /= length1;
										self35.y /= length1;
									}
								}
							}
							right = _this._vertices[i].x;
						}
					}
					tmp2 = right;
				}
			}
			tmp1 = tmp2 >= v.x;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var tmp1;
			if(r.transformed_rect == null || r._rotation == 0) {
				tmp1 = r._y - r.ey;
			} else {
				var _this = r.transformed_rect;
				var tmp2;
				if(_this.count != 0) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self = _this.parent_frame;
							var self1 = self.get_matrix();
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x = m_a * v1.x + m_c * v1.y;
							var pos_y = m_b * v1.x + m_d * v1.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
							var self = _this.local_frame.get_offset();
							self.x = pos_x;
							self.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								continue;
							}
							if(_this._vertices[i] == null) {
								var _this1 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
							var p = _this.local_vertices[i];
							var self = _this.local_frame;
							var m = self.get_matrix();
							var self1 = m;
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self2 = m;
							var b_x = self2.tx;
							var b_y = self2.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							var self3 = _this._vertices[i];
							self3.x = pos_x;
							self3.y = pos_y;
						}
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							var target = _this.sync_pos;
							var self = _this._vertices[(i + 1) % _this.count];
							var self1 = self;
							var value = self1.x;
							var self2 = target;
							self2.x = value;
							var self3 = self;
							var value1 = self3.y;
							var self4 = target;
							self4.y = value1;
							var a = _this._vertices[i];
							var self5 = _this.sync_pos;
							self5.x -= a.x;
							self5.y -= a.y;
							if(_this._normals[i] == null) {
								var _this1 = _this._normals;
								var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this1[i] = this1;
							} else {
								var y = _this.sync_pos.x;
								var self6 = _this._normals[i];
								self6.x = -_this.sync_pos.y;
								self6.y = y;
							}
							var self7 = _this._normals[i];
							var self8 = self7;
							var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
							if(length > 0.0) {
								var self9 = self7;
								self9.x /= length;
								self9.y /= length;
							}
						}
					}
					tmp2 = _this._vertices[0] == null;
				} else {
					tmp2 = true;
				}
				if(tmp2) {
					tmp1 = _this._y;
				} else {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self = _this.parent_frame;
							var self1 = self.get_matrix();
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x = m_a * v1.x + m_c * v1.y;
							var pos_y = m_b * v1.x + m_d * v1.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
							var self = _this.local_frame.get_offset();
							self.x = pos_x;
							self.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								continue;
							}
							if(_this._vertices[i] == null) {
								var _this1 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
							var p = _this.local_vertices[i];
							var self = _this.local_frame;
							var m = self.get_matrix();
							var self1 = m;
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self2 = m;
							var b_x = self2.tx;
							var b_y = self2.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							var self3 = _this._vertices[i];
							self3.x = pos_x;
							self3.y = pos_y;
						}
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							var target = _this.sync_pos;
							var self = _this._vertices[(i + 1) % _this.count];
							var self1 = self;
							var value = self1.x;
							var self2 = target;
							self2.x = value;
							var self3 = self;
							var value1 = self3.y;
							var self4 = target;
							self4.y = value1;
							var a = _this._vertices[i];
							var self5 = _this.sync_pos;
							self5.x -= a.x;
							self5.y -= a.y;
							if(_this._normals[i] == null) {
								var _this1 = _this._normals;
								var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this1[i] = this1;
							} else {
								var y = _this.sync_pos.x;
								var self6 = _this._normals[i];
								self6.x = -_this.sync_pos.y;
								self6.y = y;
							}
							var self7 = _this._normals[i];
							var self8 = self7;
							var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
							if(length > 0.0) {
								var self9 = self7;
								self9.x /= length;
								self9.y /= length;
							}
						}
					}
					var top = _this._vertices[0].y;
					var _g = 1;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self = _this.local_frame.get_offset();
							self.x = _this.local_x;
							self.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self1 = _this.parent_frame;
								var self2 = self1.get_matrix();
								var m_a = self2.a;
								var m_b = self2.b;
								var m_c = self2.c;
								var m_d = self2.d;
								var v1 = _this.local_frame.get_offset();
								var pos_x = m_a * v1.x + m_c * v1.y;
								var pos_y = m_b * v1.x + m_d * v1.y;
								var a = _this.parent_frame.get_offset();
								pos_x += a.x;
								pos_y += a.y;
								var _this1 = _this.local_frame;
								var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
								var self3 = _this.local_frame.get_offset();
								self3.x = pos_x;
								self3.y = pos_y;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g2 = 0;
							var _g3 = _this.count;
							while(_g2 < _g3) {
								var i1 = _g2++;
								if(_this.local_vertices[i1] == null) {
									continue;
								}
								if(_this._vertices[i1] == null) {
									var _this2 = _this._vertices;
									var this1 = new hxmath_math_Vector2Default(0,0);
									_this2[i1] = this1;
								}
								var p = _this.local_vertices[i1];
								var self4 = _this.local_frame;
								var m = self4.get_matrix();
								var self5 = m;
								var m_a1 = self5.a;
								var m_b1 = self5.b;
								var m_c1 = self5.c;
								var m_d1 = self5.d;
								var self_x = m_a1 * p.x + m_c1 * p.y;
								var self_y = m_b1 * p.x + m_d1 * p.y;
								var self6 = m;
								var b_x = self6.tx;
								var b_y = self6.ty;
								var pos_x1 = self_x;
								var pos_y1 = self_y;
								pos_x1 += b_x;
								pos_y1 += b_y;
								var self7 = _this._vertices[i1];
								self7.x = pos_x1;
								self7.y = pos_y1;
							}
							var _g4 = 0;
							var _g5 = _this.count;
							while(_g4 < _g5) {
								var i2 = _g4++;
								var target = _this.sync_pos;
								var self8 = _this._vertices[(i2 + 1) % _this.count];
								var self9 = self8;
								var value = self9.x;
								var self10 = target;
								self10.x = value;
								var self11 = self8;
								var value1 = self11.y;
								var self12 = target;
								self12.y = value1;
								var a1 = _this._vertices[i2];
								var self13 = _this.sync_pos;
								self13.x -= a1.x;
								self13.y -= a1.y;
								if(_this._normals[i2] == null) {
									var _this3 = _this._normals;
									var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this3[i2] = this2;
								} else {
									var y = _this.sync_pos.x;
									var self14 = _this._normals[i2];
									self14.x = -_this.sync_pos.y;
									self14.y = y;
								}
								var self15 = _this._normals[i2];
								var self16 = self15;
								var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
								if(length > 0.0) {
									var self17 = self15;
									self17.x /= length;
									self17.y /= length;
								}
							}
						}
						if(_this._vertices[i].y < top) {
							if(_this.dirty_vertices) {
								_this.dirty_vertices = false;
								var self18 = _this.local_frame.get_offset();
								self18.x = _this.local_x;
								self18.y = _this.local_y;
								_this.local_frame.set_angleDegrees(_this.local_rotation);
								if(_this.parent_frame != null) {
									var self19 = _this.parent_frame;
									var self20 = self19.get_matrix();
									var m_a2 = self20.a;
									var m_b2 = self20.b;
									var m_c2 = self20.c;
									var m_d2 = self20.d;
									var v2 = _this.local_frame.get_offset();
									var pos_x2 = m_a2 * v2.x + m_c2 * v2.y;
									var pos_y2 = m_b2 * v2.x + m_d2 * v2.y;
									var a2 = _this.parent_frame.get_offset();
									pos_x2 += a2.x;
									pos_y2 += a2.y;
									var _this4 = _this.local_frame;
									var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
									_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
									var self21 = _this.local_frame.get_offset();
									self21.x = pos_x2;
									self21.y = pos_y2;
								}
								while(_this._vertices.length > _this.count) _this._vertices.pop();
								var _g6 = 0;
								var _g7 = _this.count;
								while(_g6 < _g7) {
									var i3 = _g6++;
									if(_this.local_vertices[i3] == null) {
										continue;
									}
									if(_this._vertices[i3] == null) {
										var _this5 = _this._vertices;
										var this3 = new hxmath_math_Vector2Default(0,0);
										_this5[i3] = this3;
									}
									var p1 = _this.local_vertices[i3];
									var self22 = _this.local_frame;
									var m1 = self22.get_matrix();
									var self23 = m1;
									var m_a3 = self23.a;
									var m_b3 = self23.b;
									var m_c3 = self23.c;
									var m_d3 = self23.d;
									var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
									var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
									var self24 = m1;
									var b_x1 = self24.tx;
									var b_y1 = self24.ty;
									var pos_x3 = self_x1;
									var pos_y3 = self_y1;
									pos_x3 += b_x1;
									pos_y3 += b_y1;
									var self25 = _this._vertices[i3];
									self25.x = pos_x3;
									self25.y = pos_y3;
								}
								var _g8 = 0;
								var _g9 = _this.count;
								while(_g8 < _g9) {
									var i4 = _g8++;
									var target1 = _this.sync_pos;
									var self26 = _this._vertices[(i4 + 1) % _this.count];
									var self27 = self26;
									var value2 = self27.x;
									var self28 = target1;
									self28.x = value2;
									var self29 = self26;
									var value3 = self29.y;
									var self30 = target1;
									self30.y = value3;
									var a3 = _this._vertices[i4];
									var self31 = _this.sync_pos;
									self31.x -= a3.x;
									self31.y -= a3.y;
									if(_this._normals[i4] == null) {
										var _this6 = _this._normals;
										var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
										_this6[i4] = this4;
									} else {
										var y1 = _this.sync_pos.x;
										var self32 = _this._normals[i4];
										self32.x = -_this.sync_pos.y;
										self32.y = y1;
									}
									var self33 = _this._normals[i4];
									var self34 = self33;
									var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
									if(length1 > 0.0) {
										var self35 = self33;
										self35.x /= length1;
										self35.y /= length1;
									}
								}
							}
							top = _this._vertices[i].y;
						}
					}
					tmp1 = top;
				}
			}
			tmp = tmp1 <= v.x;
		} else {
			tmp = false;
		}
		if(tmp) {
			var tmp;
			if(r.transformed_rect == null || r._rotation == 0) {
				tmp = r._y + r.ey;
			} else {
				var _this = r.transformed_rect;
				var tmp1;
				if(_this.count != 0) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self = _this.parent_frame;
							var self1 = self.get_matrix();
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x = m_a * v1.x + m_c * v1.y;
							var pos_y = m_b * v1.x + m_d * v1.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
							var self = _this.local_frame.get_offset();
							self.x = pos_x;
							self.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								continue;
							}
							if(_this._vertices[i] == null) {
								var _this1 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
							var p = _this.local_vertices[i];
							var self = _this.local_frame;
							var m = self.get_matrix();
							var self1 = m;
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self2 = m;
							var b_x = self2.tx;
							var b_y = self2.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							var self3 = _this._vertices[i];
							self3.x = pos_x;
							self3.y = pos_y;
						}
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							var target = _this.sync_pos;
							var self = _this._vertices[(i + 1) % _this.count];
							var self1 = self;
							var value = self1.x;
							var self2 = target;
							self2.x = value;
							var self3 = self;
							var value1 = self3.y;
							var self4 = target;
							self4.y = value1;
							var a = _this._vertices[i];
							var self5 = _this.sync_pos;
							self5.x -= a.x;
							self5.y -= a.y;
							if(_this._normals[i] == null) {
								var _this1 = _this._normals;
								var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this1[i] = this1;
							} else {
								var y = _this.sync_pos.x;
								var self6 = _this._normals[i];
								self6.x = -_this.sync_pos.y;
								self6.y = y;
							}
							var self7 = _this._normals[i];
							var self8 = self7;
							var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
							if(length > 0.0) {
								var self9 = self7;
								self9.x /= length;
								self9.y /= length;
							}
						}
					}
					tmp1 = _this._vertices[0] == null;
				} else {
					tmp1 = true;
				}
				if(tmp1) {
					tmp = _this._y;
				} else {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self = _this.local_frame.get_offset();
						self.x = _this.local_x;
						self.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self = _this.parent_frame;
							var self1 = self.get_matrix();
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x = m_a * v1.x + m_c * v1.y;
							var pos_y = m_b * v1.x + m_d * v1.y;
							var a = _this.parent_frame.get_offset();
							pos_x += a.x;
							pos_y += a.y;
							var _this1 = _this.local_frame;
							var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
							var self = _this.local_frame.get_offset();
							self.x = pos_x;
							self.y = pos_y;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							if(_this.local_vertices[i] == null) {
								continue;
							}
							if(_this._vertices[i] == null) {
								var _this1 = _this._vertices;
								var this1 = new hxmath_math_Vector2Default(0,0);
								_this1[i] = this1;
							}
							var p = _this.local_vertices[i];
							var self = _this.local_frame;
							var m = self.get_matrix();
							var self1 = m;
							var m_a = self1.a;
							var m_b = self1.b;
							var m_c = self1.c;
							var m_d = self1.d;
							var self_x = m_a * p.x + m_c * p.y;
							var self_y = m_b * p.x + m_d * p.y;
							var self2 = m;
							var b_x = self2.tx;
							var b_y = self2.ty;
							var pos_x = self_x;
							var pos_y = self_y;
							pos_x += b_x;
							pos_y += b_y;
							var self3 = _this._vertices[i];
							self3.x = pos_x;
							self3.y = pos_y;
						}
						var _g = 0;
						var _g1 = _this.count;
						while(_g < _g1) {
							var i = _g++;
							var target = _this.sync_pos;
							var self = _this._vertices[(i + 1) % _this.count];
							var self1 = self;
							var value = self1.x;
							var self2 = target;
							self2.x = value;
							var self3 = self;
							var value1 = self3.y;
							var self4 = target;
							self4.y = value1;
							var a = _this._vertices[i];
							var self5 = _this.sync_pos;
							self5.x -= a.x;
							self5.y -= a.y;
							if(_this._normals[i] == null) {
								var _this1 = _this._normals;
								var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this1[i] = this1;
							} else {
								var y = _this.sync_pos.x;
								var self6 = _this._normals[i];
								self6.x = -_this.sync_pos.y;
								self6.y = y;
							}
							var self7 = _this._normals[i];
							var self8 = self7;
							var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
							if(length > 0.0) {
								var self9 = self7;
								self9.x /= length;
								self9.y /= length;
							}
						}
					}
					var bottom = _this._vertices[0].y;
					var _g = 1;
					var _g1 = _this.count;
					while(_g < _g1) {
						var i = _g++;
						if(_this.dirty_vertices) {
							_this.dirty_vertices = false;
							var self = _this.local_frame.get_offset();
							self.x = _this.local_x;
							self.y = _this.local_y;
							_this.local_frame.set_angleDegrees(_this.local_rotation);
							if(_this.parent_frame != null) {
								var self1 = _this.parent_frame;
								var self2 = self1.get_matrix();
								var m_a = self2.a;
								var m_b = self2.b;
								var m_c = self2.c;
								var m_d = self2.d;
								var v1 = _this.local_frame.get_offset();
								var pos_x = m_a * v1.x + m_c * v1.y;
								var pos_y = m_b * v1.x + m_d * v1.y;
								var a = _this.parent_frame.get_offset();
								pos_x += a.x;
								pos_y += a.y;
								var _this1 = _this.local_frame;
								var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
								_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
								var self3 = _this.local_frame.get_offset();
								self3.x = pos_x;
								self3.y = pos_y;
							}
							while(_this._vertices.length > _this.count) _this._vertices.pop();
							var _g2 = 0;
							var _g3 = _this.count;
							while(_g2 < _g3) {
								var i1 = _g2++;
								if(_this.local_vertices[i1] == null) {
									continue;
								}
								if(_this._vertices[i1] == null) {
									var _this2 = _this._vertices;
									var this1 = new hxmath_math_Vector2Default(0,0);
									_this2[i1] = this1;
								}
								var p = _this.local_vertices[i1];
								var self4 = _this.local_frame;
								var m = self4.get_matrix();
								var self5 = m;
								var m_a1 = self5.a;
								var m_b1 = self5.b;
								var m_c1 = self5.c;
								var m_d1 = self5.d;
								var self_x = m_a1 * p.x + m_c1 * p.y;
								var self_y = m_b1 * p.x + m_d1 * p.y;
								var self6 = m;
								var b_x = self6.tx;
								var b_y = self6.ty;
								var pos_x1 = self_x;
								var pos_y1 = self_y;
								pos_x1 += b_x;
								pos_y1 += b_y;
								var self7 = _this._vertices[i1];
								self7.x = pos_x1;
								self7.y = pos_y1;
							}
							var _g4 = 0;
							var _g5 = _this.count;
							while(_g4 < _g5) {
								var i2 = _g4++;
								var target = _this.sync_pos;
								var self8 = _this._vertices[(i2 + 1) % _this.count];
								var self9 = self8;
								var value = self9.x;
								var self10 = target;
								self10.x = value;
								var self11 = self8;
								var value1 = self11.y;
								var self12 = target;
								self12.y = value1;
								var a1 = _this._vertices[i2];
								var self13 = _this.sync_pos;
								self13.x -= a1.x;
								self13.y -= a1.y;
								if(_this._normals[i2] == null) {
									var _this3 = _this._normals;
									var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
									_this3[i2] = this2;
								} else {
									var y = _this.sync_pos.x;
									var self14 = _this._normals[i2];
									self14.x = -_this.sync_pos.y;
									self14.y = y;
								}
								var self15 = _this._normals[i2];
								var self16 = self15;
								var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
								if(length > 0.0) {
									var self17 = self15;
									self17.x /= length;
									self17.y /= length;
								}
							}
						}
						if(_this._vertices[i].y > bottom) {
							if(_this.dirty_vertices) {
								_this.dirty_vertices = false;
								var self18 = _this.local_frame.get_offset();
								self18.x = _this.local_x;
								self18.y = _this.local_y;
								_this.local_frame.set_angleDegrees(_this.local_rotation);
								if(_this.parent_frame != null) {
									var self19 = _this.parent_frame;
									var self20 = self19.get_matrix();
									var m_a2 = self20.a;
									var m_b2 = self20.b;
									var m_c2 = self20.c;
									var m_d2 = self20.d;
									var v2 = _this.local_frame.get_offset();
									var pos_x2 = m_a2 * v2.x + m_c2 * v2.y;
									var pos_y2 = m_b2 * v2.x + m_d2 * v2.y;
									var a2 = _this.parent_frame.get_offset();
									pos_x2 += a2.x;
									pos_y2 += a2.y;
									var _this4 = _this.local_frame;
									var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
									_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
									var self21 = _this.local_frame.get_offset();
									self21.x = pos_x2;
									self21.y = pos_y2;
								}
								while(_this._vertices.length > _this.count) _this._vertices.pop();
								var _g6 = 0;
								var _g7 = _this.count;
								while(_g6 < _g7) {
									var i3 = _g6++;
									if(_this.local_vertices[i3] == null) {
										continue;
									}
									if(_this._vertices[i3] == null) {
										var _this5 = _this._vertices;
										var this3 = new hxmath_math_Vector2Default(0,0);
										_this5[i3] = this3;
									}
									var p1 = _this.local_vertices[i3];
									var self22 = _this.local_frame;
									var m1 = self22.get_matrix();
									var self23 = m1;
									var m_a3 = self23.a;
									var m_b3 = self23.b;
									var m_c3 = self23.c;
									var m_d3 = self23.d;
									var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
									var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
									var self24 = m1;
									var b_x1 = self24.tx;
									var b_y1 = self24.ty;
									var pos_x3 = self_x1;
									var pos_y3 = self_y1;
									pos_x3 += b_x1;
									pos_y3 += b_y1;
									var self25 = _this._vertices[i3];
									self25.x = pos_x3;
									self25.y = pos_y3;
								}
								var _g8 = 0;
								var _g9 = _this.count;
								while(_g8 < _g9) {
									var i4 = _g8++;
									var target1 = _this.sync_pos;
									var self26 = _this._vertices[(i4 + 1) % _this.count];
									var self27 = self26;
									var value2 = self27.x;
									var self28 = target1;
									self28.x = value2;
									var self29 = self26;
									var value3 = self29.y;
									var self30 = target1;
									self30.y = value3;
									var a3 = _this._vertices[i4];
									var self31 = _this.sync_pos;
									self31.x -= a3.x;
									self31.y -= a3.y;
									if(_this._normals[i4] == null) {
										var _this6 = _this._normals;
										var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
										_this6[i4] = this4;
									} else {
										var y1 = _this.sync_pos.x;
										var self32 = _this._normals[i4];
										self32.x = -_this.sync_pos.y;
										self32.y = y1;
									}
									var self33 = _this._normals[i4];
									var self34 = self33;
									var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
									if(length1 > 0.0) {
										var self35 = self33;
										self35.x /= length1;
										self35.y /= length1;
									}
								}
							}
							bottom = _this._vertices[i].y;
						}
					}
					tmp = bottom;
				}
			}
			return tmp >= v.y;
		} else {
			return false;
		}
	}
};
echo_util_SAT.circle_contains = function(c,v) {
	var b_x = c._x;
	var b_y = c._y;
	var self = v;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	self_x -= b_x;
	self_y -= b_y;
	return Math.sqrt(self_x * self_x + self_y * self_y) < c.radius;
};
echo_util_SAT.polygon_contains = function(p,v) {
	var inside = false;
	var j = p.count - 1;
	var _g = 0;
	var _g1 = p.count;
	while(_g < _g1) {
		var i = _g++;
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			var self = p.local_frame.get_offset();
			self.x = p.local_x;
			self.y = p.local_y;
			p.local_frame.set_angleDegrees(p.local_rotation);
			if(p.parent_frame != null) {
				var self1 = p.parent_frame;
				var self2 = self1.get_matrix();
				var m_a = self2.a;
				var m_b = self2.b;
				var m_c = self2.c;
				var m_d = self2.d;
				var v1 = p.local_frame.get_offset();
				var pos_x = m_a * v1.x + m_c * v1.y;
				var pos_y = m_b * v1.x + m_d * v1.y;
				var a = p.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var p1 = p.local_frame;
				var x = p.parent_frame.get_angleDegrees() + p.local_frame.get_angleDegrees();
				p1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self3 = p.local_frame.get_offset();
				self3.x = pos_x;
				self3.y = pos_y;
			}
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g2 = 0;
			var _g3 = p.count;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(p.local_vertices[i1] == null) {
					continue;
				}
				if(p._vertices[i1] == null) {
					var p2 = p._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					p2[i1] = this1;
				}
				var p3 = p.local_vertices[i1];
				var self4 = p.local_frame;
				var m = self4.get_matrix();
				var self5 = m;
				var m_a1 = self5.a;
				var m_b1 = self5.b;
				var m_c1 = self5.c;
				var m_d1 = self5.d;
				var self_x = m_a1 * p3.x + m_c1 * p3.y;
				var self_y = m_b1 * p3.x + m_d1 * p3.y;
				var self6 = m;
				var b_x = self6.tx;
				var b_y = self6.ty;
				var pos_x1 = self_x;
				var pos_y1 = self_y;
				pos_x1 += b_x;
				pos_y1 += b_y;
				var self7 = p._vertices[i1];
				self7.x = pos_x1;
				self7.y = pos_y1;
			}
			var _g4 = 0;
			var _g5 = p.count;
			while(_g4 < _g5) {
				var i2 = _g4++;
				var target = p.sync_pos;
				var self8 = p._vertices[(i2 + 1) % p.count];
				var self9 = self8;
				var value = self9.x;
				var self10 = target;
				self10.x = value;
				var self11 = self8;
				var value1 = self11.y;
				var self12 = target;
				self12.y = value1;
				var a1 = p._vertices[i2];
				var self13 = p.sync_pos;
				self13.x -= a1.x;
				self13.y -= a1.y;
				if(p._normals[i2] == null) {
					var p4 = p._normals;
					var this2 = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
					p4[i2] = this2;
				} else {
					var y = p.sync_pos.x;
					var self14 = p._normals[i2];
					self14.x = -p.sync_pos.y;
					self14.y = y;
				}
				var self15 = p._normals[i2];
				var self16 = self15;
				var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
				if(length > 0.0) {
					var self17 = self15;
					self17.x /= length;
					self17.y /= length;
				}
			}
		}
		var v2 = p._vertices;
		var tmp = v2[i].y > v.y != v2[j].y > v.y && v.x < (v2[j].x - v2[i].x) * (v.y - v2[i].y) / (v2[j].y - v2[i].y) + v2[i].x;
		j = i;
	}
	return inside;
};
echo_util_SAT.line_interects_line = function(line1,line2) {
	var d = (line2.get_dy() - line2.get_y()) * (line1.get_dx() - line1.get_x()) - (line2.get_dx() - line2.get_x()) * (line1.get_dy() - line1.get_y());
	if(Math.abs(d) <= 0.00001) {
		return null;
	}
	var ua = ((line2.get_dx() - line2.get_x()) * (line1.get_y() - line2.get_y()) - (line2.get_dy() - line2.get_y()) * (line1.get_x() - line2.get_x())) / d;
	var ub = ((line1.get_dx() - line1.get_x()) * (line1.get_y() - line2.get_y()) - (line1.get_dy() - line1.get_y()) * (line1.get_x() - line2.get_x())) / d;
	if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
		return null;
	}
	var _g = ua;
	var b = line1.start;
	var self = line1.end;
	var self_x = self.x;
	var self_y = self.y;
	self_x -= b.x;
	self_y -= b.y;
	var b_x = self_x;
	var b_y = self_y;
	b_x *= _g;
	b_y *= _g;
	var self = line1.start;
	var hit_x = self.x;
	var hit_y = self.y;
	hit_x += b_x;
	hit_y += b_y;
	var self = line1.start;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	self_x -= hit_x;
	self_y -= hit_y;
	var distance = Math.sqrt(self_x * self_x + self_y * self_y);
	var b = line1.end;
	var self = line1.start;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	self_x -= b.x;
	self_y -= b.y;
	var overlap = Math.sqrt(self_x * self_x + self_y * self_y) - distance;
	var b = line2.end;
	var self = line2.start;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	self_x -= b.x;
	self_y -= b.y;
	var l2l = Math.sqrt(self_x * self_x + self_y * self_y) * (d < 0 ? 1 : -1);
	var x = (line2.get_dy() - line2.get_y()) / l2l;
	var y = -(line2.get_dx() - line2.get_x()) / l2l;
	var self = echo_util_SAT.norm;
	self.x = x;
	self.y = y;
	var normal_x = echo_util_SAT.norm.x;
	var normal_y = echo_util_SAT.norm.y;
	var i = echo_data_IntersectionData._pool.get();
	i.line = null;
	i.shape = null;
	i.distance = distance;
	i.overlap = overlap;
	var self = i.hit;
	self.x = hit_x;
	self.y = hit_y;
	var self = i.normal;
	self.x = normal_x;
	self.y = normal_y;
	i.pooled = false;
	return i;
};
echo_util_SAT.line_interects_rect = function(l,r) {
	if(r.transformed_rect != null && r._rotation != 0) {
		return r.transformed_rect.intersect(l);
	}
	var closest = null;
	var left;
	if(r.transformed_rect == null || r._rotation == 0) {
		left = r._x - r.ex;
	} else {
		var _this = r.transformed_rect;
		var left1;
		if(_this.count != 0) {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			left1 = _this._vertices[0] == null;
		} else {
			left1 = true;
		}
		if(left1) {
			left = _this._x;
		} else {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			var left1 = _this._vertices[0].x;
			var _g = 1;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self1 = _this.parent_frame;
						var self2 = self1.get_matrix();
						var m_a = self2.a;
						var m_b = self2.b;
						var m_c = self2.c;
						var m_d = self2.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self3 = _this.local_frame.get_offset();
						self3.x = pos_x;
						self3.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g2 = 0;
					var _g3 = _this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.local_vertices[i1] == null) {
							continue;
						}
						if(_this._vertices[i1] == null) {
							var _this2 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this2[i1] = this1;
						}
						var p = _this.local_vertices[i1];
						var self4 = _this.local_frame;
						var m = self4.get_matrix();
						var self5 = m;
						var m_a1 = self5.a;
						var m_b1 = self5.b;
						var m_c1 = self5.c;
						var m_d1 = self5.d;
						var self_x = m_a1 * p.x + m_c1 * p.y;
						var self_y = m_b1 * p.x + m_d1 * p.y;
						var self6 = m;
						var b_x = self6.tx;
						var b_y = self6.ty;
						var pos_x1 = self_x;
						var pos_y1 = self_y;
						pos_x1 += b_x;
						pos_y1 += b_y;
						var self7 = _this._vertices[i1];
						self7.x = pos_x1;
						self7.y = pos_y1;
					}
					var _g4 = 0;
					var _g5 = _this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = _this.sync_pos;
						var self8 = _this._vertices[(i2 + 1) % _this.count];
						var self9 = self8;
						var value = self9.x;
						var self10 = target;
						self10.x = value;
						var self11 = self8;
						var value1 = self11.y;
						var self12 = target;
						self12.y = value1;
						var a1 = _this._vertices[i2];
						var self13 = _this.sync_pos;
						self13.x -= a1.x;
						self13.y -= a1.y;
						if(_this._normals[i2] == null) {
							var _this3 = _this._normals;
							var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this3[i2] = this2;
						} else {
							var y = _this.sync_pos.x;
							var self14 = _this._normals[i2];
							self14.x = -_this.sync_pos.y;
							self14.y = y;
						}
						var self15 = _this._normals[i2];
						var self16 = self15;
						var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
						if(length > 0.0) {
							var self17 = self15;
							self17.x /= length;
							self17.y /= length;
						}
					}
				}
				if(_this._vertices[i].x < left1) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self18 = _this.local_frame.get_offset();
						self18.x = _this.local_x;
						self18.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self19 = _this.parent_frame;
							var self20 = self19.get_matrix();
							var m_a2 = self20.a;
							var m_b2 = self20.b;
							var m_c2 = self20.c;
							var m_d2 = self20.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
							var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
							var a2 = _this.parent_frame.get_offset();
							pos_x2 += a2.x;
							pos_y2 += a2.y;
							var _this4 = _this.local_frame;
							var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self21 = _this.local_frame.get_offset();
							self21.x = pos_x2;
							self21.y = pos_y2;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g6 = 0;
						var _g7 = _this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(_this.local_vertices[i3] == null) {
								continue;
							}
							if(_this._vertices[i3] == null) {
								var _this5 = _this._vertices;
								var this3 = new hxmath_math_Vector2Default(0,0);
								_this5[i3] = this3;
							}
							var p1 = _this.local_vertices[i3];
							var self22 = _this.local_frame;
							var m1 = self22.get_matrix();
							var self23 = m1;
							var m_a3 = self23.a;
							var m_b3 = self23.b;
							var m_c3 = self23.c;
							var m_d3 = self23.d;
							var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
							var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
							var self24 = m1;
							var b_x1 = self24.tx;
							var b_y1 = self24.ty;
							var pos_x3 = self_x1;
							var pos_y3 = self_y1;
							pos_x3 += b_x1;
							pos_y3 += b_y1;
							var self25 = _this._vertices[i3];
							self25.x = pos_x3;
							self25.y = pos_y3;
						}
						var _g8 = 0;
						var _g9 = _this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = _this.sync_pos;
							var self26 = _this._vertices[(i4 + 1) % _this.count];
							var self27 = self26;
							var value2 = self27.x;
							var self28 = target1;
							self28.x = value2;
							var self29 = self26;
							var value3 = self29.y;
							var self30 = target1;
							self30.y = value3;
							var a3 = _this._vertices[i4];
							var self31 = _this.sync_pos;
							self31.x -= a3.x;
							self31.y -= a3.y;
							if(_this._normals[i4] == null) {
								var _this6 = _this._normals;
								var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this6[i4] = this4;
							} else {
								var y1 = _this.sync_pos.x;
								var self32 = _this._normals[i4];
								self32.x = -_this.sync_pos.y;
								self32.y = y1;
							}
							var self33 = _this._normals[i4];
							var self34 = self33;
							var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
							if(length1 > 0.0) {
								var self35 = self33;
								self35.x /= length1;
								self35.y /= length1;
							}
						}
					}
					left1 = _this._vertices[i].x;
				}
			}
			left = left1;
		}
	}
	var right;
	if(r.transformed_rect == null || r._rotation == 0) {
		right = r._x + r.ex;
	} else {
		var _this = r.transformed_rect;
		var right1;
		if(_this.count != 0) {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			right1 = _this._vertices[0] == null;
		} else {
			right1 = true;
		}
		if(right1) {
			right = _this._x;
		} else {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			var right1 = _this._vertices[0].x;
			var _g = 1;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self1 = _this.parent_frame;
						var self2 = self1.get_matrix();
						var m_a = self2.a;
						var m_b = self2.b;
						var m_c = self2.c;
						var m_d = self2.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self3 = _this.local_frame.get_offset();
						self3.x = pos_x;
						self3.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g2 = 0;
					var _g3 = _this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.local_vertices[i1] == null) {
							continue;
						}
						if(_this._vertices[i1] == null) {
							var _this2 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this2[i1] = this1;
						}
						var p = _this.local_vertices[i1];
						var self4 = _this.local_frame;
						var m = self4.get_matrix();
						var self5 = m;
						var m_a1 = self5.a;
						var m_b1 = self5.b;
						var m_c1 = self5.c;
						var m_d1 = self5.d;
						var self_x = m_a1 * p.x + m_c1 * p.y;
						var self_y = m_b1 * p.x + m_d1 * p.y;
						var self6 = m;
						var b_x = self6.tx;
						var b_y = self6.ty;
						var pos_x1 = self_x;
						var pos_y1 = self_y;
						pos_x1 += b_x;
						pos_y1 += b_y;
						var self7 = _this._vertices[i1];
						self7.x = pos_x1;
						self7.y = pos_y1;
					}
					var _g4 = 0;
					var _g5 = _this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = _this.sync_pos;
						var self8 = _this._vertices[(i2 + 1) % _this.count];
						var self9 = self8;
						var value = self9.x;
						var self10 = target;
						self10.x = value;
						var self11 = self8;
						var value1 = self11.y;
						var self12 = target;
						self12.y = value1;
						var a1 = _this._vertices[i2];
						var self13 = _this.sync_pos;
						self13.x -= a1.x;
						self13.y -= a1.y;
						if(_this._normals[i2] == null) {
							var _this3 = _this._normals;
							var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this3[i2] = this2;
						} else {
							var y = _this.sync_pos.x;
							var self14 = _this._normals[i2];
							self14.x = -_this.sync_pos.y;
							self14.y = y;
						}
						var self15 = _this._normals[i2];
						var self16 = self15;
						var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
						if(length > 0.0) {
							var self17 = self15;
							self17.x /= length;
							self17.y /= length;
						}
					}
				}
				if(_this._vertices[i].x > right1) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self18 = _this.local_frame.get_offset();
						self18.x = _this.local_x;
						self18.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self19 = _this.parent_frame;
							var self20 = self19.get_matrix();
							var m_a2 = self20.a;
							var m_b2 = self20.b;
							var m_c2 = self20.c;
							var m_d2 = self20.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
							var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
							var a2 = _this.parent_frame.get_offset();
							pos_x2 += a2.x;
							pos_y2 += a2.y;
							var _this4 = _this.local_frame;
							var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self21 = _this.local_frame.get_offset();
							self21.x = pos_x2;
							self21.y = pos_y2;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g6 = 0;
						var _g7 = _this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(_this.local_vertices[i3] == null) {
								continue;
							}
							if(_this._vertices[i3] == null) {
								var _this5 = _this._vertices;
								var this3 = new hxmath_math_Vector2Default(0,0);
								_this5[i3] = this3;
							}
							var p1 = _this.local_vertices[i3];
							var self22 = _this.local_frame;
							var m1 = self22.get_matrix();
							var self23 = m1;
							var m_a3 = self23.a;
							var m_b3 = self23.b;
							var m_c3 = self23.c;
							var m_d3 = self23.d;
							var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
							var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
							var self24 = m1;
							var b_x1 = self24.tx;
							var b_y1 = self24.ty;
							var pos_x3 = self_x1;
							var pos_y3 = self_y1;
							pos_x3 += b_x1;
							pos_y3 += b_y1;
							var self25 = _this._vertices[i3];
							self25.x = pos_x3;
							self25.y = pos_y3;
						}
						var _g8 = 0;
						var _g9 = _this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = _this.sync_pos;
							var self26 = _this._vertices[(i4 + 1) % _this.count];
							var self27 = self26;
							var value2 = self27.x;
							var self28 = target1;
							self28.x = value2;
							var self29 = self26;
							var value3 = self29.y;
							var self30 = target1;
							self30.y = value3;
							var a3 = _this._vertices[i4];
							var self31 = _this.sync_pos;
							self31.x -= a3.x;
							self31.y -= a3.y;
							if(_this._normals[i4] == null) {
								var _this6 = _this._normals;
								var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this6[i4] = this4;
							} else {
								var y1 = _this.sync_pos.x;
								var self32 = _this._normals[i4];
								self32.x = -_this.sync_pos.y;
								self32.y = y1;
							}
							var self33 = _this._normals[i4];
							var self34 = self33;
							var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
							if(length1 > 0.0) {
								var self35 = self33;
								self35.x /= length1;
								self35.y /= length1;
							}
						}
					}
					right1 = _this._vertices[i].x;
				}
			}
			right = right1;
		}
	}
	var top;
	if(r.transformed_rect == null || r._rotation == 0) {
		top = r._y - r.ey;
	} else {
		var _this = r.transformed_rect;
		var top1;
		if(_this.count != 0) {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			top1 = _this._vertices[0] == null;
		} else {
			top1 = true;
		}
		if(top1) {
			top = _this._y;
		} else {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			var top1 = _this._vertices[0].y;
			var _g = 1;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self1 = _this.parent_frame;
						var self2 = self1.get_matrix();
						var m_a = self2.a;
						var m_b = self2.b;
						var m_c = self2.c;
						var m_d = self2.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self3 = _this.local_frame.get_offset();
						self3.x = pos_x;
						self3.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g2 = 0;
					var _g3 = _this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.local_vertices[i1] == null) {
							continue;
						}
						if(_this._vertices[i1] == null) {
							var _this2 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this2[i1] = this1;
						}
						var p = _this.local_vertices[i1];
						var self4 = _this.local_frame;
						var m = self4.get_matrix();
						var self5 = m;
						var m_a1 = self5.a;
						var m_b1 = self5.b;
						var m_c1 = self5.c;
						var m_d1 = self5.d;
						var self_x = m_a1 * p.x + m_c1 * p.y;
						var self_y = m_b1 * p.x + m_d1 * p.y;
						var self6 = m;
						var b_x = self6.tx;
						var b_y = self6.ty;
						var pos_x1 = self_x;
						var pos_y1 = self_y;
						pos_x1 += b_x;
						pos_y1 += b_y;
						var self7 = _this._vertices[i1];
						self7.x = pos_x1;
						self7.y = pos_y1;
					}
					var _g4 = 0;
					var _g5 = _this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = _this.sync_pos;
						var self8 = _this._vertices[(i2 + 1) % _this.count];
						var self9 = self8;
						var value = self9.x;
						var self10 = target;
						self10.x = value;
						var self11 = self8;
						var value1 = self11.y;
						var self12 = target;
						self12.y = value1;
						var a1 = _this._vertices[i2];
						var self13 = _this.sync_pos;
						self13.x -= a1.x;
						self13.y -= a1.y;
						if(_this._normals[i2] == null) {
							var _this3 = _this._normals;
							var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this3[i2] = this2;
						} else {
							var y = _this.sync_pos.x;
							var self14 = _this._normals[i2];
							self14.x = -_this.sync_pos.y;
							self14.y = y;
						}
						var self15 = _this._normals[i2];
						var self16 = self15;
						var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
						if(length > 0.0) {
							var self17 = self15;
							self17.x /= length;
							self17.y /= length;
						}
					}
				}
				if(_this._vertices[i].y < top1) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self18 = _this.local_frame.get_offset();
						self18.x = _this.local_x;
						self18.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self19 = _this.parent_frame;
							var self20 = self19.get_matrix();
							var m_a2 = self20.a;
							var m_b2 = self20.b;
							var m_c2 = self20.c;
							var m_d2 = self20.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
							var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
							var a2 = _this.parent_frame.get_offset();
							pos_x2 += a2.x;
							pos_y2 += a2.y;
							var _this4 = _this.local_frame;
							var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self21 = _this.local_frame.get_offset();
							self21.x = pos_x2;
							self21.y = pos_y2;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g6 = 0;
						var _g7 = _this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(_this.local_vertices[i3] == null) {
								continue;
							}
							if(_this._vertices[i3] == null) {
								var _this5 = _this._vertices;
								var this3 = new hxmath_math_Vector2Default(0,0);
								_this5[i3] = this3;
							}
							var p1 = _this.local_vertices[i3];
							var self22 = _this.local_frame;
							var m1 = self22.get_matrix();
							var self23 = m1;
							var m_a3 = self23.a;
							var m_b3 = self23.b;
							var m_c3 = self23.c;
							var m_d3 = self23.d;
							var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
							var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
							var self24 = m1;
							var b_x1 = self24.tx;
							var b_y1 = self24.ty;
							var pos_x3 = self_x1;
							var pos_y3 = self_y1;
							pos_x3 += b_x1;
							pos_y3 += b_y1;
							var self25 = _this._vertices[i3];
							self25.x = pos_x3;
							self25.y = pos_y3;
						}
						var _g8 = 0;
						var _g9 = _this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = _this.sync_pos;
							var self26 = _this._vertices[(i4 + 1) % _this.count];
							var self27 = self26;
							var value2 = self27.x;
							var self28 = target1;
							self28.x = value2;
							var self29 = self26;
							var value3 = self29.y;
							var self30 = target1;
							self30.y = value3;
							var a3 = _this._vertices[i4];
							var self31 = _this.sync_pos;
							self31.x -= a3.x;
							self31.y -= a3.y;
							if(_this._normals[i4] == null) {
								var _this6 = _this._normals;
								var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this6[i4] = this4;
							} else {
								var y1 = _this.sync_pos.x;
								var self32 = _this._normals[i4];
								self32.x = -_this.sync_pos.y;
								self32.y = y1;
							}
							var self33 = _this._normals[i4];
							var self34 = self33;
							var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
							if(length1 > 0.0) {
								var self35 = self33;
								self35.x /= length1;
								self35.y /= length1;
							}
						}
					}
					top1 = _this._vertices[i].y;
				}
			}
			top = top1;
		}
	}
	var bottom;
	if(r.transformed_rect == null || r._rotation == 0) {
		bottom = r._y + r.ey;
	} else {
		var _this = r.transformed_rect;
		var bottom1;
		if(_this.count != 0) {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			bottom1 = _this._vertices[0] == null;
		} else {
			bottom1 = true;
		}
		if(bottom1) {
			bottom = _this._y;
		} else {
			if(_this.dirty_vertices) {
				_this.dirty_vertices = false;
				var self = _this.local_frame.get_offset();
				self.x = _this.local_x;
				self.y = _this.local_y;
				_this.local_frame.set_angleDegrees(_this.local_rotation);
				if(_this.parent_frame != null) {
					var self = _this.parent_frame;
					var self1 = self.get_matrix();
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var v = _this.local_frame.get_offset();
					var pos_x = m_a * v.x + m_c * v.y;
					var pos_y = m_b * v.x + m_d * v.y;
					var a = _this.parent_frame.get_offset();
					pos_x += a.x;
					pos_y += a.y;
					var _this1 = _this.local_frame;
					var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
					_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
					var self = _this.local_frame.get_offset();
					self.x = pos_x;
					self.y = pos_y;
				}
				while(_this._vertices.length > _this.count) _this._vertices.pop();
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					if(_this.local_vertices[i] == null) {
						continue;
					}
					if(_this._vertices[i] == null) {
						var _this1 = _this._vertices;
						var this1 = new hxmath_math_Vector2Default(0,0);
						_this1[i] = this1;
					}
					var p = _this.local_vertices[i];
					var self = _this.local_frame;
					var m = self.get_matrix();
					var self1 = m;
					var m_a = self1.a;
					var m_b = self1.b;
					var m_c = self1.c;
					var m_d = self1.d;
					var self_x = m_a * p.x + m_c * p.y;
					var self_y = m_b * p.x + m_d * p.y;
					var self2 = m;
					var b_x = self2.tx;
					var b_y = self2.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					var self3 = _this._vertices[i];
					self3.x = pos_x;
					self3.y = pos_y;
				}
				var _g = 0;
				var _g1 = _this.count;
				while(_g < _g1) {
					var i = _g++;
					var target = _this.sync_pos;
					var self = _this._vertices[(i + 1) % _this.count];
					var self1 = self;
					var value = self1.x;
					var self2 = target;
					self2.x = value;
					var self3 = self;
					var value1 = self3.y;
					var self4 = target;
					self4.y = value1;
					var a = _this._vertices[i];
					var self5 = _this.sync_pos;
					self5.x -= a.x;
					self5.y -= a.y;
					if(_this._normals[i] == null) {
						var _this1 = _this._normals;
						var this1 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
						_this1[i] = this1;
					} else {
						var y = _this.sync_pos.x;
						var self6 = _this._normals[i];
						self6.x = -_this.sync_pos.y;
						self6.y = y;
					}
					var self7 = _this._normals[i];
					var self8 = self7;
					var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
					if(length > 0.0) {
						var self9 = self7;
						self9.x /= length;
						self9.y /= length;
					}
				}
			}
			var bottom1 = _this._vertices[0].y;
			var _g = 1;
			var _g1 = _this.count;
			while(_g < _g1) {
				var i = _g++;
				if(_this.dirty_vertices) {
					_this.dirty_vertices = false;
					var self = _this.local_frame.get_offset();
					self.x = _this.local_x;
					self.y = _this.local_y;
					_this.local_frame.set_angleDegrees(_this.local_rotation);
					if(_this.parent_frame != null) {
						var self1 = _this.parent_frame;
						var self2 = self1.get_matrix();
						var m_a = self2.a;
						var m_b = self2.b;
						var m_c = self2.c;
						var m_d = self2.d;
						var v = _this.local_frame.get_offset();
						var pos_x = m_a * v.x + m_c * v.y;
						var pos_y = m_b * v.x + m_d * v.y;
						var a = _this.parent_frame.get_offset();
						pos_x += a.x;
						pos_y += a.y;
						var _this1 = _this.local_frame;
						var x = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
						_this1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
						var self3 = _this.local_frame.get_offset();
						self3.x = pos_x;
						self3.y = pos_y;
					}
					while(_this._vertices.length > _this.count) _this._vertices.pop();
					var _g2 = 0;
					var _g3 = _this.count;
					while(_g2 < _g3) {
						var i1 = _g2++;
						if(_this.local_vertices[i1] == null) {
							continue;
						}
						if(_this._vertices[i1] == null) {
							var _this2 = _this._vertices;
							var this1 = new hxmath_math_Vector2Default(0,0);
							_this2[i1] = this1;
						}
						var p = _this.local_vertices[i1];
						var self4 = _this.local_frame;
						var m = self4.get_matrix();
						var self5 = m;
						var m_a1 = self5.a;
						var m_b1 = self5.b;
						var m_c1 = self5.c;
						var m_d1 = self5.d;
						var self_x = m_a1 * p.x + m_c1 * p.y;
						var self_y = m_b1 * p.x + m_d1 * p.y;
						var self6 = m;
						var b_x = self6.tx;
						var b_y = self6.ty;
						var pos_x1 = self_x;
						var pos_y1 = self_y;
						pos_x1 += b_x;
						pos_y1 += b_y;
						var self7 = _this._vertices[i1];
						self7.x = pos_x1;
						self7.y = pos_y1;
					}
					var _g4 = 0;
					var _g5 = _this.count;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var target = _this.sync_pos;
						var self8 = _this._vertices[(i2 + 1) % _this.count];
						var self9 = self8;
						var value = self9.x;
						var self10 = target;
						self10.x = value;
						var self11 = self8;
						var value1 = self11.y;
						var self12 = target;
						self12.y = value1;
						var a1 = _this._vertices[i2];
						var self13 = _this.sync_pos;
						self13.x -= a1.x;
						self13.y -= a1.y;
						if(_this._normals[i2] == null) {
							var _this3 = _this._normals;
							var this2 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
							_this3[i2] = this2;
						} else {
							var y = _this.sync_pos.x;
							var self14 = _this._normals[i2];
							self14.x = -_this.sync_pos.y;
							self14.y = y;
						}
						var self15 = _this._normals[i2];
						var self16 = self15;
						var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
						if(length > 0.0) {
							var self17 = self15;
							self17.x /= length;
							self17.y /= length;
						}
					}
				}
				if(_this._vertices[i].y > bottom1) {
					if(_this.dirty_vertices) {
						_this.dirty_vertices = false;
						var self18 = _this.local_frame.get_offset();
						self18.x = _this.local_x;
						self18.y = _this.local_y;
						_this.local_frame.set_angleDegrees(_this.local_rotation);
						if(_this.parent_frame != null) {
							var self19 = _this.parent_frame;
							var self20 = self19.get_matrix();
							var m_a2 = self20.a;
							var m_b2 = self20.b;
							var m_c2 = self20.c;
							var m_d2 = self20.d;
							var v1 = _this.local_frame.get_offset();
							var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
							var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
							var a2 = _this.parent_frame.get_offset();
							pos_x2 += a2.x;
							pos_y2 += a2.y;
							var _this4 = _this.local_frame;
							var x1 = _this.parent_frame.get_angleDegrees() + _this.local_frame.get_angleDegrees();
							_this4.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
							var self21 = _this.local_frame.get_offset();
							self21.x = pos_x2;
							self21.y = pos_y2;
						}
						while(_this._vertices.length > _this.count) _this._vertices.pop();
						var _g6 = 0;
						var _g7 = _this.count;
						while(_g6 < _g7) {
							var i3 = _g6++;
							if(_this.local_vertices[i3] == null) {
								continue;
							}
							if(_this._vertices[i3] == null) {
								var _this5 = _this._vertices;
								var this3 = new hxmath_math_Vector2Default(0,0);
								_this5[i3] = this3;
							}
							var p1 = _this.local_vertices[i3];
							var self22 = _this.local_frame;
							var m1 = self22.get_matrix();
							var self23 = m1;
							var m_a3 = self23.a;
							var m_b3 = self23.b;
							var m_c3 = self23.c;
							var m_d3 = self23.d;
							var self_x1 = m_a3 * p1.x + m_c3 * p1.y;
							var self_y1 = m_b3 * p1.x + m_d3 * p1.y;
							var self24 = m1;
							var b_x1 = self24.tx;
							var b_y1 = self24.ty;
							var pos_x3 = self_x1;
							var pos_y3 = self_y1;
							pos_x3 += b_x1;
							pos_y3 += b_y1;
							var self25 = _this._vertices[i3];
							self25.x = pos_x3;
							self25.y = pos_y3;
						}
						var _g8 = 0;
						var _g9 = _this.count;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var target1 = _this.sync_pos;
							var self26 = _this._vertices[(i4 + 1) % _this.count];
							var self27 = self26;
							var value2 = self27.x;
							var self28 = target1;
							self28.x = value2;
							var self29 = self26;
							var value3 = self29.y;
							var self30 = target1;
							self30.y = value3;
							var a3 = _this._vertices[i4];
							var self31 = _this.sync_pos;
							self31.x -= a3.x;
							self31.y -= a3.y;
							if(_this._normals[i4] == null) {
								var _this6 = _this._normals;
								var this4 = new hxmath_math_Vector2Default(-_this.sync_pos.y,_this.sync_pos.x);
								_this6[i4] = this4;
							} else {
								var y1 = _this.sync_pos.x;
								var self32 = _this._normals[i4];
								self32.x = -_this.sync_pos.y;
								self32.y = y1;
							}
							var self33 = _this._normals[i4];
							var self34 = self33;
							var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
							if(length1 > 0.0) {
								var self35 = self33;
								self35.x /= length1;
								self35.y /= length1;
							}
						}
					}
					bottom1 = _this._vertices[i].y;
				}
			}
			bottom = bottom1;
		}
	}
	var x = left;
	var y = top;
	var dx = right;
	var dy = top;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var line = echo_Line._pool.get();
	var x1 = x;
	var y1 = y;
	var dx1 = dx;
	var dy1 = dy;
	if(dy1 == null) {
		dy1 = 1;
	}
	if(dx1 == null) {
		dx1 = 1;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var self = line.start;
	self.x = x1;
	self.y = y1;
	var self = line.end;
	self.x = dx1;
	self.y = dy1;
	line.pooled = false;
	var line1 = line;
	var d = (line1.get_dy() - line1.get_y()) * (l.get_dx() - l.get_x()) - (line1.get_dx() - line1.get_x()) * (l.get_dy() - l.get_y());
	var result;
	if(Math.abs(d) <= 0.00001) {
		result = null;
	} else {
		var ua = ((line1.get_dx() - line1.get_x()) * (l.get_y() - line1.get_y()) - (line1.get_dy() - line1.get_y()) * (l.get_x() - line1.get_x())) / d;
		var ub = ((l.get_dx() - l.get_x()) * (l.get_y() - line1.get_y()) - (l.get_dy() - l.get_y()) * (l.get_x() - line1.get_x())) / d;
		if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
			result = null;
		} else {
			var _g = ua;
			var b = l.start;
			var self = l.end;
			var self_x = self.x;
			var self_y = self.y;
			self_x -= b.x;
			self_y -= b.y;
			var b_x = self_x;
			var b_y = self_y;
			b_x *= _g;
			b_y *= _g;
			var self = l.start;
			var hit_x = self.x;
			var hit_y = self.y;
			hit_x += b_x;
			hit_y += b_y;
			var self = l.start;
			var self1 = self;
			var self_x = self1.x;
			var self_y = self1.y;
			self_x -= hit_x;
			self_y -= hit_y;
			var distance = Math.sqrt(self_x * self_x + self_y * self_y);
			var b = l.end;
			var self = l.start;
			var self1 = self;
			var self_x = self1.x;
			var self_y = self1.y;
			self_x -= b.x;
			self_y -= b.y;
			var overlap = Math.sqrt(self_x * self_x + self_y * self_y) - distance;
			var b = line1.end;
			var self = line1.start;
			var self1 = self;
			var self_x = self1.x;
			var self_y = self1.y;
			self_x -= b.x;
			self_y -= b.y;
			var l2l = Math.sqrt(self_x * self_x + self_y * self_y) * (d < 0 ? 1 : -1);
			var x = (line1.get_dy() - line1.get_y()) / l2l;
			var y = -(line1.get_dx() - line1.get_x()) / l2l;
			var self = echo_util_SAT.norm;
			self.x = x;
			self.y = y;
			var normal_x = echo_util_SAT.norm.x;
			var normal_y = echo_util_SAT.norm.y;
			var i = echo_data_IntersectionData._pool.get();
			i.line = null;
			i.shape = null;
			i.distance = distance;
			i.overlap = overlap;
			var self = i.hit;
			self.x = hit_x;
			self.y = hit_y;
			var self = i.normal;
			self.x = normal_x;
			self.y = normal_y;
			i.pooled = false;
			result = i;
		}
	}
	if(result != null) {
		closest = result;
	}
	var x = right;
	var y = top;
	var dx = right;
	var dy = bottom;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var self = line1.start;
	self.x = x;
	self.y = y;
	var self = line1.end;
	self.x = dx;
	self.y = dy;
	var d = (line1.get_dy() - line1.get_y()) * (l.get_dx() - l.get_x()) - (line1.get_dx() - line1.get_x()) * (l.get_dy() - l.get_y());
	if(Math.abs(d) <= 0.00001) {
		result = null;
	} else {
		var ua = ((line1.get_dx() - line1.get_x()) * (l.get_y() - line1.get_y()) - (line1.get_dy() - line1.get_y()) * (l.get_x() - line1.get_x())) / d;
		var ub = ((l.get_dx() - l.get_x()) * (l.get_y() - line1.get_y()) - (l.get_dy() - l.get_y()) * (l.get_x() - line1.get_x())) / d;
		if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
			result = null;
		} else {
			var _g = ua;
			var b = l.start;
			var self = l.end;
			var self_x = self.x;
			var self_y = self.y;
			self_x -= b.x;
			self_y -= b.y;
			var b_x = self_x;
			var b_y = self_y;
			b_x *= _g;
			b_y *= _g;
			var self = l.start;
			var hit_x = self.x;
			var hit_y = self.y;
			hit_x += b_x;
			hit_y += b_y;
			var self = l.start;
			var self1 = self;
			var self_x = self1.x;
			var self_y = self1.y;
			self_x -= hit_x;
			self_y -= hit_y;
			var distance = Math.sqrt(self_x * self_x + self_y * self_y);
			var b = l.end;
			var self = l.start;
			var self1 = self;
			var self_x = self1.x;
			var self_y = self1.y;
			self_x -= b.x;
			self_y -= b.y;
			var overlap = Math.sqrt(self_x * self_x + self_y * self_y) - distance;
			var b = line1.end;
			var self = line1.start;
			var self1 = self;
			var self_x = self1.x;
			var self_y = self1.y;
			self_x -= b.x;
			self_y -= b.y;
			var l2l = Math.sqrt(self_x * self_x + self_y * self_y) * (d < 0 ? 1 : -1);
			var x = (line1.get_dy() - line1.get_y()) / l2l;
			var y = -(line1.get_dx() - line1.get_x()) / l2l;
			var self = echo_util_SAT.norm;
			self.x = x;
			self.y = y;
			var normal_x = echo_util_SAT.norm.x;
			var normal_y = echo_util_SAT.norm.y;
			var i = echo_data_IntersectionData._pool.get();
			i.line = null;
			i.shape = null;
			i.distance = distance;
			i.overlap = overlap;
			var self = i.hit;
			self.x = hit_x;
			self.y = hit_y;
			var self = i.normal;
			self.x = normal_x;
			self.y = normal_y;
			i.pooled = false;
			result = i;
		}
	}
	if(result != null && (closest == null || closest.distance > result.distance)) {
		closest = result;
	}
	var x = right;
	var y = bottom;
	var dx = left;
	var dy = bottom;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var self = line1.start;
	self.x = x;
	self.y = y;
	var self = line1.end;
	self.x = dx;
	self.y = dy;
	var d = (line1.get_dy() - line1.get_y()) * (l.get_dx() - l.get_x()) - (line1.get_dx() - line1.get_x()) * (l.get_dy() - l.get_y());
	if(Math.abs(d) <= 0.00001) {
		result = null;
	} else {
		var ua = ((line1.get_dx() - line1.get_x()) * (l.get_y() - line1.get_y()) - (line1.get_dy() - line1.get_y()) * (l.get_x() - line1.get_x())) / d;
		var ub = ((l.get_dx() - l.get_x()) * (l.get_y() - line1.get_y()) - (l.get_dy() - l.get_y()) * (l.get_x() - line1.get_x())) / d;
		if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
			result = null;
		} else {
			var _g = ua;
			var b = l.start;
			var self = l.end;
			var self_x = self.x;
			var self_y = self.y;
			self_x -= b.x;
			self_y -= b.y;
			var b_x = self_x;
			var b_y = self_y;
			b_x *= _g;
			b_y *= _g;
			var self = l.start;
			var hit_x = self.x;
			var hit_y = self.y;
			hit_x += b_x;
			hit_y += b_y;
			var self = l.start;
			var self1 = self;
			var self_x = self1.x;
			var self_y = self1.y;
			self_x -= hit_x;
			self_y -= hit_y;
			var distance = Math.sqrt(self_x * self_x + self_y * self_y);
			var b = l.end;
			var self = l.start;
			var self1 = self;
			var self_x = self1.x;
			var self_y = self1.y;
			self_x -= b.x;
			self_y -= b.y;
			var overlap = Math.sqrt(self_x * self_x + self_y * self_y) - distance;
			var b = line1.end;
			var self = line1.start;
			var self1 = self;
			var self_x = self1.x;
			var self_y = self1.y;
			self_x -= b.x;
			self_y -= b.y;
			var l2l = Math.sqrt(self_x * self_x + self_y * self_y) * (d < 0 ? 1 : -1);
			var x = (line1.get_dy() - line1.get_y()) / l2l;
			var y = -(line1.get_dx() - line1.get_x()) / l2l;
			var self = echo_util_SAT.norm;
			self.x = x;
			self.y = y;
			var normal_x = echo_util_SAT.norm.x;
			var normal_y = echo_util_SAT.norm.y;
			var i = echo_data_IntersectionData._pool.get();
			i.line = null;
			i.shape = null;
			i.distance = distance;
			i.overlap = overlap;
			var self = i.hit;
			self.x = hit_x;
			self.y = hit_y;
			var self = i.normal;
			self.x = normal_x;
			self.y = normal_y;
			i.pooled = false;
			result = i;
		}
	}
	if(result != null && (closest == null || closest.distance > result.distance)) {
		closest = result;
	}
	var x = left;
	var y = bottom;
	var dx = left;
	var dy = top;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var self = line1.start;
	self.x = x;
	self.y = y;
	var self = line1.end;
	self.x = dx;
	self.y = dy;
	var d = (line1.get_dy() - line1.get_y()) * (l.get_dx() - l.get_x()) - (line1.get_dx() - line1.get_x()) * (l.get_dy() - l.get_y());
	if(Math.abs(d) <= 0.00001) {
		result = null;
	} else {
		var ua = ((line1.get_dx() - line1.get_x()) * (l.get_y() - line1.get_y()) - (line1.get_dy() - line1.get_y()) * (l.get_x() - line1.get_x())) / d;
		var ub = ((l.get_dx() - l.get_x()) * (l.get_y() - line1.get_y()) - (l.get_dy() - l.get_y()) * (l.get_x() - line1.get_x())) / d;
		if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
			result = null;
		} else {
			var _g = ua;
			var b = l.start;
			var self = l.end;
			var self_x = self.x;
			var self_y = self.y;
			self_x -= b.x;
			self_y -= b.y;
			var b_x = self_x;
			var b_y = self_y;
			b_x *= _g;
			b_y *= _g;
			var self = l.start;
			var hit_x = self.x;
			var hit_y = self.y;
			hit_x += b_x;
			hit_y += b_y;
			var self = l.start;
			var self1 = self;
			var self_x = self1.x;
			var self_y = self1.y;
			self_x -= hit_x;
			self_y -= hit_y;
			var distance = Math.sqrt(self_x * self_x + self_y * self_y);
			var b = l.end;
			var self = l.start;
			var self1 = self;
			var self_x = self1.x;
			var self_y = self1.y;
			self_x -= b.x;
			self_y -= b.y;
			var overlap = Math.sqrt(self_x * self_x + self_y * self_y) - distance;
			var b = line1.end;
			var self = line1.start;
			var self1 = self;
			var self_x = self1.x;
			var self_y = self1.y;
			self_x -= b.x;
			self_y -= b.y;
			var l2l = Math.sqrt(self_x * self_x + self_y * self_y) * (d < 0 ? 1 : -1);
			var x = (line1.get_dy() - line1.get_y()) / l2l;
			var y = -(line1.get_dx() - line1.get_x()) / l2l;
			var self = echo_util_SAT.norm;
			self.x = x;
			self.y = y;
			var normal_x = echo_util_SAT.norm.x;
			var normal_y = echo_util_SAT.norm.y;
			var i = echo_data_IntersectionData._pool.get();
			i.line = null;
			i.shape = null;
			i.distance = distance;
			i.overlap = overlap;
			var self = i.hit;
			self.x = hit_x;
			self.y = hit_y;
			var self = i.normal;
			self.x = normal_x;
			self.y = normal_y;
			i.pooled = false;
			result = i;
		}
	}
	if(result != null && (closest == null || closest.distance > result.distance)) {
		closest = result;
	}
	if(closest != null) {
		closest.line = l;
		closest.shape = r;
	}
	return closest;
};
echo_util_SAT.line_intersects_circle = function(l,c) {
	var b = l.start;
	var self = l.end;
	var d_x = self.x;
	var d_y = self.y;
	d_x -= b.x;
	d_y -= b.y;
	var b_x = c._x;
	var b_y = c._y;
	var self = l.start;
	var f_x = self.x;
	var f_y = self.y;
	f_x -= b_x;
	f_y -= b_y;
	var a = d_x * d_x + d_y * d_y;
	var b = 2 * (f_x * d_x + f_y * d_y);
	var e = f_x * f_x + f_y * f_y - c.radius * c.radius;
	var discriminant = b * b - 4 * a * e;
	if(discriminant < 0) {
		return null;
	}
	discriminant = Math.sqrt(discriminant);
	var t1 = (-b - discriminant) / (2 * a);
	var t2 = (-b + discriminant) / (2 * a);
	if(t1 >= 0 && t1 <= 1) {
		var _g = t1;
		var b = l.end;
		var self = l.start;
		var self_x = self.x;
		var self_y = self.y;
		self_x -= b.x;
		self_y -= b.y;
		var b_x = self_x;
		var b_y = self_y;
		b_x *= _g;
		b_y *= _g;
		var self = l.start;
		var hit_x = self.x;
		var hit_y = self.y;
		hit_x -= b_x;
		hit_y -= b_y;
		var self = l.start;
		var self1 = self;
		var self_x = self1.x;
		var self_y = self1.y;
		self_x -= hit_x;
		self_y -= hit_y;
		var distance = Math.sqrt(self_x * self_x + self_y * self_y);
		var b = l.end;
		var self = l.start;
		var self1 = self;
		var self_x = self1.x;
		var self_y = self1.y;
		self_x -= b.x;
		self_y -= b.y;
		var overlap = Math.sqrt(self_x * self_x + self_y * self_y) - distance;
		var self = echo_util_SAT.norm;
		self.x = hit_x - c._x;
		self.y = hit_y - c._y;
		var s = c.radius;
		var self1 = self;
		self1.x /= s;
		self1.y /= s;
		var normal_x = echo_util_SAT.norm.x;
		var normal_y = echo_util_SAT.norm.y;
		var i = echo_data_IntersectionData._pool.get();
		i.line = null;
		i.shape = null;
		i.distance = distance;
		i.overlap = overlap;
		var self = i.hit;
		self.x = hit_x;
		self.y = hit_y;
		var self = i.normal;
		self.x = normal_x;
		self.y = normal_y;
		i.pooled = false;
		var i1 = i;
		i1.line = l;
		i1.shape = c;
		return i1;
	}
	if(t2 >= 0 && t2 <= 1) {
		var _g = t2;
		var b = l.end;
		var self = l.start;
		var self_x = self.x;
		var self_y = self.y;
		self_x -= b.x;
		self_y -= b.y;
		var b_x = self_x;
		var b_y = self_y;
		b_x *= _g;
		b_y *= _g;
		var self = l.start;
		var hit_x = self.x;
		var hit_y = self.y;
		hit_x -= b_x;
		hit_y -= b_y;
		var self = l.start;
		var self1 = self;
		var self_x = self1.x;
		var self_y = self1.y;
		self_x -= hit_x;
		self_y -= hit_y;
		var distance = Math.sqrt(self_x * self_x + self_y * self_y);
		var b = l.end;
		var self = l.start;
		var self1 = self;
		var self_x = self1.x;
		var self_y = self1.y;
		self_x -= b.x;
		self_y -= b.y;
		var overlap = Math.sqrt(self_x * self_x + self_y * self_y) - distance;
		var self = echo_util_SAT.norm;
		self.x = hit_x - c._x;
		self.y = hit_y - c._y;
		var self1 = self;
		self1.x = -self1.x;
		self1.y = -self1.y;
		var s = c.radius;
		var self = self1;
		self.x /= s;
		self.y /= s;
		var normal_x = echo_util_SAT.norm.x;
		var normal_y = echo_util_SAT.norm.y;
		var i = echo_data_IntersectionData._pool.get();
		i.line = null;
		i.shape = null;
		i.distance = distance;
		i.overlap = overlap;
		var self = i.hit;
		self.x = hit_x;
		self.y = hit_y;
		var self = i.normal;
		self.x = normal_x;
		self.y = normal_y;
		i.pooled = false;
		var i1 = i;
		i1.line = l;
		i1.shape = c;
		return i1;
	}
	return null;
};
echo_util_SAT.line_intersects_polygon = function(l,p) {
	var closest = null;
	var line = echo_Line._pool.get();
	var x = 0;
	var y = 0;
	var dx = 1;
	var dy = 1;
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var self = line.start;
	self.x = x;
	self.y = y;
	var self = line.end;
	self.x = dx;
	self.y = dy;
	line.pooled = false;
	var line1 = line;
	var _g = 0;
	var _g1 = p.count;
	while(_g < _g1) {
		var i = _g++;
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			var self = p.local_frame.get_offset();
			self.x = p.local_x;
			self.y = p.local_y;
			p.local_frame.set_angleDegrees(p.local_rotation);
			if(p.parent_frame != null) {
				var self1 = p.parent_frame;
				var self2 = self1.get_matrix();
				var m_a = self2.a;
				var m_b = self2.b;
				var m_c = self2.c;
				var m_d = self2.d;
				var v = p.local_frame.get_offset();
				var pos_x = m_a * v.x + m_c * v.y;
				var pos_y = m_b * v.x + m_d * v.y;
				var a = p.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var p1 = p.local_frame;
				var x = p.parent_frame.get_angleDegrees() + p.local_frame.get_angleDegrees();
				p1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self3 = p.local_frame.get_offset();
				self3.x = pos_x;
				self3.y = pos_y;
			}
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g2 = 0;
			var _g3 = p.count;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(p.local_vertices[i1] == null) {
					continue;
				}
				if(p._vertices[i1] == null) {
					var p2 = p._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					p2[i1] = this1;
				}
				var p3 = p.local_vertices[i1];
				var self4 = p.local_frame;
				var m = self4.get_matrix();
				var self5 = m;
				var m_a1 = self5.a;
				var m_b1 = self5.b;
				var m_c1 = self5.c;
				var m_d1 = self5.d;
				var self_x = m_a1 * p3.x + m_c1 * p3.y;
				var self_y = m_b1 * p3.x + m_d1 * p3.y;
				var self6 = m;
				var b_x = self6.tx;
				var b_y = self6.ty;
				var pos_x1 = self_x;
				var pos_y1 = self_y;
				pos_x1 += b_x;
				pos_y1 += b_y;
				var self7 = p._vertices[i1];
				self7.x = pos_x1;
				self7.y = pos_y1;
			}
			var _g4 = 0;
			var _g5 = p.count;
			while(_g4 < _g5) {
				var i2 = _g4++;
				var target = p.sync_pos;
				var self8 = p._vertices[(i2 + 1) % p.count];
				var self9 = self8;
				var value = self9.x;
				var self10 = target;
				self10.x = value;
				var self11 = self8;
				var value1 = self11.y;
				var self12 = target;
				self12.y = value1;
				var a1 = p._vertices[i2];
				var self13 = p.sync_pos;
				self13.x -= a1.x;
				self13.y -= a1.y;
				if(p._normals[i2] == null) {
					var p4 = p._normals;
					var this2 = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
					p4[i2] = this2;
				} else {
					var y = p.sync_pos.x;
					var self14 = p._normals[i2];
					self14.x = -p.sync_pos.y;
					self14.y = y;
				}
				var self15 = p._normals[i2];
				var self16 = self15;
				var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
				if(length > 0.0) {
					var self17 = self15;
					self17.x /= length;
					self17.y /= length;
				}
			}
		}
		var start = p._vertices[i];
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			var self18 = p.local_frame.get_offset();
			self18.x = p.local_x;
			self18.y = p.local_y;
			p.local_frame.set_angleDegrees(p.local_rotation);
			if(p.parent_frame != null) {
				var self19 = p.parent_frame;
				var self20 = self19.get_matrix();
				var m_a2 = self20.a;
				var m_b2 = self20.b;
				var m_c2 = self20.c;
				var m_d2 = self20.d;
				var v1 = p.local_frame.get_offset();
				var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
				var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
				var a2 = p.parent_frame.get_offset();
				pos_x2 += a2.x;
				pos_y2 += a2.y;
				var p5 = p.local_frame;
				var x1 = p.parent_frame.get_angleDegrees() + p.local_frame.get_angleDegrees();
				p5.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
				var self21 = p.local_frame.get_offset();
				self21.x = pos_x2;
				self21.y = pos_y2;
			}
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g6 = 0;
			var _g7 = p.count;
			while(_g6 < _g7) {
				var i3 = _g6++;
				if(p.local_vertices[i3] == null) {
					continue;
				}
				if(p._vertices[i3] == null) {
					var p6 = p._vertices;
					var this3 = new hxmath_math_Vector2Default(0,0);
					p6[i3] = this3;
				}
				var p7 = p.local_vertices[i3];
				var self22 = p.local_frame;
				var m1 = self22.get_matrix();
				var self23 = m1;
				var m_a3 = self23.a;
				var m_b3 = self23.b;
				var m_c3 = self23.c;
				var m_d3 = self23.d;
				var self_x1 = m_a3 * p7.x + m_c3 * p7.y;
				var self_y1 = m_b3 * p7.x + m_d3 * p7.y;
				var self24 = m1;
				var b_x1 = self24.tx;
				var b_y1 = self24.ty;
				var pos_x3 = self_x1;
				var pos_y3 = self_y1;
				pos_x3 += b_x1;
				pos_y3 += b_y1;
				var self25 = p._vertices[i3];
				self25.x = pos_x3;
				self25.y = pos_y3;
			}
			var _g8 = 0;
			var _g9 = p.count;
			while(_g8 < _g9) {
				var i4 = _g8++;
				var target1 = p.sync_pos;
				var self26 = p._vertices[(i4 + 1) % p.count];
				var self27 = self26;
				var value2 = self27.x;
				var self28 = target1;
				self28.x = value2;
				var self29 = self26;
				var value3 = self29.y;
				var self30 = target1;
				self30.y = value3;
				var a3 = p._vertices[i4];
				var self31 = p.sync_pos;
				self31.x -= a3.x;
				self31.y -= a3.y;
				if(p._normals[i4] == null) {
					var p8 = p._normals;
					var this4 = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
					p8[i4] = this4;
				} else {
					var y1 = p.sync_pos.x;
					var self32 = p._normals[i4];
					self32.x = -p.sync_pos.y;
					self32.y = y1;
				}
				var self33 = p._normals[i4];
				var self34 = self33;
				var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
				if(length1 > 0.0) {
					var self35 = self33;
					self35.x /= length1;
					self35.y /= length1;
				}
			}
		}
		var end = p._vertices[(i + 1) % p.count];
		var x2 = start.x;
		var y2 = start.y;
		var dx = end.x;
		var dy = end.y;
		if(dy == null) {
			dy = 1;
		}
		if(dx == null) {
			dx = 1;
		}
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var self36 = line1.start;
		self36.x = x2;
		self36.y = y2;
		var self37 = line1.end;
		self37.x = dx;
		self37.y = dy;
		var d = (line1.get_dy() - line1.get_y()) * (l.get_dx() - l.get_x()) - (line1.get_dx() - line1.get_x()) * (l.get_dy() - l.get_y());
		var result;
		if(Math.abs(d) <= 0.00001) {
			result = null;
		} else {
			var ua = ((line1.get_dx() - line1.get_x()) * (l.get_y() - line1.get_y()) - (line1.get_dy() - line1.get_y()) * (l.get_x() - line1.get_x())) / d;
			var ub = ((l.get_dx() - l.get_x()) * (l.get_y() - line1.get_y()) - (l.get_dy() - l.get_y()) * (l.get_x() - line1.get_x())) / d;
			if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
				result = null;
			} else {
				var _g10 = ua;
				var b = l.start;
				var self38 = l.end;
				var self_x2 = self38.x;
				var self_y2 = self38.y;
				self_x2 -= b.x;
				self_y2 -= b.y;
				var b_x2 = self_x2;
				var b_y2 = self_y2;
				b_x2 *= _g10;
				b_y2 *= _g10;
				var self39 = l.start;
				var hit_x = self39.x;
				var hit_y = self39.y;
				hit_x += b_x2;
				hit_y += b_y2;
				var self40 = l.start;
				var self41 = self40;
				var self_x3 = self41.x;
				var self_y3 = self41.y;
				self_x3 -= hit_x;
				self_y3 -= hit_y;
				var distance = Math.sqrt(self_x3 * self_x3 + self_y3 * self_y3);
				var b1 = l.end;
				var self42 = l.start;
				var self43 = self42;
				var self_x4 = self43.x;
				var self_y4 = self43.y;
				self_x4 -= b1.x;
				self_y4 -= b1.y;
				var overlap = Math.sqrt(self_x4 * self_x4 + self_y4 * self_y4) - distance;
				var b2 = line1.end;
				var self44 = line1.start;
				var self45 = self44;
				var self_x5 = self45.x;
				var self_y5 = self45.y;
				self_x5 -= b2.x;
				self_y5 -= b2.y;
				var l2l = Math.sqrt(self_x5 * self_x5 + self_y5 * self_y5) * (d < 0 ? 1 : -1);
				var x3 = (line1.get_dy() - line1.get_y()) / l2l;
				var y3 = -(line1.get_dx() - line1.get_x()) / l2l;
				var self46 = echo_util_SAT.norm;
				self46.x = x3;
				self46.y = y3;
				var normal_x = echo_util_SAT.norm.x;
				var normal_y = echo_util_SAT.norm.y;
				var i5 = echo_data_IntersectionData._pool.get();
				i5.line = null;
				i5.shape = null;
				i5.distance = distance;
				i5.overlap = overlap;
				var self47 = i5.hit;
				self47.x = hit_x;
				self47.y = hit_y;
				var self48 = i5.normal;
				self48.x = normal_x;
				self48.y = normal_y;
				i5.pooled = false;
				result = i5;
			}
		}
		if(result != null && (closest == null || closest.distance > result.distance)) {
			closest = result;
		}
	}
	if(closest != null) {
		closest.line = l;
		closest.shape = p;
	}
	return closest;
};
echo_util_SAT.rect_intersects = function(r,l) {
	return echo_util_SAT.line_interects_rect(l,r);
};
echo_util_SAT.circle_intersects = function(c,l) {
	return echo_util_SAT.line_intersects_circle(l,c);
};
echo_util_SAT.polygon_intersects = function(p,l) {
	return echo_util_SAT.line_intersects_polygon(l,p);
};
echo_util_SAT.rect_and_rect = function(rect1,rect2,flip) {
	if(flip == null) {
		flip = false;
	}
	if(rect1._rotation != 0 || rect2._rotation != 0) {
		if(rect1.transformed_rect != null) {
			return echo_util_SAT.rect_and_polygon(rect2,rect1.transformed_rect,flip);
		}
		if(rect2.transformed_rect != null) {
			return echo_util_SAT.rect_and_polygon(rect1,rect2.transformed_rect,!flip);
		}
	}
	var sa = flip ? rect2 : rect1;
	var sb = flip ? rect1 : rect2;
	var nx = sb._x - sa._x;
	var ny = sb._y - sa._y;
	var x_overlap = sa.ex + sb.ex - Math.abs(nx);
	var col = null;
	if(x_overlap > 0) {
		var y_overlap = sa.ey + sb.ey - Math.abs(ny);
		if(y_overlap > 0) {
			if(x_overlap < y_overlap) {
				var c = echo_data_CollisionData._pool.get();
				c.sa = null;
				c.sb = null;
				c.overlap = x_overlap;
				var self = c.normal;
				self.x = nx < 0 ? -1 : 1;
				self.y = 0;
				c.pooled = false;
				col = c;
			} else {
				var c = echo_data_CollisionData._pool.get();
				c.sa = null;
				c.sb = null;
				c.overlap = y_overlap;
				var self = c.normal;
				self.x = 0;
				self.y = ny < 0 ? -1 : 1;
				c.pooled = false;
				col = c;
			}
			col.sa = sa;
			col.sb = sb;
		}
	}
	return col;
};
echo_util_SAT.circle_and_circle = function(circle1,circle2,flip) {
	if(flip == null) {
		flip = false;
	}
	var sa = flip ? circle2 : circle1;
	var sb = flip ? circle1 : circle2;
	var nx = sb._x - sa._x;
	var ny = sb._y - sa._y;
	var r = sa.radius + sb.radius;
	var d = nx * nx + ny * ny;
	var col = null;
	if(d >= r * r) {
		return col;
	} else if(Math.abs(d) <= 0.00001) {
		var overlap = sa.radius;
		var c = echo_data_CollisionData._pool.get();
		c.sa = null;
		c.sb = null;
		c.overlap = overlap;
		var self = c.normal;
		self.x = 1;
		self.y = 0;
		c.pooled = false;
		col = c;
	} else {
		d = Math.sqrt(d);
		nx /= d;
		ny /= d;
		var c = echo_data_CollisionData._pool.get();
		c.sa = null;
		c.sb = null;
		c.overlap = r - d;
		var self = c.normal;
		self.x = nx;
		self.y = ny;
		c.pooled = false;
		col = c;
	}
	col.sa = sa;
	col.sb = sb;
	return col;
};
echo_util_SAT.polygon_and_polygon = function(polygon1,polygon2,flip) {
	if(flip == null) {
		flip = false;
	}
	var data1 = echo_util_SAT.check_polygons(polygon1,polygon2,flip);
	if(data1 == null) {
		return null;
	}
	var data2 = echo_util_SAT.check_polygons(polygon2,polygon1,!flip);
	if(data2 == null) {
		return null;
	}
	if(data1.overlap < 0) {
		data1.overlap = Math.abs(data1.overlap);
	}
	if(data2.overlap < 0) {
		data2.overlap = Math.abs(data2.overlap);
	}
	if(data1.overlap < data2.overlap) {
		data2.put();
		return data1;
	}
	data1.put();
	return data2;
};
echo_util_SAT.rect_and_circle = function(r,c,flip) {
	if(flip == null) {
		flip = false;
	}
	if(r.transformed_rect != null && r._rotation != 0) {
		return echo_util_SAT.circle_and_polygon(c,r.transformed_rect,flip);
	}
	var nx = flip ? c._x - r._x : r._x - c._x;
	var ny = flip ? c._y - r._y : r._y - c._y;
	var cx = nx;
	var cy = ny;
	var min = -r.ex;
	var max = r.ex;
	if(cx < min) {
		cx = min;
	} else if(cx > max) {
		cx = max;
	}
	var min = -r.ey;
	var max = r.ey;
	if(cy < min) {
		cy = min;
	} else if(cy > max) {
		cy = max;
	}
	var inside = false;
	if(Math.abs(nx - cx) <= 0.00001 && Math.abs(ny - cy) <= 0.00001) {
		inside = true;
		if(Math.abs(nx) > Math.abs(ny)) {
			cx = cx > 0 ? r.ex + c.radius + 0.1 : -r.ex - c.radius - 0.1;
		} else {
			cy = cy > 0 ? r.ey + c.radius + 0.1 : -r.ey - c.radius - 0.1;
		}
	}
	nx -= cx;
	ny -= cy;
	var d = nx * nx + ny * ny;
	var rad = c.radius;
	if(d > rad * rad && !inside) {
		return null;
	}
	d = Math.sqrt(d);
	nx /= d;
	ny /= d;
	if(inside) {
		nx *= -1;
		ny *= -1;
	}
	var overlap = Math.abs(rad - d);
	var c1 = echo_data_CollisionData._pool.get();
	c1.sa = null;
	c1.sb = null;
	c1.overlap = overlap;
	var self = c1.normal;
	self.x = nx;
	self.y = ny;
	c1.pooled = false;
	var col = c1;
	col.sa = flip ? c : r;
	col.sb = flip ? r : c;
	return col;
};
echo_util_SAT.rect_and_polygon = function(r,p,flip) {
	if(flip == null) {
		flip = false;
	}
	if(r.transformed_rect != null) {
		return echo_util_SAT.polygon_and_polygon(r.transformed_rect,p,flip);
	}
	var polygon = echo_shape_Polygon._pool.get();
	polygon.count = 4;
	var _g = 0;
	var _g1 = polygon.count;
	while(_g < _g1) {
		var i = _g++;
		if(polygon.local_vertices[i] == null) {
			var polygon1 = polygon.local_vertices;
			var this1 = new hxmath_math_Vector2Default(0,0);
			polygon1[i] = this1;
		}
	}
	var self = polygon.local_vertices[0];
	self.x = -r.ex;
	self.y = -r.ey;
	var self = polygon.local_vertices[1];
	self.x = r.ex;
	self.y = -r.ey;
	var self = polygon.local_vertices[2];
	self.x = r.ex;
	self.y = r.ey;
	var self = polygon.local_vertices[3];
	self.x = -r.ex;
	self.y = r.ey;
	polygon.lock_sync();
	polygon.local_x = r.local_x;
	if(polygon.parent_frame != null) {
		if(!polygon.sync_locked) {
			if(polygon.parent_frame != null) {
				if(polygon.local_x == 0 && polygon.local_y == 0) {
					polygon._x = polygon.parent_frame.get_offset().x;
					polygon._y = polygon.parent_frame.get_offset().y;
				} else {
					var self = polygon.sync_pos;
					self.x = polygon.local_x;
					self.y = polygon.local_y;
					var p1 = polygon.sync_pos;
					var self = polygon.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p1.x + m_c * p1.y;
					var self_y = m_b * p1.x + m_d * p1.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					polygon._x = pos_x;
					polygon._y = pos_y;
				}
				polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
			} else {
				polygon._x = polygon.local_x;
				polygon._y = polygon.local_x;
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
		}
	} else {
		polygon._x = polygon.local_x;
	}
	polygon.local_y = r.local_y;
	if(polygon.parent_frame != null) {
		if(!polygon.sync_locked) {
			if(polygon.parent_frame != null) {
				if(polygon.local_x == 0 && polygon.local_y == 0) {
					polygon._x = polygon.parent_frame.get_offset().x;
					polygon._y = polygon.parent_frame.get_offset().y;
				} else {
					var self = polygon.sync_pos;
					self.x = polygon.local_x;
					self.y = polygon.local_y;
					var p1 = polygon.sync_pos;
					var self = polygon.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p1.x + m_c * p1.y;
					var self_y = m_b * p1.x + m_d * p1.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					polygon._x = pos_x;
					polygon._y = pos_y;
				}
				polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
			} else {
				polygon._x = polygon.local_x;
				polygon._y = polygon.local_x;
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
		}
	} else {
		polygon._y = polygon.local_y;
	}
	polygon.local_rotation = r.local_rotation;
	if(polygon.parent_frame != null) {
		if(!polygon.sync_locked) {
			if(polygon.parent_frame != null) {
				if(polygon.local_x == 0 && polygon.local_y == 0) {
					polygon._x = polygon.parent_frame.get_offset().x;
					polygon._y = polygon.parent_frame.get_offset().y;
				} else {
					var self = polygon.sync_pos;
					self.x = polygon.local_x;
					self.y = polygon.local_y;
					var p1 = polygon.sync_pos;
					var self = polygon.parent_frame;
					var m = self.get_matrix();
					var self = m;
					var m_a = self.a;
					var m_b = self.b;
					var m_c = self.c;
					var m_d = self.d;
					var self_x = m_a * p1.x + m_c * p1.y;
					var self_y = m_b * p1.x + m_d * p1.y;
					var self = m;
					var b_x = self.tx;
					var b_y = self.ty;
					var pos_x = self_x;
					var pos_y = self_y;
					pos_x += b_x;
					pos_y += b_y;
					polygon._x = pos_x;
					polygon._y = pos_y;
				}
				polygon._rotation = polygon.parent_frame.get_angleDegrees() + polygon.local_rotation;
			} else {
				polygon._x = polygon.local_x;
				polygon._y = polygon.local_x;
				polygon._rotation = polygon.local_rotation;
			}
			polygon.dirty_vertices = true;
			polygon.dirty_bounds = true;
		}
	} else {
		polygon._rotation = polygon.local_rotation;
	}
	polygon.dirty_vertices = true;
	polygon.dirty_bounds = true;
	polygon.unlock_sync();
	polygon.pooled = false;
	var tr = polygon;
	tr.set_parent(r.parent_frame);
	var col = echo_util_SAT.polygon_and_polygon(tr,p,flip);
	if(col == null) {
		return null;
	}
	if(flip) {
		col.sb = r;
	} else {
		col.sa = r;
	}
	tr.parent_frame = null;
	if(!tr.pooled) {
		tr.pooled = true;
		echo_shape_Polygon._pool.put_unsafe(tr);
	}
	return col;
};
echo_util_SAT.circle_and_polygon = function(c,p,flip) {
	if(flip == null) {
		flip = false;
	}
	var distance = 0;
	var testDistance = 1073741823;
	var self_x = c._x;
	var self_y = c._y;
	var _g = 0;
	var _g1 = p.count;
	while(_g < _g1) {
		var i = _g++;
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			var self = p.local_frame.get_offset();
			self.x = p.local_x;
			self.y = p.local_y;
			p.local_frame.set_angleDegrees(p.local_rotation);
			if(p.parent_frame != null) {
				var self1 = p.parent_frame;
				var self2 = self1.get_matrix();
				var m_a = self2.a;
				var m_b = self2.b;
				var m_c = self2.c;
				var m_d = self2.d;
				var v = p.local_frame.get_offset();
				var pos_x = m_a * v.x + m_c * v.y;
				var pos_y = m_b * v.x + m_d * v.y;
				var a = p.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var p1 = p.local_frame;
				var x = p.parent_frame.get_angleDegrees() + p.local_frame.get_angleDegrees();
				p1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self3 = p.local_frame.get_offset();
				self3.x = pos_x;
				self3.y = pos_y;
			}
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g2 = 0;
			var _g3 = p.count;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(p.local_vertices[i1] == null) {
					continue;
				}
				if(p._vertices[i1] == null) {
					var p2 = p._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					p2[i1] = this1;
				}
				var p3 = p.local_vertices[i1];
				var self4 = p.local_frame;
				var m = self4.get_matrix();
				var self5 = m;
				var m_a1 = self5.a;
				var m_b1 = self5.b;
				var m_c1 = self5.c;
				var m_d1 = self5.d;
				var self_x1 = m_a1 * p3.x + m_c1 * p3.y;
				var self_y1 = m_b1 * p3.x + m_d1 * p3.y;
				var self6 = m;
				var b_x = self6.tx;
				var b_y = self6.ty;
				var pos_x1 = self_x1;
				var pos_y1 = self_y1;
				pos_x1 += b_x;
				pos_y1 += b_y;
				var self7 = p._vertices[i1];
				self7.x = pos_x1;
				self7.y = pos_y1;
			}
			var _g4 = 0;
			var _g5 = p.count;
			while(_g4 < _g5) {
				var i2 = _g4++;
				var target = p.sync_pos;
				var self8 = p._vertices[(i2 + 1) % p.count];
				var self9 = self8;
				var value = self9.x;
				var self10 = target;
				self10.x = value;
				var self11 = self8;
				var value1 = self11.y;
				var self12 = target;
				self12.y = value1;
				var a1 = p._vertices[i2];
				var self13 = p.sync_pos;
				self13.x -= a1.x;
				self13.y -= a1.y;
				if(p._normals[i2] == null) {
					var p4 = p._normals;
					var this2 = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
					p4[i2] = this2;
				} else {
					var y = p.sync_pos.x;
					var self14 = p._normals[i2];
					self14.x = -p.sync_pos.y;
					self14.y = y;
				}
				var self15 = p._normals[i2];
				var self16 = self15;
				var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
				if(length > 0.0) {
					var self17 = self15;
					self17.x /= length;
					self17.y /= length;
				}
			}
		}
		var b = p._vertices[i];
		var self_x2 = self_x;
		var self_y2 = self_y;
		self_x2 -= b.x;
		self_y2 -= b.y;
		distance = self_x2 * self_x2 + self_y2 * self_y2;
		if(distance < testDistance) {
			testDistance = distance;
			if(p.dirty_vertices) {
				p.dirty_vertices = false;
				var self18 = p.local_frame.get_offset();
				self18.x = p.local_x;
				self18.y = p.local_y;
				p.local_frame.set_angleDegrees(p.local_rotation);
				if(p.parent_frame != null) {
					var self19 = p.parent_frame;
					var self20 = self19.get_matrix();
					var m_a2 = self20.a;
					var m_b2 = self20.b;
					var m_c2 = self20.c;
					var m_d2 = self20.d;
					var v1 = p.local_frame.get_offset();
					var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
					var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
					var a2 = p.parent_frame.get_offset();
					pos_x2 += a2.x;
					pos_y2 += a2.y;
					var p5 = p.local_frame;
					var x1 = p.parent_frame.get_angleDegrees() + p.local_frame.get_angleDegrees();
					p5.set_angleDegrees(x1 < 0 ? 360 - -x1 % 360 : x1 % 360);
					var self21 = p.local_frame.get_offset();
					self21.x = pos_x2;
					self21.y = pos_y2;
				}
				while(p._vertices.length > p.count) p._vertices.pop();
				var _g6 = 0;
				var _g7 = p.count;
				while(_g6 < _g7) {
					var i3 = _g6++;
					if(p.local_vertices[i3] == null) {
						continue;
					}
					if(p._vertices[i3] == null) {
						var p6 = p._vertices;
						var this3 = new hxmath_math_Vector2Default(0,0);
						p6[i3] = this3;
					}
					var p7 = p.local_vertices[i3];
					var self22 = p.local_frame;
					var m1 = self22.get_matrix();
					var self23 = m1;
					var m_a3 = self23.a;
					var m_b3 = self23.b;
					var m_c3 = self23.c;
					var m_d3 = self23.d;
					var self_x3 = m_a3 * p7.x + m_c3 * p7.y;
					var self_y3 = m_b3 * p7.x + m_d3 * p7.y;
					var self24 = m1;
					var b_x1 = self24.tx;
					var b_y1 = self24.ty;
					var pos_x3 = self_x3;
					var pos_y3 = self_y3;
					pos_x3 += b_x1;
					pos_y3 += b_y1;
					var self25 = p._vertices[i3];
					self25.x = pos_x3;
					self25.y = pos_y3;
				}
				var _g8 = 0;
				var _g9 = p.count;
				while(_g8 < _g9) {
					var i4 = _g8++;
					var target1 = p.sync_pos;
					var self26 = p._vertices[(i4 + 1) % p.count];
					var self27 = self26;
					var value2 = self27.x;
					var self28 = target1;
					self28.x = value2;
					var self29 = self26;
					var value3 = self29.y;
					var self30 = target1;
					self30.y = value3;
					var a3 = p._vertices[i4];
					var self31 = p.sync_pos;
					self31.x -= a3.x;
					self31.y -= a3.y;
					if(p._normals[i4] == null) {
						var p8 = p._normals;
						var this4 = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
						p8[i4] = this4;
					} else {
						var y1 = p.sync_pos.x;
						var self32 = p._normals[i4];
						self32.x = -p.sync_pos.y;
						self32.y = y1;
					}
					var self33 = p._normals[i4];
					var self34 = self33;
					var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
					if(length1 > 0.0) {
						var self35 = self33;
						self35.x /= length1;
						self35.y /= length1;
					}
				}
			}
			var x2 = p._vertices[i].x;
			if(p.dirty_vertices) {
				p.dirty_vertices = false;
				var self36 = p.local_frame.get_offset();
				self36.x = p.local_x;
				self36.y = p.local_y;
				p.local_frame.set_angleDegrees(p.local_rotation);
				if(p.parent_frame != null) {
					var self37 = p.parent_frame;
					var self38 = self37.get_matrix();
					var m_a4 = self38.a;
					var m_b4 = self38.b;
					var m_c4 = self38.c;
					var m_d4 = self38.d;
					var v2 = p.local_frame.get_offset();
					var pos_x4 = m_a4 * v2.x + m_c4 * v2.y;
					var pos_y4 = m_b4 * v2.x + m_d4 * v2.y;
					var a4 = p.parent_frame.get_offset();
					pos_x4 += a4.x;
					pos_y4 += a4.y;
					var p9 = p.local_frame;
					var x3 = p.parent_frame.get_angleDegrees() + p.local_frame.get_angleDegrees();
					p9.set_angleDegrees(x3 < 0 ? 360 - -x3 % 360 : x3 % 360);
					var self39 = p.local_frame.get_offset();
					self39.x = pos_x4;
					self39.y = pos_y4;
				}
				while(p._vertices.length > p.count) p._vertices.pop();
				var _g10 = 0;
				var _g11 = p.count;
				while(_g10 < _g11) {
					var i5 = _g10++;
					if(p.local_vertices[i5] == null) {
						continue;
					}
					if(p._vertices[i5] == null) {
						var p10 = p._vertices;
						var this5 = new hxmath_math_Vector2Default(0,0);
						p10[i5] = this5;
					}
					var p11 = p.local_vertices[i5];
					var self40 = p.local_frame;
					var m2 = self40.get_matrix();
					var self41 = m2;
					var m_a5 = self41.a;
					var m_b5 = self41.b;
					var m_c5 = self41.c;
					var m_d5 = self41.d;
					var self_x4 = m_a5 * p11.x + m_c5 * p11.y;
					var self_y4 = m_b5 * p11.x + m_d5 * p11.y;
					var self42 = m2;
					var b_x2 = self42.tx;
					var b_y2 = self42.ty;
					var pos_x5 = self_x4;
					var pos_y5 = self_y4;
					pos_x5 += b_x2;
					pos_y5 += b_y2;
					var self43 = p._vertices[i5];
					self43.x = pos_x5;
					self43.y = pos_y5;
				}
				var _g12 = 0;
				var _g13 = p.count;
				while(_g12 < _g13) {
					var i6 = _g12++;
					var target2 = p.sync_pos;
					var self44 = p._vertices[(i6 + 1) % p.count];
					var self45 = self44;
					var value4 = self45.x;
					var self46 = target2;
					self46.x = value4;
					var self47 = self44;
					var value5 = self47.y;
					var self48 = target2;
					self48.y = value5;
					var a5 = p._vertices[i6];
					var self49 = p.sync_pos;
					self49.x -= a5.x;
					self49.y -= a5.y;
					if(p._normals[i6] == null) {
						var p12 = p._normals;
						var this6 = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
						p12[i6] = this6;
					} else {
						var y2 = p.sync_pos.x;
						var self50 = p._normals[i6];
						self50.x = -p.sync_pos.y;
						self50.y = y2;
					}
					var self51 = p._normals[i6];
					var self52 = self51;
					var length2 = Math.sqrt(self52.x * self52.x + self52.y * self52.y);
					if(length2 > 0.0) {
						var self53 = self51;
						self53.x /= length2;
						self53.y /= length2;
					}
				}
			}
			var y3 = p._vertices[i].y;
			var self54 = echo_util_SAT.closest;
			self54.x = x2;
			self54.y = y3;
		}
	}
	var self = echo_util_SAT.closest;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self = this1;
	self.x -= self_x;
	self.y -= self_y;
	var self1 = self;
	var self = self1;
	var length = Math.sqrt(self.x * self.x + self.y * self.y);
	if(length > 0.0) {
		var self = self1;
		self.x /= length;
		self.y /= length;
	}
	var normal = self1;
	var test = 0;
	if(p.dirty_vertices) {
		p.dirty_vertices = false;
		var self = p.local_frame.get_offset();
		self.x = p.local_x;
		self.y = p.local_y;
		p.local_frame.set_angleDegrees(p.local_rotation);
		if(p.parent_frame != null) {
			var self = p.parent_frame;
			var self1 = self.get_matrix();
			var m_a = self1.a;
			var m_b = self1.b;
			var m_c = self1.c;
			var m_d = self1.d;
			var v = p.local_frame.get_offset();
			var pos_x = m_a * v.x + m_c * v.y;
			var pos_y = m_b * v.x + m_d * v.y;
			var a = p.parent_frame.get_offset();
			pos_x += a.x;
			pos_y += a.y;
			var p1 = p.local_frame;
			var x = p.parent_frame.get_angleDegrees() + p.local_frame.get_angleDegrees();
			p1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
			var self = p.local_frame.get_offset();
			self.x = pos_x;
			self.y = pos_y;
		}
		while(p._vertices.length > p.count) p._vertices.pop();
		var _g = 0;
		var _g1 = p.count;
		while(_g < _g1) {
			var i = _g++;
			if(p.local_vertices[i] == null) {
				continue;
			}
			if(p._vertices[i] == null) {
				var p1 = p._vertices;
				var this1 = new hxmath_math_Vector2Default(0,0);
				p1[i] = this1;
			}
			var p2 = p.local_vertices[i];
			var self = p.local_frame;
			var m = self.get_matrix();
			var self1 = m;
			var m_a = self1.a;
			var m_b = self1.b;
			var m_c = self1.c;
			var m_d = self1.d;
			var self_x1 = m_a * p2.x + m_c * p2.y;
			var self_y1 = m_b * p2.x + m_d * p2.y;
			var self2 = m;
			var b_x = self2.tx;
			var b_y = self2.ty;
			var pos_x = self_x1;
			var pos_y = self_y1;
			pos_x += b_x;
			pos_y += b_y;
			var self3 = p._vertices[i];
			self3.x = pos_x;
			self3.y = pos_y;
		}
		var _g = 0;
		var _g1 = p.count;
		while(_g < _g1) {
			var i = _g++;
			var target = p.sync_pos;
			var self = p._vertices[(i + 1) % p.count];
			var self1 = self;
			var value = self1.x;
			var self2 = target;
			self2.x = value;
			var self3 = self;
			var value1 = self3.y;
			var self4 = target;
			self4.y = value1;
			var a = p._vertices[i];
			var self5 = p.sync_pos;
			self5.x -= a.x;
			self5.y -= a.y;
			if(p._normals[i] == null) {
				var p1 = p._normals;
				var this1 = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
				p1[i] = this1;
			} else {
				var y = p.sync_pos.x;
				var self6 = p._normals[i];
				self6.x = -p.sync_pos.y;
				self6.y = y;
			}
			var self7 = p._normals[i];
			var self8 = self7;
			var length = Math.sqrt(self8.x * self8.x + self8.y * self8.y);
			if(length > 0.0) {
				var self9 = self7;
				self9.x /= length;
				self9.y /= length;
			}
		}
	}
	var b = p._vertices[0];
	var min1 = normal.x * b.x + normal.y * b.y;
	var max1 = min1;
	var _g = 1;
	var _g1 = p.count;
	while(_g < _g1) {
		var j = _g++;
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			var self = p.local_frame.get_offset();
			self.x = p.local_x;
			self.y = p.local_y;
			p.local_frame.set_angleDegrees(p.local_rotation);
			if(p.parent_frame != null) {
				var self1 = p.parent_frame;
				var self2 = self1.get_matrix();
				var m_a = self2.a;
				var m_b = self2.b;
				var m_c = self2.c;
				var m_d = self2.d;
				var v = p.local_frame.get_offset();
				var pos_x = m_a * v.x + m_c * v.y;
				var pos_y = m_b * v.x + m_d * v.y;
				var a = p.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var p1 = p.local_frame;
				var x = p.parent_frame.get_angleDegrees() + p.local_frame.get_angleDegrees();
				p1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self3 = p.local_frame.get_offset();
				self3.x = pos_x;
				self3.y = pos_y;
			}
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g2 = 0;
			var _g3 = p.count;
			while(_g2 < _g3) {
				var i = _g2++;
				if(p.local_vertices[i] == null) {
					continue;
				}
				if(p._vertices[i] == null) {
					var p2 = p._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					p2[i] = this1;
				}
				var p3 = p.local_vertices[i];
				var self4 = p.local_frame;
				var m = self4.get_matrix();
				var self5 = m;
				var m_a1 = self5.a;
				var m_b1 = self5.b;
				var m_c1 = self5.c;
				var m_d1 = self5.d;
				var self_x1 = m_a1 * p3.x + m_c1 * p3.y;
				var self_y1 = m_b1 * p3.x + m_d1 * p3.y;
				var self6 = m;
				var b_x = self6.tx;
				var b_y = self6.ty;
				var pos_x1 = self_x1;
				var pos_y1 = self_y1;
				pos_x1 += b_x;
				pos_y1 += b_y;
				var self7 = p._vertices[i];
				self7.x = pos_x1;
				self7.y = pos_y1;
			}
			var _g4 = 0;
			var _g5 = p.count;
			while(_g4 < _g5) {
				var i1 = _g4++;
				var target = p.sync_pos;
				var self8 = p._vertices[(i1 + 1) % p.count];
				var self9 = self8;
				var value = self9.x;
				var self10 = target;
				self10.x = value;
				var self11 = self8;
				var value1 = self11.y;
				var self12 = target;
				self12.y = value1;
				var a1 = p._vertices[i1];
				var self13 = p.sync_pos;
				self13.x -= a1.x;
				self13.y -= a1.y;
				if(p._normals[i1] == null) {
					var p4 = p._normals;
					var this2 = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
					p4[i1] = this2;
				} else {
					var y = p.sync_pos.x;
					var self14 = p._normals[i1];
					self14.x = -p.sync_pos.y;
					self14.y = y;
				}
				var self15 = p._normals[i1];
				var self16 = self15;
				var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
				if(length > 0.0) {
					var self17 = self15;
					self17.x /= length;
					self17.y /= length;
				}
			}
		}
		var b = p._vertices[j];
		test = normal.x * b.x + normal.y * b.y;
		if(test < min1) {
			min1 = test;
		}
		if(test > max1) {
			max1 = test;
		}
	}
	var max2 = c.radius;
	var min2 = -c.radius;
	var b_x = -self_x;
	var b_y = -self_y;
	var offset = normal.x * b_x + normal.y * b_y;
	min1 += offset;
	max1 += offset;
	var test1 = min1 - max2;
	var test2 = min2 - max1;
	if(test1 > 0 || test2 > 0) {
		return null;
	}
	var distMin = -(max2 - min1);
	if(flip) {
		distMin *= -1;
	}
	var x = normal.x;
	var y = normal.y;
	var c1 = echo_data_CollisionData._pool.get();
	c1.sa = null;
	c1.sb = null;
	c1.overlap = distMin;
	var self = c1.normal;
	self.x = x;
	self.y = y;
	c1.pooled = false;
	var col = c1;
	var closest = Math.abs(distMin);
	var _g = 0;
	var _g1 = p.count;
	while(_g < _g1) {
		var i = _g++;
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			var self = p.local_frame.get_offset();
			self.x = p.local_x;
			self.y = p.local_y;
			p.local_frame.set_angleDegrees(p.local_rotation);
			if(p.parent_frame != null) {
				var self1 = p.parent_frame;
				var self2 = self1.get_matrix();
				var m_a = self2.a;
				var m_b = self2.b;
				var m_c = self2.c;
				var m_d = self2.d;
				var v = p.local_frame.get_offset();
				var pos_x = m_a * v.x + m_c * v.y;
				var pos_y = m_b * v.x + m_d * v.y;
				var a = p.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var p1 = p.local_frame;
				var x = p.parent_frame.get_angleDegrees() + p.local_frame.get_angleDegrees();
				p1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self3 = p.local_frame.get_offset();
				self3.x = pos_x;
				self3.y = pos_y;
			}
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g2 = 0;
			var _g3 = p.count;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(p.local_vertices[i1] == null) {
					continue;
				}
				if(p._vertices[i1] == null) {
					var p2 = p._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					p2[i1] = this1;
				}
				var p3 = p.local_vertices[i1];
				var self4 = p.local_frame;
				var m = self4.get_matrix();
				var self5 = m;
				var m_a1 = self5.a;
				var m_b1 = self5.b;
				var m_c1 = self5.c;
				var m_d1 = self5.d;
				var self_x1 = m_a1 * p3.x + m_c1 * p3.y;
				var self_y1 = m_b1 * p3.x + m_d1 * p3.y;
				var self6 = m;
				var b_x = self6.tx;
				var b_y = self6.ty;
				var pos_x1 = self_x1;
				var pos_y1 = self_y1;
				pos_x1 += b_x;
				pos_y1 += b_y;
				var self7 = p._vertices[i1];
				self7.x = pos_x1;
				self7.y = pos_y1;
			}
			var _g4 = 0;
			var _g5 = p.count;
			while(_g4 < _g5) {
				var i2 = _g4++;
				var target = p.sync_pos;
				var self8 = p._vertices[(i2 + 1) % p.count];
				var self9 = self8;
				var value = self9.x;
				var self10 = target;
				self10.x = value;
				var self11 = self8;
				var value1 = self11.y;
				var self12 = target;
				self12.y = value1;
				var a1 = p._vertices[i2];
				var self13 = p.sync_pos;
				self13.x -= a1.x;
				self13.y -= a1.y;
				if(p._normals[i2] == null) {
					var p4 = p._normals;
					var this2 = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
					p4[i2] = this2;
				} else {
					var y = p.sync_pos.x;
					var self14 = p._normals[i2];
					self14.x = -p.sync_pos.y;
					self14.y = y;
				}
				var self15 = p._normals[i2];
				var self16 = self15;
				var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
				if(length > 0.0) {
					var self17 = self15;
					self17.x /= length;
					self17.y /= length;
				}
			}
		}
		var x1 = p._normals[i].x;
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			var self18 = p.local_frame.get_offset();
			self18.x = p.local_x;
			self18.y = p.local_y;
			p.local_frame.set_angleDegrees(p.local_rotation);
			if(p.parent_frame != null) {
				var self19 = p.parent_frame;
				var self20 = self19.get_matrix();
				var m_a2 = self20.a;
				var m_b2 = self20.b;
				var m_c2 = self20.c;
				var m_d2 = self20.d;
				var v1 = p.local_frame.get_offset();
				var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
				var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
				var a2 = p.parent_frame.get_offset();
				pos_x2 += a2.x;
				pos_y2 += a2.y;
				var p5 = p.local_frame;
				var x2 = p.parent_frame.get_angleDegrees() + p.local_frame.get_angleDegrees();
				p5.set_angleDegrees(x2 < 0 ? 360 - -x2 % 360 : x2 % 360);
				var self21 = p.local_frame.get_offset();
				self21.x = pos_x2;
				self21.y = pos_y2;
			}
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g6 = 0;
			var _g7 = p.count;
			while(_g6 < _g7) {
				var i3 = _g6++;
				if(p.local_vertices[i3] == null) {
					continue;
				}
				if(p._vertices[i3] == null) {
					var p6 = p._vertices;
					var this3 = new hxmath_math_Vector2Default(0,0);
					p6[i3] = this3;
				}
				var p7 = p.local_vertices[i3];
				var self22 = p.local_frame;
				var m1 = self22.get_matrix();
				var self23 = m1;
				var m_a3 = self23.a;
				var m_b3 = self23.b;
				var m_c3 = self23.c;
				var m_d3 = self23.d;
				var self_x2 = m_a3 * p7.x + m_c3 * p7.y;
				var self_y2 = m_b3 * p7.x + m_d3 * p7.y;
				var self24 = m1;
				var b_x1 = self24.tx;
				var b_y1 = self24.ty;
				var pos_x3 = self_x2;
				var pos_y3 = self_y2;
				pos_x3 += b_x1;
				pos_y3 += b_y1;
				var self25 = p._vertices[i3];
				self25.x = pos_x3;
				self25.y = pos_y3;
			}
			var _g8 = 0;
			var _g9 = p.count;
			while(_g8 < _g9) {
				var i4 = _g8++;
				var target1 = p.sync_pos;
				var self26 = p._vertices[(i4 + 1) % p.count];
				var self27 = self26;
				var value2 = self27.x;
				var self28 = target1;
				self28.x = value2;
				var self29 = self26;
				var value3 = self29.y;
				var self30 = target1;
				self30.y = value3;
				var a3 = p._vertices[i4];
				var self31 = p.sync_pos;
				self31.x -= a3.x;
				self31.y -= a3.y;
				if(p._normals[i4] == null) {
					var p8 = p._normals;
					var this4 = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
					p8[i4] = this4;
				} else {
					var y1 = p.sync_pos.x;
					var self32 = p._normals[i4];
					self32.x = -p.sync_pos.y;
					self32.y = y1;
				}
				var self33 = p._normals[i4];
				var self34 = self33;
				var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
				if(length1 > 0.0) {
					var self35 = self33;
					self35.x /= length1;
					self35.y /= length1;
				}
			}
		}
		var y2 = p._normals[i].y;
		var self36 = normal;
		self36.x = x1;
		self36.y = y2;
		if(p.dirty_vertices) {
			p.dirty_vertices = false;
			var self37 = p.local_frame.get_offset();
			self37.x = p.local_x;
			self37.y = p.local_y;
			p.local_frame.set_angleDegrees(p.local_rotation);
			if(p.parent_frame != null) {
				var self38 = p.parent_frame;
				var self39 = self38.get_matrix();
				var m_a4 = self39.a;
				var m_b4 = self39.b;
				var m_c4 = self39.c;
				var m_d4 = self39.d;
				var v2 = p.local_frame.get_offset();
				var pos_x4 = m_a4 * v2.x + m_c4 * v2.y;
				var pos_y4 = m_b4 * v2.x + m_d4 * v2.y;
				var a4 = p.parent_frame.get_offset();
				pos_x4 += a4.x;
				pos_y4 += a4.y;
				var p9 = p.local_frame;
				var x3 = p.parent_frame.get_angleDegrees() + p.local_frame.get_angleDegrees();
				p9.set_angleDegrees(x3 < 0 ? 360 - -x3 % 360 : x3 % 360);
				var self40 = p.local_frame.get_offset();
				self40.x = pos_x4;
				self40.y = pos_y4;
			}
			while(p._vertices.length > p.count) p._vertices.pop();
			var _g10 = 0;
			var _g11 = p.count;
			while(_g10 < _g11) {
				var i5 = _g10++;
				if(p.local_vertices[i5] == null) {
					continue;
				}
				if(p._vertices[i5] == null) {
					var p10 = p._vertices;
					var this5 = new hxmath_math_Vector2Default(0,0);
					p10[i5] = this5;
				}
				var p11 = p.local_vertices[i5];
				var self41 = p.local_frame;
				var m2 = self41.get_matrix();
				var self42 = m2;
				var m_a5 = self42.a;
				var m_b5 = self42.b;
				var m_c5 = self42.c;
				var m_d5 = self42.d;
				var self_x3 = m_a5 * p11.x + m_c5 * p11.y;
				var self_y3 = m_b5 * p11.x + m_d5 * p11.y;
				var self43 = m2;
				var b_x2 = self43.tx;
				var b_y2 = self43.ty;
				var pos_x5 = self_x3;
				var pos_y5 = self_y3;
				pos_x5 += b_x2;
				pos_y5 += b_y2;
				var self44 = p._vertices[i5];
				self44.x = pos_x5;
				self44.y = pos_y5;
			}
			var _g12 = 0;
			var _g13 = p.count;
			while(_g12 < _g13) {
				var i6 = _g12++;
				var target2 = p.sync_pos;
				var self45 = p._vertices[(i6 + 1) % p.count];
				var self46 = self45;
				var value4 = self46.x;
				var self47 = target2;
				self47.x = value4;
				var self48 = self45;
				var value5 = self48.y;
				var self49 = target2;
				self49.y = value5;
				var a5 = p._vertices[i6];
				var self50 = p.sync_pos;
				self50.x -= a5.x;
				self50.y -= a5.y;
				if(p._normals[i6] == null) {
					var p12 = p._normals;
					var this6 = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
					p12[i6] = this6;
				} else {
					var y3 = p.sync_pos.x;
					var self51 = p._normals[i6];
					self51.x = -p.sync_pos.y;
					self51.y = y3;
				}
				var self52 = p._normals[i6];
				var self53 = self52;
				var length2 = Math.sqrt(self53.x * self53.x + self53.y * self53.y);
				if(length2 > 0.0) {
					var self54 = self52;
					self54.x /= length2;
					self54.y /= length2;
				}
			}
		}
		var b = p._vertices[0];
		min1 = normal.x * b.x + normal.y * b.y;
		max1 = min1;
		var _g14 = 1;
		var _g15 = p.count;
		while(_g14 < _g15) {
			var j = _g14++;
			if(p.dirty_vertices) {
				p.dirty_vertices = false;
				var self55 = p.local_frame.get_offset();
				self55.x = p.local_x;
				self55.y = p.local_y;
				p.local_frame.set_angleDegrees(p.local_rotation);
				if(p.parent_frame != null) {
					var self56 = p.parent_frame;
					var self57 = self56.get_matrix();
					var m_a6 = self57.a;
					var m_b6 = self57.b;
					var m_c6 = self57.c;
					var m_d6 = self57.d;
					var v3 = p.local_frame.get_offset();
					var pos_x6 = m_a6 * v3.x + m_c6 * v3.y;
					var pos_y6 = m_b6 * v3.x + m_d6 * v3.y;
					var a6 = p.parent_frame.get_offset();
					pos_x6 += a6.x;
					pos_y6 += a6.y;
					var p13 = p.local_frame;
					var x4 = p.parent_frame.get_angleDegrees() + p.local_frame.get_angleDegrees();
					p13.set_angleDegrees(x4 < 0 ? 360 - -x4 % 360 : x4 % 360);
					var self58 = p.local_frame.get_offset();
					self58.x = pos_x6;
					self58.y = pos_y6;
				}
				while(p._vertices.length > p.count) p._vertices.pop();
				var _g16 = 0;
				var _g17 = p.count;
				while(_g16 < _g17) {
					var i7 = _g16++;
					if(p.local_vertices[i7] == null) {
						continue;
					}
					if(p._vertices[i7] == null) {
						var p14 = p._vertices;
						var this7 = new hxmath_math_Vector2Default(0,0);
						p14[i7] = this7;
					}
					var p15 = p.local_vertices[i7];
					var self59 = p.local_frame;
					var m3 = self59.get_matrix();
					var self60 = m3;
					var m_a7 = self60.a;
					var m_b7 = self60.b;
					var m_c7 = self60.c;
					var m_d7 = self60.d;
					var self_x4 = m_a7 * p15.x + m_c7 * p15.y;
					var self_y4 = m_b7 * p15.x + m_d7 * p15.y;
					var self61 = m3;
					var b_x3 = self61.tx;
					var b_y3 = self61.ty;
					var pos_x7 = self_x4;
					var pos_y7 = self_y4;
					pos_x7 += b_x3;
					pos_y7 += b_y3;
					var self62 = p._vertices[i7];
					self62.x = pos_x7;
					self62.y = pos_y7;
				}
				var _g18 = 0;
				var _g19 = p.count;
				while(_g18 < _g19) {
					var i8 = _g18++;
					var target3 = p.sync_pos;
					var self63 = p._vertices[(i8 + 1) % p.count];
					var self64 = self63;
					var value6 = self64.x;
					var self65 = target3;
					self65.x = value6;
					var self66 = self63;
					var value7 = self66.y;
					var self67 = target3;
					self67.y = value7;
					var a7 = p._vertices[i8];
					var self68 = p.sync_pos;
					self68.x -= a7.x;
					self68.y -= a7.y;
					if(p._normals[i8] == null) {
						var p16 = p._normals;
						var this8 = new hxmath_math_Vector2Default(-p.sync_pos.y,p.sync_pos.x);
						p16[i8] = this8;
					} else {
						var y4 = p.sync_pos.x;
						var self69 = p._normals[i8];
						self69.x = -p.sync_pos.y;
						self69.y = y4;
					}
					var self70 = p._normals[i8];
					var self71 = self70;
					var length3 = Math.sqrt(self71.x * self71.x + self71.y * self71.y);
					if(length3 > 0.0) {
						var self72 = self70;
						self72.x /= length3;
						self72.y /= length3;
					}
				}
			}
			var b1 = p._vertices[j];
			test = normal.x * b1.x + normal.y * b1.y;
			if(test < min1) {
				min1 = test;
			}
			if(test > max1) {
				max1 = test;
			}
		}
		max2 = c.radius;
		min2 = -c.radius;
		var b_x4 = -self_x;
		var b_y4 = -self_y;
		offset = normal.x * b_x4 + normal.y * b_y4;
		min1 += offset;
		max1 += offset;
		test1 = min1 - max2;
		test2 = min2 - max1;
		if(test1 > 0 || test2 > 0) {
			col.put();
			return null;
		}
		distMin = -(max2 - min1);
		if(flip) {
			distMin *= -1;
		}
		if(Math.abs(distMin) < closest) {
			var self73 = col.normal;
			self73.x = normal.x;
			self73.y = normal.y;
			col.overlap = distMin;
			closest = Math.abs(distMin);
		}
	}
	col.sa = flip ? p : c;
	col.sb = flip ? c : p;
	col.overlap = Math.abs(col.overlap);
	if(flip) {
		var self = col.normal;
		self.x = -self.x;
		self.y = -self.y;
	}
	return col;
};
echo_util_SAT.check_polygons = function(polygon1,polygon2,flip) {
	if(flip == null) {
		flip = false;
	}
	var test1 = 0;
	var test2 = 0;
	var testNum = 0;
	var min1 = 0;
	var max1 = 0;
	var min2 = 0;
	var max2 = 0;
	var closest = 1073741823;
	var col = null;
	var self_x = 0;
	var self_y = 0;
	var _g = 0;
	var _g1 = polygon1.count;
	while(_g < _g1) {
		var i = _g++;
		if(polygon1.dirty_vertices) {
			polygon1.dirty_vertices = false;
			var self = polygon1.local_frame.get_offset();
			self.x = polygon1.local_x;
			self.y = polygon1.local_y;
			polygon1.local_frame.set_angleDegrees(polygon1.local_rotation);
			if(polygon1.parent_frame != null) {
				var self1 = polygon1.parent_frame;
				var self2 = self1.get_matrix();
				var m_a = self2.a;
				var m_b = self2.b;
				var m_c = self2.c;
				var m_d = self2.d;
				var v = polygon1.local_frame.get_offset();
				var pos_x = m_a * v.x + m_c * v.y;
				var pos_y = m_b * v.x + m_d * v.y;
				var a = polygon1.parent_frame.get_offset();
				pos_x += a.x;
				pos_y += a.y;
				var polygon11 = polygon1.local_frame;
				var x = polygon1.parent_frame.get_angleDegrees() + polygon1.local_frame.get_angleDegrees();
				polygon11.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
				var self3 = polygon1.local_frame.get_offset();
				self3.x = pos_x;
				self3.y = pos_y;
			}
			while(polygon1._vertices.length > polygon1.count) polygon1._vertices.pop();
			var _g2 = 0;
			var _g3 = polygon1.count;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(polygon1.local_vertices[i1] == null) {
					continue;
				}
				if(polygon1._vertices[i1] == null) {
					var polygon12 = polygon1._vertices;
					var this1 = new hxmath_math_Vector2Default(0,0);
					polygon12[i1] = this1;
				}
				var p = polygon1.local_vertices[i1];
				var self4 = polygon1.local_frame;
				var m = self4.get_matrix();
				var self5 = m;
				var m_a1 = self5.a;
				var m_b1 = self5.b;
				var m_c1 = self5.c;
				var m_d1 = self5.d;
				var self_x1 = m_a1 * p.x + m_c1 * p.y;
				var self_y1 = m_b1 * p.x + m_d1 * p.y;
				var self6 = m;
				var b_x = self6.tx;
				var b_y = self6.ty;
				var pos_x1 = self_x1;
				var pos_y1 = self_y1;
				pos_x1 += b_x;
				pos_y1 += b_y;
				var self7 = polygon1._vertices[i1];
				self7.x = pos_x1;
				self7.y = pos_y1;
			}
			var _g4 = 0;
			var _g5 = polygon1.count;
			while(_g4 < _g5) {
				var i2 = _g4++;
				var target = polygon1.sync_pos;
				var self8 = polygon1._vertices[(i2 + 1) % polygon1.count];
				var self9 = self8;
				var value = self9.x;
				var self10 = target;
				self10.x = value;
				var self11 = self8;
				var value1 = self11.y;
				var self12 = target;
				self12.y = value1;
				var a1 = polygon1._vertices[i2];
				var self13 = polygon1.sync_pos;
				self13.x -= a1.x;
				self13.y -= a1.y;
				if(polygon1._normals[i2] == null) {
					var polygon13 = polygon1._normals;
					var this2 = new hxmath_math_Vector2Default(-polygon1.sync_pos.y,polygon1.sync_pos.x);
					polygon13[i2] = this2;
				} else {
					var y = polygon1.sync_pos.x;
					var self14 = polygon1._normals[i2];
					self14.x = -polygon1.sync_pos.y;
					self14.y = y;
				}
				var self15 = polygon1._normals[i2];
				var self16 = self15;
				var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
				if(length > 0.0) {
					var self17 = self15;
					self17.x /= length;
					self17.y /= length;
				}
			}
		}
		var x1 = polygon1._normals[i].x;
		if(polygon1.dirty_vertices) {
			polygon1.dirty_vertices = false;
			var self18 = polygon1.local_frame.get_offset();
			self18.x = polygon1.local_x;
			self18.y = polygon1.local_y;
			polygon1.local_frame.set_angleDegrees(polygon1.local_rotation);
			if(polygon1.parent_frame != null) {
				var self19 = polygon1.parent_frame;
				var self20 = self19.get_matrix();
				var m_a2 = self20.a;
				var m_b2 = self20.b;
				var m_c2 = self20.c;
				var m_d2 = self20.d;
				var v1 = polygon1.local_frame.get_offset();
				var pos_x2 = m_a2 * v1.x + m_c2 * v1.y;
				var pos_y2 = m_b2 * v1.x + m_d2 * v1.y;
				var a2 = polygon1.parent_frame.get_offset();
				pos_x2 += a2.x;
				pos_y2 += a2.y;
				var polygon14 = polygon1.local_frame;
				var x2 = polygon1.parent_frame.get_angleDegrees() + polygon1.local_frame.get_angleDegrees();
				polygon14.set_angleDegrees(x2 < 0 ? 360 - -x2 % 360 : x2 % 360);
				var self21 = polygon1.local_frame.get_offset();
				self21.x = pos_x2;
				self21.y = pos_y2;
			}
			while(polygon1._vertices.length > polygon1.count) polygon1._vertices.pop();
			var _g6 = 0;
			var _g7 = polygon1.count;
			while(_g6 < _g7) {
				var i3 = _g6++;
				if(polygon1.local_vertices[i3] == null) {
					continue;
				}
				if(polygon1._vertices[i3] == null) {
					var polygon15 = polygon1._vertices;
					var this3 = new hxmath_math_Vector2Default(0,0);
					polygon15[i3] = this3;
				}
				var p1 = polygon1.local_vertices[i3];
				var self22 = polygon1.local_frame;
				var m1 = self22.get_matrix();
				var self23 = m1;
				var m_a3 = self23.a;
				var m_b3 = self23.b;
				var m_c3 = self23.c;
				var m_d3 = self23.d;
				var self_x2 = m_a3 * p1.x + m_c3 * p1.y;
				var self_y2 = m_b3 * p1.x + m_d3 * p1.y;
				var self24 = m1;
				var b_x1 = self24.tx;
				var b_y1 = self24.ty;
				var pos_x3 = self_x2;
				var pos_y3 = self_y2;
				pos_x3 += b_x1;
				pos_y3 += b_y1;
				var self25 = polygon1._vertices[i3];
				self25.x = pos_x3;
				self25.y = pos_y3;
			}
			var _g8 = 0;
			var _g9 = polygon1.count;
			while(_g8 < _g9) {
				var i4 = _g8++;
				var target1 = polygon1.sync_pos;
				var self26 = polygon1._vertices[(i4 + 1) % polygon1.count];
				var self27 = self26;
				var value2 = self27.x;
				var self28 = target1;
				self28.x = value2;
				var self29 = self26;
				var value3 = self29.y;
				var self30 = target1;
				self30.y = value3;
				var a3 = polygon1._vertices[i4];
				var self31 = polygon1.sync_pos;
				self31.x -= a3.x;
				self31.y -= a3.y;
				if(polygon1._normals[i4] == null) {
					var polygon16 = polygon1._normals;
					var this4 = new hxmath_math_Vector2Default(-polygon1.sync_pos.y,polygon1.sync_pos.x);
					polygon16[i4] = this4;
				} else {
					var y1 = polygon1.sync_pos.x;
					var self32 = polygon1._normals[i4];
					self32.x = -polygon1.sync_pos.y;
					self32.y = y1;
				}
				var self33 = polygon1._normals[i4];
				var self34 = self33;
				var length1 = Math.sqrt(self34.x * self34.x + self34.y * self34.y);
				if(length1 > 0.0) {
					var self35 = self33;
					self35.x /= length1;
					self35.y /= length1;
				}
			}
		}
		self_x = x1;
		self_y = polygon1._normals[i].y;
		if(polygon1.dirty_vertices) {
			polygon1.dirty_vertices = false;
			var self36 = polygon1.local_frame.get_offset();
			self36.x = polygon1.local_x;
			self36.y = polygon1.local_y;
			polygon1.local_frame.set_angleDegrees(polygon1.local_rotation);
			if(polygon1.parent_frame != null) {
				var self37 = polygon1.parent_frame;
				var self38 = self37.get_matrix();
				var m_a4 = self38.a;
				var m_b4 = self38.b;
				var m_c4 = self38.c;
				var m_d4 = self38.d;
				var v2 = polygon1.local_frame.get_offset();
				var pos_x4 = m_a4 * v2.x + m_c4 * v2.y;
				var pos_y4 = m_b4 * v2.x + m_d4 * v2.y;
				var a4 = polygon1.parent_frame.get_offset();
				pos_x4 += a4.x;
				pos_y4 += a4.y;
				var polygon17 = polygon1.local_frame;
				var x3 = polygon1.parent_frame.get_angleDegrees() + polygon1.local_frame.get_angleDegrees();
				polygon17.set_angleDegrees(x3 < 0 ? 360 - -x3 % 360 : x3 % 360);
				var self39 = polygon1.local_frame.get_offset();
				self39.x = pos_x4;
				self39.y = pos_y4;
			}
			while(polygon1._vertices.length > polygon1.count) polygon1._vertices.pop();
			var _g10 = 0;
			var _g11 = polygon1.count;
			while(_g10 < _g11) {
				var i5 = _g10++;
				if(polygon1.local_vertices[i5] == null) {
					continue;
				}
				if(polygon1._vertices[i5] == null) {
					var polygon18 = polygon1._vertices;
					var this5 = new hxmath_math_Vector2Default(0,0);
					polygon18[i5] = this5;
				}
				var p2 = polygon1.local_vertices[i5];
				var self40 = polygon1.local_frame;
				var m2 = self40.get_matrix();
				var self41 = m2;
				var m_a5 = self41.a;
				var m_b5 = self41.b;
				var m_c5 = self41.c;
				var m_d5 = self41.d;
				var self_x3 = m_a5 * p2.x + m_c5 * p2.y;
				var self_y3 = m_b5 * p2.x + m_d5 * p2.y;
				var self42 = m2;
				var b_x2 = self42.tx;
				var b_y2 = self42.ty;
				var pos_x5 = self_x3;
				var pos_y5 = self_y3;
				pos_x5 += b_x2;
				pos_y5 += b_y2;
				var self43 = polygon1._vertices[i5];
				self43.x = pos_x5;
				self43.y = pos_y5;
			}
			var _g12 = 0;
			var _g13 = polygon1.count;
			while(_g12 < _g13) {
				var i6 = _g12++;
				var target2 = polygon1.sync_pos;
				var self44 = polygon1._vertices[(i6 + 1) % polygon1.count];
				var self45 = self44;
				var value4 = self45.x;
				var self46 = target2;
				self46.x = value4;
				var self47 = self44;
				var value5 = self47.y;
				var self48 = target2;
				self48.y = value5;
				var a5 = polygon1._vertices[i6];
				var self49 = polygon1.sync_pos;
				self49.x -= a5.x;
				self49.y -= a5.y;
				if(polygon1._normals[i6] == null) {
					var polygon19 = polygon1._normals;
					var this6 = new hxmath_math_Vector2Default(-polygon1.sync_pos.y,polygon1.sync_pos.x);
					polygon19[i6] = this6;
				} else {
					var y2 = polygon1.sync_pos.x;
					var self50 = polygon1._normals[i6];
					self50.x = -polygon1.sync_pos.y;
					self50.y = y2;
				}
				var self51 = polygon1._normals[i6];
				var self52 = self51;
				var length2 = Math.sqrt(self52.x * self52.x + self52.y * self52.y);
				if(length2 > 0.0) {
					var self53 = self51;
					self53.x /= length2;
					self53.y /= length2;
				}
			}
		}
		var b = polygon1._vertices[0];
		min1 = self_x * b.x + self_y * b.y;
		max1 = min1;
		var _g14 = 1;
		var _g15 = polygon1.count;
		while(_g14 < _g15) {
			var j = _g14++;
			if(polygon1.dirty_vertices) {
				polygon1.dirty_vertices = false;
				var self54 = polygon1.local_frame.get_offset();
				self54.x = polygon1.local_x;
				self54.y = polygon1.local_y;
				polygon1.local_frame.set_angleDegrees(polygon1.local_rotation);
				if(polygon1.parent_frame != null) {
					var self55 = polygon1.parent_frame;
					var self56 = self55.get_matrix();
					var m_a6 = self56.a;
					var m_b6 = self56.b;
					var m_c6 = self56.c;
					var m_d6 = self56.d;
					var v3 = polygon1.local_frame.get_offset();
					var pos_x6 = m_a6 * v3.x + m_c6 * v3.y;
					var pos_y6 = m_b6 * v3.x + m_d6 * v3.y;
					var a6 = polygon1.parent_frame.get_offset();
					pos_x6 += a6.x;
					pos_y6 += a6.y;
					var polygon110 = polygon1.local_frame;
					var x4 = polygon1.parent_frame.get_angleDegrees() + polygon1.local_frame.get_angleDegrees();
					polygon110.set_angleDegrees(x4 < 0 ? 360 - -x4 % 360 : x4 % 360);
					var self57 = polygon1.local_frame.get_offset();
					self57.x = pos_x6;
					self57.y = pos_y6;
				}
				while(polygon1._vertices.length > polygon1.count) polygon1._vertices.pop();
				var _g16 = 0;
				var _g17 = polygon1.count;
				while(_g16 < _g17) {
					var i7 = _g16++;
					if(polygon1.local_vertices[i7] == null) {
						continue;
					}
					if(polygon1._vertices[i7] == null) {
						var polygon111 = polygon1._vertices;
						var this7 = new hxmath_math_Vector2Default(0,0);
						polygon111[i7] = this7;
					}
					var p3 = polygon1.local_vertices[i7];
					var self58 = polygon1.local_frame;
					var m3 = self58.get_matrix();
					var self59 = m3;
					var m_a7 = self59.a;
					var m_b7 = self59.b;
					var m_c7 = self59.c;
					var m_d7 = self59.d;
					var self_x4 = m_a7 * p3.x + m_c7 * p3.y;
					var self_y4 = m_b7 * p3.x + m_d7 * p3.y;
					var self60 = m3;
					var b_x3 = self60.tx;
					var b_y3 = self60.ty;
					var pos_x7 = self_x4;
					var pos_y7 = self_y4;
					pos_x7 += b_x3;
					pos_y7 += b_y3;
					var self61 = polygon1._vertices[i7];
					self61.x = pos_x7;
					self61.y = pos_y7;
				}
				var _g18 = 0;
				var _g19 = polygon1.count;
				while(_g18 < _g19) {
					var i8 = _g18++;
					var target3 = polygon1.sync_pos;
					var self62 = polygon1._vertices[(i8 + 1) % polygon1.count];
					var self63 = self62;
					var value6 = self63.x;
					var self64 = target3;
					self64.x = value6;
					var self65 = self62;
					var value7 = self65.y;
					var self66 = target3;
					self66.y = value7;
					var a7 = polygon1._vertices[i8];
					var self67 = polygon1.sync_pos;
					self67.x -= a7.x;
					self67.y -= a7.y;
					if(polygon1._normals[i8] == null) {
						var polygon112 = polygon1._normals;
						var this8 = new hxmath_math_Vector2Default(-polygon1.sync_pos.y,polygon1.sync_pos.x);
						polygon112[i8] = this8;
					} else {
						var y3 = polygon1.sync_pos.x;
						var self68 = polygon1._normals[i8];
						self68.x = -polygon1.sync_pos.y;
						self68.y = y3;
					}
					var self69 = polygon1._normals[i8];
					var self70 = self69;
					var length3 = Math.sqrt(self70.x * self70.x + self70.y * self70.y);
					if(length3 > 0.0) {
						var self71 = self69;
						self71.x /= length3;
						self71.y /= length3;
					}
				}
			}
			var b1 = polygon1._vertices[j];
			testNum = self_x * b1.x + self_y * b1.y;
			if(testNum < min1) {
				min1 = testNum;
			}
			if(testNum > max1) {
				max1 = testNum;
			}
		}
		if(polygon2.dirty_vertices) {
			polygon2.dirty_vertices = false;
			var self72 = polygon2.local_frame.get_offset();
			self72.x = polygon2.local_x;
			self72.y = polygon2.local_y;
			polygon2.local_frame.set_angleDegrees(polygon2.local_rotation);
			if(polygon2.parent_frame != null) {
				var self73 = polygon2.parent_frame;
				var self74 = self73.get_matrix();
				var m_a8 = self74.a;
				var m_b8 = self74.b;
				var m_c8 = self74.c;
				var m_d8 = self74.d;
				var v4 = polygon2.local_frame.get_offset();
				var pos_x8 = m_a8 * v4.x + m_c8 * v4.y;
				var pos_y8 = m_b8 * v4.x + m_d8 * v4.y;
				var a8 = polygon2.parent_frame.get_offset();
				pos_x8 += a8.x;
				pos_y8 += a8.y;
				var polygon21 = polygon2.local_frame;
				var x5 = polygon2.parent_frame.get_angleDegrees() + polygon2.local_frame.get_angleDegrees();
				polygon21.set_angleDegrees(x5 < 0 ? 360 - -x5 % 360 : x5 % 360);
				var self75 = polygon2.local_frame.get_offset();
				self75.x = pos_x8;
				self75.y = pos_y8;
			}
			while(polygon2._vertices.length > polygon2.count) polygon2._vertices.pop();
			var _g20 = 0;
			var _g21 = polygon2.count;
			while(_g20 < _g21) {
				var i9 = _g20++;
				if(polygon2.local_vertices[i9] == null) {
					continue;
				}
				if(polygon2._vertices[i9] == null) {
					var polygon22 = polygon2._vertices;
					var this9 = new hxmath_math_Vector2Default(0,0);
					polygon22[i9] = this9;
				}
				var p4 = polygon2.local_vertices[i9];
				var self76 = polygon2.local_frame;
				var m4 = self76.get_matrix();
				var self77 = m4;
				var m_a9 = self77.a;
				var m_b9 = self77.b;
				var m_c9 = self77.c;
				var m_d9 = self77.d;
				var self_x5 = m_a9 * p4.x + m_c9 * p4.y;
				var self_y5 = m_b9 * p4.x + m_d9 * p4.y;
				var self78 = m4;
				var b_x4 = self78.tx;
				var b_y4 = self78.ty;
				var pos_x9 = self_x5;
				var pos_y9 = self_y5;
				pos_x9 += b_x4;
				pos_y9 += b_y4;
				var self79 = polygon2._vertices[i9];
				self79.x = pos_x9;
				self79.y = pos_y9;
			}
			var _g22 = 0;
			var _g23 = polygon2.count;
			while(_g22 < _g23) {
				var i10 = _g22++;
				var target4 = polygon2.sync_pos;
				var self80 = polygon2._vertices[(i10 + 1) % polygon2.count];
				var self81 = self80;
				var value8 = self81.x;
				var self82 = target4;
				self82.x = value8;
				var self83 = self80;
				var value9 = self83.y;
				var self84 = target4;
				self84.y = value9;
				var a9 = polygon2._vertices[i10];
				var self85 = polygon2.sync_pos;
				self85.x -= a9.x;
				self85.y -= a9.y;
				if(polygon2._normals[i10] == null) {
					var polygon23 = polygon2._normals;
					var this10 = new hxmath_math_Vector2Default(-polygon2.sync_pos.y,polygon2.sync_pos.x);
					polygon23[i10] = this10;
				} else {
					var y4 = polygon2.sync_pos.x;
					var self86 = polygon2._normals[i10];
					self86.x = -polygon2.sync_pos.y;
					self86.y = y4;
				}
				var self87 = polygon2._normals[i10];
				var self88 = self87;
				var length4 = Math.sqrt(self88.x * self88.x + self88.y * self88.y);
				if(length4 > 0.0) {
					var self89 = self87;
					self89.x /= length4;
					self89.y /= length4;
				}
			}
		}
		var b2 = polygon2._vertices[0];
		min2 = self_x * b2.x + self_y * b2.y;
		max2 = min2;
		var _g24 = 1;
		var _g25 = polygon2.count;
		while(_g24 < _g25) {
			var j1 = _g24++;
			if(polygon2.dirty_vertices) {
				polygon2.dirty_vertices = false;
				var self90 = polygon2.local_frame.get_offset();
				self90.x = polygon2.local_x;
				self90.y = polygon2.local_y;
				polygon2.local_frame.set_angleDegrees(polygon2.local_rotation);
				if(polygon2.parent_frame != null) {
					var self91 = polygon2.parent_frame;
					var self92 = self91.get_matrix();
					var m_a10 = self92.a;
					var m_b10 = self92.b;
					var m_c10 = self92.c;
					var m_d10 = self92.d;
					var v5 = polygon2.local_frame.get_offset();
					var pos_x10 = m_a10 * v5.x + m_c10 * v5.y;
					var pos_y10 = m_b10 * v5.x + m_d10 * v5.y;
					var a10 = polygon2.parent_frame.get_offset();
					pos_x10 += a10.x;
					pos_y10 += a10.y;
					var polygon24 = polygon2.local_frame;
					var x6 = polygon2.parent_frame.get_angleDegrees() + polygon2.local_frame.get_angleDegrees();
					polygon24.set_angleDegrees(x6 < 0 ? 360 - -x6 % 360 : x6 % 360);
					var self93 = polygon2.local_frame.get_offset();
					self93.x = pos_x10;
					self93.y = pos_y10;
				}
				while(polygon2._vertices.length > polygon2.count) polygon2._vertices.pop();
				var _g26 = 0;
				var _g27 = polygon2.count;
				while(_g26 < _g27) {
					var i11 = _g26++;
					if(polygon2.local_vertices[i11] == null) {
						continue;
					}
					if(polygon2._vertices[i11] == null) {
						var polygon25 = polygon2._vertices;
						var this11 = new hxmath_math_Vector2Default(0,0);
						polygon25[i11] = this11;
					}
					var p5 = polygon2.local_vertices[i11];
					var self94 = polygon2.local_frame;
					var m5 = self94.get_matrix();
					var self95 = m5;
					var m_a11 = self95.a;
					var m_b11 = self95.b;
					var m_c11 = self95.c;
					var m_d11 = self95.d;
					var self_x6 = m_a11 * p5.x + m_c11 * p5.y;
					var self_y6 = m_b11 * p5.x + m_d11 * p5.y;
					var self96 = m5;
					var b_x5 = self96.tx;
					var b_y5 = self96.ty;
					var pos_x11 = self_x6;
					var pos_y11 = self_y6;
					pos_x11 += b_x5;
					pos_y11 += b_y5;
					var self97 = polygon2._vertices[i11];
					self97.x = pos_x11;
					self97.y = pos_y11;
				}
				var _g28 = 0;
				var _g29 = polygon2.count;
				while(_g28 < _g29) {
					var i12 = _g28++;
					var target5 = polygon2.sync_pos;
					var self98 = polygon2._vertices[(i12 + 1) % polygon2.count];
					var self99 = self98;
					var value10 = self99.x;
					var self100 = target5;
					self100.x = value10;
					var self101 = self98;
					var value11 = self101.y;
					var self102 = target5;
					self102.y = value11;
					var a11 = polygon2._vertices[i12];
					var self103 = polygon2.sync_pos;
					self103.x -= a11.x;
					self103.y -= a11.y;
					if(polygon2._normals[i12] == null) {
						var polygon26 = polygon2._normals;
						var this12 = new hxmath_math_Vector2Default(-polygon2.sync_pos.y,polygon2.sync_pos.x);
						polygon26[i12] = this12;
					} else {
						var y5 = polygon2.sync_pos.x;
						var self104 = polygon2._normals[i12];
						self104.x = -polygon2.sync_pos.y;
						self104.y = y5;
					}
					var self105 = polygon2._normals[i12];
					var self106 = self105;
					var length5 = Math.sqrt(self106.x * self106.x + self106.y * self106.y);
					if(length5 > 0.0) {
						var self107 = self105;
						self107.x /= length5;
						self107.y /= length5;
					}
				}
			}
			var b3 = polygon2._vertices[j1];
			testNum = self_x * b3.x + self_y * b3.y;
			if(testNum < min2) {
				min2 = testNum;
			}
			if(testNum > max2) {
				max2 = testNum;
			}
		}
		test1 = min1 - max2;
		test2 = min2 - max1;
		if(test1 > 0 || test2 > 0) {
			return null;
		}
		var overlap = -(max2 - min1);
		if(flip) {
			overlap *= -1;
		}
		if(Math.abs(overlap) < closest) {
			if(col == null) {
				var c = echo_data_CollisionData._pool.get();
				c.sa = null;
				c.sb = null;
				c.overlap = overlap;
				var self108 = c.normal;
				self108.x = self_x;
				self108.y = self_y;
				c.pooled = false;
				col = c;
			} else {
				col.overlap = overlap;
				var self109 = col.normal;
				self109.x = self_x;
				self109.y = self_y;
			}
			closest = Math.abs(overlap);
		}
	}
	if(col == null) {
		return null;
	}
	col.sa = flip ? polygon2 : polygon1;
	col.sb = flip ? polygon1 : polygon2;
	if(flip) {
		var self = col.normal;
		self.x = -self.x;
		self.y = -self.y;
	}
	return col;
};
var found_Event = function() { };
$hxClasses["found.Event"] = found_Event;
found_Event.__name__ = true;
found_Event.send = function(name,mask) {
	if(mask == null) {
		mask = -1;
	}
	var entries = found_Event.get(name);
	if(entries != null) {
		var _g = 0;
		while(_g < entries.length) {
			var e = entries[_g];
			++_g;
			if(mask == -1 || mask == e.mask) {
				var _g1 = e.onEvent;
				switch(_g1._hx_index) {
				case 0:
					var v = _g1.v;
					v();
					break;
				case 1:
					var v1 = _g1.v;
					v1([name,mask]);
					break;
				}
			}
		}
	}
};
found_Event.get = function(name) {
	return found_Event.events.h[name];
};
found_Event.add = function(name,onEvent,mask) {
	if(mask == null) {
		mask = -1;
	}
	var e = { name : name, onEvent : onEvent, mask : mask};
	var entries = found_Event.events.h[name];
	if(entries != null) {
		entries.push(e);
	} else {
		found_Event.events.h[name] = [e];
	}
	return e;
};
found_Event.remove = function(name) {
	var _this = found_Event.events;
	if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
		delete(_this.h[name]);
	}
};
found_Event.removeListener = function(event) {
	var entries = found_Event.events.h[event.name];
	if(entries != null) {
		HxOverrides.remove(entries,event);
	}
};
var found_OS = $hxEnums["found.OS"] = { __ename__ : true, __constructs__ : ["None","Windows","Mac","Linux","Android","iOS","Switch","XboxOne","Ps4"]
	,None: {_hx_index:0,__enum__:"found.OS",toString:$estr}
	,Windows: {_hx_index:1,__enum__:"found.OS",toString:$estr}
	,Mac: {_hx_index:2,__enum__:"found.OS",toString:$estr}
	,Linux: {_hx_index:3,__enum__:"found.OS",toString:$estr}
	,Android: {_hx_index:4,__enum__:"found.OS",toString:$estr}
	,iOS: {_hx_index:5,__enum__:"found.OS",toString:$estr}
	,Switch: {_hx_index:6,__enum__:"found.OS",toString:$estr}
	,XboxOne: {_hx_index:7,__enum__:"found.OS",toString:$estr}
	,Ps4: {_hx_index:8,__enum__:"found.OS",toString:$estr}
};
var found_Found = function() { };
$hxClasses["found.Found"] = found_Found;
found_Found.__name__ = true;
found_Found.__properties__ = {get_os:"get_os"};
found_Found._app = null;
found_Found.WIDTH = null;
found_Found.HEIGHT = null;
found_Found.backbuffer = null;
found_Found.scenebuffer = null;
found_Found.renderfunc = null;
found_Found.tileeditor = null;
found_Found.popupZuiInstance = null;
found_Found.backgroundcolor = null;
found_Found.smooth = null;
found_Found._fps = null;
found_Found.os = null;
found_Found.get_os = function() {
	var plat = found_OS.None;
	var agent = $global.navigator.userAgent;
	if(agent.lastIndexOf("Mobi") != -1) {
		if(agent.lastIndexOf("Android") != -1) {
			plat = found_OS.Android;
		} else if(agent.lastIndexOf("Mac") != -1) {
			plat = found_OS.iOS;
		}
	} else if(agent.lastIndexOf("Windows") != -1) {
		plat = found_OS.Windows;
	} else if(agent.lastIndexOf("Linux") != -1) {
		plat = found_OS.Linux;
	} else if(agent.lastIndexOf("Mac") != -1) {
		plat = found_OS.Mac;
	} else if(agent.lastIndexOf("Xbox") != -1) {
		plat = found_OS.XboxOne;
	} else if(agent.lastIndexOf("PlayStation 4") != -1 || agent.lastIndexOf("PLAYSTATION 4") != -1) {
		plat = found_OS.Ps4;
	}
	return plat;
};
found_Found.setup = function(config) {
	found_Found.WIDTH = kha_Display.get_primary().get_width();
	found_Found.HEIGHT = kha_Display.get_primary().get_height();
	if(config.width == null) {
		config.width = found_Found.WIDTH;
	}
	if(config.height == null) {
		config.height = found_Found.HEIGHT;
	}
	if(config.bufferwidth == null) {
		config.bufferwidth = found_Found.WIDTH;
	}
	found_Found.BUFFERWIDTH = config.bufferwidth;
	if(config.bufferheight == null) {
		config.bufferheight = found_Found.HEIGHT;
	}
	found_Found.BUFFERHEIGHT = config.bufferheight;
	if(config.fps == null) {
		config.fps = 60;
	}
	found_Found._fps = config.fps;
	if(config.backgroundcolor == null) {
		config.backgroundcolor = -16777216;
	}
	found_Found.backgroundcolor = config.backgroundcolor;
	if(config.smooth == null) {
		config.smooth = true;
	}
	found_Found.smooth = config.smooth;
	found_Found.html();
	kha_System.start(new kha_SystemOptions(config.title,config.width,config.height,null,null),function(_) {
		kha_Assets.loadEverything(function() {
			kha_Scheduler.addTimeTask(found_Found.update,0,1 / found_Found._fps);
			found_Found.resize(kha_System.windowWidth(),kha_System.windowHeight());
			var tBlob = config.defaultThemeFile != null ? kha_Assets.blobs.get(config.defaultThemeFile) : kha_Assets.blobs.get("_themes_json");
			if(tBlob != null) {
				zui_Canvas.themes = JSON.parse(tBlob.toString());
			} else {
				found_tool_Log.warn("\"_themes.json\" is empty! Using default theme instead.",{ fileName : "found/Found.hx", lineNumber : 156, className : "found.Found", methodName : "setup"});
			}
			if(zui_Canvas.themes.length == 0) {
				zui_Canvas.themes.push(zui_Themes.dark);
			}
			found_Found._app = Type.createInstance(config.app,[]);
			kha_Window.get(0).notifyOnResize(found_Found.resize);
			kha_System.notifyOnFrames(function(framebuffer) {
				found_Found.render(framebuffer[0]);
			});
			found_Found.tileeditor = new found_tool_TileEditor();
			found_Found.popupZuiInstance = new zui_Zui({ font : kha_Assets.fonts.font_default, theme : zui_Canvas.themes[0]});
		});
	});
};
found_Found.resize = function(width,height) {
	found_Found["WIDTH"] = width;
	found_Found["HEIGHT"] = height;
	found_Found.BUFFERWIDTH = found_Found.WIDTH;
	found_Found.BUFFERHEIGHT = found_Found.HEIGHT;
};
found_Found.update = function() {
	found_Timer.update();
	found_Found._app.update(found_Timer.delta);
};
found_Found.render = function(framebuffer) {
	found_Found._app.render(framebuffer);
};
found_Found.html = function() {
	window.document.documentElement.style.padding = "0";
	window.document.documentElement.style.margin = "0";
	window.document.body.style.padding = "0";
	window.document.body.style.margin = "0";
	var canvas = js_Boot.__cast(window.document.getElementById("khanvas") , HTMLCanvasElement);
	canvas.style.display = "block";
	var resize = function() {
		var resize = window.innerWidth * window.devicePixelRatio | 0;
		canvas.width = resize;
		var resize = window.innerHeight * window.devicePixelRatio | 0;
		canvas.height = resize;
		canvas.style.width = window.document.documentElement.clientWidth + "px";
		canvas.style.height = window.document.documentElement.clientHeight + "px";
	};
	window.onresize = resize;
	resize();
};
var found_Input = function() { };
$hxClasses["found.Input"] = found_Input;
found_Input.__name__ = true;
found_Input.reset = function() {
	found_Input.occupied = false;
	if(found_Input.mouse != null) {
		found_Input.mouse.reset();
	}
	if(found_Input.pen != null) {
		found_Input.pen.reset();
	}
	if(found_Input.keyboard != null) {
		found_Input.keyboard.reset();
	}
	var _g = 0;
	var _g1 = found_Input.gamepads;
	while(_g < _g1.length) {
		var gamepad = _g1[_g];
		++_g;
		gamepad.reset();
	}
};
found_Input.endFrame = function() {
	if(found_Input.mouse != null) {
		found_Input.mouse.endFrame();
	}
	if(found_Input.pen != null) {
		found_Input.pen.endFrame();
	}
	if(found_Input.keyboard != null) {
		found_Input.keyboard.endFrame();
	}
	var _g = 0;
	var _g1 = found_Input.gamepads;
	while(_g < _g1.length) {
		var gamepad = _g1[_g];
		++_g;
		gamepad.endFrame();
	}
	if(found_Input.virtualButtons != null) {
		var vb = haxe_ds_StringMap.valueIterator(found_Input.virtualButtons.h);
		while(vb.hasNext()) {
			var vb1 = vb.next();
			vb1.started = vb1.released = false;
		}
	}
};
found_Input.getMouse = function() {
	if(!found_Input.registered) {
		found_Input.registered = true;
		found_App.notifyOnEndFrame(found_Input.endFrame);
		found_App.notifyOnReset(found_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			found_Input.getMouse().reset();
		},null,null,null,null);
	}
	if(found_Input.mouse == null) {
		found_Input.mouse = new found_Mouse();
	}
	return found_Input.mouse;
};
found_Input.getPen = function() {
	if(!found_Input.registered) {
		found_Input.registered = true;
		found_App.notifyOnEndFrame(found_Input.endFrame);
		found_App.notifyOnReset(found_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			found_Input.getMouse().reset();
		},null,null,null,null);
	}
	if(found_Input.pen == null) {
		found_Input.pen = new found_Pen();
	}
	return found_Input.pen;
};
found_Input.getSurface = function() {
	if(!found_Input.registered) {
		found_Input.registered = true;
		found_App.notifyOnEndFrame(found_Input.endFrame);
		found_App.notifyOnReset(found_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			found_Input.getMouse().reset();
		},null,null,null,null);
	}
	return found_Input.getMouse();
};
found_Input.getKeyboard = function() {
	if(!found_Input.registered) {
		found_Input.registered = true;
		found_App.notifyOnEndFrame(found_Input.endFrame);
		found_App.notifyOnReset(found_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			found_Input.getMouse().reset();
		},null,null,null,null);
	}
	if(found_Input.keyboard == null) {
		found_Input.keyboard = new found_Keyboard();
	}
	return found_Input.keyboard;
};
found_Input.getGamepad = function(i) {
	if(i == null) {
		i = 0;
	}
	if(i >= 4) {
		return null;
	}
	if(!found_Input.registered) {
		found_Input.registered = true;
		found_App.notifyOnEndFrame(found_Input.endFrame);
		found_App.notifyOnReset(found_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			found_Input.getMouse().reset();
		},null,null,null,null);
	}
	while(found_Input.gamepads.length <= i) found_Input.gamepads.push(new found_Gamepad(found_Input.gamepads.length));
	if(found_Input.gamepads[i].connected) {
		return found_Input.gamepads[i];
	} else {
		return null;
	}
};
found_Input.getSensor = function() {
	if(!found_Input.registered) {
		found_Input.registered = true;
		found_App.notifyOnEndFrame(found_Input.endFrame);
		found_App.notifyOnReset(found_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			found_Input.getMouse().reset();
		},null,null,null,null);
	}
	if(found_Input.sensor == null) {
		found_Input.sensor = new found_Sensor();
	}
	return found_Input.sensor;
};
found_Input.getVirtualButton = function(virtual) {
	if(!found_Input.registered) {
		found_Input.registered = true;
		found_App.notifyOnEndFrame(found_Input.endFrame);
		found_App.notifyOnReset(found_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			found_Input.getMouse().reset();
		},null,null,null,null);
	}
	if(found_Input.virtualButtons == null) {
		return null;
	}
	return found_Input.virtualButtons.h[virtual];
};
found_Input.register = function() {
	found_Input.registered = true;
	found_App.notifyOnEndFrame(found_Input.endFrame);
	found_App.notifyOnReset(found_Input.reset);
	kha_System.notifyOnApplicationState(function() {
		found_Input.getMouse().reset();
	},null,null,null,null);
};
var found_VirtualButton = function() {
	this.down = false;
	this.released = false;
	this.started = false;
};
$hxClasses["found.VirtualButton"] = found_VirtualButton;
found_VirtualButton.__name__ = true;
found_VirtualButton.prototype = {
	started: null
	,released: null
	,down: null
	,__class__: found_VirtualButton
};
var found_VirtualInput = function() {
	this.virtualButtons = null;
};
$hxClasses["found.VirtualInput"] = found_VirtualInput;
found_VirtualInput.__name__ = true;
found_VirtualInput.prototype = {
	virtualButtons: null
	,setVirtual: function(virtual,button) {
		if(found_Input.virtualButtons == null) {
			found_Input.virtualButtons = new haxe_ds_StringMap();
		}
		var vb = found_Input.virtualButtons.h[virtual];
		if(vb == null) {
			vb = new found_VirtualButton();
			found_Input.virtualButtons.h[virtual] = vb;
		}
		if(this.virtualButtons == null) {
			this.virtualButtons = new haxe_ds_StringMap();
		}
		this.virtualButtons.h[button] = vb;
	}
	,downVirtual: function(button) {
		if(this.virtualButtons != null) {
			var vb = this.virtualButtons.h[button];
			if(vb != null) {
				vb.down = true;
				vb.started = true;
			}
		}
	}
	,upVirtual: function(button) {
		if(this.virtualButtons != null) {
			var vb = this.virtualButtons.h[button];
			if(vb != null) {
				vb.down = false;
				vb.released = true;
			}
		}
	}
	,__class__: found_VirtualInput
};
var found_Mouse = function() {
	this.lastY = -1.0;
	this.lastX = -1.0;
	this.hidden = false;
	this.locked = false;
	this.wheelDelta = 0;
	this.distY = 0.0;
	this.distX = 0.0;
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.viewY = 0.0;
	this.viewX = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.buttonsReleased = [false,false,false];
	this.buttonsStarted = [false,false,false];
	this.buttonsDown = [false,false,false];
	found_VirtualInput.call(this);
	kha_input_Mouse.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.moveListener),$bind(this,this.wheelListener));
};
$hxClasses["found.Mouse"] = found_Mouse;
found_Mouse.__name__ = true;
found_Mouse.getMouseButtonStringValues = function() {
	return found_Mouse.buttons;
};
found_Mouse.__super__ = found_VirtualInput;
found_Mouse.prototype = $extend(found_VirtualInput.prototype,{
	buttonsDown: null
	,buttonsStarted: null
	,buttonsReleased: null
	,x: null
	,y: null
	,viewX: null
	,viewY: null
	,moved: null
	,movementX: null
	,movementY: null
	,distX: null
	,distY: null
	,wheelDelta: null
	,locked: null
	,hidden: null
	,lastX: null
	,lastY: null
	,endFrame: function() {
		var tmp = this.buttonsStarted[1] = this.buttonsStarted[2] = false;
		this.buttonsStarted[0] = tmp;
		var tmp = this.buttonsReleased[1] = this.buttonsReleased[2] = false;
		this.buttonsReleased[0] = tmp;
		this.moved = false;
		this.movementX = 0;
		this.movementY = 0;
		this.wheelDelta = 0;
	}
	,reset: function() {
		var tmp = this.buttonsDown[1] = this.buttonsDown[2] = false;
		this.buttonsDown[0] = tmp;
		this.endFrame();
	}
	,buttonIndex: function(button) {
		if(button == "left") {
			return 0;
		} else if(button == "right") {
			return 1;
		} else {
			return 2;
		}
	}
	,down: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsDown[this.buttonIndex(button)];
	}
	,started: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsStarted[this.buttonIndex(button)];
	}
	,released: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsReleased[this.buttonIndex(button)];
	}
	,lock: function() {
		if(kha_input_Mouse.get().canLock()) {
			kha_input_Mouse.get().lock();
			this.locked = true;
			this.hidden = true;
		}
	}
	,unlock: function() {
		if(kha_input_Mouse.get().canLock()) {
			kha_input_Mouse.get().unlock();
			this.locked = false;
			this.hidden = false;
		}
	}
	,hide: function() {
		kha_input_Mouse.get().hideSystemCursor();
		this.hidden = true;
	}
	,show: function() {
		kha_input_Mouse.get().showSystemCursor();
		this.hidden = false;
	}
	,downListener: function(index,x,y) {
		this.buttonsDown[index] = true;
		this.buttonsStarted[index] = true;
		this.x = x;
		this.y = y;
		if(index == 0) {
			this.lastX = x;
			this.lastY = y;
		}
		this.downVirtual(found_Mouse.buttons[index]);
	}
	,upListener: function(index,x,y) {
		this.buttonsDown[index] = false;
		this.buttonsReleased[index] = true;
		this.x = x;
		this.y = y;
		this.upVirtual(found_Mouse.buttons[index]);
	}
	,moveListener: function(x,y,movementX,movementY) {
		if(this.lastX == -1.0 && this.lastY == -1.0) {
			this.lastX = x;
			this.lastY = y;
		}
		if(this.locked) {
			this.movementX += movementX;
			this.movementY += movementY;
		} else {
			this.movementX += x - this.lastX;
			this.movementY += y - this.lastY;
		}
		this.distX = movementX;
		this.distY = movementY;
		this.lastX = x;
		this.lastY = y;
		this.x = x;
		this.y = y;
		this.moved = true;
	}
	,wheelListener: function(delta) {
		this.wheelDelta = delta;
	}
	,get_viewX: function() {
		return this.x - found_Found.sceneX;
	}
	,get_viewY: function() {
		return this.y - found_Found.sceneY;
	}
	,__class__: found_Mouse
	,__properties__: {get_viewY:"get_viewY",get_viewX:"get_viewX"}
});
var found_Pen = function() {
	this.lastY = -1.0;
	this.lastX = -1.0;
	this.connected = false;
	this.pressure = 0.0;
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.viewY = 0.0;
	this.viewX = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.buttonsReleased = [false];
	this.buttonsStarted = [false];
	this.buttonsDown = [false];
	found_VirtualInput.call(this);
	kha_input_Pen.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.moveListener));
};
$hxClasses["found.Pen"] = found_Pen;
found_Pen.__name__ = true;
found_Pen.__super__ = found_VirtualInput;
found_Pen.prototype = $extend(found_VirtualInput.prototype,{
	buttonsDown: null
	,buttonsStarted: null
	,buttonsReleased: null
	,x: null
	,y: null
	,viewX: null
	,viewY: null
	,moved: null
	,movementX: null
	,movementY: null
	,pressure: null
	,connected: null
	,lastX: null
	,lastY: null
	,endFrame: function() {
		this.buttonsStarted[0] = false;
		this.buttonsReleased[0] = false;
		this.moved = false;
		this.movementX = 0;
		this.movementY = 0;
	}
	,reset: function() {
		this.buttonsDown[0] = false;
		this.endFrame();
	}
	,buttonIndex: function(button) {
		return 0;
	}
	,down: function(button) {
		if(button == null) {
			button = "tip";
		}
		return this.buttonsDown[this.buttonIndex(button)];
	}
	,started: function(button) {
		if(button == null) {
			button = "tip";
		}
		return this.buttonsStarted[this.buttonIndex(button)];
	}
	,released: function(button) {
		if(button == null) {
			button = "tip";
		}
		return this.buttonsReleased[this.buttonIndex(button)];
	}
	,downListener: function(x,y,pressure) {
		this.buttonsDown[0] = true;
		this.buttonsStarted[0] = true;
		this.x = x;
		this.y = y;
		this.pressure = pressure;
	}
	,upListener: function(x,y,pressure) {
		this.buttonsDown[0] = false;
		this.buttonsReleased[0] = true;
		this.x = x;
		this.y = y;
		this.pressure = pressure;
	}
	,moveListener: function(x,y,pressure) {
		if(this.lastX == -1.0 && this.lastY == -1.0) {
			this.lastX = x;
			this.lastY = y;
		}
		this.movementX = x - this.lastX;
		this.movementY = y - this.lastY;
		this.lastX = x;
		this.lastY = y;
		this.x = x;
		this.y = y;
		this.moved = true;
		this.pressure = pressure;
		this.connected = true;
	}
	,get_viewX: function() {
		return this.x - found_Found.sceneX;
	}
	,get_viewY: function() {
		return this.y - found_Found.sceneY;
	}
	,__class__: found_Pen
	,__properties__: {get_viewY:"get_viewY",get_viewX:"get_viewX"}
});
var found_Keyboard = function() {
	this.repeatTime = 0.0;
	this.repeatKey = false;
	this.keysFrame = [];
	this.keysReleased = new haxe_ds_StringMap();
	this.keysStarted = new haxe_ds_StringMap();
	this.keysDown = new haxe_ds_StringMap();
	found_VirtualInput.call(this);
	this.reset();
	kha_input_Keyboard.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.pressListener));
};
$hxClasses["found.Keyboard"] = found_Keyboard;
found_Keyboard.__name__ = true;
found_Keyboard.getKeyCodeStringValues = function() {
	return found_Keyboard.keys;
};
found_Keyboard.keyCode = function(key) {
	if(key == 32) {
		return "space";
	} else if(key == 8) {
		return "backspace";
	} else if(key == 9) {
		return "tab";
	} else if(key == 13) {
		return "enter";
	} else if(key == 16) {
		return "shift";
	} else if(key == 17) {
		return "control";
	} else if(key == 18) {
		return "alt";
	} else if(key == 27) {
		return "escape";
	} else if(key == 46) {
		return "delete";
	} else if(key == 38) {
		return "up";
	} else if(key == 40) {
		return "down";
	} else if(key == 37) {
		return "left";
	} else if(key == 39) {
		return "right";
	} else if(key == 1) {
		return "back";
	} else if(key == 188) {
		return ",";
	} else if(key == 190) {
		return ".";
	} else if(key == 58) {
		return ":";
	} else if(key == 59) {
		return ";";
	} else if(key == 60) {
		return "<";
	} else if(key == 61) {
		return "=";
	} else if(key == 62) {
		return ">";
	} else if(key == 63) {
		return "?";
	} else if(key == 161) {
		return "!";
	} else if(key == 162) {
		return "\"";
	} else if(key == 163) {
		return "#";
	} else if(key == 164) {
		return "$";
	} else if(key == 165) {
		return "%";
	} else if(key == 166) {
		return "&";
	} else if(key == 167) {
		return "_";
	} else if(key == 168) {
		return "(";
	} else if(key == 169) {
		return ")";
	} else if(key == 170) {
		return "*";
	} else if(key == 172) {
		return "|";
	} else if(key == 174) {
		return "{";
	} else if(key == 175) {
		return "}";
	} else if(key == 219) {
		return "[";
	} else if(key == 221) {
		return "]";
	} else if(key == 176) {
		return "~";
	} else if(key == 192) {
		return "`";
	} else if(key == 191) {
		return "/";
	} else if(key == 220) {
		return "\\";
	} else if(key == 64) {
		return "@";
	} else if(key == 107) {
		return "+";
	} else if(key == 171) {
		return "+";
	} else if(key == 109) {
		return "-";
	} else if(key == 173) {
		return "-";
	} else if(key == 106) {
		return "*";
	} else if(key == 111) {
		return "/";
	} else if(key == 110) {
		return ".";
	} else if(key == 48) {
		return "0";
	} else if(key == 96) {
		return "0";
	} else if(key == 49) {
		return "1";
	} else if(key == 97) {
		return "1";
	} else if(key == 50) {
		return "2";
	} else if(key == 98) {
		return "2";
	} else if(key == 51) {
		return "3";
	} else if(key == 99) {
		return "3";
	} else if(key == 52) {
		return "4";
	} else if(key == 100) {
		return "4";
	} else if(key == 53) {
		return "5";
	} else if(key == 101) {
		return "5";
	} else if(key == 54) {
		return "6";
	} else if(key == 102) {
		return "6";
	} else if(key == 55) {
		return "7";
	} else if(key == 103) {
		return "7";
	} else if(key == 56) {
		return "8";
	} else if(key == 104) {
		return "8";
	} else if(key == 57) {
		return "9";
	} else if(key == 105) {
		return "9";
	} else if(key == 112) {
		return "f1";
	} else if(key == 113) {
		return "f2";
	} else if(key == 114) {
		return "f3";
	} else if(key == 115) {
		return "f4";
	} else if(key == 116) {
		return "f5";
	} else if(key == 117) {
		return "f6";
	} else if(key == 118) {
		return "f7";
	} else if(key == 119) {
		return "f8";
	} else if(key == 120) {
		return "f9";
	} else if(key == 121) {
		return "f10";
	} else if(key == 122) {
		return "f11";
	} else if(key == 123) {
		return "f12";
	} else {
		return String.fromCodePoint(key).toLowerCase();
	}
};
found_Keyboard.__super__ = found_VirtualInput;
found_Keyboard.prototype = $extend(found_VirtualInput.prototype,{
	keysDown: null
	,keysStarted: null
	,keysReleased: null
	,keysFrame: null
	,repeatKey: null
	,repeatTime: null
	,endFrame: function() {
		if(this.keysFrame.length > 0) {
			var _g = 0;
			var _g1 = this.keysFrame;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				this.keysStarted.h[s] = false;
				this.keysReleased.h[s] = false;
			}
			this.keysFrame.splice(0,this.keysFrame.length);
		}
		if(kha_Scheduler.time() - this.repeatTime > 0.05) {
			this.repeatTime = kha_Scheduler.time();
			this.repeatKey = true;
		} else {
			this.repeatKey = false;
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = found_Keyboard.keys;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			this.keysDown.h[s] = false;
			this.keysStarted.h[s] = false;
			this.keysReleased.h[s] = false;
		}
		this.endFrame();
	}
	,down: function(key) {
		return this.keysDown.h[key];
	}
	,started: function(key) {
		return this.keysStarted.h[key];
	}
	,released: function(key) {
		return this.keysReleased.h[key];
	}
	,repeat: function(key) {
		if(!this.keysStarted.h[key]) {
			if(this.repeatKey) {
				return this.keysDown.h[key];
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,downListener: function(code) {
		var s = found_Keyboard.keyCode(code);
		this.keysFrame.push(s);
		this.keysStarted.h[s] = true;
		this.keysDown.h[s] = true;
		this.repeatTime = kha_Scheduler.time() + 0.4;
		this.downVirtual(s);
	}
	,upListener: function(code) {
		var s = found_Keyboard.keyCode(code);
		this.keysFrame.push(s);
		this.keysReleased.h[s] = true;
		this.keysDown.h[s] = false;
		this.keysStarted.h[s] = false;
		this.upVirtual(s);
	}
	,pressListener: function(char) {
	}
	,__class__: found_Keyboard
});
var found_GamepadStick = function() {
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.lastY = 0.0;
	this.lastX = 0.0;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["found.GamepadStick"] = found_GamepadStick;
found_GamepadStick.__name__ = true;
found_GamepadStick.prototype = {
	x: null
	,y: null
	,lastX: null
	,lastY: null
	,moved: null
	,movementX: null
	,movementY: null
	,__class__: found_GamepadStick
};
var found_GamepadAxis = function() {
	this.movement = 0.0;
	this.moved = false;
	this.lastValue = 0.0;
	this.value = 0.0;
};
$hxClasses["found.GamepadAxis"] = found_GamepadAxis;
found_GamepadAxis.__name__ = true;
found_GamepadAxis.prototype = {
	value: null
	,lastValue: null
	,moved: null
	,movement: null
	,updateAxis: function(newValue) {
		if(newValue != this.value) {
			this.lastValue = this.value;
			this.value = newValue;
			this.movement = this.value - this.lastValue;
			this.moved = true;
		}
	}
	,__class__: found_GamepadAxis
};
var found_Gamepad = function(i,virtual) {
	if(virtual == null) {
		virtual = false;
	}
	this.connects = 0;
	this.num = 0;
	this.connected = false;
	this.axisValues = [];
	this.buttonsFrame = [];
	this.buttonsReleased = [];
	this.buttonsStarted = [];
	this.buttonsDown = [];
	found_VirtualInput.call(this);
	var _g = 0;
	var _g1 = found_Gamepad.buttons;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		this.buttonsDown.push(0.0);
		this.buttonsStarted.push(false);
		this.buttonsReleased.push(false);
	}
	var _g = 0;
	var _g1 = found_Gamepad.axisNames;
	while(_g < _g1.length) {
		var axis = _g1[_g];
		++_g;
		this.axisValues.push(new found_GamepadAxis());
	}
	this.num = i;
	this.reset();
	if(virtual) {
		this.connected = true;
	} else {
		this.connect();
	}
};
$hxClasses["found.Gamepad"] = found_Gamepad;
found_Gamepad.__name__ = true;
found_Gamepad.getButtonStringValues = function() {
	return found_Gamepad.buttons;
};
found_Gamepad.keyCode = function(button) {
	return found_Gamepad.buttons[button];
};
found_Gamepad.getAxisStringValues = function() {
	return found_Gamepad.axisNames;
};
found_Gamepad.axisName = function(axisIndex) {
	return found_Gamepad.axisNames[axisIndex];
};
found_Gamepad.__super__ = found_VirtualInput;
found_Gamepad.prototype = $extend(found_VirtualInput.prototype,{
	buttonsDown: null
	,buttonsStarted: null
	,buttonsReleased: null
	,buttonsFrame: null
	,axisValues: null
	,connected: null
	,num: null
	,connects: null
	,connect: function() {
		var gamepad = kha_input_Gamepad.get(this.num);
		if(gamepad == null) {
			return;
		}
		this.connected = true;
		gamepad.notify($bind(this,this.axisListener),$bind(this,this.buttonListener));
	}
	,endFrame: function() {
		if(this.buttonsFrame.length > 0) {
			var _g = 0;
			var _g1 = this.buttonsFrame;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				this.buttonsStarted[i] = false;
				this.buttonsReleased[i] = false;
			}
			this.buttonsFrame.splice(0,this.buttonsFrame.length);
		}
		var _g = 0;
		var _g1 = this.axisValues;
		while(_g < _g1.length) {
			var axis = _g1[_g];
			++_g;
			axis.moved = false;
			axis.movement = 0;
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.buttonsDown.length;
		while(_g < _g1) {
			var i = _g++;
			this.buttonsDown[i] = 0.0;
			this.buttonsStarted[i] = false;
			this.buttonsReleased[i] = false;
		}
		this.endFrame();
	}
	,buttonIndex: function(button) {
		var _g = 0;
		var _g1 = found_Gamepad.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			if(found_Gamepad.buttons[i] == button) {
				return i;
			}
		}
		return 0;
	}
	,down: function(button) {
		return this.buttonsDown[this.buttonIndex(button)];
	}
	,started: function(button) {
		return this.buttonsStarted[this.buttonIndex(button)];
	}
	,released: function(button) {
		return this.buttonsReleased[this.buttonIndex(button)];
	}
	,axisIndex: function(axisName) {
		var _g = 0;
		var _g1 = found_Gamepad.axisNames.length;
		while(_g < _g1) {
			var i = _g++;
			if(found_Gamepad.axisNames[i] == axisName) {
				return i;
			}
		}
		return 0;
	}
	,getAxisInformation: function(axisName) {
		return this.axisValues[this.axisIndex(axisName)];
	}
	,axisListener: function(axis,value) {
		if(axis >= 0 && axis < this.axisValues.length) {
			this.axisValues[axis].updateAxis(value);
		}
	}
	,buttonListener: function(button,value) {
		this.buttonsFrame.push(button);
		this.buttonsDown[button] = value;
		if(value > 0) {
			this.buttonsStarted[button] = true;
		} else {
			this.buttonsReleased[button] = true;
		}
		if(value == 0.0) {
			this.upVirtual(found_Gamepad.buttons[button]);
		} else if(value == 1.0) {
			this.downVirtual(found_Gamepad.buttons[button]);
		}
	}
	,__class__: found_Gamepad
});
var found_Sensor = function() {
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	kha_input_Sensor.get(0).notify($bind(this,this.listener));
};
$hxClasses["found.Sensor"] = found_Sensor;
found_Sensor.__name__ = true;
found_Sensor.prototype = {
	x: null
	,y: null
	,z: null
	,listener: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,__class__: found_Sensor
};
var found_Scene = function(raw) {
	this._depth = true;
	this.cullOffset = 0;
	this.physicsUpdate = function(f) {
	};
	this.traitRemoves = [];
	this.traitInits = [];
	found_object_Object.uidCounter = -1;
	found_object_Object._positions.length = 0;
	found_object_Object._rotations.length = 0;
	found_object_Object._scales.length = 0;
	this.raw = raw;
	this._entities = [];
	this.activeEntities = [];
	this.inactiveEntities = [];
	if(raw.physicsWorld != null) {
		this.addPhysicsWorld(raw.physicsWorld);
	}
	if(Object.prototype.hasOwnProperty.call(raw,"_entities")) {
		var _g = 0;
		var _g1 = raw._entities;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			this.addEntity(e);
		}
	}
};
$hxClasses["found.Scene"] = found_Scene;
found_Scene.__name__ = true;
found_Scene.createTraits = function(traits,object) {
	if(traits == null) {
		return;
	}
	var _g = 0;
	while(_g < traits.length) {
		var t = [traits[_g]];
		++_g;
		if(!found_Trait.hasTrait(t[0].classname) && t[0].props != null) {
			found_Trait.addProps(t[0].classname,t[0].props);
		}
		if(t[0].type == "VisualScript") {
			found_data_Data.getBlob(t[0].classname,(function(t) {
				return function(blob) {
					var node = JSON.parse(blob.toString());
					var visualTrait = found_node_Logic.parse(node);
					visualTrait.name = t[0].classname;
					var existentTrait = object.getTrait(js_Boot.getClass(visualTrait),visualTrait.name);
					if(existentTrait != null) {
						object.removeTrait(existentTrait);
					}
					object.addTrait(visualTrait);
					if(object.active) {
						found_Scene.addToApp(visualTrait);
					}
				};
			})(t),true);
		} else if(t[0].type == "Script") {
			var args = [];
			if(t[0].parameters != null) {
				var _g1 = 0;
				var _g2 = t[0].parameters;
				while(_g1 < _g2.length) {
					var param = _g2[_g1];
					++_g1;
					args.push(found_Scene.parseArg(param));
				}
			}
			var traitInst = found_Scene.createTraitClassInstance(t[0].classname,args);
			if(traitInst == null) {
				found_tool_Log.error("Trait '" + t[0].classname + "' referenced in object '" + object.get_name() + "' not found",{ fileName : "found/Scene.hx", lineNumber : 447, className : "found.Scene", methodName : "createTraits"});
				continue;
			}
			if(t[0].props != null) {
				var _g3 = 0;
				var _g4 = t[0].props.length / 2 | 0;
				while(_g3 < _g4) {
					var i = _g3++;
					var pname = t[0].props[i * 2];
					var pval = t[0].props[i * 2 + 1];
					if(pval != "") {
						Reflect.setProperty(traitInst,pname,found_Scene.parseArg(pval));
					}
				}
			}
			object.addTrait(traitInst);
			if(object.active) {
				found_Scene.addToApp(traitInst);
			}
		}
	}
};
found_Scene.addToApp = function(t) {
	if(t._awake != null) {
		var _g = 0;
		var _g1 = t._awake;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			found_App.notifyOnAwake(f);
		}
	}
	if(t._init != null) {
		var _g = 0;
		var _g1 = t._init;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			found_App.notifyOnInit(f);
		}
	}
	if(t._update != null) {
		var _g = 0;
		var _g1 = t._update;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			found_App.notifyOnUpdate(f);
		}
	}
	if(t._lateUpdate != null) {
		var _g = 0;
		var _g1 = t._lateUpdate;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			found_App.notifyOnLateUpdate(f);
		}
	}
	if(t._render != null) {
		var _g = 0;
		var _g1 = t._render;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			found_App.notifyOnRender(f);
		}
	}
	if(t._render2D != null) {
		var _g = 0;
		var _g1 = t._render2D;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			found_App.notifyOnRender2D(f);
		}
	}
};
found_Scene.parseArg = function(str) {
	if(str == "true") {
		return true;
	} else if(str == "false") {
		return false;
	} else if(str == "null") {
		return null;
	} else if(str.charAt(0) == "'") {
		return StringTools.replace(str,"'","");
	} else if(str.charAt(0) == "\"") {
		return StringTools.replace(str,"\"","");
	} else if(str.charAt(0) == "[") {
		str = StringTools.replace(str,"[","");
		str = StringTools.replace(str,"]","");
		str = StringTools.replace(str," ","");
		var ar = [];
		var vals = str.split(",");
		var _g = 0;
		while(_g < vals.length) {
			var v = vals[_g];
			++_g;
			ar.push(found_Scene.parseArg(v));
		}
		return ar;
	} else {
		var f = parseFloat(str);
		var i = Std.parseInt(str);
		if(f == i) {
			return i;
		} else {
			return f;
		}
	}
};
found_Scene.createTraitClassInstance = function(traitName,args) {
	var cname = $hxClasses[traitName];
	if(cname == null) {
		return null;
	}
	return Type.createInstance(cname,args);
};
found_Scene.prototype = {
	raw: null
	,root: null
	,cam: null
	,countEntities: null
	,_entities: null
	,activeEntities: null
	,inactiveEntities: null
	,physics_world: null
	,traitInits: null
	,traitRemoves: null
	,physicsUpdate: null
	,cullOffset: null
	,get_cullOffset: function() {
		if(this.cullOffset == 0 && this.raw.cullOffset != null) {
			this.cullOffset = this.raw.cullOffset;
		}
		return this.cullOffset;
	}
	,_depth: null
	,onReady: function() {
		var sort = function(ent0,ent1) {
			if(ent0.uid < ent1.uid) {
				return -1;
			} else {
				return 1;
			}
		};
		haxe_ds_ArraySort.sort(this._entities,sort);
	}
	,addToStateArray: function(object) {
		this._entities.push(object);
		if(this.physics_world != null) {
			if(object.get_raw().rigidBody != null) {
				this._entities[this._entities.length - 1].makeBody(this,object.get_raw());
			}
			if(((object) instanceof found_anim_Tilemap)) {
				var map = js_Boot.__cast(object , found_anim_Tilemap);
				map.makeBodies(this);
			}
		}
		if(object.active) {
			this.activeEntities.push(object);
		} else {
			this.inactiveEntities.push(object);
		}
		found_Scene.createTraits(object.get_raw().traits,object);
		if(!found_Scene.ready && this.raw._entities.length == this._entities.length) {
			found_Scene.ready = true;
			this.onReady();
		}
	}
	,addEntity: function(e,isEditor) {
		if(isEditor == null) {
			isEditor = false;
		}
		var _gthis = this;
		if(!isEditor && this.raw._entities.length == this._entities.length) {
			found_tool_Log.error("This function should only be used for EDITOR developpement",{ fileName : "found/Scene.hx", lineNumber : 134, className : "found.Scene", methodName : "addEntity"});
		}
		switch(e.type) {
		case "camera_object":
			var data = found_data_SceneFormat.getData(e);
			var out = new found_object_Camera(data);
			if(out.uid == 0) {
				this.cam = out;
			}
			out.set_raw(data);
			this.addToStateArray(out);
			break;
		case "emitter_object":
			break;
		case "object":
			this.addToStateArray(new found_object_Object(e));
			break;
		case "sprite_object":
			var data = found_data_SceneFormat.getData(e);
			new found_anim_Sprite(data,function(s) {
				_gthis.addToStateArray(s);
			});
			break;
		case "tilemap_object":
			var data = found_data_SceneFormat.getData(e);
			new found_anim_Tilemap(data,function(tilemap) {
				_gthis.addToStateArray(tilemap);
			});
			break;
		default:
			found_tool_Log.warn("Data with name" + e.name + "was not added because it's type is not implemented",{ fileName : "found/Scene.hx", lineNumber : 160, className : "found.Scene", methodName : "addEntity"});
		}
		return this._entities[this._entities.length - 1];
	}
	,addPhysicsWorld: function(opts) {
		this.physics_world = echo_Echo.start(opts);
		echo_Echo.listen(this.physics_world);
		var _e = this.physics_world;
		this.physicsUpdate = function(dt) {
			echo_Echo.step(_e,dt);
		};
	}
	,update: function(dt) {
		if(!found_Scene.ready || !found_App.editorui.isPlayMode) {
			return;
		}
		if(found_App.traitAwakes.length > 0) {
			var _g = 0;
			var _g1 = found_App.traitAwakes;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if(found_App.traitAwakes.length > 0) {
					f();
				} else {
					break;
				}
			}
			found_App.traitAwakes.splice(0,found_App.traitAwakes.length);
		}
		if(found_App.traitInits.length > 0) {
			var _g = 0;
			var _g1 = found_App.traitInits;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if(found_App.traitInits.length > 0) {
					f();
				} else {
					break;
				}
			}
			found_App.traitInits.splice(0,found_App.traitInits.length);
			var _g = 0;
			var _g1 = found_object_Executor.executors;
			while(_g < _g1.length) {
				var exe = _g1[_g];
				++_g;
				exe.execute();
			}
		}
		this.physicsUpdate(found_Scene.STEP);
		var _g = 0;
		var _g1 = found_object_Executor.executors;
		while(_g < _g1.length) {
			var exe = _g1[_g];
			++_g;
			exe.execute();
		}
		var i = 0;
		var l = found_App.traitUpdates.length;
		while(i < l) {
			found_App.traitUpdates[i](dt);
			if(l <= found_App.traitUpdates.length) {
				++i;
			} else {
				l = found_App.traitUpdates.length;
			}
		}
		var _g = 0;
		var _g1 = found_object_Executor.executors;
		while(_g < _g1.length) {
			var exe = _g1[_g];
			++_g;
			exe.execute();
		}
		i = 0;
		l = found_App.traitLateUpdates.length;
		while(i < l) {
			found_App.traitLateUpdates[i]();
			if(l <= found_App.traitLateUpdates.length) {
				++i;
			} else {
				l = found_App.traitLateUpdates.length;
			}
		}
	}
	,render: function(canvas) {
		var _gthis = this;
		if(!found_Scene.ready) {
			return;
		}
		var ordered = !found_App.editorui.isPlayMode ? this._entities.slice() : this.activeEntities.slice();
		if(this.get_cullOffset() != 0) {
			var objects = [];
			var _g = 0;
			var _g1 = ordered.length;
			while(_g < _g1) {
				var i = _g++;
				var tmp = this.get_cullOffset();
				var tmp1 = this.getCameraView();
				if(ordered[i].isVisible(tmp,tmp1)) {
					objects.push(ordered[i]);
				}
			}
			ordered = objects;
		}
		if(this._depth) {
			this.depth(ordered);
		}
		var lastz = -1;
		var _g = 0;
		while(_g < ordered.length) {
			var entity = ordered[_g];
			++_g;
			if(entity.get_layer() != lastz) {
				if(lastz > -1) {
					canvas.get_g2().popTransformation();
				}
				lastz = entity.get_layer();
				var layer = this.raw.layers != null && this.raw.layers.length > 0 ? this.raw.layers[lastz] : { name : "No layers", zIndex : 0, speed : 1.0};
				var _this = canvas.get_g2();
				var trans = this.cam.getTransformation(layer.speed);
				_this.transformationIndex++;
				if(_this.transformationIndex == _this.transformations.length) {
					_this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
				}
				var _this1 = _this.transformations[_this.transformationIndex];
				_this1._00 = trans._00;
				_this1._10 = trans._10;
				_this1._20 = trans._20;
				_this1._01 = trans._01;
				_this1._11 = trans._11;
				_this1._21 = trans._21;
				_this1._02 = trans._02;
				_this1._12 = trans._12;
				_this1._22 = trans._22;
				_this.setTransformation(_this.transformations[_this.transformationIndex]);
			}
			var _this2 = entity.get_position();
			var value = this.cam.zoom;
			var x = _this2.x * value;
			var y = _this2.y * value;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var pos_x = x;
			var pos_y = y;
			canvas.get_g2().pushTranslation(pos_x,pos_y);
			if(entity.get_rotation().z > 0) {
				var _this3 = canvas.get_g2();
				var _this4 = canvas.get_g2();
				var _this5 = _this4.transformations[_this4.transformationIndex];
				var m__00 = 1;
				var m__10 = 0;
				var m__20 = entity.get_width() * 0.5;
				var m__01 = 0;
				var m__11 = 1;
				var m__21 = entity.get_height() * 0.5;
				var m__02 = 0;
				var m__12 = 0;
				var m__22 = 1;
				var _this__00 = _this5._00 * m__00 + _this5._10 * m__01 + _this5._20 * m__02;
				var _this__10 = _this5._00 * m__10 + _this5._10 * m__11 + _this5._20 * m__12;
				var _this__20 = _this5._00 * m__20 + _this5._10 * m__21 + _this5._20 * m__22;
				var _this__01 = _this5._01 * m__00 + _this5._11 * m__01 + _this5._21 * m__02;
				var _this__11 = _this5._01 * m__10 + _this5._11 * m__11 + _this5._21 * m__12;
				var _this__21 = _this5._01 * m__20 + _this5._11 * m__21 + _this5._21 * m__22;
				var _this__02 = _this5._02 * m__00 + _this5._12 * m__01 + _this5._22 * m__02;
				var _this__12 = _this5._02 * m__10 + _this5._12 * m__11 + _this5._22 * m__12;
				var _this__22 = _this5._02 * m__20 + _this5._12 * m__21 + _this5._22 * m__22;
				var alpha = found_math_Util.degToRad(entity.get_rotation().z);
				var m__001 = Math.cos(alpha);
				var m__101 = -Math.sin(alpha);
				var m__201 = 0;
				var m__011 = Math.sin(alpha);
				var m__111 = Math.cos(alpha);
				var m__211 = 0;
				var m__021 = 0;
				var m__121 = 0;
				var m__221 = 1;
				var _this__001 = _this__00 * m__001 + _this__10 * m__011 + _this__20 * m__021;
				var _this__101 = _this__00 * m__101 + _this__10 * m__111 + _this__20 * m__121;
				var _this__201 = _this__00 * m__201 + _this__10 * m__211 + _this__20 * m__221;
				var _this__011 = _this__01 * m__001 + _this__11 * m__011 + _this__21 * m__021;
				var _this__111 = _this__01 * m__101 + _this__11 * m__111 + _this__21 * m__121;
				var _this__211 = _this__01 * m__201 + _this__11 * m__211 + _this__21 * m__221;
				var _this__021 = _this__02 * m__001 + _this__12 * m__011 + _this__22 * m__021;
				var _this__121 = _this__02 * m__101 + _this__12 * m__111 + _this__22 * m__121;
				var _this__221 = _this__02 * m__201 + _this__12 * m__211 + _this__22 * m__221;
				var m__002 = 1;
				var m__102 = 0;
				var m__202 = -entity.get_width() * 0.5;
				var m__012 = 0;
				var m__112 = 1;
				var m__212 = -entity.get_height() * 0.5;
				var m__022 = 0;
				var m__122 = 0;
				var m__222 = 1;
				var trans__00 = _this__001 * m__002 + _this__101 * m__012 + _this__201 * m__022;
				var trans__10 = _this__001 * m__102 + _this__101 * m__112 + _this__201 * m__122;
				var trans__20 = _this__001 * m__202 + _this__101 * m__212 + _this__201 * m__222;
				var trans__01 = _this__011 * m__002 + _this__111 * m__012 + _this__211 * m__022;
				var trans__11 = _this__011 * m__102 + _this__111 * m__112 + _this__211 * m__122;
				var trans__21 = _this__011 * m__202 + _this__111 * m__212 + _this__211 * m__222;
				var trans__02 = _this__021 * m__002 + _this__121 * m__012 + _this__221 * m__022;
				var trans__12 = _this__021 * m__102 + _this__121 * m__112 + _this__221 * m__122;
				var trans__22 = _this__021 * m__202 + _this__121 * m__212 + _this__221 * m__222;
				_this3.transformationIndex++;
				if(_this3.transformationIndex == _this3.transformations.length) {
					_this3.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
				}
				var _this6 = _this3.transformations[_this3.transformationIndex];
				_this6._00 = trans__00;
				_this6._10 = trans__10;
				_this6._20 = trans__20;
				_this6._01 = trans__01;
				_this6._11 = trans__11;
				_this6._21 = trans__21;
				_this6._02 = trans__02;
				_this6._12 = trans__12;
				_this6._22 = trans__22;
				_this3.setTransformation(_this3.transformations[_this3.transformationIndex]);
			}
			entity.render(canvas);
			var _g1 = 0;
			var _g2 = entity.traits;
			while(_g1 < _g2.length) {
				var t = _g2[_g1];
				++_g1;
				if(t._render2D != null) {
					var _g3 = 0;
					var _g4 = t._render2D;
					while(_g3 < _g4.length) {
						var f = _g4[_g3];
						++_g3;
						if(t._render2D.length > 0) {
							f(canvas.get_g2());
						} else {
							break;
						}
					}
				}
			}
			if(entity.get_rotation().z > 0) {
				canvas.get_g2().popTransformation();
			}
			canvas.get_g2().popTransformation();
		}
		var m = found_Input.getMouse();
		if(m.down()) {
			var _this = this.cam.screenToWorld(new kha_math_Vector2(m.x,m.y));
			var value = this.cam.zoom;
			var x = _this.x * value;
			var y = _this.y * value;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var pos_x = x;
			var pos_y = y;
			canvas.get_g2().pushTranslation(pos_x,pos_y);
			canvas.get_g2().set_color(kha_Color.fromBytes(255,255,0,64));
			canvas.get_g2().fillRect(0,0,100,100);
			canvas.get_g2().popTransformation();
		}
		if(this.physics_world != null && found_Found.collisionsDraw) {
			var _g = 0;
			var _g1 = this.physics_world.members;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				if(!(b == null || b.shapes.length <= 0 || !b.active)) {
					canvas.get_g2().set_color(kha_Color.fromBytes(255,0,0,64));
					var _g2 = 0;
					var _g3 = b.shapes;
					while(_g2 < _g3.length) {
						var shape = _g3[_g2];
						++_g2;
						var bds = shape.bounds();
						switch(shape.type) {
						case 0:
							canvas.get_g2().fillRect(bds.min_x,bds.min_y,bds.max_x - bds.min_x,bds.max_y - bds.min_y);
							break;
						case 1:
							var radius = (bds.max_y - bds.min_y) * 0.5;
							kha_graphics2_GraphicsExtension.fillCircle(canvas.get_g2(),bds.min_x - _gthis.cam.get_position().x + radius,bds.min_y - _gthis.cam.get_position().y + radius,radius);
							break;
						case 2:
							var poly = js_Boot.__cast(shape , echo_shape_Polygon);
							var tmp = canvas.get_g2();
							var tmp1 = -_gthis.cam.get_position().x;
							var tmp2 = -_gthis.cam.get_position().y;
							if(poly.dirty_vertices) {
								poly.dirty_vertices = false;
								var self = poly.local_frame.get_offset();
								self.x = poly.local_x;
								self.y = poly.local_y;
								poly.local_frame.set_angleDegrees(poly.local_rotation);
								if(poly.parent_frame != null) {
									var self1 = poly.parent_frame;
									var self2 = self1.get_matrix();
									var m_a = self2.a;
									var m_b = self2.b;
									var m_c = self2.c;
									var m_d = self2.d;
									var v = poly.local_frame.get_offset();
									var pos_x = m_a * v.x + m_c * v.y;
									var pos_y = m_b * v.x + m_d * v.y;
									var a = poly.parent_frame.get_offset();
									pos_x += a.x;
									pos_y += a.y;
									var poly1 = poly.local_frame;
									var x = poly.parent_frame.get_angleDegrees() + poly.local_frame.get_angleDegrees();
									poly1.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
									var self3 = poly.local_frame.get_offset();
									self3.x = pos_x;
									self3.y = pos_y;
								}
								while(poly._vertices.length > poly.count) poly._vertices.pop();
								var _g4 = 0;
								var _g5 = poly.count;
								while(_g4 < _g5) {
									var i = _g4++;
									if(poly.local_vertices[i] == null) {
										continue;
									}
									if(poly._vertices[i] == null) {
										var poly2 = poly._vertices;
										var this1 = new hxmath_math_Vector2Default(0,0);
										poly2[i] = this1;
									}
									var p = poly.local_vertices[i];
									var self4 = poly.local_frame;
									var m = self4.get_matrix();
									var self5 = m;
									var m_a1 = self5.a;
									var m_b1 = self5.b;
									var m_c1 = self5.c;
									var m_d1 = self5.d;
									var self_x = m_a1 * p.x + m_c1 * p.y;
									var self_y = m_b1 * p.x + m_d1 * p.y;
									var self6 = m;
									var b_x = self6.tx;
									var b_y = self6.ty;
									var pos_x1 = self_x;
									var pos_y1 = self_y;
									pos_x1 += b_x;
									pos_y1 += b_y;
									var self7 = poly._vertices[i];
									self7.x = pos_x1;
									self7.y = pos_y1;
								}
								var _g6 = 0;
								var _g7 = poly.count;
								while(_g6 < _g7) {
									var i1 = _g6++;
									var target = poly.sync_pos;
									var self8 = poly._vertices[(i1 + 1) % poly.count];
									var self9 = self8;
									var value = self9.x;
									var self10 = target;
									self10.x = value;
									var self11 = self8;
									var value1 = self11.y;
									var self12 = target;
									self12.y = value1;
									var a1 = poly._vertices[i1];
									var self13 = poly.sync_pos;
									self13.x -= a1.x;
									self13.y -= a1.y;
									if(poly._normals[i1] == null) {
										var poly3 = poly._normals;
										var this2 = new hxmath_math_Vector2Default(-poly.sync_pos.y,poly.sync_pos.x);
										poly3[i1] = this2;
									} else {
										var y = poly.sync_pos.x;
										var self14 = poly._normals[i1];
										self14.x = -poly.sync_pos.y;
										self14.y = y;
									}
									var self15 = poly._normals[i1];
									var self16 = self15;
									var length = Math.sqrt(self16.x * self16.x + self16.y * self16.y);
									if(length > 0.0) {
										var self17 = self15;
										self17.x /= length;
										self17.y /= length;
									}
								}
							}
							kha_graphics2_GraphicsExtension.fillPolygon(tmp,tmp1,tmp2,poly._vertices);
							break;
						}
					}
					canvas.get_g2().set_color(-1);
				}
			}
		}
		if(ordered.length > 0) {
			canvas.get_g2().popTransformation();
		}
	}
	,getCameraView: function() {
		return new kha_simd_Float32x4(this.cam.get_position().x,this.cam.get_position().y,found_Found.WIDTH,found_Found.HEIGHT);
	}
	,getObjectNames: function(type) {
		var names = [];
		var _g = 0;
		var _g1 = this._entities;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			if(type == null) {
				names.push(object.get_raw().name);
			} else if(object.get_raw().type == type) {
				names.push(object.get_raw().name);
			}
		}
		return names;
	}
	,getObjects: function(name) {
		if(name == "") {
			return null;
		}
		var objects = [];
		var _g = 0;
		var _g1 = this._entities;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			if(object.get_raw().name == name) {
				objects.push(object);
			}
		}
		return objects;
	}
	,getObject: function(name) {
		if(name == "") {
			return null;
		}
		var _g = 0;
		var _g1 = this._entities;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			if(object.get_raw().name == name) {
				return object;
			}
		}
		return null;
	}
	,get_countEntities: function() {
		return this._entities.length;
	}
	,clear: function() {
		this._entities = [];
	}
	,spawn: function(objectData) {
		var spawnedObject = this.addEntity(objectData,true);
		spawnedObject.spawned = true;
		return spawnedObject;
	}
	,add: function(entity) {
		entity.set_active(true);
		this._entities.push(entity);
	}
	,remove: function(entity) {
		entity.set_active(false);
		if(entity.spawned) {
			entity.delete();
		}
	}
	,depth: function(entities) {
		if(entities.length == 0) {
			return;
		}
		if(found_Scene.zsort) {
			haxe_ds_ArraySort.sort(entities,function(ent1,ent2) {
				if(ent1.get_layer() < ent2.get_layer() || ent1.get_layer() == ent2.get_layer() && (ent1.get_depth() < ent2.get_depth() || ent1.get_depth() == ent2.get_depth())) {
					return -1;
				} else if(ent1.get_layer() == ent2.get_layer() && Math.floor(ent1.get_depth()) == Math.floor(ent2.get_depth())) {
					return 0;
				} else {
					return 1;
				}
			});
		} else {
			haxe_ds_ArraySort.sort(entities,function(ent1,ent2) {
				if((ent1.get_layer() < ent2.get_layer() || ent1.get_layer() == ent2.get_layer()) && ent1.get_position().y + ent1.get_height() < ent2.get_position().y + ent2.get_height()) {
					return -1;
				} else if(ent1.get_layer() == ent2.get_layer() && ent1.get_position().y == ent2.get_position().y) {
					return 0;
				} else {
					return 1;
				}
			});
		}
	}
	,sort: function(value,p_zsort) {
		if(p_zsort == null) {
			p_zsort = false;
		}
		if(value == null) {
			value = false;
		}
		found_Scene.zsort = p_zsort;
		return this._depth = value;
	}
	,__class__: found_Scene
	,__properties__: {get_cullOffset:"get_cullOffset",get_countEntities:"get_countEntities"}
};
var found_State = function(raw) {
	found_Scene.call(this,raw);
};
$hxClasses["found.State"] = found_State;
found_State.__name__ = true;
found_State.active = null;
found_State.loadingState = null;
found_State._states = null;
found_State.setup = function(loadingPath) {
	if(loadingPath == null) {
		loadingPath = "";
	}
	found_State._states = new haxe_ds_StringMap();
	if(loadingPath != "") {
		found_data_Data.getSceneRaw(loadingPath,function(raw) {
			found_State.loadingState = new found_State(raw);
		});
	} else {
		var b = Reflect.field(kha_Assets.blobs,"loading_json");
		found_State.loadingState = new found_State(JSON.parse(b.toString()));
	}
};
found_State.addState = function(name,state) {
	if(found_State._states == null) {
		found_State.setup();
	}
	found_State._states.h[name] = state;
	return state;
};
found_State.removeState = function(name) {
	var _this = found_State._states;
	if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
		delete(_this.h[name]);
	}
};
found_State.lastState = null;
found_State.set = function(name,onDone) {
	found_Scene.ready = false;
	var file = found_State._states.h[name];
	found_State.lastState = found_State.active;
	found_State.active = found_State.loadingState;
	var loaded = onDone == null ? found_State.loadState : function(raw) {
		found_State.loadState(raw);
		onDone();
	};
	if(file == null) {
		found_State.active = found_State.lastState;
		found_tool_Log.error("State with name " + name + " does not exist in State list. Use AddState to add it.",{ fileName : "found/State.hx", lineNumber : 52, className : "found.State", methodName : "set"});
	}
	found_data_Data.getSceneRaw(file,loaded);
};
found_State.loadState = function(raw) {
	found_App.reset();
	if(found_State.lastState != null && found_State.lastState.physics_world != null) {
		found_State.lastState.physicsUpdate = null;
		found_State.lastState.physics_world.dispose();
	}
	found_State.active = new found_State(raw);
};
found_State.__super__ = found_Scene;
found_State.prototype = $extend(found_Scene.prototype,{
	notifyOnInit: function(f) {
		if(found_Scene.ready) {
			f();
		} else {
			this.traitInits.push(f);
		}
	}
	,removeInit: function(f) {
		HxOverrides.remove(this.traitInits,f);
	}
	,notifyOnRemove: function(f) {
		this.traitRemoves.push(f);
	}
	,__class__: found_State
});
var found_Timer = function() { };
$hxClasses["found.Timer"] = found_Timer;
found_Timer.__name__ = true;
found_Timer.delta = null;
found_Timer.current = null;
found_Timer.update = function() {
	found_Timer.delta = kha_Scheduler.time() - found_Timer.current;
	found_Timer.current = kha_Scheduler.time();
};
var found_Url = function() { };
$hxClasses["found.Url"] = found_Url;
found_Url.__name__ = true;
found_Url.explorer = function(url) {
	kha_System.loadUrl(url);
};
found_Url.download = function(url,dstPath) {
};
found_Url.downloadBytes = function(url) {
	return null;
};
var found_anim_Animation = function(frames,speeddiv) {
	this._frames = frames;
	this._index = 0;
	this._speeddiv = speeddiv;
};
$hxClasses["found.anim.Animation"] = found_anim_Animation;
found_anim_Animation.__name__ = true;
found_anim_Animation.create = function(frame) {
	return new found_anim_Animation([frame],1);
};
found_anim_Animation.createFrames = function(width,height,maxindex,speeddiv,step) {
	if(step == null) {
		step = 1.0;
	}
	var frames = [];
	var _g = 0;
	var _g1 = maxindex;
	while(_g < _g1) {
		var i = _g++;
		frames.push({ id : i, start : step * i, tw : width, th : height});
	}
	return new found_anim_Animation(frames,speeddiv);
};
found_anim_Animation.fromDefinition = function(def) {
	var anim = new found_anim_Animation(def.frames,def.fps);
	anim._index = 0;
	anim.name = def.name;
	return anim;
};
found_anim_Animation.prototype = {
	name: null
	,_frames: null
	,_speeddiv: null
	,_count: null
	,_index: null
	,take: function(animation) {
		if(this._frames == animation._frames) {
			return;
		}
		this._frames = animation._frames;
		this._speeddiv = animation._speeddiv;
		this.name = animation.name;
		this.reset();
	}
	,get: function() {
		return this._frames[this._index];
	}
	,getIndex: function() {
		return this._index;
	}
	,setIndex: function(index) {
		if(index < this._frames.length) {
			this._index = index;
		}
	}
	,next: function() {
		++this._count;
		if(this._count % this._speeddiv == 0) {
			++this._index;
			if(this._index >= this._frames.length) {
				this._index = 0;
				return false;
			}
		}
		return true;
	}
	,reset: function() {
		this._count = 0;
		this._index = 0;
	}
	,__class__: found_anim_Animation
};
var found_object_Object = function(p_raw) {
	this.awakeTrait = new found_Trait();
	this.traits = [];
	this._height = 0.0;
	this._width = 0.0;
	this.body = null;
	this.spawned = false;
	this.dataChanged = false;
	var _gthis = this;
	if(found_object_Object._translations == null) {
		found_object_Object._translations = new found_object_Executor("_positions");
	}
	if(found_object_Object._rotates == null) {
		found_object_Object._rotates = new found_object_Executor("_rotations");
	}
	if(found_object_Object._scaler == null) {
		found_object_Object._scaler = new found_object_Executor("_scales");
	}
	this.awakeTrait.notifyOnAwake(function() {
		if(_gthis.body != null) {
			var _this = _gthis.body;
			var value = _gthis.get_position().x;
			if(value != _this.frame.get_offset().x) {
				var _this1 = _this.frame;
				var this1 = _this.frame.get_offset();
				var y = _this.frame.get_offset().y;
				var self = this1;
				self.x = value;
				self.y = y;
				_this1.set_offset(self);
				_this.dirty = true;
				if(!_this.sync_locked) {
					if(_this.shapes.length > 0) {
						var _g = 0;
						var _g1 = _this.shapes;
						while(_g < _g1.length) {
							var shape = _g1[_g];
							++_g;
							shape.sync();
						}
					}
					if(_this.mass <= 0 && _this.world != null) {
						_this.bounds(_this.quadtree_data.bounds);
						_this.world.static_quadtree.update(_this.quadtree_data);
					}
					if(_this.on_move != null) {
						_this.on_move(_this.frame.get_offset().x,_this.frame.get_offset().y);
					}
				}
			}
			_this.frame.get_offset();
			var _this = _gthis.body;
			var value = _gthis.get_position().y;
			if(value != _this.frame.get_offset().y) {
				var _this1 = _this.frame;
				var self = _this.frame.get_offset();
				self.x = _this.frame.get_offset().x;
				self.y = value;
				_this1.set_offset(self);
				_this.dirty = true;
				if(!_this.sync_locked) {
					if(_this.shapes.length > 0) {
						var _g = 0;
						var _g1 = _this.shapes;
						while(_g < _g1.length) {
							var shape = _g1[_g];
							++_g;
							shape.sync();
						}
					}
					if(_this.mass <= 0 && _this.world != null) {
						_this.bounds(_this.quadtree_data.bounds);
						_this.world.static_quadtree.update(_this.quadtree_data);
					}
					if(_this.on_move != null) {
						_this.on_move(_this.frame.get_offset().x,_this.frame.get_offset().y);
					}
				}
			}
			_this.frame.get_offset();
		}
	});
	this.addTrait(this.awakeTrait);
	this.uid = ++found_object_Object.uidCounter;
	if(p_raw.type == "object") {
		this.set_raw(p_raw);
	}
	found_object_Object._positions.push(Reflect.copy(p_raw.position));
	found_object_Object._rotations.push(Reflect.copy(p_raw.rotation));
	found_object_Object._scales.push(p_raw.scale != null ? Reflect.copy(p_raw.scale) : new kha_math_Vector2(1.0,1.0));
	this.set_width(p_raw.width);
	this.set_height(p_raw.height);
	if(p_raw.active) {
		this.activate();
	} else {
		this.deactivate();
	}
};
$hxClasses["found.object.Object"] = found_object_Object;
found_object_Object.__name__ = true;
found_object_Object.prototype = {
	name: null
	,get_name: function() {
		if(this.get_raw() != null) {
			return this.get_raw().name;
		} else {
			return "Invalid";
		}
	}
	,dataChanged: null
	,raw: null
	,set_raw: function(data) {
		this.raw = data;
		if(found_Scene.ready && found_State.active != null && found_State.active.physics_world != null && data.rigidBody != null) {
			this.makeBody(found_State.active,data);
		}
		return this.get_raw();
	}
	,get_raw: function() {
		return this.raw;
	}
	,uid: null
	,active: null
	,spawned: null
	,body: null
	,set_body: function(b) {
		if(b != null) {
			b.on_move = $bind(this,this.on_physics_move);
		} else if(this.body != null) {
			this.body.on_move = null;
		}
		if(b == null && this.body != null) {
			found_State.active.physics_world.remove(this.body);
		}
		return this.body = b;
	}
	,onCollision: function(data) {
		var collisionListeners = [];
		if(found_State.active == null || !found_Scene.ready) {
			return collisionListeners;
		}
		if(this.body == null) {
			found_tool_Log.error("Current object doesn't have a rigidbody",{ fileName : "found/object/Object.hx", lineNumber : 101, className : "found.object.Object", methodName : "onCollision"});
			return collisionListeners;
		}
		var obj = found_State.active.getObjects(data.objectName);
		if(obj.length > 0) {
			if(data.tileId != null && ((obj) instanceof found_anim_Tilemap)) {
				var tile = (js_Boot.__cast(obj , found_anim_Tilemap)).tiles.h[data.tileId];
				if(tile != null) {
					var _g = 0;
					var _g1 = tile.bodies;
					while(_g < _g1.length) {
						var b = _g1[_g];
						++_g;
						var newCollisionListener = echo_Echo.listen(found_State.active.physics_world,haxe_ds_Either.Left(this.body),haxe_ds_Either.Left(b),{ enter : data.onEnter, stay : data.onStay, exit : data.onExit});
						collisionListeners.push(newCollisionListener);
					}
					return collisionListeners;
				} else {
					var id = data.tileId;
					var name = data.objectName;
					found_tool_Log.error("Tilemap " + name + " did not have a tileId of value " + id,{ fileName : "found/object/Object.hx", lineNumber : 121, className : "found.object.Object", methodName : "onCollision"});
				}
			} else if(obj[0].body != null) {
				var _g = 0;
				while(_g < obj.length) {
					var object = obj[_g];
					++_g;
					var newCollisionListener = echo_Echo.listen(found_State.active.physics_world,haxe_ds_Either.Left(this.body),haxe_ds_Either.Left(object.body),{ enter : data.onEnter, stay : data.onStay, exit : data.onExit});
					collisionListeners.push(newCollisionListener);
				}
				return collisionListeners;
			} else {
				var name = data.objectName;
				if(data.tileId != null) {
					found_tool_Log.error("Object " + name + " was not of type Tilemap",{ fileName : "found/object/Object.hx", lineNumber : 136, className : "found.object.Object", methodName : "onCollision"});
				} else {
					found_tool_Log.error("The body of Object " + name + " was null",{ fileName : "found/object/Object.hx", lineNumber : 139, className : "found.object.Object", methodName : "onCollision"});
				}
			}
		} else {
			var name = data.objectName;
			found_tool_Log.error("Object with name " + name + " was not found in Scene",{ fileName : "found/object/Object.hx", lineNumber : 147, className : "found.object.Object", methodName : "onCollision"});
		}
		return collisionListeners;
	}
	,removeCollisionListeners: function(collisionListeners) {
		var _g = 0;
		while(_g < collisionListeners.length) {
			var listener = collisionListeners[_g];
			++_g;
			found_State.active.physics_world.listeners.remove(listener);
		}
	}
	,makeBody: function(scene,p_raw) {
		if(this.body != null) {
			return;
		}
		if(p_raw.rigidBody.x == null) {
			p_raw.rigidBody.x = this.get_position().x;
		}
		if(p_raw.rigidBody.y == null) {
			p_raw.rigidBody.y = this.get_position().y;
		}
		if(p_raw.rigidBody.shapes != null) {
			if(p_raw.rigidBody.shapes[0].width == null) {
				p_raw.rigidBody.shapes[0].width = p_raw.width;
			}
			if(p_raw.rigidBody.shapes[0].height == null) {
				p_raw.rigidBody.shapes[0].height = p_raw.height;
			}
		}
		this.set_body(scene.physics_world.add(new echo_Body(p_raw.rigidBody)));
		this.body.object = this;
	}
	,on_physics_move: function(x,y) {
		this.translate(function(data) {
			data._positions.x = x;
			data._positions.y = y;
			return data;
		},null,false);
	}
	,get_position: function() {
		return found_object_Object._positions[this.uid];
	}
	,get_center: function() {
		return new kha_math_Vector2(this.get_position().x + 0.5 * this.get_width(),this.get_position().y + 0.5 * this.get_height());
	}
	,translate: function(func,data,onPhysics) {
		if(onPhysics == null) {
			onPhysics = true;
		}
		var _gthis = this;
		if(data == null) {
			data = { _positions : new kha_math_Vector2(found_object_Object._positions[this.uid].x,found_object_Object._positions[this.uid].y), dt : found_Timer.delta};
		}
		found_object_Object._translations.add(func,data,this.uid,function(data) {
			if(_gthis.body != null && onPhysics) {
				var _this = _gthis.body;
				var value = data._positions.x;
				if(value != _this.frame.get_offset().x) {
					var _this1 = _this.frame;
					var this1 = _this.frame.get_offset();
					var y = _this.frame.get_offset().y;
					var self = this1;
					self.x = value;
					self.y = y;
					_this1.set_offset(self);
					_this.dirty = true;
					if(!_this.sync_locked) {
						if(_this.shapes.length > 0) {
							var _g = 0;
							var _g1 = _this.shapes;
							while(_g < _g1.length) {
								var shape = _g1[_g];
								++_g;
								shape.sync();
							}
						}
						if(_this.mass <= 0 && _this.world != null) {
							_this.bounds(_this.quadtree_data.bounds);
							_this.world.static_quadtree.update(_this.quadtree_data);
						}
						if(_this.on_move != null) {
							_this.on_move(_this.frame.get_offset().x,_this.frame.get_offset().y);
						}
					}
				}
				_this.frame.get_offset();
				var _this = _gthis.body;
				var value = data._positions.y;
				if(value != _this.frame.get_offset().y) {
					var _this1 = _this.frame;
					var self = _this.frame.get_offset();
					self.x = _this.frame.get_offset().x;
					self.y = value;
					_this1.set_offset(self);
					_this.dirty = true;
					if(!_this.sync_locked) {
						if(_this.shapes.length > 0) {
							var _g = 0;
							var _g1 = _this.shapes;
							while(_g < _g1.length) {
								var shape = _g1[_g];
								++_g;
								shape.sync();
							}
						}
						if(_this.mass <= 0 && _this.world != null) {
							_this.bounds(_this.quadtree_data.bounds);
							_this.world.static_quadtree.update(_this.quadtree_data);
						}
						if(_this.on_move != null) {
							_this.on_move(_this.frame.get_offset().x,_this.frame.get_offset().y);
						}
					}
				}
				_this.frame.get_offset();
			}
		});
	}
	,moveTowards: function(target,step) {
		var _gthis = this;
		var data = { _positions : new kha_math_Vector2(found_object_Object._positions[this.uid].x,found_object_Object._positions[this.uid].y), target : new kha_math_Vector2(target.x,target.y), step : step};
		found_object_Object._translations.add($bind(this,this.moveTo),data,this.uid,function(data) {
			if(_gthis.body != null) {
				var _this = _gthis.body;
				var value = data._positions.x;
				if(value != _this.frame.get_offset().x) {
					var _this1 = _this.frame;
					var this1 = _this.frame.get_offset();
					var y = _this.frame.get_offset().y;
					var self = this1;
					self.x = value;
					self.y = y;
					_this1.set_offset(self);
					_this.dirty = true;
					if(!_this.sync_locked) {
						if(_this.shapes.length > 0) {
							var _g = 0;
							var _g1 = _this.shapes;
							while(_g < _g1.length) {
								var shape = _g1[_g];
								++_g;
								shape.sync();
							}
						}
						if(_this.mass <= 0 && _this.world != null) {
							_this.bounds(_this.quadtree_data.bounds);
							_this.world.static_quadtree.update(_this.quadtree_data);
						}
						if(_this.on_move != null) {
							_this.on_move(_this.frame.get_offset().x,_this.frame.get_offset().y);
						}
					}
				}
				_this.frame.get_offset();
				var _this = _gthis.body;
				var value = data._positions.y;
				if(value != _this.frame.get_offset().y) {
					var _this1 = _this.frame;
					var self = _this.frame.get_offset();
					self.x = _this.frame.get_offset().x;
					self.y = value;
					_this1.set_offset(self);
					_this.dirty = true;
					if(!_this.sync_locked) {
						if(_this.shapes.length > 0) {
							var _g = 0;
							var _g1 = _this.shapes;
							while(_g < _g1.length) {
								var shape = _g1[_g];
								++_g;
								shape.sync();
							}
						}
						if(_this.mass <= 0 && _this.world != null) {
							_this.bounds(_this.quadtree_data.bounds);
							_this.world.static_quadtree.update(_this.quadtree_data);
						}
						if(_this.on_move != null) {
							_this.on_move(_this.frame.get_offset().x,_this.frame.get_offset().y);
						}
					}
				}
				_this.frame.get_offset();
			}
		});
	}
	,moveTo: function(data) {
		var _this = data.target;
		var vec = data._positions;
		var x = _this.x - vec.x;
		var y = _this.y - vec.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var delta_x = x;
		var delta_y = y;
		var len2 = delta_x * delta_x + delta_y * delta_y;
		if(len2 < data.step * data.step) {
			data._positions = data.target;
			return data;
		}
		var value = 1 / Math.sqrt(len2);
		var x = delta_x * value;
		var y = delta_y * value;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var direction_x = x;
		var direction_y = y;
		var _this = data._positions;
		var value = data.step;
		var x = direction_x * value;
		var y = direction_y * value;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var vec_x = x;
		var vec_y = y;
		data._positions = new kha_math_Vector2(_this.x + vec_x,_this.y + vec_y);
		return data;
	}
	,get_rotation: function() {
		return found_object_Object._rotations[this.uid];
	}
	,rotate: function(func,from,towards,onPhysics) {
		if(onPhysics == null) {
			onPhysics = false;
		}
		var _gthis = this;
		found_object_Object._rotates.add(func,{ _rotations : found_object_Object._rotations[this.uid], dt : found_Timer.delta, from : from, towards : towards},this.uid,function(data) {
			if(_gthis.body != null && onPhysics) {
				var _this = _gthis.body;
				var value = data._rotations.z;
				if(value != _this.frame.get_angleDegrees()) {
					_this.frame.set_angleDegrees(value);
					_this.dirty = true;
					if(!_this.sync_locked) {
						if(_this.shapes.length > 0) {
							var _g = 0;
							var _g1 = _this.shapes;
							while(_g < _g1.length) {
								var shape = _g1[_g];
								++_g;
								shape.sync();
							}
						}
						if(_this.mass <= 0 && _this.world != null) {
							_this.bounds(_this.quadtree_data.bounds);
							_this.world.static_quadtree.update(_this.quadtree_data);
						}
						if(_this.on_rotate != null) {
							_this.on_rotate(_this.frame.get_angleDegrees());
						}
					}
				}
				_this.frame.get_angleDegrees();
			}
		});
	}
	,rotateTowardPosition: function(targetPosition,onPhysics) {
		if(onPhysics == null) {
			onPhysics = false;
		}
		var _gthis = this;
		var data = { _rotations : new kha_math_Vector3(found_object_Object._rotations[this.uid].x,found_object_Object._rotations[this.uid].y,found_object_Object._rotations[this.uid].z), from : new kha_math_Vector2(this.get_center().x,this.get_center().y), towards : new kha_math_Vector2(targetPosition.x,targetPosition.y)};
		found_object_Object._rotates.add($bind(this,this.rotateToward),data,this.uid,function(data) {
			if(_gthis.body != null && onPhysics) {
				var _this = _gthis.body;
				var value = data._rotations.z;
				if(value != _this.frame.get_angleDegrees()) {
					_this.frame.set_angleDegrees(value);
					_this.dirty = true;
					if(!_this.sync_locked) {
						if(_this.shapes.length > 0) {
							var _g = 0;
							var _g1 = _this.shapes;
							while(_g < _g1.length) {
								var shape = _g1[_g];
								++_g;
								shape.sync();
							}
						}
						if(_this.mass <= 0 && _this.world != null) {
							_this.bounds(_this.quadtree_data.bounds);
							_this.world.static_quadtree.update(_this.quadtree_data);
						}
						if(_this.on_rotate != null) {
							_this.on_rotate(_this.frame.get_angleDegrees());
						}
					}
				}
				_this.frame.get_angleDegrees();
			}
		});
	}
	,rotateToward: function(data) {
		var _this = data.towards;
		var vec = data.from;
		var x = _this.x - vec.x;
		var y = _this.y - vec.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var direction_x = x;
		var direction_y = y;
		var angle = found_math_Util.radToDeg(Math.atan2(direction_y,direction_x));
		if(angle < 0) {
			angle += 360;
		}
		data._rotations.z = angle;
		return data;
	}
	,get_scale: function() {
		return found_object_Object._scales[this.uid];
	}
	,resize: function(func,dt) {
		if(dt == null) {
			dt = 1.0;
		}
		found_object_Object._scaler.add(func,found_object_Object._scales[this.uid],this.uid,function(data) {
		});
	}
	,_width: null
	,get_width: function() {
		return this._width * this.get_scale().x;
	}
	,set_width: function(f) {
		this._width = f;
		return this._width;
	}
	,_height: null
	,get_height: function() {
		return this._height * this.get_scale().y;
	}
	,set_height: function(f) {
		this._height = f;
		return this._height;
	}
	,get_layer: function() {
		return this.get_raw().layer;
	}
	,get_depth: function() {
		if(!found_Scene.zsort) {
			return this.get_position().y + this.get_height();
		}
		return this.get_raw().depth;
	}
	,traits: null
	,awakeTrait: null
	,'delete': function() {
		HxOverrides.remove(found_State.active._entities,this);
		HxOverrides.remove(found_State.active.inactiveEntities,this);
		var _g = 0;
		var _g1 = this.traits;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			this.removeTrait(t);
		}
		this.set_body(null);
	}
	,render: function(canvas) {
		if(!found_Scene.ready) {
			return;
		}
		if(found_App.editorui.inspector.index == this.uid && this.getTrait(found_trait_internal_Arrows) == null) {
			var inst = found_trait_internal_Arrows.get_instance();
			inst.visible = true;
			this.addTrait(inst);
		}
	}
	,isVisible: function(offset,cam) {
		if(!found_Scene.ready) {
			return false;
		}
		var layers = found_State.active.raw.layers;
		var cullSpeed = layers != null && layers.length > 0 && this.get_raw().type != "camera_object" ? layers[this.get_layer()] : { name : "No layers", zIndex : 0, speed : 1.0};
		var value = 0;
		value = cam._0;
		var x = value * cullSpeed.speed;
		var value = 0;
		value = cam._1;
		var y = value * cullSpeed.speed;
		var value = 0;
		value = cam._2;
		var w = value;
		var value = 0;
		value = cam._3;
		var h = value;
		if(this.get_position().x < x + offset + w && this.get_position().x > x - offset - this.get_width() && this.get_position().y > y - offset - this.get_height() && this.get_position().y < y + h + offset) {
			return true;
		}
		return false;
	}
	,activate: function() {
		this.set_active(true);
	}
	,deactivate: function() {
		this.set_active(false);
	}
	,set_active: function(value) {
		if(this.body != null) {
			this.body.active = value;
		}
		if(value && this.active != value) {
			var _g = 0;
			var _g1 = this.traits;
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				if(t._awake != null) {
					var _g2 = 0;
					var _g3 = t._awake;
					while(_g2 < _g3.length) {
						var f = _g3[_g2];
						++_g2;
						found_App.notifyOnAwake(f);
					}
				}
				if(t._init != null) {
					var _g4 = 0;
					var _g5 = t._init;
					while(_g4 < _g5.length) {
						var f1 = _g5[_g4];
						++_g4;
						found_App.notifyOnInit(f1);
					}
				}
				if(t._update != null) {
					var _g6 = 0;
					var _g7 = t._update;
					while(_g6 < _g7.length) {
						var f2 = _g7[_g6];
						++_g6;
						found_App.notifyOnUpdate(f2);
					}
				}
				if(t._lateUpdate != null) {
					var _g8 = 0;
					var _g9 = t._lateUpdate;
					while(_g8 < _g9.length) {
						var f3 = _g9[_g8];
						++_g8;
						found_App.notifyOnLateUpdate(f3);
					}
				}
				if(t._render != null) {
					var _g10 = 0;
					var _g11 = t._render;
					while(_g10 < _g11.length) {
						var f4 = _g11[_g10];
						++_g10;
						found_App.notifyOnRender(f4);
					}
				}
				if(t._render2D != null) {
					var _g12 = 0;
					var _g13 = t._render2D;
					while(_g12 < _g13.length) {
						var f5 = _g13[_g12];
						++_g12;
						found_App.notifyOnRender2D(f5);
					}
				}
			}
			if(found_Scene.ready) {
				HxOverrides.remove(found_State.active.inactiveEntities,this);
				found_State.active.activeEntities.push(this);
			}
		} else if(!value && this.active != value) {
			var _g = 0;
			var _g1 = this.traits;
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				if(t._awake != null) {
					var _g2 = 0;
					var _g3 = t._awake;
					while(_g2 < _g3.length) {
						var f = _g3[_g2];
						++_g2;
						found_App.removeAwake(f);
					}
				}
				if(t._init != null) {
					var _g4 = 0;
					var _g5 = t._init;
					while(_g4 < _g5.length) {
						var f1 = _g5[_g4];
						++_g4;
						found_App.removeInit(f1);
					}
				}
				if(t._update != null) {
					var _g6 = 0;
					var _g7 = t._update;
					while(_g6 < _g7.length) {
						var f2 = _g7[_g6];
						++_g6;
						found_App.removeUpdate(f2);
					}
				}
				if(t._lateUpdate != null) {
					var _g8 = 0;
					var _g9 = t._lateUpdate;
					while(_g8 < _g9.length) {
						var f3 = _g9[_g8];
						++_g8;
						found_App.removeLateUpdate(f3);
					}
				}
				if(t._render != null) {
					var _g10 = 0;
					var _g11 = t._render;
					while(_g10 < _g11.length) {
						var f4 = _g11[_g10];
						++_g10;
						found_App.removeRender(f4);
					}
				}
				if(t._render2D != null) {
					var _g12 = 0;
					var _g13 = t._render2D;
					while(_g12 < _g13.length) {
						var f5 = _g13[_g12];
						++_g12;
						found_App.removeRender2D(f5);
					}
				}
			}
			if(found_Scene.ready) {
				HxOverrides.remove(found_State.active.activeEntities,this);
				found_State.active.inactiveEntities.push(this);
			}
		}
		return this.active = value;
	}
	,addTrait: function(t) {
		this.traits.push(t);
		t.object = this;
		if(t._add != null) {
			var _g = 0;
			var _g1 = t._add;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f();
			}
			t._add = null;
		}
	}
	,removeTrait: function(t) {
		if(t._init != null) {
			var _g = 0;
			var _g1 = t._init;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				found_App.removeInit(f);
			}
			t._init = null;
		}
		if(t._update != null) {
			var _g = 0;
			var _g1 = t._update;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				found_App.removeUpdate(f);
			}
			t._update = null;
		}
		if(t._lateUpdate != null) {
			var _g = 0;
			var _g1 = t._lateUpdate;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				found_App.removeLateUpdate(f);
			}
			t._lateUpdate = null;
		}
		if(t._render != null) {
			var _g = 0;
			var _g1 = t._render;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				found_App.removeRender(f);
			}
			t._render = null;
		}
		if(t._render2D != null) {
			var _g = 0;
			var _g1 = t._render2D;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				found_App.removeRender2D(f);
			}
			t._render2D = null;
		}
		if(t._remove != null) {
			var _g = 0;
			var _g1 = t._remove;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f();
			}
			t._remove = null;
		}
		HxOverrides.remove(this.traits,t);
	}
	,getTrait: function(c,name) {
		var _g = 0;
		var _g1 = this.traits;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(js_Boot.getClass(t) == c) {
				if(name == null || name != null && t.name == name) {
					return t;
				}
			}
		}
		return null;
	}
	,__class__: found_object_Object
	,__properties__: {get_depth:"get_depth",get_layer:"get_layer",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",get_scale:"get_scale",get_rotation:"get_rotation",get_center:"get_center",get_position:"get_position",set_body:"set_body",set_active:"set_active",set_raw:"set_raw",get_raw:"get_raw",get_name:"get_name"}
};
var found_anim_Sprite = function(sprite,done) {
	var _gthis = this;
	found_object_Object.call(this,sprite);
	this.set_active(sprite.active);
	this.flip = Object.prototype.hasOwnProperty.call(sprite,"flip") ? sprite.flip : new kha_math_Vector2();
	new found_data_SpriteData(sprite,function(p_data) {
		_gthis.data = p_data;
		_gthis.set_raw(Reflect.copy(_gthis.data.raw));
		if(_gthis.get_width() == 0 && _gthis.data.image != null) {
			_gthis.set_width(_gthis.data.image.get_width());
		}
		if(_gthis.get_height() == 0 && _gthis.data.image != null) {
			_gthis.set_height(_gthis.data.image.get_height());
		}
		if(Object.prototype.hasOwnProperty.call(sprite,"scale") && sprite.scale != null) {
			_gthis.resize(function(data) {
				data.x = sprite.scale.x;
				data.y = sprite.scale.y;
				return data;
			});
		}
		done(_gthis);
	});
};
$hxClasses["found.anim.Sprite"] = found_anim_Sprite;
found_anim_Sprite.__name__ = true;
found_anim_Sprite.__super__ = found_object_Object;
found_anim_Sprite.prototype = $extend(found_object_Object.prototype,{
	data: null
	,_w: null
	,get__w: function() {
		return this._w * this.get_scale().x;
	}
	,_h: null
	,get__h: function() {
		return this._h * this.get_scale().y;
	}
	,flip: null
	,set_raw: function(data) {
		return this.data.raw = found_object_Object.prototype.set_raw.call(this,data);
	}
	,get_raw: function() {
		return this.data.raw;
	}
	,setAnimation: function(animation) {
		this.data.set_curAnim(animation);
	}
	,setAnimationByName: function(animationName) {
		this.data.setCurrentAnimationByName(animationName);
	}
	,animate: function() {
		if(this.data == null) {
			return;
		}
		this.data.get_animation().next();
	}
	,render: function(canvas) {
		if(this.data == null) {
			return;
		}
		found_object_Object.prototype.render.call(this,canvas);
		if(found_App.editorui.isPlayMode) {
			this.animate();
		}
		if(this.data.image != null) {
			var frame = this.data.get_animation().get();
			var tx = frame.tx != null ? frame.tx : (frame.id * this.get__w() | 0) % this.data.image.get_width();
			var ty = frame.ty != null ? frame.ty : Math.floor(frame.id * this.get__w() / this.data.image.get_width()) * this.get__h();
			var w = this.get_width();
			var h = this.get_height();
			canvas.get_g2().set_color(-1);
			var tmp = this.flip.x > 0.0 ? w : 0;
			var tmp1 = this.flip.y > 0.0 ? h : 0;
			var tmp2 = this.flip.x > 0.0 ? -w : w;
			var tmp3 = this.flip.y > 0.0 ? -h : h;
			canvas.get_g2().drawScaledSubImage(this.data.image,tx,ty,frame.tw,frame.th,tmp,tmp1,tmp2,tmp3);
		}
	}
	,set: function(sprite) {
		var _gthis = this;
		if(this.data.name != sprite.imagePath) {
			new found_data_SpriteData(sprite,function(p_data) {
				_gthis.data = p_data;
				_gthis.set_width(_gthis.data.raw.width = p_data.image.get_width());
				_gthis.set_height(_gthis.data.raw.height = p_data.image.get_height());
				_gthis.set_raw(_gthis.data.raw);
				if(!_gthis.data.get_animatable()) {
					var tmp = _gthis.get_width() | 0;
					_gthis.data.get_animation().get().tw = tmp;
					var tmp = _gthis.get_height() | 0;
					_gthis.data.get_animation().get().th = tmp;
				}
				if(found_App.editorui.inspector != null) {
					found_App.editorui.inspector.updateField(_gthis.uid,"imagePath",_gthis.get_raw());
				}
			});
		}
	}
	,set_width: function(value) {
		found_object_Object.prototype.set_width.call(this,value);
		return this._w = value;
	}
	,set_height: function(value) {
		found_object_Object.prototype.set_height.call(this,value);
		return this._h = value;
	}
	,__class__: found_anim_Sprite
	,__properties__: $extend(found_object_Object.prototype.__properties__,{get__h:"get__h",get__w:"get__w"})
});
var found_anim_Tile = function(tilemap,sprite,index,isPivot,done) {
	this.bodies = [];
	this.animIndex = 0;
	this.offsety = 0;
	this.offsetx = 0;
	var _gthis = this;
	this.map = tilemap;
	this.flip = Object.prototype.hasOwnProperty.call(sprite,"flip") ? sprite.flip : new kha_math_Vector2();
	this._w = sprite.tileWidth;
	this._h = sprite.tileHeight;
	this.raw = sprite;
	this.map.addData(sprite,function(dataId) {
		_gthis.dataId = dataId;
		haxe_Log.trace(index,{ fileName : "found/anim/Tile.hx", lineNumber : 44, className : "found.anim.Tile", methodName : "new"});
		if(index == 0 || isPivot) {
			_gthis["tileId"] = index;
			_gthis.map.pivotTiles.push(_gthis);
			done(_gthis);
			var _g = 0;
			var _g1 = sprite.usedIds.length;
			while(_g < _g1) {
				var i = _g++;
				if(i == 0) {
					continue;
				}
				found_anim_Tile.createTile(_gthis.map,sprite,sprite.usedIds[i]);
			}
		} else {
			_gthis["tileId"] = index;
			var value = _gthis.get_data().addSubSprite(_gthis.tileId - _gthis.map.pivotTiles[dataId].tileId,sprite.tileWidth,sprite.tileHeight);
			_gthis["animIndex"] = value;
			done(_gthis);
		}
	});
};
$hxClasses["found.anim.Tile"] = found_anim_Tile;
found_anim_Tile.__name__ = true;
found_anim_Tile.createTile = function(map,sprite,index,isPivot,done) {
	if(isPivot == null) {
		isPivot = false;
	}
	if(done != null) {
		found_anim_Tile.onStaticDone = done;
	}
	return new found_anim_Tile(map,sprite,index,isPivot,function(tile) {
		map.tiles.h[tile.tileId] = tile;
		if(tile.raw.usedIds[tile.raw.usedIds.length - 1] == index && found_anim_Tile.onStaticDone != null) {
			haxe_Log.trace("done was called " + index,{ fileName : "found/anim/Tile.hx", lineNumber : 75, className : "found.anim.Tile", methodName : "createTile"});
			found_anim_Tile.onStaticDone(map);
			found_anim_Tile.onStaticDone = null;
		}
	});
};
found_anim_Tile.prototype = {
	map: null
	,tileId: null
	,dataId: null
	,get_data: function() {
		return this.map.imageData[this.dataId];
	}
	,offsetx: null
	,offsety: null
	,_w: null
	,_h: null
	,animIndex: null
	,flip: null
	,raw: null
	,bodies: null
	,setAnimation: function(animation) {
		this.get_data().set_curAnim(animation);
	}
	,render: function(canvas,position,color,scale,shouldZoom) {
		if(shouldZoom == null) {
			shouldZoom = true;
		}
		if(this.get_data() == null) {
			return;
		}
		this.setAnimation(this.animIndex);
		if(this.get_data().get_animatable()) {
			this.get_data().get_animation().next();
		}
		if(this.get_data().image != null) {
			canvas.get_g2().set_color(color != null ? color : -1);
			if(scale != null) {
				var _this = canvas.get_g2();
				var transformation = new kha_math_FastMatrix3(scale.x,0,0,0,scale.y,0,0,0,1);
				_this.setTransformation(transformation);
				var _this1 = _this.transformations[_this.transformationIndex];
				_this1._00 = transformation._00;
				_this1._10 = transformation._10;
				_this1._20 = transformation._20;
				_this1._01 = transformation._01;
				_this1._11 = transformation._11;
				_this1._21 = transformation._21;
				_this1._02 = transformation._02;
				_this1._12 = transformation._12;
				_this1._22 = transformation._22;
			}
			var pos;
			if(shouldZoom) {
				var x = position.x;
				var y = position.y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var _this_x = x;
				var _this_y = y;
				var value = found_State.active.cam.zoom;
				pos = new kha_math_Vector2(_this_x * value,_this_y * value);
			} else {
				pos = position;
			}
			canvas.get_g2().pushTranslation(pos.x,pos.y);
			var grid = this.map.tw;
			var value = this.get_data().image.get_width();
			var width;
			if(value % grid == 0) {
				width = value;
			} else {
				value += grid - Math.floor(value) % grid;
				width = value;
			}
			var x = (this.get_data().get_animation().get().id * grid | 0) % width;
			var y = Math.floor(this.get_data().get_animation().get().id * grid / width) * this.map.th;
			var tmp = canvas.get_g2();
			var tmp1 = this.flip.x > 0.0 ? this._w : 0;
			var tmp2 = this.flip.y > 0.0 ? this._h : 0;
			var tmp3 = this.flip.x > 0.0 ? -this._w : this._w;
			var tmp4 = this.flip.y > 0.0 ? -this._h : this._h;
			tmp.drawScaledSubImage(this.get_data().image,x,y,this._w,this._h,tmp1,tmp2,tmp3,tmp4);
			canvas.get_g2().popTransformation();
			if(scale != null) {
				var _this = canvas.get_g2();
				var transformation = new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1);
				_this.setTransformation(transformation);
				var _this1 = _this.transformations[_this.transformationIndex];
				_this1._00 = transformation._00;
				_this1._10 = transformation._10;
				_this1._20 = transformation._20;
				_this1._01 = transformation._01;
				_this1._11 = transformation._11;
				_this1._21 = transformation._21;
				_this1._02 = transformation._02;
				_this1._12 = transformation._12;
				_this1._22 = transformation._22;
			}
		}
	}
	,__class__: found_anim_Tile
	,__properties__: {get_data:"get_data"}
};
var found_anim_Tilemap = function(data,done) {
	found_object_Object.call(this,data);
	this.set_w(data.width | 0);
	this.set_h(data.height | 0);
	this.tw = data.tileWidth;
	this.th = data.tileHeight;
	var _g = [];
	var _g1 = 0;
	var _g2 = this.w * this.h;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(-1);
	}
	this.data = _g;
	this.imageData = [];
	this.tiles = new haxe_ds_IntMap();
	this.pivotTiles = [];
	this.set_raw(data);
	data.map = found_anim_Tilemap.deserialize(data.map);
	var tileid = data.map.keys();
	while(tileid.hasNext()) {
		var tileid1 = tileid.next();
		var _g = 0;
		var _g1 = data.map.h[tileid1];
		while(_g < _g1.length) {
			var pos = _g1[_g];
			++_g;
			this.data[pos] = tileid1;
		}
	}
	var _g = 0;
	var _g1 = data.images;
	while(_g < _g1.length) {
		var tile = _g1[_g];
		++_g;
		found_anim_Tile.createTile(this,tile,tile.id,true,done);
	}
	if(data.images.length == 0) {
		done(this);
	}
};
$hxClasses["found.anim.Tilemap"] = found_anim_Tilemap;
found_anim_Tilemap.__name__ = true;
found_anim_Tilemap.deserialize = function(data) {
	var map = new haxe_ds_IntMap();
	var _g = 0;
	var _g1 = Reflect.fields(Reflect.getProperty(data,"h"));
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		var key = Std.parseInt(field);
		var value = Reflect.getProperty(Reflect.getProperty(data,"h"),field);
		map.h[key] = value;
	}
	return map;
};
found_anim_Tilemap.__super__ = found_object_Object;
found_anim_Tilemap.prototype = $extend(found_object_Object.prototype,{
	w: null
	,set_w: function(width) {
		found_object_Object.prototype.set_width.call(this,width);
		return this.w = width;
	}
	,h: null
	,set_h: function(height) {
		found_object_Object.prototype.set_height.call(this,height);
		return this.h = height;
	}
	,tw: null
	,th: null
	,data: null
	,tiles: null
	,pivotTiles: null
	,imageData: null
	,set_body: function(b) {
		var out = found_object_Object.prototype.set_body.call(this,b);
		if(b == null) {
			this.removeBodies(found_State.active);
		}
		return out;
	}
	,x: function(id) {
		return id % this.w;
	}
	,y: function(id) {
		return id / this.w | 0;
	}
	,i: function(x,y) {
		if(x < 0) {
			return -1;
		} else if(x >= this.w) {
			return -1;
		} else if(y < 0) {
			return -1;
		} else if(y >= this.h) {
			return -1;
		} else {
			return y * this.w + x;
		}
	}
	,x2p: function(x) {
		return x * this.tw;
	}
	,y2p: function(y) {
		return y * this.th;
	}
	,p2x: function(p) {
		return p / this.tw;
	}
	,p2y: function(p) {
		return p / this.th;
	}
	,pos2Id: function(pos) {
		var tx = pos.x / this.tw | 0;
		var ty = pos.y / this.th | 0;
		if(tx < 0) {
			return -1;
		} else if(tx >= this.w) {
			return -1;
		} else if(ty < 0) {
			return -1;
		} else if(ty >= this.h) {
			return -1;
		} else {
			return ty * this.w + tx;
		}
	}
	,posXY2Id: function(x,y) {
		var tx = x / this.tw | 0;
		var ty = y / this.th | 0;
		if(tx < 0) {
			return -1;
		} else if(tx >= this.w) {
			return -1;
		} else if(ty < 0) {
			return -1;
		} else if(ty >= this.h) {
			return -1;
		} else {
			return ty * this.w + tx;
		}
	}
	,addData: function(data,onDone) {
		var _gthis = this;
		var id = -1;
		var _g = 0;
		var _g1 = this.imageData.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.imageData[i].raw.imagePath == data.imagePath) {
				onDone(i);
				return;
			}
		}
		if(id == -1) {
			new found_data_SpriteData(data,function(p_data) {
				onDone(_gthis.imageData.push(p_data) - 1);
			});
		}
	}
	,render: function(canvas) {
		found_object_Object.prototype.render.call(this,canvas);
		var x = 0;
		var y = 0;
		while(x < this.w) {
			var tx = x / this.tw | 0;
			var ty = y / this.th | 0;
			var pos = tx < 0 ? -1 : tx >= this.w ? -1 : ty < 0 ? -1 : ty >= this.h ? -1 : ty * this.w + tx;
			if(pos != -1) {
				var tileId = this.data[pos];
				if(tileId != -1) {
					var tile = this.tiles.h[tileId];
					if(tile != null) {
						var pos1 = new kha_math_Vector2(x,y);
						tile.render(canvas,pos1);
					}
				}
			}
			x += this.tw;
			if(x >= this.w && y < this.h) {
				y += this.th;
				x = 0;
			}
		}
		if(found_tool_TileEditor.selectedTilemapIdIndex != -1 && found_tool_TileEditor.tilemapIds[found_tool_TileEditor.selectedTilemapIdIndex] == this.uid) {
			this.drawCountour(canvas);
		}
	}
	,drawCountour: function(canvas) {
		var g = canvas.get_g2();
		g.drawRect(0,0,this.w,this.h,3.0);
	}
	,makeBodies: function(scene,p_tileid) {
		var _gthis = this;
		var data = this.get_raw();
		var addAllIds = function() {
			var tileid = data.map.keys();
			while(tileid.hasNext()) {
				var tileid1 = tileid.next();
				_gthis.makeBodies(scene,tileid1);
			}
			return null;
		};
		var tileId = p_tileid != null ? p_tileid : addAllIds();
		if(tileId != null) {
			var _g = 0;
			var _g1 = data.map.h[tileId];
			while(_g < _g1.length) {
				var index = _g1[_g];
				++_g;
				var tile = this.tiles.h[tileId];
				if(tile != null && tile.raw.rigidBodies != null && tile.raw.rigidBodies.h.hasOwnProperty(tile.tileId)) {
					var body = tile.raw.rigidBodies.h[tile.tileId];
					body.x = index % this.w * this.tw + this.get_position().x;
					body.y = (index / this.w | 0) * this.th + this.get_position().y;
					var addBody = true;
					var _g2 = 0;
					var _g3 = tile.bodies;
					while(_g2 < _g3.length) {
						var bod = _g3[_g2];
						++_g2;
						if(bod.frame.get_offset().x == body.x && bod.frame.get_offset().y == body.y) {
							addBody = false;
							break;
						}
					}
					if(addBody) {
						tile.bodies.push(scene.physics_world.add(new echo_Body(body)));
					}
				}
			}
		}
	}
	,removeBodies: function(scene,p_tileid) {
		var _gthis = this;
		var data = this.get_raw();
		var rmAllIds = function() {
			var tileid = data.map.keys();
			while(tileid.hasNext()) {
				var tileid1 = tileid.next();
				_gthis.removeBodies(scene,tileid1);
			}
			return null;
		};
		var tileId = p_tileid != null ? p_tileid : rmAllIds();
		if(tileId != null) {
			var tile = this.tiles.h[tileId];
			var _g = 0;
			var _g1 = tile.bodies;
			while(_g < _g1.length) {
				var body = _g1[_g];
				++_g;
				scene.physics_world.remove(body);
			}
			tile.bodies.splice(0,tile.bodies.length);
		}
	}
	,__class__: found_anim_Tilemap
	,__properties__: $extend(found_object_Object.prototype.__properties__,{set_h:"set_h",set_w:"set_w"})
});
var found_audio_Music = function() { };
$hxClasses["found.audio.Music"] = found_audio_Music;
found_audio_Music.__name__ = true;
found_audio_Music.play = function(name,volume,loop) {
	if(loop == null) {
		loop = false;
	}
	if(volume == null) {
		volume = 0.3;
	}
	found_data_Data.getSound(name,function(snd) {
		var chan = kha_audio2_Audio1.stream(snd,loop);
		chan.set_volume(volume);
		found_audio_Music.musicChannels.h[name] = chan;
	});
};
found_audio_Music.setVolume = function(name,volume) {
	var chan = found_audio_Music.musicChannels.h[name];
	if(chan != null && !chan.get_finished()) {
		chan.set_volume(volume);
	} else if(chan == null) {
		found_tool_Log.warn("Can't set volume, no music with name " + name + " exists",{ fileName : "found/audio/Music.hx", lineNumber : 25, className : "found.audio.Music", methodName : "setVolume"});
	}
};
found_audio_Music.stopAll = function() {
	var chan = haxe_ds_StringMap.valueIterator(found_audio_Music.musicChannels.h);
	while(chan.hasNext()) {
		var chan1 = chan.next();
		chan1.stop();
	}
	found_audio_Music.musicChannels.h = Object.create(null);
};
var found_audio_Sfx = function() { };
$hxClasses["found.audio.Sfx"] = found_audio_Sfx;
found_audio_Sfx.__name__ = true;
found_audio_Sfx.loadSounds = function(defs) {
	var count = 0;
	var done = function() {
		count -= 1;
		if(count == 0) {
			found_audio_Sfx.allLoaded = true;
		}
	};
	var _g = 0;
	while(_g < defs.length) {
		var def = [defs[_g]];
		++_g;
		count += 1;
		found_data_Data.getSound(def[0].path,(function(def) {
			return function(snd) {
				if(StringTools.endsWith(def[0].path,".wav")) {
					var data = snd.compressedData;
					var this1 = new Float32Array(data.length);
					var arr = this1;
					var _g = 0;
					var _g1 = data.length;
					while(_g < _g1) {
						var i = _g++;
						arr[i] = data.getFloat(i);
					}
					snd.uncompressedData = arr;
				} else {
					snd.uncompress(done);
				}
			};
		})(def),def[0].alias);
	}
};
found_audio_Sfx.bytesToSingle = function(bytes,position) {
	var first = bytes.b[position];
	var second = bytes.b[position + 1];
	var s = second << 8 | first;
	return s / 32768.0 - 1.0;
};
found_audio_Sfx.play = function(name,volume) {
	if(volume == null) {
		volume = 0.3;
	}
	found_data_Data.getSound(name,function(snd) {
		var done = function() {
			var sound = null;
			if(found_audio_Sfx.inactiveChannels.length > 0) {
				sound = found_audio_Sfx.inactiveChannels.pop();
				sound.data = snd.uncompressedData;
				sound.play();
			} else {
				sound = kha_audio2_Audio1.play(snd,false);
			}
			sound.set_volume(volume);
			found_audio_Sfx.sfxChannels.h[name] = sound;
		};
		if(snd.uncompressedData == null) {
			if(StringTools.endsWith(name,".wav")) {
				var data = kha_internal_BytesBlob.fromBytes(snd.compressedData);
				var length = data.get_length() * 0.5 | 0;
				var this1 = new Float32Array(length);
				var arr = this1;
				var div = 3.0517578125e-05;
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					arr[i] = div * data.readS16LE(i);
				}
				snd.uncompressedData = arr;
				done();
			} else {
				snd.uncompress(done);
			}
		} else {
			done();
		}
	});
};
found_audio_Sfx.random = function(name,amount,volume) {
	if(volume == null) {
		volume = 0.3;
	}
	if(amount == null) {
		amount = 3;
	}
	var choiceSound = found_math_Util.randomInt(amount);
	found_data_Data.getSound(name + choiceSound,function(snd) {
		var sound = kha_audio2_Audio1.play(snd,false);
		sound.set_volume(volume);
	});
};
found_audio_Sfx.setVolume = function(name,volume) {
	var chan = found_audio_Sfx.sfxChannels.h[name];
	if(chan != null && !chan.get_finished()) {
		chan.set_volume(volume);
	} else if(chan == null) {
		found_tool_Log.warn("Can't set volume, no sfx with name " + name + " exists",{ fileName : "found/audio/Sfx.hx", lineNumber : 110, className : "found.audio.Sfx", methodName : "setVolume"});
	}
};
found_audio_Sfx.isPlaying = function(name) {
	if(Object.prototype.hasOwnProperty.call(found_audio_Sfx.sfxChannels.h,name)) {
		return !found_audio_Sfx.sfxChannels.h[name].get_finished();
	} else {
		return false;
	}
};
var found_data_Creator = function() { };
$hxClasses["found.data.Creator"] = found_data_Creator;
found_data_Creator.__name__ = true;
found_data_Creator.createType = function(name,type) {
	var data = null;
	switch(type) {
	case "object":
		data = { name : name, type : type, position : new kha_math_Vector2(), rotation : new kha_math_Vector3(), width : 0.0, height : 0.0, scale : new kha_math_Vector2(1.0,1.0), center : new kha_math_Vector2(), layer : 0, depth : 0.0, active : true};
		break;
	case "sprite_object":
		var sprite = found_data_Creator.createType(name,"object");
		sprite.width = 493.0;
		sprite.height = 512.0;
		sprite.imagePath = "foundry_icon";
		sprite.shape = 0;
		sprite.points = [new kha_math_Vector2(),new kha_math_Vector2(sprite.width,0),new kha_math_Vector2(sprite.width,sprite.height),new kha_math_Vector2(0,sprite.height)];
		sprite.anims = [];
		data = sprite;
		break;
	case "tilemap_object":
		var tilemap = found_data_Creator.createType(name,"object");
		tilemap.width = 1280.0;
		tilemap.height = 960.0;
		tilemap.tileWidth = 64;
		tilemap.tileHeight = 64;
		tilemap.map = new haxe_ds_IntMap();
		var tile = found_data_Creator.createType("Tile","sprite_object");
		tile.id = 0;
		tile.width = 896.0;
		tile.height = 448.0;
		tile.tileWidth = 64;
		tile.tileHeight = 64;
		tile.points = [new kha_math_Vector2(),new kha_math_Vector2(64,0),new kha_math_Vector2(64,64),new kha_math_Vector2(0,64)];
		tile.imagePath = "tilesheet";
		tile.usedIds = [0];
		tile.rigidBodies = new haxe_ds_IntMap();
		tilemap.images = [tile];
		data = tilemap;
		break;
	}
	data["type"] = type;
	return data;
};
var khafs_Fs = function() { };
$hxClasses["khafs.Fs"] = khafs_Fs;
khafs_Fs.__name__ = true;
khafs_Fs.db = null;
khafs_Fs.wasm = null;
khafs_Fs.includeJs = function(path,done) {
	var js = window.document.createElement("script");
	js.type = "text/javascript";
	js.src = path;
	js.onload = done;
	window.document.body.appendChild(js);
};
khafs_Fs.input = null;
khafs_Fs.onInputDone = function(lastPath) {
};
khafs_Fs.addInputElement = function() {
	khafs_Fs.input = window.document.createElement("input");
	khafs_Fs.input.type = "file";
	khafs_Fs.input.id = "fileElem";
	khafs_Fs.input.multiple = true;
	khafs_Fs.input.style.display = "none";
	khafs_Fs.input.onchange = khafs_Fs.onAddFiles;
	window.document.body.appendChild(khafs_Fs.input);
};
khafs_Fs.next = function(index) {
	var file = khafs_Fs.input.files[index];
	khafs_Fs.reader.onload = function() {
		var url = khafs_Fs.reader.result.split("base64,")[1];
		var data = haxe_crypto_Base64.decode(url);
		var path = khafs_Fs.curDir + khafs_Fs.sep + file.name;
		khafs_Fs.saveContent(path,url,function() {
			if(index + 1 < khafs_Fs.input.files.length) {
				khafs_Fs.next(index + 1);
			}
			if(index + 1 == khafs_Fs.input.files.length) {
				khafs_Fs.onInputDone(path);
			}
		});
	};
	khafs_Fs.reader.readAsDataURL(file);
};
khafs_Fs.onAddFiles = function() {
	if(khafs_Fs.input != null) {
		haxe_Log.trace("num in's: " + khafs_Fs.input.files.length,{ fileName : "khafs/Fs.hx", lineNumber : 89, className : "khafs.Fs", methodName : "onAddFiles"});
		if(0 < khafs_Fs.input.files.length) {
			khafs_Fs.next(0);
		}
	}
};
khafs_Fs.download = function(path) {
	var t = path.split("/");
	var filename = t[t.length - 1].split(".").length == 1 ? t[t.length - 1] + ".zip" : t[t.length - 1];
	var str = filename.split(".");
	var filetype = khafs_Fs.getFileType(str[str.length - 1]);
	var onDownload = function(bytes) {
		var blob = new Blob([bytes.b.bufferValue],{ type : filetype});
		var link = window.document.createElement("a");
		link.href = URL.createObjectURL(blob);
		link.download = filename;
		link.click();
	};
	if(StringTools.endsWith(filename,".zip") && khafs_Fs.isDirectory(path)) {
		var out = new haxe_io_BytesOutput();
		var zip = new haxe_zip_Writer(out);
		khafs_Fs.getEntries(path,function(entries) {
			zip.write(entries);
			onDownload(out.getBytes());
		});
	} else {
		khafs_Fs.getData(path,function(b) {
			onDownload(b.bytes);
		});
	}
};
khafs_Fs.getFileType = function(end) {
	var out = "";
	switch(end) {
	case "gif":case "jpeg":case "jpg":case "png":
		out = "image/" + end;
		break;
	case "svg":
		out = "image/svg+xml";
		break;
	case "hscript":case "hx":case "txt":
		out = "text/plain";
		break;
	case "json":case "vhx":
		out = "data:text/json;charset=utf-8,";
		break;
	case "midi":case "mp3":case "ogg":case "opus":case "wav":case "webm":
		out = "audio/" + end;
		break;
	case "zip":
		out = "application/zip, application/octet-stream";
		break;
	default:
		out = "application/octet-stream";
	}
	return out;
};
khafs_Fs.tryPersistWithoutPromtingUser = function(done) {
	if($global.navigator.storage == null || $global.navigator.storage.persisted == null) {
		done("never");
		return;
	}
	$global.navigator.storage.persisted().then(function(persisted) {
		if(persisted) {
			done("persisted");
			return;
		}
		if($global.navigator.permissions == null || $global.navigator.permissions.query == null) {
			done("prompt");
			return;
		}
		$global.navigator.permissions.query({ name : "persistent-storage"}).then(function(permission) {
			if(permission.state == "granted") {
				$global.navigator.storage.persist().then(function(persisted) {
					if(persisted) {
						done("persisted");
						return;
					} else {
						throw haxe_Exception.thrown("Failed to persist");
					}
				});
			}
			if(permission.state == "prompt") {
				done("prompt");
				return;
			}
			done("never");
		});
	});
};
khafs_Fs.getEntries = function(dir,onDone,entries,inDir) {
	if(entries == null) {
		entries = new haxe_ds_List();
		khafs_Fs.callCount = 0;
	}
	if(inDir == null) {
		inDir = dir;
	}
	var _g = 0;
	var _g1 = khafs_Fs.readDirectory(dir);
	while(_g < _g1.length) {
		var file = _g1[_g];
		++_g;
		khafs_Fs.callCount++;
		var path = [haxe_io_Path.join([dir,file])];
		if(khafs_Fs.isDirectory(path[0])) {
			khafs_Fs.getEntries(path[0],onDone,entries,inDir);
			khafs_Fs.callCount--;
		} else {
			khafs_Fs.getData(path[0],(function(path) {
				return function(b) {
					var bytes = b.bytes;
					var entry = { fileName : StringTools.replace(path[0],inDir,""), fileSize : bytes.length, fileTime : new Date(), compressed : false, dataSize : khafs_Fs.stat(path[0]).size | 0, data : bytes, crc32 : haxe_crypto_Crc32.make(bytes)};
					entries.push(entry);
					khafs_Fs.callCount--;
					if(khafs_Fs.callCount == 0) {
						onDone(entries);
					}
				};
			})(path),(function(path) {
				return function(onError) {
					if(onError != null) {
						haxe_Log.trace(Std.string(onError.error) + (" at path: " + path[0]),{ fileName : "khafs/Fs.hx", lineNumber : 224, className : "khafs.Fs", methodName : "getEntries"});
					}
				};
			})(path));
		}
	}
};
khafs_Fs.init = function(done,ftExceptions) {
	khafs_Fs.filetypeExceptions = khafs_Fs.filetypeExceptions.concat(ftExceptions);
	khafs_Fs.addInputElement();
	khafs_Fs.includeJs("./wasmfs.js",function() {
		khafs_Fs.wasm = new WasmFs.WasmFs();
		khafs_Fs.includeJs("./dexie.js",function() {
			var tdb = null;
			tdb = new Dexie("projects");
			var create = function(e) {
				tdb.version(1).stores({ projects : ""});
				var out = function() {
					if(tdb.isOpen()) {
						khafs_Fs.db = tdb.backendDB();
						khafs_Fs.tryPersistWithoutPromtingUser(function(result) {
							switch(result) {
							case "never":
								haxe_Log.trace("Not possible to persist storage",{ fileName : "khafs/Fs.hx", lineNumber : 247, className : "khafs.Fs", methodName : "init"});
								break;
							case "persisted":
								haxe_Log.trace("Successfully persisted storage silently",{ fileName : "khafs/Fs.hx", lineNumber : 249, className : "khafs.Fs", methodName : "init"});
								break;
							case "prompt":
								haxe_Log.trace("Not persisted, but we may prompt user when we want to.",{ fileName : "khafs/Fs.hx", lineNumber : 251, className : "khafs.Fs", methodName : "init"});
								break;
							}
							done();
						});
					} else {
						haxe_Log.trace("IndexedDB been closed: " + Std.string(tdb.hasBeenClosed()),{ fileName : "khafs/Fs.hx", lineNumber : 256, className : "khafs.Fs", methodName : "init"});
						haxe_Log.trace("IndexedDB has failed to open: " + Std.string(tdb.hasFailed()),{ fileName : "khafs/Fs.hx", lineNumber : 257, className : "khafs.Fs", methodName : "init"});
					}
				};
				tdb.open().then(out).catch(function(e) {
					haxe_Log.trace(e.name,{ fileName : "khafs/Fs.hx", lineNumber : 261, className : "khafs.Fs", methodName : "init"});
				});
			};
			var open = function(p_db) {
				khafs_Fs.db = p_db.backendDB();
				haxe_Log.trace("Opened DB with name: " + khafs_Fs.db.name,{ fileName : "khafs/Fs.hx", lineNumber : 267, className : "khafs.Fs", methodName : "init"});
				var transaction = khafs_Fs.db.transaction(["projects"],"readwrite");
				var store = transaction.objectStore("projects");
				var req = store.getAllKeys();
				req.onsuccess = function(e) {
					var data = req.result;
					var _g = 0;
					while(_g < data.length) {
						var name = data[_g];
						++_g;
						khafs_Fs.dbKeys.h[name] = true;
					}
					done();
				};
			};
			tdb.open().then(open).catch(create);
		});
	});
};
khafs_Fs.initPath = function(systemId) {
	switch(systemId) {
	case "Linux":
		return "$HOME";
	case "Windows":
		return "C:\\Users";
	default:
		return "/";
	}
};
khafs_Fs.fixPath = function(path) {
	var systemId = "Linux";
	if(path == "") {
		path = khafs_Fs.initPath(systemId);
	}
	switch(systemId) {
	case "Linux":
		var home = "/";
		if(path.indexOf("$HOME") != -1 || path.charAt(0) == "~") {
			home = "./";
			if(path.charAt(0) == "~") {
				path = StringTools.replace(path,"~",home);
			} else {
				path = StringTools.replace(path,"$HOME",home);
			}
		}
		return path;
	case "Windows":
		return StringTools.replace(path,"/","\\");
	default:
		return path;
	}
};
khafs_Fs.exists = function(path) {
	path = khafs_Fs.fixPath(path);
	if(!khafs_Fs.wasm.fs.existsSync(path)) {
		if(khafs_Fs.db != null) {
			return Object.prototype.hasOwnProperty.call(khafs_Fs.dbKeys.h,path);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
khafs_Fs.readDirectory = function(path,folderOnly) {
	if(folderOnly == null) {
		folderOnly = false;
	}
	var files = [];
	try {
		path = khafs_Fs.fixPath(path);
		files = khafs_Fs.wasm.fs.readdirSync(path);
	} catch( _g ) {
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = files;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != "stderr" && v != "stdin" && v != "stdout") {
			_g.push(v);
		}
	}
	files = _g;
	if(folderOnly) {
		var _g = [];
		var _g1 = 0;
		var _g2 = files;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(khafs_Fs.isDirectory(path + khafs_Fs.sep + v)) {
				_g.push(v);
			}
		}
		files = _g;
	}
	return files;
};
khafs_Fs.isDirectory = function(path) {
	try {
		return khafs_Fs.stat(path).isDirectory();
	} catch( _g ) {
		return false;
	}
};
khafs_Fs.createDirectory = function(path,onDone) {
	khafs_Fs.wasm.fs.mkdir(path,{ recursive : true},function(err) {
		if(err != null) {
			throw err;
		} else if(onDone != null) {
			onDone();
		}
	});
};
khafs_Fs.stat = function(path) {
	return khafs_Fs.wasm.fs.statSync(path);
};
khafs_Fs.deleteDirectory = function(path,recursive,done) {
	if(recursive == null) {
		recursive = false;
	}
	if(!recursive) {
		if(done != null) {
			khafs_Fs.wasm.fs.rmdir(path,null,function(e) {
				if(e != null) {
					throw e;
				}
				done();
			});
		} else {
			khafs_Fs.wasm.fs.rmdirSync(path);
		}
	} else {
		var async = done != null ? function() {
		} : null;
		var _g = 0;
		var _g1 = khafs_Fs.readDirectory(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var pa = "" + path + "/" + p;
			if(khafs_Fs.isDirectory(pa)) {
				khafs_Fs.deleteDirectory(pa,true,async);
			} else {
				khafs_Fs.deleteFile(pa,async);
				var _this = khafs_Fs.dbKeys;
				if(Object.prototype.hasOwnProperty.call(_this.h,pa)) {
					delete(_this.h[pa]);
				}
			}
		}
		khafs_Fs.deleteDirectory(path,false,done);
	}
};
khafs_Fs.deleteFile = function(path,done) {
	var transaction = khafs_Fs.db.transaction(["projects"],"readwrite");
	var store = transaction.objectStore("projects");
	if(done != null) {
		khafs_Fs.wasm.fs.unlink(path,function(e) {
			if(e != null) {
				throw e;
			}
			var req = store.delete(path);
			req.onsuccess = function(event) {
				haxe_Log.trace("Successfully deleted file " + path + " from DB",{ fileName : "khafs/Fs.hx", lineNumber : 580, className : "khafs.Fs", methodName : "deleteFile"});
				done();
			};
			req.onerror = function(event) {
				throw haxe_Exception.thrown("Error file at " + path + " was not found");
			};
		});
	} else {
		khafs_Fs.wasm.fs.unlinkSync(path);
		var req = store.delete(path);
		req.onsuccess = function(event) {
			haxe_Log.trace("Successfully deleted file " + path,{ fileName : "khafs/Fs.hx", lineNumber : 592, className : "khafs.Fs", methodName : "deleteFile"});
		};
		req.onerror = function(event) {
			haxe_Log.trace("Error file at " + path + " was not found",{ fileName : "khafs/Fs.hx", lineNumber : 595, className : "khafs.Fs", methodName : "deleteFile"});
		};
	}
};
khafs_Fs.getData = function(path,onDone,onError) {
	var exception = false;
	var _g = 0;
	var _g1 = khafs_Fs.filetypeExceptions;
	while(_g < _g1.length) {
		var filetype = _g1[_g];
		++_g;
		if(StringTools.endsWith(path,filetype)) {
			exception = true;
			break;
		}
	}
	if(exception) {
		khafs_Fs.getContent(path,function(data) {
			var bytes = haxe_io_Bytes.ofString(data);
			onDone(kha_internal_BytesBlob.fromBytes(bytes));
		});
	} else {
		khafs_Fs.getBytes(path,onDone,onError);
	}
};
khafs_Fs.getBytes = function(path,onDone,onError) {
	if(khafs_Fs.exists(path)) {
		var data;
		if(khafs_Fs.wasm.fs.existsSync(path)) {
			khafs_Fs.wasm.fs.readFile(path,null,function(err,p_data) {
				if(err != null) {
					if(onError != null) {
						onError({ url : path, error : err});
					} else {
						throw err;
					}
					return;
				}
				var bytes = haxe_crypto_Base64.decode(haxe_io_Bytes.ofData(p_data).toString());
				onDone(kha_internal_BytesBlob.fromBytes(bytes));
			});
		} else {
			var transaction = khafs_Fs.db.transaction(["projects"],"readwrite");
			var store = transaction.objectStore("projects");
			var req = store.get(path);
			req.onsuccess = function(event) {
				var bytes = haxe_io_Bytes.ofData(req.result.b);
				var p = path.split("/");
				p.pop();
				p = p.join("/");
				if(!khafs_Fs.exists(p)) {
					khafs_Fs.createDirectory(p);
				}
				khafs_Fs.saveBytes(path,bytes);
				onDone(kha_internal_BytesBlob.fromBytes(bytes));
			};
			req.onerror = function(event) {
				haxe_Log.trace("Error file at " + path + " was not found",{ fileName : "khafs/Fs.hx", lineNumber : 668, className : "khafs.Fs", methodName : "getBytes"});
			};
		}
	} else {
		throw haxe_Exception.thrown("File Not Found");
	}
};
khafs_Fs.getContent = function(path,onDone) {
	if(khafs_Fs.exists(path)) {
		var data = "";
		if(khafs_Fs.wasm.fs.existsSync(path)) {
			khafs_Fs.wasm.fs.readFile(path,{ encoding : "utf8"},function(err,data) {
				if(err != null) {
					throw err;
				}
				onDone(data);
			});
		} else {
			var transaction = khafs_Fs.db.transaction(["projects"],"readwrite");
			var store = transaction.objectStore("projects");
			var req = store.get(path);
			req.onsuccess = function(event) {
				var bytes;
				if(typeof(req.result) == "string") {
					bytes = haxe_io_Bytes.ofString(req.result);
				} else {
					bytes = haxe_io_Bytes.ofData(req.result.b);
				}
				var p = path.split("/");
				p.pop();
				p = p.join("/");
				if(!khafs_Fs.exists(p)) {
					khafs_Fs.createDirectory(p);
				}
				khafs_Fs.saveBytes(path,bytes);
				onDone(bytes.toString());
			};
			req.onerror = function(event) {
				haxe_Log.trace("Error file at " + path + " was not found",{ fileName : "khafs/Fs.hx", lineNumber : 722, className : "khafs.Fs", methodName : "getContent"});
			};
		}
	} else {
		throw haxe_Exception.thrown("File Not Found at path: " + path);
	}
};
khafs_Fs.saveBytes = function(path,data,onDone) {
	khafs_Fs.saveToFile(path,data,null,onDone);
};
khafs_Fs.saveContent = function(path,data,onDone) {
	khafs_Fs.saveToFile(path,null,data,onDone);
};
khafs_Fs.saveToFile = function(path,bytes,content,onDone) {
	var data;
	if(bytes != null) {
		data = bytes;
	} else {
		data = content;
	}
	khafs_Fs.wasm.fs.writeFile(path,data,null,function(err) {
		if(err != null) {
			throw err;
		}
		if(khafs_Fs.db != null) {
			var transaction = khafs_Fs.db.transaction(["projects"],"readwrite");
			var store = transaction.objectStore("projects");
			var error = function(event) {
				haxe_Log.trace("Was unable to create " + path + ", maybe not enough space is available",{ fileName : "khafs/Fs.hx", lineNumber : 777, className : "khafs.Fs", methodName : "saveToFile"});
				if(onDone != null) {
					onDone();
				}
			};
			var sucess = function(event) {
				haxe_Log.trace("succeeded in writing " + path,{ fileName : "khafs/Fs.hx", lineNumber : 784, className : "khafs.Fs", methodName : "saveToFile"});
				khafs_Fs.dbKeys.h[path] = true;
				if(onDone != null) {
					onDone();
				}
			};
			var req = store.get(path);
			req.onsuccess = function(event) {
				var r = store.delete(path);
				r.onsuccess = function(event) {
					var nreq = store.put(data,path);
					nreq.onsuccess = sucess;
					nreq.onerror = error;
				};
			};
			req.onerror = function(event) {
				var nreq = store.put(data,path);
				nreq.onsuccess = sucess;
				nreq.onerror = error;
			};
		} else if(onDone != null) {
			onDone();
		}
	});
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var kha_Resource = function() { };
$hxClasses["kha.Resource"] = kha_Resource;
kha_Resource.__name__ = true;
kha_Resource.__isInterface__ = true;
kha_Resource.prototype = {
	unload: null
	,__class__: kha_Resource
};
var kha_internal_BytesBlob = function(bytes) {
	this.bytes = bytes;
};
$hxClasses["kha.internal.BytesBlob"] = kha_internal_BytesBlob;
kha_internal_BytesBlob.__name__ = true;
kha_internal_BytesBlob.__interfaces__ = [kha_Resource];
kha_internal_BytesBlob.fromBytes = function(bytes) {
	return new kha_internal_BytesBlob(bytes);
};
kha_internal_BytesBlob.alloc = function(size) {
	return new kha_internal_BytesBlob(new haxe_io_Bytes(new ArrayBuffer(size)));
};
kha_internal_BytesBlob.readF32 = function(i) {
	var sign = (i & -2147483648) == 0 ? 1 : -1;
	var exp = i >> 23 & 255;
	var man = i & 8388607;
	switch(exp) {
	case 0:
		return 0.0;
	case 255:
		if(man != 0) {
			return NaN;
		} else if(sign > 0) {
			return Infinity;
		} else {
			return -Infinity;
		}
		break;
	default:
		return sign * ((man + 8388608) / 8388608.0) * Math.pow(2,exp - 127);
	}
};
kha_internal_BytesBlob.bit = function(value,position) {
	var b = (value >>> position & 1) == 1;
	if(b) {
		var a = 3;
		++a;
		return true;
	} else {
		var c = 4;
		--c;
		return false;
	}
};
kha_internal_BytesBlob.toText = function(chars,length) {
	var value = "";
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		value += String.fromCodePoint(chars[i]);
	}
	return value;
};
kha_internal_BytesBlob.prototype = {
	bytes: null
	,sub: function(start,length) {
		return new kha_internal_BytesBlob(this.bytes.sub(start,length));
	}
	,length: null
	,get_length: function() {
		return this.bytes.length;
	}
	,writeU8: function(position,value) {
		this.bytes.b[position] = value;
	}
	,readU8: function(position) {
		var byte = this.bytes.b[position];
		++position;
		return byte;
	}
	,readS8: function(position) {
		var byte = this.bytes.b[position];
		++position;
		var sign = (byte & 128) == 0 ? 1 : -1;
		byte &= 127;
		return sign * byte;
	}
	,readU16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return first * 256 + second;
	}
	,readU16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return second * 256 + first;
	}
	,readU32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
	}
	,readU32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readS16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		if(sign == -1) {
			return -32767 + first * 256 + second;
		} else {
			return first * 256 + second;
		}
	}
	,readS16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		var sign = (second & 128) == 0 ? 1 : -1;
		second &= 127;
		position += 2;
		if(sign == -1) {
			return -32767 + second * 256 + first;
		} else {
			return second * 256 + first;
		}
	}
	,readS32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		} else {
			return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		}
	}
	,readS32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (fourth & 128) == 0 ? 1 : -1;
		fourth &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
		}
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readF32LE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32LE(position));
	}
	,readF32BE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32BE(position));
	}
	,toString: function() {
		return this.bytes.toString();
	}
	,readUtf8String: function() {
		return this.bytes.toString();
	}
	,toBytes: function() {
		return this.bytes;
	}
	,unload: function() {
		this.bytes = null;
	}
	,__class__: kha_internal_BytesBlob
	,__properties__: {get_length:"get_length"}
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var found_data_Data = function() {
};
$hxClasses["found.data.Data"] = found_data_Data;
found_data_Data.__name__ = true;
found_data_Data.deleteAll = function() {
	found_data_Data.cachedSceneRaws = new haxe_ds_StringMap();
	var c = haxe_ds_StringMap.valueIterator(found_data_Data.cachedBlobs.h);
	while(c.hasNext()) {
		var c1 = c.next();
		c1.unload();
	}
	found_data_Data.cachedBlobs = new haxe_ds_StringMap();
	var c = haxe_ds_StringMap.valueIterator(found_data_Data.cachedImages.h);
	while(c.hasNext()) {
		var c1 = c.next();
		c1.unload();
	}
	found_data_Data.cachedImages = new haxe_ds_StringMap();
	var c = haxe_ds_StringMap.valueIterator(found_data_Data.cachedVideos.h);
	while(c.hasNext()) {
		var c1 = c.next();
		c1.unload();
	}
	found_data_Data.cachedVideos = new haxe_ds_StringMap();
	var c = haxe_ds_StringMap.valueIterator(found_data_Data.cachedFonts.h);
	while(c.hasNext()) {
		var c1 = c.next();
		c1.unload();
	}
	found_data_Data.cachedFonts = new haxe_ds_StringMap();
};
found_data_Data.getSceneRaw = function(file,done) {
	var cached = found_data_Data.cachedSceneRaws.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = found_data_Data.loadingSceneRaws.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	found_data_Data.loadingSceneRaws.h[file] = [done];
	var compressed = StringTools.endsWith(file,".lz4");
	var isJson = StringTools.endsWith(file,".json") || StringTools.endsWith(file,"_json");
	var ext = compressed || isJson || StringTools.endsWith(file,".arm") ? "" : ".arm";
	found_data_Data.getBlob(file,function(b) {
		var compressed1 = compressed;
		var parsed = null;
		try {
			parsed = found_data_DataLoader.parse(b.toString());
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(e,{ fileName : "found/data/Data.hx", lineNumber : 87, className : "found.data.Data", methodName : "getSceneRaw"});
		}
		found_data_Data.returnSceneRaw(file,parsed);
	});
};
found_data_Data.returnSceneRaw = function(file,parsed) {
	var separated = file.split("/");
	var name = separated[separated.length - 1];
	found_data_Data.cachedSceneRaws.h[name] = parsed;
	var _g = 0;
	var _g1 = found_data_Data.loadingSceneRaws.h[file];
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		f(parsed);
	}
	var _this = found_data_Data.loadingSceneRaws;
	if(Object.prototype.hasOwnProperty.call(_this.h,file)) {
		delete(_this.h[file]);
	}
};
found_data_Data.getBlob = function(file,done,reload) {
	if(reload == null) {
		reload = false;
	}
	var cached = found_data_Data.cachedBlobs.h[file];
	if(cached != null && !reload) {
		done(cached);
		return;
	}
	var loading = found_data_Data.loadingBlobs.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	found_data_Data.loadingBlobs.h[file] = [done];
	var p = file.charAt(0) == "/" || file.charAt(1) == ":" ? file : found_data_Data.dataPath + file;
	if(Object.prototype.hasOwnProperty.call(kha_Assets.blobs,file)) {
		var onDone = function(b) {
			found_data_Data.cachedBlobs.h[file] = b;
			var _g = 0;
			var _g1 = found_data_Data.loadingBlobs.h[file];
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f(b);
			}
			var _this = found_data_Data.loadingBlobs;
			if(Object.prototype.hasOwnProperty.call(_this.h,file)) {
				delete(_this.h[file]);
			}
			found_data_Data.assetsLoaded++;
		};
		if(kha_Assets.progress >= 1.0) {
			onDone(kha_Assets.blobs.get(file));
		} else {
			kha_Assets.loadBlob(file,onDone,null,{ fileName : "found/data/Data.hx", lineNumber : 125, className : "found.data.Data", methodName : "getBlob"});
		}
	} else {
		found_data_Data.getData(p,function(b) {
			found_data_Data.cachedBlobs.h[file] = b;
			var _g = 0;
			var _g1 = found_data_Data.loadingBlobs.h[file];
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f(b);
			}
			var _this = found_data_Data.loadingBlobs;
			if(Object.prototype.hasOwnProperty.call(_this.h,file)) {
				delete(_this.h[file]);
			}
			found_data_Data.assetsLoaded++;
		},function(failed) {
			var error = failed.error;
			var path = failed.url;
			haxe_Log.trace("Asset at path: " + path + " failed to load because of " + Std.string(error),{ fileName : "found/data/Data.hx", lineNumber : 137, className : "found.data.Data", methodName : "getBlob"});
		});
	}
};
found_data_Data.deleteBlob = function(handle) {
	var blob = found_data_Data.cachedBlobs.h[handle];
	if(blob == null) {
		return;
	}
	blob.unload();
	var _this = found_data_Data.cachedBlobs;
	if(Object.prototype.hasOwnProperty.call(_this.h,handle)) {
		delete(_this.h[handle]);
	}
};
found_data_Data.getImageFromPath = function(path,readable,done,failed,pos) {
	var splitted = path.split("/");
	var extension = splitted[splitted.length - 1].split(".")[1];
	found_data_Data.getBlob(path,function(data) {
		var bytes = data.toBytes();
		kha_Image.fromEncodedBytes(bytes,extension,done,function(err) {
			if(failed != null) {
				var error = { url : path, error : err};
				haxe_Log.trace(err,{ fileName : "found/data/Data.hx", lineNumber : 158, className : "found.data.Data", methodName : "getImageFromPath"});
				failed(error);
			}
		},readable);
	});
};
found_data_Data.getImage = function(file,done,readable,format) {
	if(format == null) {
		format = "RGBA32";
	}
	if(readable == null) {
		readable = false;
	}
	var cached = found_data_Data.cachedImages.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = found_data_Data.loadingImages.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	found_data_Data.loadingImages.h[file] = [done];
	var p = file.charAt(0) == "/" || file.charAt(1) == ":" ? file : found_data_Data.dataPath + file;
	if(Object.prototype.hasOwnProperty.call(kha_Assets.images,file)) {
		kha_Assets.loadImage(file,function(b) {
			found_data_Data.cachedImages.h[file] = b;
			var _g = 0;
			var _g1 = found_data_Data.loadingImages.h[file];
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f(b);
			}
			var _this = found_data_Data.loadingImages;
			if(Object.prototype.hasOwnProperty.call(_this.h,file)) {
				delete(_this.h[file]);
			}
			found_data_Data.assetsLoaded++;
		},null,{ fileName : "found/data/Data.hx", lineNumber : 183, className : "found.data.Data", methodName : "getImage"});
	} else {
		found_data_Data.getImageFromPath(p,readable,function(b) {
			found_data_Data.cachedImages.h[file] = b;
			var _g = 0;
			var _g1 = found_data_Data.loadingImages.h[file];
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f(b);
			}
			var _this = found_data_Data.loadingImages;
			if(Object.prototype.hasOwnProperty.call(_this.h,file)) {
				delete(_this.h[file]);
			}
			found_data_Data.assetsLoaded++;
		},function(e) {
			if(e.url == "") {
				e.url = "Null";
			}
			haxe_Log.trace("Error occurred file " + e.url + " does not exist",{ fileName : "found/data/Data.hx", lineNumber : 198, className : "found.data.Data", methodName : "getImage"});
		},{ fileName : "found/data/Data.hx", lineNumber : 191, className : "found.data.Data", methodName : "getImage"});
	}
};
found_data_Data.deleteImage = function(handle) {
	var image = found_data_Data.cachedImages.h[handle];
	if(image == null) {
		return;
	}
	image.unload();
	var _this = found_data_Data.cachedImages;
	if(Object.prototype.hasOwnProperty.call(_this.h,handle)) {
		delete(_this.h[handle]);
	}
};
found_data_Data.getSoundFromPath = function(path,done,failed,pos) {
	found_data_Data.getBlob(path,function(data) {
		var bytes = data.toBytes();
		var snd = new kha_Sound();
		snd.compressedData = bytes;
		done(snd);
	});
};
found_data_Data.getSound = function(file,done,alias) {
	var cached = found_data_Data.cachedSounds.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = found_data_Data.loadingSounds.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	found_data_Data.loadingSounds.h[file] = [done];
	var p = file.charAt(0) == "/" || file.charAt(1) == ":" ? file : found_data_Data.dataPath + file;
	found_data_Data.getSoundFromPath(p,function(b) {
		var key = alias != null ? alias : file;
		found_data_Data.cachedSounds.h[key] = b;
		var _g = 0;
		var _g1 = found_data_Data.loadingSounds.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		var _this = found_data_Data.loadingSounds;
		if(Object.prototype.hasOwnProperty.call(_this.h,file)) {
			delete(_this.h[file]);
		}
		found_data_Data.assetsLoaded++;
	},function(error) {
		haxe_Log.trace("Couldn't load " + p + " because of " + Std.string(error),{ fileName : "found/data/Data.hx", lineNumber : 257, className : "found.data.Data", methodName : "getSound"});
	},{ fileName : "found/data/Data.hx", lineNumber : 244, className : "found.data.Data", methodName : "getSound"});
};
found_data_Data.deleteSound = function(handle) {
	var sound = found_data_Data.cachedSounds.h[handle];
	if(sound == null) {
		return;
	}
	sound.unload();
	var _this = found_data_Data.cachedSounds;
	if(Object.prototype.hasOwnProperty.call(_this.h,handle)) {
		delete(_this.h[handle]);
	}
};
found_data_Data.getVideo = function(file,done) {
	var cached = found_data_Data.cachedVideos.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = found_data_Data.loadingVideos.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	found_data_Data.loadingVideos.h[file] = [done];
	var p = file.charAt(0) == "/" || file.charAt(1) == ":" ? file : found_data_Data.dataPath + file;
	kha_Assets.loadVideoFromPath(p,function(b) {
		found_data_Data.cachedVideos.h[file] = b;
		var _g = 0;
		var _g1 = found_data_Data.loadingVideos.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		var _this = found_data_Data.loadingVideos;
		if(Object.prototype.hasOwnProperty.call(_this.h,file)) {
			delete(_this.h[file]);
		}
		found_data_Data.assetsLoaded++;
	},null,{ fileName : "found/data/Data.hx", lineNumber : 284, className : "found.data.Data", methodName : "getVideo"});
};
found_data_Data.deleteVideo = function(handle) {
	var video = found_data_Data.cachedVideos.h[handle];
	if(video == null) {
		return;
	}
	video.unload();
	var _this = found_data_Data.cachedVideos;
	if(Object.prototype.hasOwnProperty.call(_this.h,handle)) {
		delete(_this.h[handle]);
	}
};
found_data_Data.getFont = function(file,done) {
	var cached = found_data_Data.cachedFonts.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var loading = found_data_Data.loadingFonts.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	found_data_Data.loadingFonts.h[file] = [done];
	var p = file.charAt(0) == "/" || file.charAt(1) == ":" ? file : found_data_Data.dataPath + file;
	kha_Assets.loadFontFromPath(p,function(b) {
		found_data_Data.cachedFonts.h[file] = b;
		var _g = 0;
		var _g1 = found_data_Data.loadingFonts.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		var _this = found_data_Data.loadingFonts;
		if(Object.prototype.hasOwnProperty.call(_this.h,file)) {
			delete(_this.h[file]);
		}
		found_data_Data.assetsLoaded++;
	},null,{ fileName : "found/data/Data.hx", lineNumber : 310, className : "found.data.Data", methodName : "getFont"});
};
found_data_Data.deleteFont = function(handle) {
	var font = found_data_Data.cachedFonts.h[handle];
	if(font == null) {
		return;
	}
	font.unload();
	var _this = found_data_Data.cachedFonts;
	if(Object.prototype.hasOwnProperty.call(_this.h,handle)) {
		delete(_this.h[handle]);
	}
};
found_data_Data.prototype = {
	__class__: found_data_Data
};
var found_data_DataLoader = function(dataVersion) {
	if(dataVersion != null) {
		found_data_DataLoader.version = dataVersion;
	}
	this.objVersion = -1.0;
};
$hxClasses["found.data.DataLoader"] = found_data_DataLoader;
found_data_DataLoader.__name__ = true;
found_data_DataLoader.version = null;
found_data_DataLoader.parseRec = function(o,replacer) {
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		var v = Reflect.field(o,k);
		o[k] = replacer(k,v);
		var _g2 = Type.typeof(v);
		switch(_g2._hx_index) {
		case 4:
			found_data_DataLoader.parseRec(v,replacer);
			break;
		case 6:
			var c = _g2.c;
			if(c == Array) {
				var arr = v;
				var _g3 = 0;
				while(_g3 < arr.length) {
					var e = arr[_g3];
					++_g3;
					found_data_DataLoader.parseRec(e,replacer);
				}
			}
			break;
		default:
		}
	}
};
found_data_DataLoader.parse = function(raw) {
	var hj = new found_data_DataLoader(found_data_Data.version);
	hj.unserialize(raw);
	return hj.getUnserialized();
};
found_data_DataLoader.stringify = function(o,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var hj = new found_data_DataLoader(found_data_Data.version);
	hj.serialize(o,pretty);
	if(hj.serialized == null) {
		throw haxe_Exception.thrown("serialize() must be called first");
	}
	return hj.serialized;
};
found_data_DataLoader.prettify = function(json) {
	var strBuff_b = "";
	var inString = false;
	var indent = 0;
	var jumpBefore;
	var jumpAfter;
	var cid;
	var _g = 0;
	var _g1 = json.split("");
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		cid = HxOverrides.cca(c,0);
		jumpAfter = false;
		jumpBefore = jumpAfter;
		if(inString) {
			if(c == "\"") {
				inString = false;
			}
		} else {
			switch(c) {
			case " ":
				c = "";
				break;
			case "\"":
				inString = true;
				break;
			case ",":
				jumpAfter = true;
				break;
			case ":":
				c = " : ";
				break;
			case "[":
				if(!inString) {
					jumpAfter = true;
					++indent;
				}
				break;
			case "]":
				jumpBefore = true;
				--indent;
				break;
			case "{":
				if(!inString) {
					jumpAfter = true;
					++indent;
				}
				break;
			case "}":
				jumpBefore = true;
				--indent;
				break;
			}
		}
		if(jumpBefore) {
			strBuff_b += String.fromCodePoint(10);
			var _g2 = 0;
			var _g3 = indent;
			while(_g2 < _g3) {
				var i = _g2++;
				strBuff_b += String.fromCodePoint(9);
			}
		}
		strBuff_b += String.fromCodePoint(cid);
		if(jumpAfter) {
			strBuff_b += String.fromCodePoint(10);
			var _g4 = 0;
			var _g5 = indent;
			while(_g4 < _g5) {
				var i1 = _g4++;
				strBuff_b += String.fromCodePoint(9);
			}
		}
	}
	return strBuff_b;
};
found_data_DataLoader.prototype = {
	objVersion: null
	,obj: null
	,serialized: null
	,serialize: function(o,pretty) {
		if(pretty == null) {
			pretty = false;
		}
		var raw = JSON.stringify(o);
		raw = "{\"version\":" + found_data_DataLoader.version + ", \"data\":" + raw + "}";
		this.serialized = pretty ? found_data_DataLoader.prettify(raw) : raw;
	}
	,getSerialized: function() {
		if(this.serialized == null) {
			throw haxe_Exception.thrown("serialize() must be called first");
		}
		return this.serialized;
	}
	,unserialize: function(raw) {
		var o = JSON.parse(raw);
		this.objVersion = Reflect.field(o,"version");
		o = Reflect.field(o,"data");
		this.obj = o;
	}
	,getCurrentUnserializedDataVersion: function() {
		return this.objVersion;
	}
	,getUnserialized: function() {
		if(this.objVersion == -1 && this.obj != null) {
			return this.obj;
		}
		if(found_data_DataLoader.version > this.objVersion) {
			throw haxe_Exception.thrown("Unserialized object version mismatch, a patch is required (object version:" + this.objVersion + ", current:" + found_data_DataLoader.version + ")");
		}
		if(found_data_DataLoader.version < this.objVersion) {
			throw haxe_Exception.thrown("Unserialized object version mismatch, object created using a more recent version of this app  (object version:" + this.objVersion + ", current:" + found_data_DataLoader.version + ")");
		}
		if(this.obj == null) {
			throw haxe_Exception.thrown("unserialize() must be called first");
		}
		return this.obj;
	}
	,patch: function(from,to,operation) {
		if(this.objVersion == from) {
			operation(this.obj);
			this.objVersion = to;
		}
	}
	,__class__: found_data_DataLoader
};
var found_data_SceneFormat = function() { };
$hxClasses["found.data.SceneFormat"] = found_data_SceneFormat;
found_data_SceneFormat.__name__ = true;
found_data_SceneFormat.getData = function(t) {
	var o = { };
	var _g = 0;
	var _g1 = Reflect.fields(t);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o[f] = Reflect.field(t,f);
	}
	return o;
};
var found_data_SpriteData = function(raw,done) {
	this.curAnim = 0;
	var _gthis = this;
	this.raw = raw;
	found_data_Data.getImage(raw.imagePath,function(img) {
		_gthis.image = img;
		_gthis.anims = [];
		_gthis.name = _gthis.raw.imagePath;
		if(raw.anims != null && raw.anims.length != 0) {
			var _g = 0;
			var _g1 = raw.anims;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				_gthis.animLoad(a);
			}
			done(_gthis);
		} else {
			_gthis.addSubSprite(0);
			done(_gthis);
		}
	});
};
$hxClasses["found.data.SpriteData"] = found_data_SpriteData;
found_data_SpriteData.__name__ = true;
found_data_SpriteData.prototype = {
	name: null
	,image: null
	,animation: null
	,get_animation: function() {
		return this.anims[this.curAnim];
	}
	,anims: null
	,get_animatable: function() {
		if(this.anims == null) {
			return false;
		}
		return this.get_animation()._frames.length > 1;
	}
	,curAnim: null
	,set_curAnim: function(index) {
		if(this.anims.length < index) {
			haxe_Log.trace("Trying to set animation with index: " + index + " but the number of animations is:" + this.anims.length,{ fileName : "found/data/SpriteData.hx", lineNumber : 26, className : "found.data.SpriteData", methodName : "set_curAnim"});
		} else {
			this.curAnim = index;
		}
		return this.curAnim;
	}
	,raw: null
	,addSubSprite: function(index,width,height) {
		var w = width != null ? width : this.raw.width | 0;
		var h = height != null ? height : this.raw.height | 0;
		var frame = { id : index, start : 0.0, tw : w, th : h};
		return this.anims.push(found_anim_Animation.create(frame)) - 1;
	}
	,setCurrentAnimationByName: function(animationName) {
		var _g = 0;
		var _g1 = this.anims.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.anims[i].name == animationName) {
				this.set_curAnim(i);
				return;
			}
		}
		haxe_Log.trace("Animation with name: " + animationName + " does not exist",{ fileName : "found/data/SpriteData.hx", lineNumber : 67, className : "found.data.SpriteData", methodName : "setCurrentAnimationByName"});
	}
	,animLoad: function(anim) {
		this.anims.push(found_anim_Animation.fromDefinition(anim));
	}
	,__class__: found_data_SpriteData
	,__properties__: {set_curAnim:"set_curAnim",get_animatable:"get_animatable",get_animation:"get_animation"}
};
var found_math_Util = function() { };
$hxClasses["found.math.Util"] = found_math_Util;
found_math_Util.__name__ = true;
found_math_Util.random = function(seed) {
	return seed * 1103515245 + 12345 & -2147483648 - 1;
};
found_math_Util.randomInt = function(value) {
	return Math.floor(Math.random() * value);
};
found_math_Util.randomFloat = function(value) {
	return Math.random() * value;
};
found_math_Util.randomRangeInt = function(min,max) {
	return Math.floor(Math.random() * (1 + max - min)) + min;
};
found_math_Util.randomRangeFloat = function(min,max) {
	return Math.random() * (max - min) + min;
};
found_math_Util.lerp = function(min,max,value) {
	return min + (max - min) * value;
};
found_math_Util.degToRad = function(degrees) {
	return degrees * 0.0174532925199432955;
};
found_math_Util.radToDeg = function(radians) {
	return radians * 57.2957795130823229;
};
found_math_Util.fround = function(value,precision) {
	value *= Math.pow(10,precision);
	value = Math.round(value) / Math.pow(10,precision);
	return value;
};
found_math_Util.fclamp = function(x,min,max) {
	if(x < min) {
		return min;
	} else if(x > max) {
		return max;
	} else {
		return x;
	}
};
found_math_Util.slerp = function(from,to,t) {
	var m = Math;
	var c1 = m.sin(from * .5);
	var r1 = m.cos(from * .5);
	var c2 = m.sin(to * .5);
	var r2 = m.cos(to * .5);
	var c = r1 * r2 + c1 * c2;
	if(c < 0.) {
		if(1. + c > 1e-6) {
			var o = m.acos(-c);
			var s = m.sin(o);
			var s0 = m.sin((1 - t) * o) / s;
			var s1 = m.sin(t * o) / s;
			return m.atan2(s0 * c1 - s1 * c2,s0 * r1 - s1 * r2) * 2.;
		} else {
			var s0 = 1 - t;
			var s1 = t;
			return m.atan2(s0 * c1 - s1 * c2,s0 * r1 - s1 * r2) * 2;
		}
	} else if(1 - c > 1e-6) {
		var o = m.acos(c);
		var s = m.sin(o);
		var s0 = m.sin((1 - t) * o) / s;
		var s1 = m.sin(t * o) / s;
		return m.atan2(s0 * c1 + s1 * c2,s0 * r1 + s1 * r2) * 2.;
	} else {
		var s0 = 1 - t;
		var s1 = t;
		return m.atan2(s0 * c1 + s1 * c2,s0 * r1 + s1 * r2) * 2;
	}
};
found_math_Util.snap = function(value,grid) {
	if(value % grid == 0) {
		return value;
	}
	value += grid - Math.floor(value) % grid;
	return value;
};
found_math_Util.sign = function(x) {
	if(x > 0) {
		return 1;
	} else if(x < 0) {
		return -1;
	} else {
		return 0;
	}
};
found_math_Util.signEq = function(x,y) {
	return (x > 0 ? 1 : x < 0 ? -1 : 0) == (y > 0 ? 1 : y < 0 ? -1 : 0);
};
var found_math_Cli = function() { };
$hxClasses["found.math.Cli"] = found_math_Cli;
found_math_Cli.__name__ = true;
var found_math_Vec2 = {};
found_math_Vec2._new = function(x,y) {
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	var this1 = new kha_math_FastVector2(x,y);
	return this1;
};
found_math_Vec2.addition = function(this1,other) {
	return new kha_math_FastVector2(this1.x + other.x,this1.y + other.y);
};
found_math_Vec2.subtract = function(this1,other) {
	return new kha_math_FastVector2(this1.x - other.x,this1.y - other.y);
};
found_math_Vec2.multiply = function(this1,f) {
	return new kha_math_FastVector2(this1.x * f,this1.y * f);
};
found_math_Vec2.divide = function(this1,f) {
	var value = 1 / f;
	return new kha_math_FastVector2(this1.x * value,this1.y * value);
};
var found_node_LogicNode = function(tree) {
	this.outputs = [];
	this.inputs = [];
	this.tree = tree;
};
$hxClasses["found.node.LogicNode"] = found_node_LogicNode;
found_node_LogicNode.__name__ = true;
found_node_LogicNode.prototype = {
	tree: null
	,inputs: null
	,outputs: null
	,addInput: function(node,from) {
		this.inputs.push(new found_node_LogicNodeInput(node,from));
	}
	,addOutputs: function(nodes) {
		this.outputs.push(nodes);
	}
	,run: function(from) {
	}
	,runOutput: function(i) {
		if(i >= this.outputs.length) {
			return;
		}
		var _g = 0;
		var _g1 = this.outputs[i];
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = o.inputs.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(o.inputs[j].node == this) {
					o.run(j);
					break;
				}
			}
		}
	}
	,get: function(from) {
		return this;
	}
	,set: function(value) {
	}
	,__class__: found_node_LogicNode
};
var found_node_AddVec2Node = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.AddVec2Node"] = found_node_AddVec2Node;
found_node_AddVec2Node.__name__ = true;
found_node_AddVec2Node.__super__ = found_node_LogicNode;
found_node_AddVec2Node.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		var one = this.inputs[0].get();
		var two = this.inputs[1].get();
		return new kha_math_Vector2(one.x + two.x,one.y + two.y);
	}
	,__class__: found_node_AddVec2Node
});
var found_node_ApplyForceToRigidbodyNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.ApplyForceToRigidbodyNode"] = found_node_ApplyForceToRigidbodyNode;
found_node_ApplyForceToRigidbodyNode.__name__ = true;
found_node_ApplyForceToRigidbodyNode.__super__ = found_node_LogicNode;
found_node_ApplyForceToRigidbodyNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		var force = this.inputs[2].get();
		if(this.inputs[1].node == null) {
			if(this.tree.object.body != null) {
				this.tree.object.body.push(force.x,force.y);
			}
		} else {
			var objectToApplyForceTo = this.inputs[1].get();
			if(objectToApplyForceTo.body != null) {
				objectToApplyForceTo.body.push(force.x,force.y);
			}
		}
		this.runOutput(0);
	}
	,__class__: found_node_ApplyForceToRigidbodyNode
});
var found_node_ApplyImpulseToRigidbodyNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.ApplyImpulseToRigidbodyNode"] = found_node_ApplyImpulseToRigidbodyNode;
found_node_ApplyImpulseToRigidbodyNode.__name__ = true;
found_node_ApplyImpulseToRigidbodyNode.__super__ = found_node_LogicNode;
found_node_ApplyImpulseToRigidbodyNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		var force = this.inputs[2].get();
		if(this.inputs[1].node == null) {
			if(this.tree.object.body != null) {
				this.tree.object.body.velocity.x = force.x;
				this.tree.object.body.velocity.y = force.y;
			}
		} else {
			var objectToApplyImpulseTo = this.inputs[1].get();
			if(objectToApplyImpulseTo.body != null) {
				objectToApplyImpulseTo.body.velocity.x = force.x;
				objectToApplyImpulseTo.body.velocity.y = force.y;
			}
		}
		this.runOutput(0);
	}
	,__class__: found_node_ApplyImpulseToRigidbodyNode
});
var found_node_BooleanNode = function(tree,value) {
	if(value == null) {
		value = false;
	}
	found_node_LogicNode.call(this,tree);
	this.value = value;
};
$hxClasses["found.node.BooleanNode"] = found_node_BooleanNode;
found_node_BooleanNode.__name__ = true;
found_node_BooleanNode.__super__ = found_node_LogicNode;
found_node_BooleanNode.prototype = $extend(found_node_LogicNode.prototype,{
	value: null
	,get: function(from) {
		if(this.inputs.length > 0) {
			return this.inputs[0].get();
		}
		return this.value;
	}
	,set: function(value) {
		if(this.inputs.length > 0) {
			this.inputs[0].set(value);
		} else {
			this.value = value;
		}
	}
	,__class__: found_node_BooleanNode
});
var found_node_BranchNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.BranchNode"] = found_node_BranchNode;
found_node_BranchNode.__name__ = true;
found_node_BranchNode.__super__ = found_node_LogicNode;
found_node_BranchNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		var bool = this.inputs[1].get();
		if(bool) {
			this.runOutput(0);
		} else {
			this.runOutput(1);
		}
	}
	,__class__: found_node_BranchNode
});
var found_node_BulletMovementNode = function(tree) {
	found_node_LogicNode.call(this,tree);
	tree.notifyOnInit($bind(this,this.setVelocity));
};
$hxClasses["found.node.BulletMovementNode"] = found_node_BulletMovementNode;
found_node_BulletMovementNode.__name__ = true;
found_node_BulletMovementNode.__super__ = found_node_LogicNode;
found_node_BulletMovementNode.prototype = $extend(found_node_LogicNode.prototype,{
	setVelocity: function() {
		if(this.tree.object.body != null) {
			var speed = this.inputs[1].get();
			var angle = this.tree.object.get_rotation().z;
			var newVelocity_x = 0;
			var newVelocity_y = 0;
			var rotationInRadians = found_math_Util.degToRad(angle);
			newVelocity_x = Math.cos(rotationInRadians) * speed;
			newVelocity_y = Math.sin(rotationInRadians) * speed;
			var this1 = new hxmath_math_Vector2Default(newVelocity_x,newVelocity_y);
			this.tree.object.body.velocity = this1;
		} else {
			found_tool_Log.error("Bullet Movement node needs the object to have a Rigidbody",{ fileName : "found/node/BulletMovementNode.hx", lineNumber : 26, className : "found.node.BulletMovementNode", methodName : "setVelocity"});
		}
	}
	,run: function(from) {
		this.setVelocity();
	}
	,__class__: found_node_BulletMovementNode
});
var found_node_CooldownNode = function(tree) {
	found_node_LogicNode.call(this,tree);
	tree.notifyOnInit($bind(this,this.init));
};
$hxClasses["found.node.CooldownNode"] = found_node_CooldownNode;
found_node_CooldownNode.__name__ = true;
found_node_CooldownNode.__super__ = found_node_LogicNode;
found_node_CooldownNode.prototype = $extend(found_node_LogicNode.prototype,{
	init: function() {
		this.cooldown = this.inputs[1].get();
		this.lastTime = kha_Scheduler.time();
	}
	,cooldown: null
	,lastTime: null
	,run: function(from) {
		var dif = kha_Scheduler.time() - this.lastTime;
		if(dif >= this.cooldown) {
			this.lastTime = kha_Scheduler.time();
			this.runOutput(0);
		}
	}
	,__class__: found_node_CooldownNode
});
var found_node_DegToRadNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.DegToRadNode"] = found_node_DegToRadNode;
found_node_DegToRadNode.__name__ = true;
found_node_DegToRadNode.__super__ = found_node_LogicNode;
found_node_DegToRadNode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		var degree = this.inputs[0].get();
		return degree * Math.PI / 180;
	}
	,__class__: found_node_DegToRadNode
});
var found_node_DestroyObjectNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.DestroyObjectNode"] = found_node_DestroyObjectNode;
found_node_DestroyObjectNode.__name__ = true;
found_node_DestroyObjectNode.__super__ = found_node_LogicNode;
found_node_DestroyObjectNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		var objectToDestroy;
		if(this.inputs[1].node != null) {
			objectToDestroy = this.inputs[1].get();
		} else {
			objectToDestroy = this.tree.object;
		}
		found_State.active.remove(objectToDestroy);
		this.runOutput(0);
	}
	,__class__: found_node_DestroyObjectNode
});
var found_node_DestroyObjectOutsideViewNode = function(tree) {
	found_node_LogicNode.call(this,tree);
	tree.notifyOnUpdate($bind(this,this.update));
};
$hxClasses["found.node.DestroyObjectOutsideViewNode"] = found_node_DestroyObjectOutsideViewNode;
found_node_DestroyObjectOutsideViewNode.__name__ = true;
found_node_DestroyObjectOutsideViewNode.__super__ = found_node_LogicNode;
found_node_DestroyObjectOutsideViewNode.prototype = $extend(found_node_LogicNode.prototype,{
	update: function(dt) {
		var objectToDestroy;
		var viewOffsetToDestroyAt = this.inputs[1].get();
		if(this.inputs[0].node != null) {
			objectToDestroy = this.inputs[0].get();
		} else {
			objectToDestroy = this.tree.object;
		}
		if(!objectToDestroy.isVisible(viewOffsetToDestroyAt,found_State.active.getCameraView())) {
			found_State.active.remove(objectToDestroy);
		}
	}
	,__class__: found_node_DestroyObjectOutsideViewNode
});
var found_node_EventListenNode = function(tree) {
	found_node_LogicNode.call(this,tree);
	tree.notifyOnRemove($bind(this,this.removeEvent));
};
$hxClasses["found.node.EventListenNode"] = found_node_EventListenNode;
found_node_EventListenNode.__name__ = true;
found_node_EventListenNode.__super__ = found_node_LogicNode;
found_node_EventListenNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		this.addEvent();
	}
	,eventName: null
	,addEvent: function() {
		this.eventName = this.inputs[1].get();
		if(this.eventName != "" && this.eventName != null) {
			found_Event.add(this.eventName,haxe_ds_Either.Left($bind(this,this.onEvent)),this.tree.object.uid);
		}
	}
	,removeEvent: function() {
		if(this.eventName != null) {
			found_Event.remove(this.eventName);
		}
	}
	,onEvent: function() {
		this.runOutput(0);
	}
	,__class__: found_node_EventListenNode
});
var found_node_EveryXNode = function(tree) {
	found_node_LogicNode.call(this,tree);
	tree.notifyOnInit($bind(this,this.init));
	tree.notifyOnUpdate($bind(this,this.update));
};
$hxClasses["found.node.EveryXNode"] = found_node_EveryXNode;
found_node_EveryXNode.__name__ = true;
found_node_EveryXNode.__super__ = found_node_LogicNode;
found_node_EveryXNode.prototype = $extend(found_node_LogicNode.prototype,{
	init: function() {
		this.everyX = this.inputs[0].get();
	}
	,everyX: null
	,lastTime: null
	,update: function(dt) {
		var dif = kha_Scheduler.time() - this.lastTime;
		if(dif >= this.everyX) {
			this.lastTime = kha_Scheduler.time();
			this.runOutput(0);
		}
	}
	,__class__: found_node_EveryXNode
});
var found_node_FlipSpriteNode = function(tree) {
	this.selectedSprite = null;
	this.lastselectedSpriteName = "";
	this.selectedSpriteName = "";
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.FlipSpriteNode"] = found_node_FlipSpriteNode;
found_node_FlipSpriteNode.__name__ = true;
found_node_FlipSpriteNode.__super__ = found_node_LogicNode;
found_node_FlipSpriteNode.prototype = $extend(found_node_LogicNode.prototype,{
	selectedSpriteName: null
	,value: null
	,lastselectedSpriteName: null
	,selectedSprite: null
	,run: function(from) {
		var sprite = this.inputs[1].get();
		if(sprite != null && sprite.get_raw().type == "sprite_object") {
			this.selectedSprite = sprite;
		} else {
			this.selectedSprite = this.get(0);
		}
		var flipX = this.inputs[2].get();
		var flipY = this.inputs[3].get();
		if(this.selectedSprite != null) {
			this.selectedSprite.flip.x = flipX ? 1.0 : -1.0;
			this.selectedSprite.flip.y = flipY ? 1.0 : -1.0;
		} else {
			var x = flipX != null;
			var y = flipY != null;
			found_tool_Log.error("The boolean value for flipX/Y: " + (x == null ? "null" : "" + x) + " : " + (y == null ? "null" : "" + y) + "  and the sprite was " + Std.string(this.selectedSprite),{ fileName : "found/node/FlipSpriteNode.hx", lineNumber : 36, className : "found.node.FlipSpriteNode", methodName : "run"});
		}
	}
	,get: function(from) {
		if(this.selectedSprite == null || this.lastselectedSpriteName != this.selectedSpriteName) {
			this.lastselectedSpriteName = this.selectedSpriteName;
			this.selectedSprite = js_Boot.__cast(found_State.active.getObject(this.selectedSpriteName) , found_anim_Sprite);
		}
		return this.selectedSprite;
	}
	,__class__: found_node_FlipSpriteNode
});
var found_node_FloatNode = function(tree,value) {
	if(value == null) {
		value = 0.0;
	}
	found_node_LogicNode.call(this,tree);
	this.value = value;
};
$hxClasses["found.node.FloatNode"] = found_node_FloatNode;
found_node_FloatNode.__name__ = true;
found_node_FloatNode.__super__ = found_node_LogicNode;
found_node_FloatNode.prototype = $extend(found_node_LogicNode.prototype,{
	value: null
	,get: function(from) {
		if(this.inputs.length > 0) {
			return this.inputs[0].get();
		}
		return this.value;
	}
	,set: function(value) {
		if(this.inputs.length > 0) {
			this.inputs[0].set(value);
		} else {
			this.value = value;
		}
	}
	,__class__: found_node_FloatNode
});
var found_node_FloatToIntNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.FloatToIntNode"] = found_node_FloatToIntNode;
found_node_FloatToIntNode.__name__ = true;
found_node_FloatToIntNode.__super__ = found_node_LogicNode;
found_node_FloatToIntNode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		var float = this.inputs[0].get();
		return Math.round(float);
	}
	,__class__: found_node_FloatToIntNode
});
var found_node_GateNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.GateNode"] = found_node_GateNode;
found_node_GateNode.__name__ = true;
found_node_GateNode.getOperationsNames = function() {
	return found_node_GateNode.operationsNames;
};
found_node_GateNode.__super__ = found_node_LogicNode;
found_node_GateNode.prototype = $extend(found_node_LogicNode.prototype,{
	operations: null
	,get: function(from) {
		var v1 = this.inputs[0].get();
		var v2 = this.inputs[1].get();
		var cond = false;
		switch(this.operations) {
		case "And":
			cond = true;
			var _g = 0;
			var _g1 = this.inputs.length;
			while(_g < _g1) {
				var i = _g++;
				if(!this.inputs[i].get()) {
					cond = false;
					break;
				}
			}
			break;
		case "Equal":
			cond = v1 == v2;
			break;
		case "Greater":
			cond = v1 > v2;
			break;
		case "Greater Equal":
			cond = v1 >= v2;
			break;
		case "Less":
			cond = v1 < v2;
			break;
		case "Less Equal":
			cond = v1 <= v2;
			break;
		case "Or":
			var _g = 0;
			var _g1 = this.inputs.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.inputs[i].get()) {
					cond = true;
					break;
				}
			}
			break;
		}
		return cond;
	}
	,__class__: found_node_GateNode
});
var found_node_GetCenterNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.GetCenterNode"] = found_node_GetCenterNode;
found_node_GetCenterNode.__name__ = true;
found_node_GetCenterNode.__super__ = found_node_LogicNode;
found_node_GetCenterNode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		if(this.inputs[0].node == null) {
			return this.tree.object.get_center();
		} else {
			var object = this.inputs[0].get();
			return object.get_center();
		}
	}
	,__class__: found_node_GetCenterNode
});
var found_node_GetForwardNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.GetForwardNode"] = found_node_GetForwardNode;
found_node_GetForwardNode.__name__ = true;
found_node_GetForwardNode.__super__ = found_node_LogicNode;
found_node_GetForwardNode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		var angle = found_math_Util.degToRad(this.inputs[0].node == null ? this.tree.object.get_rotation().z : (js_Boot.__cast(this.inputs[0].get() , found_object_Object)).get_rotation().z);
		return new kha_math_Vector2(Math.cos(angle),Math.sin(angle));
	}
	,__class__: found_node_GetForwardNode
});
var found_node_GetObjectNode = function(tree) {
	this.selectedObject = null;
	this.lastSelectedObjectName = "";
	this.selectedObjectName = "";
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.GetObjectNode"] = found_node_GetObjectNode;
found_node_GetObjectNode.__name__ = true;
found_node_GetObjectNode.__super__ = found_node_LogicNode;
found_node_GetObjectNode.prototype = $extend(found_node_LogicNode.prototype,{
	selectedObjectName: null
	,lastSelectedObjectName: null
	,selectedObject: null
	,run: function(from) {
		this.get(0);
		this.runOutput(0);
	}
	,get: function(from) {
		if(this.selectedObject == null || this.lastSelectedObjectName != this.selectedObjectName) {
			this.lastSelectedObjectName = this.selectedObjectName;
			this.selectedObject = found_State.active.getObject(this.selectedObjectName);
		}
		return this.selectedObject;
	}
	,__class__: found_node_GetObjectNode
});
var found_node_GetPositionNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.GetPositionNode"] = found_node_GetPositionNode;
found_node_GetPositionNode.__name__ = true;
found_node_GetPositionNode.__super__ = found_node_LogicNode;
found_node_GetPositionNode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		if(this.inputs[0].node == null) {
			return new kha_math_Vector2(this.tree.object.get_position().x,this.tree.object.get_position().y);
		} else {
			var object = this.inputs[0].get();
			return new kha_math_Vector2(object.get_position().x,object.get_position().y);
		}
	}
	,__class__: found_node_GetPositionNode
});
var found_node_GetPropNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.GetPropNode"] = found_node_GetPropNode;
found_node_GetPropNode.__name__ = true;
found_node_GetPropNode.__super__ = found_node_LogicNode;
found_node_GetPropNode.prototype = $extend(found_node_LogicNode.prototype,{
	classname: null
	,propertyName: null
	,get: function(from) {
		var value = null;
		var _g = 0;
		var _g1 = this.tree.object.get_raw().traits;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.classname == this.classname && t.props != null) {
				var _g2 = 0;
				var _g3 = t.props;
				while(_g2 < _g3.length) {
					var p = _g3[_g2];
					++_g2;
					if(p.indexOf(this.propertyName) != -1) {
						var prop = p.split("~");
						var type = Std.parseInt(prop[1]);
						value = this.toType(type,prop[2]);
						break;
					}
				}
			}
		}
		return value;
	}
	,toType: function(type,text) {
		var value;
		switch(type) {
		case 0:
			value = Std.parseInt(text);
			break;
		case 1:
			value = text == "1" && true;
			break;
		case 2:
			value = parseFloat(text);
			break;
		case 3:
			value = text;
			break;
		case 4:
			var values = text.split("|");
			value = new kha_math_Vector2i(this.toType(0,values[0]),this.toType(0,values[1]));
			break;
		case 5:
			var values = text.split("|");
			value = new kha_math_Vector2i(this.toType(0,values[0]),this.toType(0,values[1]));
			break;
		case 6:
			var values = text.split("|");
			value = new kha_math_Vector2i(this.toType(2,values[0]),this.toType(2,values[1]));
			break;
		}
		return value;
	}
	,__class__: found_node_GetPropNode
});
var found_node_GetRandomObjectNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.GetRandomObjectNode"] = found_node_GetRandomObjectNode;
found_node_GetRandomObjectNode.__name__ = true;
found_node_GetRandomObjectNode.__super__ = found_node_LogicNode;
found_node_GetRandomObjectNode.prototype = $extend(found_node_LogicNode.prototype,{
	listOfObjects: null
	,get: function(from) {
		var names = found_State.active.getObjectNames();
		var choice = this.listOfObjects[found_math_Util.randomInt(this.listOfObjects.length)];
		return found_State.active.getObject(names[choice]);
	}
	,__class__: found_node_GetRandomObjectNode
});
var found_node_GetRotationNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.GetRotationNode"] = found_node_GetRotationNode;
found_node_GetRotationNode.__name__ = true;
found_node_GetRotationNode.__super__ = found_node_LogicNode;
found_node_GetRotationNode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		if(this.inputs[0].node == null) {
			return this.tree.object.get_rotation().z;
		} else {
			var object = this.inputs[0].get();
			return object.get_rotation().z;
		}
	}
	,__class__: found_node_GetRotationNode
});
var found_node_GetWidthHeightNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.GetWidthHeightNode"] = found_node_GetWidthHeightNode;
found_node_GetWidthHeightNode.__name__ = true;
found_node_GetWidthHeightNode.__super__ = found_node_LogicNode;
found_node_GetWidthHeightNode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		if(this.inputs[0].node == null) {
			return new kha_math_Vector2(this.tree.object.get_width(),this.tree.object.get_height());
		} else {
			var object = this.inputs[0].get();
			return new kha_math_Vector2(object.get_width(),object.get_height());
		}
	}
	,__class__: found_node_GetWidthHeightNode
});
var found_node_InitNode = function(tree) {
	found_node_LogicNode.call(this,tree);
	tree.notifyOnInit($bind(this,this.init));
};
$hxClasses["found.node.InitNode"] = found_node_InitNode;
found_node_InitNode.__name__ = true;
found_node_InitNode.__super__ = found_node_LogicNode;
found_node_InitNode.prototype = $extend(found_node_LogicNode.prototype,{
	init: function() {
		this.runOutput(0);
	}
	,__class__: found_node_InitNode
});
var found_node_IntegerNode = function(tree,value) {
	if(value == null) {
		value = 0;
	}
	found_node_LogicNode.call(this,tree);
	this.value = value;
};
$hxClasses["found.node.IntegerNode"] = found_node_IntegerNode;
found_node_IntegerNode.__name__ = true;
found_node_IntegerNode.__super__ = found_node_LogicNode;
found_node_IntegerNode.prototype = $extend(found_node_LogicNode.prototype,{
	value: null
	,get: function(from) {
		if(this.inputs.length > 0) {
			return this.inputs[0].get();
		}
		return this.value;
	}
	,set: function(value) {
		if(this.inputs.length > 0) {
			this.inputs[0].set(value);
		} else {
			this.value = value;
		}
	}
	,__class__: found_node_IntegerNode
});
var found_node_IsFalseNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.IsFalseNode"] = found_node_IsFalseNode;
found_node_IsFalseNode.__name__ = true;
found_node_IsFalseNode.__super__ = found_node_LogicNode;
found_node_IsFalseNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		var bool = this.inputs[1].get();
		if(!bool) {
			this.runOutput(0);
		}
	}
	,__class__: found_node_IsFalseNode
});
var found_node_IsObjectOutsideViewNode = function(tree) {
	found_node_LogicNode.call(this,tree);
	tree.notifyOnUpdate($bind(this,this.update));
};
$hxClasses["found.node.IsObjectOutsideViewNode"] = found_node_IsObjectOutsideViewNode;
found_node_IsObjectOutsideViewNode.__name__ = true;
found_node_IsObjectOutsideViewNode.__super__ = found_node_LogicNode;
found_node_IsObjectOutsideViewNode.prototype = $extend(found_node_LogicNode.prototype,{
	update: function(dt) {
		var object;
		var maxViewOffset = this.inputs[1].get();
		if(this.inputs[0].node != null) {
			object = this.inputs[0].get();
		} else {
			object = this.tree.object;
		}
		if(!object.isVisible(maxViewOffset,found_State.active.getCameraView())) {
			this.runOutput(0);
		}
	}
	,__class__: found_node_IsObjectOutsideViewNode
});
var found_node_IsTrueNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.IsTrueNode"] = found_node_IsTrueNode;
found_node_IsTrueNode.__name__ = true;
found_node_IsTrueNode.__super__ = found_node_LogicNode;
found_node_IsTrueNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		var bool = this.inputs[1].get();
		if(bool) {
			this.runOutput(0);
		}
	}
	,__class__: found_node_IsTrueNode
});
var found_node_JoinVec2Node = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.JoinVec2Node"] = found_node_JoinVec2Node;
found_node_JoinVec2Node.__name__ = true;
found_node_JoinVec2Node.__super__ = found_node_LogicNode;
found_node_JoinVec2Node.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		var x = this.inputs[0].get();
		var y = this.inputs[1].get();
		return new kha_math_FastVector2(x,y);
	}
	,__class__: found_node_JoinVec2Node
});
var found_node_Logic = function() { };
$hxClasses["found.node.Logic"] = found_node_Logic;
found_node_Logic.__name__ = true;
found_node_Logic.nodes = null;
found_node_Logic.links = null;
found_node_Logic.nodeMap = null;
found_node_Logic.getNode = function(id) {
	var _g = 0;
	var _g1 = found_node_Logic.nodes;
	while(_g < _g1.length) {
		var n = _g1[_g];
		++_g;
		if(n.id == id) {
			return n;
		}
	}
	return null;
};
found_node_Logic.getLink = function(id) {
	var _g = 0;
	var _g1 = found_node_Logic.links;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.id == id) {
			return l;
		}
	}
	return null;
};
found_node_Logic.getInputLink = function(inp) {
	var _g = 0;
	var _g1 = found_node_Logic.links;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.to_id == inp.node_id) {
			var node = found_node_Logic.getNode(inp.node_id);
			if(node.inputs.length <= l.to_socket) {
				return null;
			}
			if(node.inputs[l.to_socket] == inp) {
				return l;
			}
		}
	}
	return null;
};
found_node_Logic.getOutputLinks = function(out) {
	var res = [];
	var _g = 0;
	var _g1 = found_node_Logic.links;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.from_id == out.node_id) {
			var node = found_node_Logic.getNode(out.node_id);
			if(node.outputs.length <= l.from_socket) {
				continue;
			}
			if(node.outputs[l.from_socket] == out) {
				res.push(l);
			}
		}
	}
	return res;
};
found_node_Logic.safesrc = function(s) {
	return StringTools.replace(s," ","");
};
found_node_Logic.node_name = function(node) {
	var s = found_node_Logic.safesrc(node.name) + node.id;
	return s;
};
found_node_Logic.tree = null;
found_node_Logic.parse = function(logicTree,onAdd) {
	if(onAdd == null) {
		onAdd = true;
	}
	found_node_Logic.nodes = logicTree.nodeCanvas.nodes;
	found_node_Logic.links = logicTree.nodeCanvas.links;
	found_node_Logic.parsed_nodes = [];
	found_node_Logic.parsed_labels = new haxe_ds_StringMap();
	found_node_Logic.nodeMap = new haxe_ds_StringMap();
	var root_nodes = found_node_Logic.get_root_nodes(logicTree.nodeCanvas);
	found_node_Logic.tree = new found_node_LogicTree();
	if(onAdd) {
		var _g = 0;
		while(_g < root_nodes.length) {
			var node = root_nodes[_g];
			++_g;
			found_node_Logic.build_node(node);
		}
	} else {
		var _g = 0;
		while(_g < root_nodes.length) {
			var node = root_nodes[_g];
			++_g;
			found_node_Logic.build_node(node);
		}
	}
	return found_node_Logic.tree;
};
found_node_Logic.build_node = function(node) {
	var name = found_node_Logic.node_name(node);
	if(found_node_Logic.parsed_nodes.indexOf(name) != -1) {
		return name;
	}
	found_node_Logic.parsed_nodes.push(name);
	var v = found_node_Logic.createClassInstance(node.type,[found_node_Logic.tree]);
	found_node_Logic.nodeMap.h[name] = v;
	var _g = 0;
	var _g1 = node.buttons;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.type == "ENUM") {
			var arrayData = ((b.data) instanceof Array);
			var texts = arrayData ? b.data : found_node_Logic.enumTexts(node.type);
			Reflect.setProperty(v,b.name,texts[b.default_value]);
		} else {
			Reflect.setProperty(v,b.name,b.default_value);
		}
	}
	var inp_node = null;
	var inp_from = 0;
	var _g = 0;
	var _g1 = node.inputs.length;
	while(_g < _g1) {
		var i = _g++;
		var inp = node.inputs[i];
		var l = found_node_Logic.getInputLink(inp);
		if(l != null) {
			var n = found_node_Logic.getNode(l.from_id);
			var socket = n.outputs[l.from_socket];
			var this1 = found_node_Logic.nodeMap;
			var key = found_node_Logic.build_node(n);
			inp_node = this1.h[key];
			var _g2 = 0;
			var _g3 = n.outputs.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(n.outputs[i1] == socket) {
					inp_from = i1;
					break;
				}
			}
		} else {
			inp_node = found_node_Logic.build_default_node(inp);
			inp_from = 0;
		}
		v.addInput(inp_node,inp_from);
	}
	var _g = 0;
	var _g1 = node.outputs;
	while(_g < _g1.length) {
		var out = _g1[_g];
		++_g;
		var outNodes = [];
		var ls = found_node_Logic.getOutputLinks(out);
		if(ls != null && ls.length > 0) {
			var _g2 = 0;
			while(_g2 < ls.length) {
				var l = ls[_g2];
				++_g2;
				var n = found_node_Logic.getNode(l.to_id);
				var out_name = found_node_Logic.build_node(n);
				outNodes.push(found_node_Logic.nodeMap.h[out_name]);
			}
		} else {
			outNodes.push(found_node_Logic.build_default_node(out));
		}
		v.addOutputs(outNodes);
	}
	return name;
};
found_node_Logic.get_root_nodes = function(node_group) {
	var roots = [];
	var _g = 0;
	var _g1 = node_group.nodes;
	while(_g < _g1.length) {
		var node = _g1[_g];
		++_g;
		var linked = false;
		var _g2 = 0;
		var _g3 = node.outputs;
		while(_g2 < _g3.length) {
			var out = _g3[_g2];
			++_g2;
			var ls = found_node_Logic.getOutputLinks(out);
			if(ls != null && ls.length > 0) {
				linked = true;
				break;
			}
		}
		if(!linked) {
			roots.push(node);
		}
	}
	return roots;
};
found_node_Logic.build_default_node = function(inp) {
	var v = null;
	if(inp.type == "OBJECT") {
		v = found_node_Logic.createClassInstance("ObjectNode",[found_node_Logic.tree,inp.default_value]);
	} else if(inp.type == "ANIMACTION") {
		v = found_node_Logic.createClassInstance("StringNode",[found_node_Logic.tree,inp.default_value]);
	} else if(inp.type == "VECTOR2") {
		if(inp.default_value == null) {
			inp.default_value = [0,0];
		}
		v = found_node_Logic.createClassInstance("Vector2Node",[found_node_Logic.tree,inp.default_value[0],inp.default_value[1]]);
	} else if(inp.type == "RGBA") {
		if(inp.default_value == null) {
			inp.default_value = [0,0,0];
		}
		v = found_node_Logic.createClassInstance("ColorNode",[found_node_Logic.tree,inp.default_value[0],inp.default_value[1],inp.default_value[2],inp.default_value[3]]);
	} else if(inp.type == "RGB") {
		if(inp.default_value == null) {
			inp.default_value = [0,0,0];
		}
		v = found_node_Logic.createClassInstance("ColorNode",[found_node_Logic.tree,inp.default_value[0],inp.default_value[1],inp.default_value[2]]);
	} else if(inp.type == "VALUE") {
		v = found_node_Logic.createClassInstance("FloatNode",[found_node_Logic.tree,inp.default_value]);
	} else if(inp.type == "INT") {
		v = found_node_Logic.createClassInstance("IntegerNode",[found_node_Logic.tree,inp.default_value]);
	} else if(inp.type == "BOOLEAN") {
		v = found_node_Logic.createClassInstance("BooleanNode",[found_node_Logic.tree,inp.default_value]);
	} else if(inp.type == "STRING") {
		v = found_node_Logic.createClassInstance("StringNode",[found_node_Logic.tree,inp.default_value]);
	} else {
		v = found_node_Logic.createClassInstance("NullNode",[found_node_Logic.tree]);
	}
	return v;
};
found_node_Logic.createClassInstance = function(className,args) {
	var _g = 0;
	var _g1 = found_node_Logic.packageNames;
	while(_g < _g1.length) {
		var pname = _g1[_g];
		++_g;
		var cname = $hxClasses[pname + "." + className];
		if(cname == null) {
			continue;
		}
		return Type.createInstance(cname,args);
	}
	return null;
};
var found_node_LogicNodeInput = function(node,from) {
	this.node = node;
	this.from = from;
};
$hxClasses["found.node.LogicNodeInput"] = found_node_LogicNodeInput;
found_node_LogicNodeInput.__name__ = true;
found_node_LogicNodeInput.prototype = {
	node: null
	,from: null
	,get: function() {
		if(this.node != null) {
			return this.node.get(this.from);
		} else {
			return null;
		}
	}
	,set: function(value) {
		this.node.set(value);
	}
	,__class__: found_node_LogicNodeInput
};
var found_node_LogicTree = function() {
	this.paused = false;
	this.loopBreak = false;
	found_Trait.call(this);
};
$hxClasses["found.node.LogicTree"] = found_node_LogicTree;
found_node_LogicTree.__name__ = true;
found_node_LogicTree.__super__ = found_Trait;
found_node_LogicTree.prototype = $extend(found_Trait.prototype,{
	loopBreak: null
	,add: function() {
	}
	,paused: null
	,pause: function() {
		if(this.paused) {
			return;
		}
		this.paused = true;
		if(this._update != null) {
			var _g = 0;
			var _g1 = this._update;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				found_App.removeUpdate(f);
			}
		}
	}
	,resume: function() {
		if(!this.paused) {
			return;
		}
		this.paused = false;
		if(this._update != null) {
			var _g = 0;
			var _g1 = this._update;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				found_App.notifyOnUpdate(f);
			}
		}
	}
	,__class__: found_node_LogicTree
});
var found_node_MathNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.MathNode"] = found_node_MathNode;
found_node_MathNode.__name__ = true;
found_node_MathNode.__super__ = found_node_LogicNode;
found_node_MathNode.prototype = $extend(found_node_LogicNode.prototype,{
	operations: null
	,get: function(from) {
		var v1 = this.inputs[0].get();
		var v2 = this.inputs[1].get();
		var f = 0.0;
		switch(this.operations) {
		case "Add":
			f = v1 + v2;
			break;
		case "Divide":
			f = v1 / v2;
			break;
		case "Multiply":
			f = v1 * v2;
			break;
		case "Subtract":
			f = v1 - v2;
			break;
		}
		return f;
	}
	,__class__: found_node_MathNode
});
var found_node_MouseCoordNode = function(tree) {
	this.move = new kha_math_FastVector2();
	this.coords = new kha_math_FastVector2();
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.MouseCoordNode"] = found_node_MouseCoordNode;
found_node_MouseCoordNode.__name__ = true;
found_node_MouseCoordNode.__super__ = found_node_LogicNode;
found_node_MouseCoordNode.prototype = $extend(found_node_LogicNode.prototype,{
	coords: null
	,move: null
	,get: function(from) {
		var mouse = found_Input.getMouse();
		if(from == 0) {
			this.coords.x = mouse.x + found_State.active.cam.get_position().x;
			this.coords.y = mouse.y + found_State.active.cam.get_position().y;
			return this.coords;
		} else if(from == 1) {
			this.move.x = mouse.movementX;
			this.move.y = mouse.movementY;
			return this.move;
		} else {
			return mouse.wheelDelta;
		}
	}
	,__class__: found_node_MouseCoordNode
});
var found_node_MultiEventNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.MultiEventNode"] = found_node_MultiEventNode;
found_node_MultiEventNode.__name__ = true;
found_node_MultiEventNode.__super__ = found_node_LogicNode;
found_node_MultiEventNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		this.runOutput(0);
	}
	,__class__: found_node_MultiEventNode
});
var found_node_MultiplyVec2Node = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.MultiplyVec2Node"] = found_node_MultiplyVec2Node;
found_node_MultiplyVec2Node.__name__ = true;
found_node_MultiplyVec2Node.__super__ = found_node_LogicNode;
found_node_MultiplyVec2Node.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		var one = this.inputs[0].get();
		var two = this.inputs[1].get();
		return new kha_math_Vector2(one.x * two,one.y * two);
	}
	,__class__: found_node_MultiplyVec2Node
});
var found_node_MultiplyVec2sNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.MultiplyVec2sNode"] = found_node_MultiplyVec2sNode;
found_node_MultiplyVec2sNode.__name__ = true;
found_node_MultiplyVec2sNode.__super__ = found_node_LogicNode;
found_node_MultiplyVec2sNode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		var one = this.inputs[0].get();
		var two = this.inputs[1].get();
		return new kha_math_Vector2(one.x * two.x,two.y * one.y);
	}
	,__class__: found_node_MultiplyVec2sNode
});
var found_node_NullNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.NullNode"] = found_node_NullNode;
found_node_NullNode.__name__ = true;
found_node_NullNode.__super__ = found_node_LogicNode;
found_node_NullNode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		return null;
	}
	,__class__: found_node_NullNode
});
var found_node_OnAddNode = function(tree) {
	found_node_LogicNode.call(this,tree);
	tree.notifyOnAdd($bind(this,this.add));
};
$hxClasses["found.node.OnAddNode"] = found_node_OnAddNode;
found_node_OnAddNode.__name__ = true;
found_node_OnAddNode.__super__ = found_node_LogicNode;
found_node_OnAddNode.prototype = $extend(found_node_LogicNode.prototype,{
	add: function() {
		this.runOutput(0);
	}
	,__class__: found_node_OnAddNode
});
var found_node_OnCollisionNode = function(tree) {
	var _gthis = this;
	found_node_LogicNode.call(this,tree);
	this.collisionListeners = [];
	tree.notifyOnRemove(function() {
		tree.object.removeCollisionListeners(_gthis.collisionListeners);
	});
};
$hxClasses["found.node.OnCollisionNode"] = found_node_OnCollisionNode;
found_node_OnCollisionNode.__name__ = true;
found_node_OnCollisionNode.__super__ = found_node_LogicNode;
found_node_OnCollisionNode.prototype = $extend(found_node_LogicNode.prototype,{
	collisionListeners: null
	,run: function(from) {
		if(this.inputs[1].node != null) {
			var selectedCollidingObject = this.inputs[1].get();
			var collisionDef = { objectName : selectedCollidingObject.get_raw().name, onEnter : $bind(this,this.onCollisionEnterEvent), onStay : $bind(this,this.onCollisionStayEvent), onExit : $bind(this,this.onCollisionExitEvent)};
			this.collisionListeners = this.collisionListeners.concat(this.tree.object.onCollision(collisionDef));
		} else {
			found_tool_Log.error("On Collision node needs an object to check collisions with",{ fileName : "found/node/OnCollisionNode.hx", lineNumber : 33, className : "found.node.OnCollisionNode", methodName : "run"});
		}
	}
	,lastBody: null
	,onCollisionEnterEvent: function(body,otherBody,data) {
		this.lastBody = otherBody;
		this.runOutput(0);
	}
	,onCollisionStayEvent: function(body,otherBody,data) {
		this.lastBody = otherBody;
		this.runOutput(1);
	}
	,onCollisionExitEvent: function(body,otherBody) {
		this.lastBody = otherBody;
		this.runOutput(2);
	}
	,get: function(from) {
		return this.lastBody.object;
	}
	,__class__: found_node_OnCollisionNode
});
var found_node_OnGamepadAxisInputNode = function(tree) {
	this.selectedAxisValue = 0;
	this.deadZone = 0.1;
	found_node_LogicNode.call(this,tree);
	tree.notifyOnUpdate($bind(this,this.update));
};
$hxClasses["found.node.OnGamepadAxisInputNode"] = found_node_OnGamepadAxisInputNode;
found_node_OnGamepadAxisInputNode.__name__ = true;
found_node_OnGamepadAxisInputNode.__super__ = found_node_LogicNode;
found_node_OnGamepadAxisInputNode.prototype = $extend(found_node_LogicNode.prototype,{
	selectedAxisName: null
	,deadZone: null
	,selectedAxisValue: null
	,update: function(dt) {
		var gamepadIndex = this.inputs[0].get();
		var gamepad = found_Input.getGamepad(gamepadIndex);
		if(gamepad == null) {
			return;
		}
		this.selectedAxisValue = gamepad.getAxisInformation(this.selectedAxisName).value;
		if(this.selectedAxisValue < this.deadZone && this.selectedAxisValue > -this.deadZone) {
			this.selectedAxisValue = 0;
		}
		if(gamepad.getAxisInformation(this.selectedAxisName).moved) {
			this.runOutput(0);
		}
	}
	,get: function(from) {
		return this.selectedAxisValue;
	}
	,__class__: found_node_OnGamepadAxisInputNode
});
var found_node_OnGamepadButtonInputNode = function(tree) {
	this.selectedButtonValue = 0;
	found_node_LogicNode.call(this,tree);
	tree.notifyOnUpdate($bind(this,this.update));
};
$hxClasses["found.node.OnGamepadButtonInputNode"] = found_node_OnGamepadButtonInputNode;
found_node_OnGamepadButtonInputNode.__name__ = true;
found_node_OnGamepadButtonInputNode.getButtonEventTypes = function() {
	return found_node_OnGamepadButtonInputNode.buttonEventTypes;
};
found_node_OnGamepadButtonInputNode.__super__ = found_node_LogicNode;
found_node_OnGamepadButtonInputNode.prototype = $extend(found_node_LogicNode.prototype,{
	selectedButtonEventType: null
	,selectedButtonName: null
	,selectedButtonValue: null
	,update: function(dt) {
		var gamepadIndex = this.inputs[0].get();
		var gamepad = found_Input.getGamepad(gamepadIndex);
		var gamepadEventOccured = false;
		if(gamepad == null) {
			return;
		}
		switch(this.selectedButtonEventType) {
		case "Down":
			gamepadEventOccured = gamepad.down(this.selectedButtonName) > 0.0;
			break;
		case "Pressed":
			gamepadEventOccured = gamepad.started(this.selectedButtonName);
			break;
		case "Released":
			gamepadEventOccured = gamepad.released(this.selectedButtonName);
			break;
		}
		if(gamepadEventOccured) {
			this.selectedButtonValue = 1;
			this.runOutput(0);
		} else {
			this.selectedButtonValue = 0;
		}
	}
	,get: function(from) {
		return this.selectedButtonValue;
	}
	,__class__: found_node_OnGamepadButtonInputNode
});
var found_node_OnKeyboardNode = function(tree) {
	this.isDown = false;
	found_node_LogicNode.call(this,tree);
	tree.notifyOnUpdate($bind(this,this.update));
};
$hxClasses["found.node.OnKeyboardNode"] = found_node_OnKeyboardNode;
found_node_OnKeyboardNode.__name__ = true;
found_node_OnKeyboardNode.getKeyboardEventTypes = function() {
	return found_node_OnKeyboardNode.keyboardEventTypes;
};
found_node_OnKeyboardNode.__super__ = found_node_LogicNode;
found_node_OnKeyboardNode.prototype = $extend(found_node_LogicNode.prototype,{
	keyboardEventType: null
	,keyCode: null
	,isDown: null
	,lastKey: null
	,keyName: null
	,update: function(dt) {
		var keyboard = found_Input.getKeyboard();
		var keyboardEventOccured = false;
		if(this.lastKey != this.keyCode) {
			this.keyName = found_Keyboard.keyCode(this.keyCode);
			this.lastKey = this.keyCode;
		}
		switch(this.keyboardEventType) {
		case "Down":
			keyboardEventOccured = keyboard.down(this.keyName);
			break;
		case "Pressed":
			keyboardEventOccured = keyboard.started(this.keyName);
			break;
		case "Released":
			keyboardEventOccured = keyboard.released(this.keyName);
			break;
		}
		this.isDown = keyboardEventOccured;
		if(keyboardEventOccured) {
			this.runOutput(0);
		}
	}
	,get: function(from) {
		return this.isDown;
	}
	,__class__: found_node_OnKeyboardNode
});
var found_node_OnMouseNode = function(tree) {
	found_node_LogicNode.call(this,tree);
	tree.notifyOnUpdate($bind(this,this.update));
};
$hxClasses["found.node.OnMouseNode"] = found_node_OnMouseNode;
found_node_OnMouseNode.__name__ = true;
found_node_OnMouseNode.getMouseButtonEventTypes = function() {
	return found_node_OnMouseNode.mouseEventTypes;
};
found_node_OnMouseNode.__super__ = found_node_LogicNode;
found_node_OnMouseNode.prototype = $extend(found_node_LogicNode.prototype,{
	mouseEventType: null
	,mouseButton: null
	,update: function(dt) {
		var mouse = found_Input.getMouse();
		var mouseEventOccured = false;
		switch(this.mouseEventType) {
		case "Down":
			mouseEventOccured = mouse.down(this.mouseButton);
			break;
		case "Moved":
			mouseEventOccured = mouse.moved;
			break;
		case "Pressed":
			mouseEventOccured = mouse.started(this.mouseButton);
			break;
		case "Released":
			mouseEventOccured = mouse.released(this.mouseButton);
			break;
		}
		if(mouseEventOccured) {
			this.runOutput(0);
		}
	}
	,__class__: found_node_OnMouseNode
});
var found_node_ParseFloatNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.ParseFloatNode"] = found_node_ParseFloatNode;
found_node_ParseFloatNode.__name__ = true;
found_node_ParseFloatNode.__super__ = found_node_LogicNode;
found_node_ParseFloatNode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		var string = this.inputs[0].get();
		return parseFloat(string);
	}
	,__class__: found_node_ParseFloatNode
});
var found_node_ParseIntNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.ParseIntNode"] = found_node_ParseIntNode;
found_node_ParseIntNode.__name__ = true;
found_node_ParseIntNode.__super__ = found_node_LogicNode;
found_node_ParseIntNode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		var string = this.inputs[0].get();
		return Std.parseInt(string);
	}
	,__class__: found_node_ParseIntNode
});
var found_node_Platformer2DControllerNode = function(tree) {
	found_node_LogicNode.call(this,tree);
	tree.notifyOnUpdate($bind(this,this.update));
};
$hxClasses["found.node.Platformer2DControllerNode"] = found_node_Platformer2DControllerNode;
found_node_Platformer2DControllerNode.__name__ = true;
found_node_Platformer2DControllerNode.__super__ = found_node_LogicNode;
found_node_Platformer2DControllerNode.prototype = $extend(found_node_LogicNode.prototype,{
	inputType: null
	,defaultLeftKeyCode: null
	,defaultRightKeyCode: null
	,defaultJumpKeyCode: null
	,update: function(dt) {
		var keyboard = found_Input.getKeyboard();
		var speed = this.inputs[1].get();
		var jumpForce = this.inputs[2].get();
		if(this.tree.object.body != null) {
			var movementInput_x = 0;
			var movementInput_y = 0;
			if(this.inputType == "Use default input") {
				if(keyboard.down(found_Keyboard.keyCode(this.defaultLeftKeyCode))) {
					movementInput_x += -1;
				}
				if(keyboard.down(found_Keyboard.keyCode(this.defaultRightKeyCode))) {
					++movementInput_x;
				}
			} else {
				movementInput_x = this.inputs[0].get().x;
			}
			this.tree.object.body.velocity.x = movementInput_x * speed;
			if(keyboard.started(found_Keyboard.keyCode(this.defaultJumpKeyCode))) {
				this.tree.object.body.velocity.y = -jumpForce;
			}
		}
		this.runOutput(0);
	}
	,__class__: found_node_Platformer2DControllerNode
});
var found_node_PlayAnimationNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.PlayAnimationNode"] = found_node_PlayAnimationNode;
found_node_PlayAnimationNode.__name__ = true;
found_node_PlayAnimationNode.__super__ = found_node_LogicNode;
found_node_PlayAnimationNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		var selectedObject = null;
		if(this.inputs[2].node == null) {
			selectedObject = this.tree.object;
		} else {
			selectedObject = this.inputs[2].get();
		}
		if(selectedObject.get_raw().type == "sprite_object" && this.inputs[1].get() != "") {
			var curSprite = selectedObject;
			curSprite.setAnimationByName(this.inputs[1].get());
		} else if(selectedObject.get_raw().type != "sprite_object") {
			found_tool_Log.error("\"Play Animation\" node needs to be associated to a sprite_object",{ fileName : "found/node/PlayAnimationNode.hx", lineNumber : 20, className : "found.node.PlayAnimationNode", methodName : "run"});
		}
		this.runOutput(0);
	}
	,__class__: found_node_PlayAnimationNode
});
var found_node_PlayMusicNode = function(tree) {
	this.volume = 1.0;
	this.loop = false;
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.PlayMusicNode"] = found_node_PlayMusicNode;
found_node_PlayMusicNode.__name__ = true;
found_node_PlayMusicNode.__super__ = found_node_LogicNode;
found_node_PlayMusicNode.prototype = $extend(found_node_LogicNode.prototype,{
	loop: null
	,volume: null
	,run: function(from) {
		var name = this.inputs[1].get();
		found_audio_Music.play(name,this.volume,this.loop);
	}
	,__class__: found_node_PlayMusicNode
});
var found_node_PlaySfxNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.PlaySfxNode"] = found_node_PlaySfxNode;
found_node_PlaySfxNode.__name__ = true;
found_node_PlaySfxNode.__super__ = found_node_LogicNode;
found_node_PlaySfxNode.prototype = $extend(found_node_LogicNode.prototype,{
	volume: null
	,run: function(from) {
		var name = this.inputs[1].get();
		found_audio_Sfx.play(name,this.volume);
	}
	,__class__: found_node_PlaySfxNode
});
var found_node_PrintNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.PrintNode"] = found_node_PrintNode;
found_node_PrintNode.__name__ = true;
found_node_PrintNode.__super__ = found_node_LogicNode;
found_node_PrintNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		var value = this.inputs[1].get();
		haxe_Log.trace(value,{ fileName : "found/node/PrintNode.hx", lineNumber : 13, className : "found.node.PrintNode", methodName : "run"});
		this.runOutput(0);
	}
	,__class__: found_node_PrintNode
});
var found_node_RadToDegNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.RadToDegNode"] = found_node_RadToDegNode;
found_node_RadToDegNode.__name__ = true;
found_node_RadToDegNode.__super__ = found_node_LogicNode;
found_node_RadToDegNode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		var radian = this.inputs[0].get();
		return radian * 180 / Math.PI;
	}
	,__class__: found_node_RadToDegNode
});
var found_node_RandFNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.RandFNode"] = found_node_RandFNode;
found_node_RandFNode.__name__ = true;
found_node_RandFNode.__super__ = found_node_LogicNode;
found_node_RandFNode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		var min = this.inputs[0].get();
		var max = this.inputs[1].get();
		return Math.random() * (max - min) + min;
	}
	,__class__: found_node_RandFNode
});
var found_node_RandINode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.RandINode"] = found_node_RandINode;
found_node_RandINode.__name__ = true;
found_node_RandINode.__super__ = found_node_LogicNode;
found_node_RandINode.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		var min = this.inputs[0].get();
		var max = this.inputs[1].get();
		return Math.round(Math.random() * (max - min) + min);
	}
	,__class__: found_node_RandINode
});
var found_node_RotateTowardPositionNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.RotateTowardPositionNode"] = found_node_RotateTowardPositionNode;
found_node_RotateTowardPositionNode.__name__ = true;
found_node_RotateTowardPositionNode.__super__ = found_node_LogicNode;
found_node_RotateTowardPositionNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		var fastTargetPosition = this.inputs[2].get();
		var targetPosition = new kha_math_Vector2(fastTargetPosition.x,fastTargetPosition.y);
		var objectToRotate;
		if(this.inputs[1].node == null) {
			objectToRotate = this.tree.object;
		} else {
			objectToRotate = this.inputs[1].get();
		}
		objectToRotate.rotateTowardPosition(targetPosition);
		this.runOutput(0);
	}
	,__class__: found_node_RotateTowardPositionNode
});
var found_node_SendEventNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.SendEventNode"] = found_node_SendEventNode;
found_node_SendEventNode.__name__ = true;
found_node_SendEventNode.__super__ = found_node_LogicNode;
found_node_SendEventNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		var eventName = this.inputs[1].get();
		var object = this.inputs[2].get();
		var mask = object != null ? object.uid : -1;
		found_Event.send(eventName,mask);
	}
	,__class__: found_node_SendEventNode
});
var found_node_SetCameraFollowTargetNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.SetCameraFollowTargetNode"] = found_node_SetCameraFollowTargetNode;
found_node_SetCameraFollowTargetNode.__name__ = true;
found_node_SetCameraFollowTargetNode.__super__ = found_node_LogicNode;
found_node_SetCameraFollowTargetNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		if(this.inputs[1].node == null) {
			found_State.active.cam.setCameraFollowTarget(this.tree.object);
		} else {
			var objectToFollow = this.inputs[1].get();
			found_State.active.cam.setCameraFollowTarget(objectToFollow);
		}
		this.runOutput(0);
	}
	,__class__: found_node_SetCameraFollowTargetNode
});
var found_node_SetCameraTargetPositionNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.SetCameraTargetPositionNode"] = found_node_SetCameraTargetPositionNode;
found_node_SetCameraTargetPositionNode.__name__ = true;
found_node_SetCameraTargetPositionNode.__super__ = found_node_LogicNode;
found_node_SetCameraTargetPositionNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		var position = this.inputs[1].get();
		var camPos = found_State.active.cam.get_position();
		var x = position.x - camPos.x;
		var y = position.y - camPos.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var _this_x = x;
		var _this_y = y;
		var x = _this_x;
		var y = _this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var direction_x = x;
		var direction_y = y;
		var currentLength = Math.sqrt(direction_x * direction_x + direction_y * direction_y);
		if(currentLength != 0) {
			var mul = 1 / currentLength;
			direction_x *= mul;
			direction_y *= mul;
		}
		var move = new kha_math_Vector2();
		if(direction_x > 0) {
			move.x = position.x - camPos.x;
		} else {
			move.x = camPos.x - position.x;
		}
		if(direction_y > 0) {
			move.y = position.y - camPos.y;
		} else {
			move.y = camPos.y - position.y;
		}
		found_State.active.cam.move(move);
		this.runOutput(0);
	}
	,__class__: found_node_SetCameraTargetPositionNode
});
var found_node_SetObjectLocationNode = function(tree) {
	this.newPositionVector = new kha_math_FastVector2();
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.SetObjectLocationNode"] = found_node_SetObjectLocationNode;
found_node_SetObjectLocationNode.__name__ = true;
found_node_SetObjectLocationNode.__super__ = found_node_LogicNode;
found_node_SetObjectLocationNode.prototype = $extend(found_node_LogicNode.prototype,{
	newPositionVector: null
	,run: function(from) {
		this.newPositionVector = this.inputs[2].get();
		if(this.inputs[1].node == null) {
			this.tree.object.translate($bind(this,this.setObjectLocation));
		} else {
			var objectToSetLocation = this.inputs[1].get();
			objectToSetLocation.translate($bind(this,this.setObjectLocation));
		}
		this.runOutput(0);
	}
	,setObjectLocation: function(data) {
		data._positions.x = this.newPositionVector.x;
		data._positions.y = this.newPositionVector.y;
		return data;
	}
	,__class__: found_node_SetObjectLocationNode
});
var found_node_SpawnObjectNode = function(tree) {
	this.spawnedObjects = [];
	this.spawnRotation = 0;
	this.spawnPosition = new kha_math_FastVector2();
	var _gthis = this;
	found_node_LogicNode.call(this,tree);
	tree.notifyOnRemove(function() {
		while(_gthis.spawnedObjects.length > 0) found_State.active.remove(_gthis.spawnedObjects.pop());
	});
};
$hxClasses["found.node.SpawnObjectNode"] = found_node_SpawnObjectNode;
found_node_SpawnObjectNode.__name__ = true;
found_node_SpawnObjectNode.__super__ = found_node_LogicNode;
found_node_SpawnObjectNode.prototype = $extend(found_node_LogicNode.prototype,{
	selectedObjectToSpawn: null
	,spawnPosition: null
	,spawnRotation: null
	,spawnedObjects: null
	,run: function(from) {
		this.spawnPosition = this.inputs[2].get();
		this.spawnRotation = this.inputs[3].get();
		if(this.inputs[1].node != null) {
			this.selectedObjectToSpawn = this.inputs[1].get();
			var spawnedObject = found_State.active.spawn(this.selectedObjectToSpawn.get_raw());
			this.spawnedObjects.push(spawnedObject);
			spawnedObject.activate();
			spawnedObject.translate($bind(this,this.moveObjectToSpawnPoint));
			spawnedObject.rotate($bind(this,this.rotateObjectToSpawnRotation));
		} else {
			found_tool_Log.error("Spawn Object node needs an object to spawn",{ fileName : "found/node/SpawnObjectNode.hx", lineNumber : 36, className : "found.node.SpawnObjectNode", methodName : "run"});
		}
		this.runOutput(0);
	}
	,moveObjectToSpawnPoint: function(data) {
		var tmp = this.spawnPosition.x;
		var tmp1 = this.selectedObjectToSpawn.get_width() * 0.5;
		data._positions.x = tmp - tmp1;
		var tmp = this.spawnPosition.y;
		var tmp1 = this.selectedObjectToSpawn.get_height() * 0.5;
		data._positions.y = tmp - tmp1;
		return data;
	}
	,rotateObjectToSpawnRotation: function(data) {
		data._rotations.z = this.spawnRotation;
		return data;
	}
	,__class__: found_node_SpawnObjectNode
});
var found_node_SplitVec2Node = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.SplitVec2Node"] = found_node_SplitVec2Node;
found_node_SplitVec2Node.__name__ = true;
found_node_SplitVec2Node.__super__ = found_node_LogicNode;
found_node_SplitVec2Node.prototype = $extend(found_node_LogicNode.prototype,{
	get: function(from) {
		var vec2 = this.inputs[0].get();
		if(from == 0) {
			return vec2.x;
		} else {
			return vec2.y;
		}
	}
	,__class__: found_node_SplitVec2Node
});
var found_node_StringNode = function(tree,value) {
	if(value == null) {
		value = "";
	}
	found_node_LogicNode.call(this,tree);
	this.value = value;
};
$hxClasses["found.node.StringNode"] = found_node_StringNode;
found_node_StringNode.__name__ = true;
found_node_StringNode.__super__ = found_node_LogicNode;
found_node_StringNode.prototype = $extend(found_node_LogicNode.prototype,{
	value: null
	,get: function(from) {
		if(this.inputs.length > 0) {
			return this.inputs[0].get();
		}
		return this.value;
	}
	,set: function(value) {
		if(this.inputs.length > 0) {
			this.inputs[0].set(value);
		} else {
			this.value = value;
		}
	}
	,__class__: found_node_StringNode
});
var found_node_TopDownControllerNode = function(tree) {
	found_node_LogicNode.call(this,tree);
	tree.notifyOnInit(function() {
		if(tree.object.body == null) {
			found_tool_Log.error("Top-down controller needs the object to have a Rigidbody",{ fileName : "found/node/TopDownControllerNode.hx", lineNumber : 20, className : "found.node.TopDownControllerNode", methodName : "new"});
		}
	});
	tree.notifyOnUpdate($bind(this,this.update));
};
$hxClasses["found.node.TopDownControllerNode"] = found_node_TopDownControllerNode;
found_node_TopDownControllerNode.__name__ = true;
found_node_TopDownControllerNode.__super__ = found_node_LogicNode;
found_node_TopDownControllerNode.prototype = $extend(found_node_LogicNode.prototype,{
	inputType: null
	,defaultUpKeyCode: null
	,defaultDownKeyCode: null
	,defaultLeftKeyCode: null
	,defaultRightKeyCode: null
	,update: function(dt) {
		var keyboard = found_Input.getKeyboard();
		var speed = this.inputs[1].get();
		if(this.tree.object.body != null) {
			var this1 = new hxmath_math_Vector2Default(0,0);
			var movementInput = this1;
			if(this.inputType == "Use default input") {
				if(keyboard.down(found_Keyboard.keyCode(this.defaultUpKeyCode))) {
					movementInput.y += -1;
				}
				if(keyboard.down(found_Keyboard.keyCode(this.defaultDownKeyCode))) {
					movementInput.y += 1;
				}
				if(keyboard.down(found_Keyboard.keyCode(this.defaultLeftKeyCode))) {
					movementInput.x += -1;
				}
				if(keyboard.down(found_Keyboard.keyCode(this.defaultRightKeyCode))) {
					movementInput.x += 1;
				}
			} else {
				movementInput.x = this.inputs[0].get().x;
				movementInput.y = this.inputs[0].get().y;
			}
			var self = movementInput;
			var self1 = self;
			var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
			if(length > 0.0) {
				var self1 = self;
				self1.x /= length;
				self1.y /= length;
			}
			var normalizedMovementInput = self;
			var self = normalizedMovementInput;
			var this1 = new hxmath_math_Vector2Default(self.x,self.y);
			var self = this1;
			self.x *= speed;
			self.y *= speed;
			this.tree.object.body.velocity = self;
		}
		this.runOutput(0);
	}
	,__class__: found_node_TopDownControllerNode
});
var found_node_TranslateObjectNode = function(tree) {
	this.speed = 0;
	this.direction = new kha_math_FastVector2();
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.TranslateObjectNode"] = found_node_TranslateObjectNode;
found_node_TranslateObjectNode.__name__ = true;
found_node_TranslateObjectNode.__super__ = found_node_LogicNode;
found_node_TranslateObjectNode.prototype = $extend(found_node_LogicNode.prototype,{
	direction: null
	,speed: null
	,run: function(from) {
		this.direction = this.inputs[2].get();
		this.speed = this.inputs[3].get();
		if(this.inputs[1].node == null) {
			this.tree.object.translate($bind(this,this.translateObject));
		} else {
			var objectToTranslate = this.inputs[1].get();
			objectToTranslate.translate($bind(this,this.translateObject));
		}
		this.runOutput(0);
	}
	,translateObject: function(data) {
		data._positions.x += this.direction.x * this.speed;
		data._positions.y += this.direction.y * this.speed;
		return data;
	}
	,__class__: found_node_TranslateObjectNode
});
var found_node_UpdateNode = function(tree) {
	found_node_LogicNode.call(this,tree);
	tree.notifyOnUpdate($bind(this,this.update));
};
$hxClasses["found.node.UpdateNode"] = found_node_UpdateNode;
found_node_UpdateNode.__name__ = true;
found_node_UpdateNode.__super__ = found_node_LogicNode;
found_node_UpdateNode.prototype = $extend(found_node_LogicNode.prototype,{
	update: function(dt) {
		this.runOutput(0);
	}
	,__class__: found_node_UpdateNode
});
var found_node_Vector2Node = function(tree,x,y) {
	this.value = new kha_math_FastVector2();
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.Vector2Node"] = found_node_Vector2Node;
found_node_Vector2Node.__name__ = true;
found_node_Vector2Node.__super__ = found_node_LogicNode;
found_node_Vector2Node.prototype = $extend(found_node_LogicNode.prototype,{
	value: null
	,get: function(from) {
		this.value.x = this.inputs[0].get();
		this.value.y = this.inputs[1].get();
		if(from == 0) {
			return this.value;
		}
		var _this = this.value;
		var v = new kha_math_FastVector2(_this.x,_this.y);
		var currentLength = Math.sqrt(v.x * v.x + v.y * v.y);
		if(currentLength != 0) {
			var mul = 1 / currentLength;
			v.x *= mul;
			v.y *= mul;
		}
		return v;
	}
	,set: function(value) {
		this.inputs[0].set(value.x);
		this.inputs[1].set(value.y);
	}
	,__class__: found_node_Vector2Node
});
var found_node_WhileNode = function(tree) {
	found_node_LogicNode.call(this,tree);
};
$hxClasses["found.node.WhileNode"] = found_node_WhileNode;
found_node_WhileNode.__name__ = true;
found_node_WhileNode.__super__ = found_node_LogicNode;
found_node_WhileNode.prototype = $extend(found_node_LogicNode.prototype,{
	run: function(from) {
		var bool = this.inputs[1].get();
		while(bool) {
			this.runOutput(0);
			if(this.tree.loopBreak) {
				this.tree.loopBreak = false;
				break;
			}
		}
		this.runOutput(1);
	}
	,__class__: found_node_WhileNode
});
var kha_math_FastVector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.FastVector2"] = kha_math_FastVector2;
kha_math_FastVector2.__name__ = true;
kha_math_FastVector2.fromVector2 = function(v) {
	return new kha_math_FastVector2(v.x,v.y);
};
kha_math_FastVector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector2(" + this.x + ", " + this.y + ")";
	}
	,__class__: kha_math_FastVector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var found_node_data_FoundryNode = function() { };
$hxClasses["found.node.data.FoundryNode"] = found_node_data_FoundryNode;
found_node_data_FoundryNode.__name__ = true;
found_node_data_FoundryNode._tr = function(s) {
	return s;
};
var found_node_data_LogicNode = function() { };
$hxClasses["found.node.data.LogicNode"] = found_node_data_LogicNode;
found_node_data_LogicNode.__name__ = true;
found_node_data_LogicNode._tr = function(s) {
	return s;
};
var found_node_data_MathNode = function() { };
$hxClasses["found.node.data.MathNode"] = found_node_data_MathNode;
found_node_data_MathNode.__name__ = true;
found_node_data_MathNode._tr = function(s) {
	return s;
};
var found_node_data_NodeCreator = function() { };
$hxClasses["found.node.data.NodeCreator"] = found_node_data_NodeCreator;
found_node_data_NodeCreator.__name__ = true;
found_node_data_NodeCreator.createNode = function(node,nodes,nodeCanvas) {
	var node1 = JSON.parse(JSON.stringify(node));
	node1.id = nodes.getNodeId(nodeCanvas.nodes);
	var _g = 0;
	var _g1 = node1.inputs;
	while(_g < _g1.length) {
		var soc = _g1[_g];
		++_g;
		soc.id = nodes.getSocketId(nodeCanvas.nodes);
		soc.node_id = node1.id;
	}
	var _g = 0;
	var _g1 = node1.outputs;
	while(_g < _g1.length) {
		var soc = _g1[_g];
		++_g;
		soc.id = nodes.getSocketId(nodeCanvas.nodes);
		soc.node_id = node1.id;
	}
	return node1;
};
var found_node_data_StdNode = function() { };
$hxClasses["found.node.data.StdNode"] = found_node_data_StdNode;
found_node_data_StdNode.__name__ = true;
found_node_data_StdNode._tr = function(s) {
	return s;
};
var found_node_data_VariableNode = function() { };
$hxClasses["found.node.data.VariableNode"] = found_node_data_VariableNode;
found_node_data_VariableNode.__name__ = true;
found_node_data_VariableNode._tr = function(s) {
	return s;
};
var found_object_Camera = function(data) {
	this.target = null;
	this.lastParallax = 1.0;
	this.zoom = 1.0;
	this.offsetY = 25;
	this.offsetX = 15;
	this.camSpeedY = 5;
	this.camSpeedX = 3;
	this.origin = new kha_math_Vector2();
	found_object_Object.call(this,data);
	if(data.offsetX != null) {
		this.offsetX = data.offsetX;
	}
	if(data.offsetY != null) {
		this.offsetY = data.offsetY;
	}
	if(data.speedX != null) {
		this.camSpeedX = data.speedX;
	}
	if(data.speedY != null) {
		this.camSpeedY = data.speedY;
	}
	this.set_width(data.width < 1.0 ? found_Found.WIDTH : data.width);
	this.set_height(data.height < 1.0 ? found_Found.HEIGHT : data.height);
};
$hxClasses["found.object.Camera"] = found_object_Camera;
found_object_Camera.__name__ = true;
found_object_Camera.__super__ = found_object_Object;
found_object_Camera.prototype = $extend(found_object_Object.prototype,{
	origin: null
	,get_origin: function() {
		var tmp = this.get_width();
		this.origin.x = tmp * 0.5;
		var tmp = this.get_height();
		this.origin.y = tmp * 0.5;
		return this.origin;
	}
	,camSpeedX: null
	,camSpeedY: null
	,offsetX: null
	,offsetY: null
	,zoom: null
	,lastParallax: null
	,getTransformation: function(parallax) {
		this.lastParallax = parallax;
		var center = this.get_origin();
		var transformation = new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1);
		var _this__00 = this.zoom;
		var _this__10 = 0;
		var _this__20 = 0;
		var _this__01 = 0;
		var _this__11 = this.zoom;
		var _this__21 = 0;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = _this__00 * transformation._00 + _this__10 * transformation._01 + _this__20 * transformation._02;
		var m__10 = _this__00 * transformation._10 + _this__10 * transformation._11 + _this__20 * transformation._12;
		var m__20 = _this__00 * transformation._20 + _this__10 * transformation._21 + _this__20 * transformation._22;
		var m__01 = _this__01 * transformation._00 + _this__11 * transformation._01 + _this__21 * transformation._02;
		var m__11 = _this__01 * transformation._10 + _this__11 * transformation._11 + _this__21 * transformation._12;
		var m__21 = _this__01 * transformation._20 + _this__11 * transformation._21 + _this__21 * transformation._22;
		var m__02 = _this__02 * transformation._00 + _this__12 * transformation._01 + _this__22 * transformation._02;
		var m__12 = _this__02 * transformation._10 + _this__12 * transformation._11 + _this__22 * transformation._12;
		var m__22 = _this__02 * transformation._20 + _this__12 * transformation._21 + _this__22 * transformation._22;
		transformation._00 = m__00;
		transformation._10 = m__10;
		transformation._20 = m__20;
		transformation._01 = m__01;
		transformation._11 = m__11;
		transformation._21 = m__21;
		transformation._02 = m__02;
		transformation._12 = m__12;
		transformation._22 = m__22;
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = center.x;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = center.y;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var alpha = -found_math_Util.degToRad(this.get_rotation().z);
		var m__00 = Math.cos(alpha);
		var m__10 = -Math.sin(alpha);
		var m__20 = 0;
		var m__01 = Math.sin(alpha);
		var m__11 = Math.cos(alpha);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = -center.x;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = -center.y;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__00 = _this__001 * m__00 + _this__101 * m__01 + _this__201 * m__02;
		var _this__10 = _this__001 * m__10 + _this__101 * m__11 + _this__201 * m__12;
		var _this__20 = _this__001 * m__20 + _this__101 * m__21 + _this__201 * m__22;
		var _this__01 = _this__011 * m__00 + _this__111 * m__01 + _this__211 * m__02;
		var _this__11 = _this__011 * m__10 + _this__111 * m__11 + _this__211 * m__12;
		var _this__21 = _this__011 * m__20 + _this__111 * m__21 + _this__211 * m__22;
		var _this__02 = _this__021 * m__00 + _this__121 * m__01 + _this__221 * m__02;
		var _this__12 = _this__021 * m__10 + _this__121 * m__11 + _this__221 * m__12;
		var _this__22 = _this__021 * m__20 + _this__121 * m__21 + _this__221 * m__22;
		var m__00 = _this__00 * transformation._00 + _this__10 * transformation._01 + _this__20 * transformation._02;
		var m__10 = _this__00 * transformation._10 + _this__10 * transformation._11 + _this__20 * transformation._12;
		var m__20 = _this__00 * transformation._20 + _this__10 * transformation._21 + _this__20 * transformation._22;
		var m__01 = _this__01 * transformation._00 + _this__11 * transformation._01 + _this__21 * transformation._02;
		var m__11 = _this__01 * transformation._10 + _this__11 * transformation._11 + _this__21 * transformation._12;
		var m__21 = _this__01 * transformation._20 + _this__11 * transformation._21 + _this__21 * transformation._22;
		var m__02 = _this__02 * transformation._00 + _this__12 * transformation._01 + _this__22 * transformation._02;
		var m__12 = _this__02 * transformation._10 + _this__12 * transformation._11 + _this__22 * transformation._12;
		var m__22 = _this__02 * transformation._20 + _this__12 * transformation._21 + _this__22 * transformation._22;
		transformation._00 = m__00;
		transformation._10 = m__10;
		transformation._20 = m__20;
		transformation._01 = m__01;
		transformation._11 = m__11;
		transformation._21 = m__21;
		transformation._02 = m__02;
		transformation._12 = m__12;
		transformation._22 = m__22;
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = center.x;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = center.y;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = _this__00 * transformation._00 + _this__10 * transformation._01 + _this__20 * transformation._02;
		var m__10 = _this__00 * transformation._10 + _this__10 * transformation._11 + _this__20 * transformation._12;
		var m__20 = _this__00 * transformation._20 + _this__10 * transformation._21 + _this__20 * transformation._22;
		var m__01 = _this__01 * transformation._00 + _this__11 * transformation._01 + _this__21 * transformation._02;
		var m__11 = _this__01 * transformation._10 + _this__11 * transformation._11 + _this__21 * transformation._12;
		var m__21 = _this__01 * transformation._20 + _this__11 * transformation._21 + _this__21 * transformation._22;
		var m__02 = _this__02 * transformation._00 + _this__12 * transformation._01 + _this__22 * transformation._02;
		var m__12 = _this__02 * transformation._10 + _this__12 * transformation._11 + _this__22 * transformation._12;
		var m__22 = _this__02 * transformation._20 + _this__12 * transformation._21 + _this__22 * transformation._22;
		transformation._00 = m__00;
		transformation._10 = m__10;
		transformation._20 = m__20;
		transformation._01 = m__01;
		transformation._11 = m__11;
		transformation._21 = m__21;
		transformation._02 = m__02;
		transformation._12 = m__12;
		transformation._22 = m__22;
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = -this.get_position().x * parallax;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = -this.get_position().y * parallax;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = _this__00 * transformation._00 + _this__10 * transformation._01 + _this__20 * transformation._02;
		var m__10 = _this__00 * transformation._10 + _this__10 * transformation._11 + _this__20 * transformation._12;
		var m__20 = _this__00 * transformation._20 + _this__10 * transformation._21 + _this__20 * transformation._22;
		var m__01 = _this__01 * transformation._00 + _this__11 * transformation._01 + _this__21 * transformation._02;
		var m__11 = _this__01 * transformation._10 + _this__11 * transformation._11 + _this__21 * transformation._12;
		var m__21 = _this__01 * transformation._20 + _this__11 * transformation._21 + _this__21 * transformation._22;
		var m__02 = _this__02 * transformation._00 + _this__12 * transformation._01 + _this__22 * transformation._02;
		var m__12 = _this__02 * transformation._10 + _this__12 * transformation._11 + _this__22 * transformation._12;
		var m__22 = _this__02 * transformation._20 + _this__12 * transformation._21 + _this__22 * transformation._22;
		transformation._00 = m__00;
		transformation._10 = m__10;
		transformation._20 = m__20;
		transformation._01 = m__01;
		transformation._11 = m__11;
		transformation._21 = m__21;
		transformation._02 = m__02;
		transformation._12 = m__12;
		transformation._22 = m__22;
		return transformation;
	}
	,target: null
	,move: function(movement,considerRotation) {
		if(considerRotation == null) {
			considerRotation = false;
		}
		if(considerRotation) {
			var alpha = found_math_Util.degToRad(this.get_rotation().z);
			var _this__00 = Math.cos(alpha);
			var _this__10 = -Math.sin(alpha);
			var _this__20 = 0;
			var _this__01 = Math.sin(alpha);
			var _this__11 = Math.cos(alpha);
			var _this__21 = 0;
			var _this__02 = 0;
			var _this__12 = 0;
			var _this__22 = 1;
			var value = movement;
			var w = _this__02 * value.x + _this__12 * value.y + _this__22;
			var x = (_this__00 * value.x + _this__10 * value.y + _this__20) / w;
			var y = (_this__01 * value.x + _this__11 * value.y + _this__21) / w;
			movement = new kha_math_FastVector2(x,y);
		}
		this.get_position().x += movement.x;
		this.get_position().y += movement.y;
	}
	,lookAt: function(obj) {
		var tmp = obj.get_position().x + obj.get_width() * 0.5;
		this.get_position().x = tmp * this.zoom;
		var tmp = obj.get_position().y + obj.get_height() * 0.5;
		this.get_position().y = tmp * this.zoom;
	}
	,moveTowards: function(target,step) {
		found_tool_Log.warn("Use the move function instead for the camera.",{ fileName : "found/object/Camera.hx", lineNumber : 68, className : "found.object.Camera", methodName : "moveTowards"});
	}
	,setCameraFollowTarget: function(p) {
		this.target = p;
	}
	,worldToScreen: function(worldPosition,parallaxSpeed) {
		var speed = parallaxSpeed != null ? parallaxSpeed : this.lastParallax;
		var _this = this.getTransformation(speed);
		var value = worldPosition;
		var w = _this._02 * value.x + _this._12 * value.y + _this._22;
		var x = (_this._00 * value.x + _this._10 * value.y + _this._20) / w;
		var y = (_this._01 * value.x + _this._11 * value.y + _this._21) / w;
		return new kha_math_FastVector2(x,y);
	}
	,screenToWorld: function(screenPosition,parallaxSpeed) {
		var speed = parallaxSpeed != null ? parallaxSpeed : this.lastParallax;
		var _this = this.getTransformation(speed);
		var c00 = _this._11 * _this._22 - _this._21 * _this._12;
		var c01 = _this._10 * _this._22 - _this._20 * _this._12;
		var c02 = _this._10 * _this._21 - _this._20 * _this._11;
		var det = _this._00 * c00 - _this._01 * c01 + _this._02 * c02;
		if(Math.abs(det) < 0.000001) {
			throw haxe_Exception.thrown("determinant is too small");
		}
		var c10 = _this._01 * _this._22 - _this._21 * _this._02;
		var c11 = _this._00 * _this._22 - _this._20 * _this._02;
		var c12 = _this._00 * _this._21 - _this._20 * _this._01;
		var c20 = _this._01 * _this._12 - _this._11 * _this._02;
		var c21 = _this._00 * _this._12 - _this._10 * _this._02;
		var c22 = _this._00 * _this._11 - _this._10 * _this._01;
		var invdet = 1.0 / det;
		var _this__00 = c00 * invdet;
		var _this__10 = -c01 * invdet;
		var _this__20 = c02 * invdet;
		var _this__01 = -c10 * invdet;
		var _this__11 = c11 * invdet;
		var _this__21 = -c12 * invdet;
		var _this__02 = c20 * invdet;
		var _this__12 = -c21 * invdet;
		var _this__22 = c22 * invdet;
		var value = screenPosition;
		var w = _this__02 * value.x + _this__12 * value.y + _this__22;
		var x = (_this__00 * value.x + _this__10 * value.y + _this__20) / w;
		var y = (_this__01 * value.x + _this__11 * value.y + _this__21) / w;
		return new kha_math_FastVector2(x,y);
	}
	,render: function(canvas) {
		if(!found_Scene.ready) {
			return;
		}
		found_object_Object.prototype.render.call(this,canvas);
		canvas.get_g2().set_color(-65536);
		var center = this.get_origin();
		canvas.get_g2().drawRect(center.x,center.y,this.offsetX,this.offsetX);
		canvas.get_g2().set_color(-1);
	}
	,__class__: found_object_Camera
	,__properties__: $extend(found_object_Object.prototype.__properties__,{get_origin:"get_origin"})
});
var found_object_Executor = function(p_field) {
	this.workers = [];
	this.sets = [];
	this.uids = [];
	this.datas = [];
	this.actions = [];
	this.field = "";
	this.threads = 2;
	if(kha_Scheduler.time() == 0) {
		found_tool_Log.warn("You cant create Executors before the Scheduler has been created.Solution: Create your executor in the new function of your class.",{ fileName : "found/object/Executor.hx", lineNumber : 21, className : "found.object.Executor", methodName : "new"});
	}
	this.field = p_field;
	found_object_Executor.executors.push(this);
};
$hxClasses["found.object.Executor"] = found_object_Executor;
found_object_Executor.__name__ = true;
found_object_Executor.prototype = {
	threads: null
	,field: null
	,actions: null
	,datas: null
	,uids: null
	,sets: null
	,workers: null
	,rest: null
	,set: function(data) {
		if(!found_Scene.ready || found_State.active._entities.length == 0) {
			return;
		}
		var modified = Reflect.field(found_object_Object,this.field);
		if(Object.prototype.hasOwnProperty.call(data.out,this.field)) {
			modified[data.uid] = Reflect.field(data.out,this.field);
		} else {
			modified[data.uid] = data.out;
		}
		data.set(data.out);
		if(found_App.editorui.inspector != null) {
			found_App.editorui.inspector.updateField(data.uid,this.field,modified[data.uid]);
		}
	}
	,add: function(func,data,uid,set) {
		this.actions.push(func);
		this.datas.push(data);
		this.uids.push(uid);
		this.sets.push(set);
	}
	,execute: function() {
		if(!found_Scene.ready || found_State.active._entities.length == 0) {
			return;
		}
		var _g = 0;
		var _g1 = this.actions.length;
		while(_g < _g1) {
			var i = _g++;
			this.set({ out : this.actions[i](this.datas[i]), uid : this.uids[i], set : this.sets[i]});
		}
		this.actions = [];
		this.datas = [];
		this.uids = [];
		this.sets = [];
	}
	,__class__: found_object_Executor
};
var found_tool_Log = function() { };
$hxClasses["found.tool.Log"] = found_tool_Log;
found_tool_Log.__name__ = true;
found_tool_Log.oldTrace = null;
found_tool_Log.warn = function(v,infos) {
	if(found_tool_Log.oldTrace == null) {
		found_tool_Log.initialize();
	}
	if(infos != null) {
		found_tool_Log.log(found_math_Cli.byellow + "WARNING: " + found_math_Cli.reset + Std.string(v),infos);
		if(infos.customParams == null) {
			infos.customParams = [];
		}
		infos.customParams.push("Warn");
		var _g = 0;
		var _g1 = found_tool_Log.customLogs;
		while(_g < _g1.length) {
			var logger = _g1[_g];
			++_g;
			logger(v,infos);
		}
	} else {
		found_tool_Log.log(found_math_Cli.byellow + "WARNING: " + found_math_Cli.reset + Std.string(v),{ fileName : "found/tool/Log.hx", lineNumber : 21, className : "found.tool.Log", methodName : "warn"});
	}
};
found_tool_Log.error = function(v,infos) {
	if(found_tool_Log.oldTrace == null) {
		found_tool_Log.initialize();
	}
	if(infos != null) {
		found_tool_Log.log(found_math_Cli.bred + "ERROR: " + found_math_Cli.reset + Std.string(v),infos);
		if(infos.customParams == null) {
			infos.customParams = [];
		}
		infos.customParams.push("Error");
		var _g = 0;
		var _g1 = found_tool_Log.customLogs;
		while(_g < _g1.length) {
			var logger = _g1[_g];
			++_g;
			logger(v,infos);
		}
	} else {
		found_tool_Log.log(found_math_Cli.bred + "ERROR: " + found_math_Cli.reset + Std.string(v),{ fileName : "found/tool/Log.hx", lineNumber : 37, className : "found.tool.Log", methodName : "error"});
	}
};
found_tool_Log.log = function(v,infos) {
	found_tool_Log.oldTrace(v,infos);
	var t = v;
	if(typeof(v) != "string" || t.indexOf("ERROR") == -1 && t.indexOf("WARNING") == -1) {
		var _g = 0;
		var _g1 = found_tool_Log.customLogs;
		while(_g < _g1.length) {
			var logger = _g1[_g];
			++_g;
			logger(v,infos);
		}
	}
};
found_tool_Log.initialize = function() {
	found_tool_Log.oldTrace = haxe_Log.trace;
	haxe_Log.trace = found_tool_Log.log;
};
found_tool_Log.addCustomLogging = function(logger) {
	if(found_tool_Log.oldTrace == null) {
		found_tool_Log.initialize();
	}
	found_tool_Log.customLogs.push(logger);
};
var found_tool_NodeEditor = function(ui,px,py,w,h) {
	this.nodeMenuTabHandle = zui_Handle.global.nest(12,null);
	this.nodeMenuWindowHandle = zui_Handle.global.nest(11,null);
	this.nodeCanvasWindowHandle = zui_Handle.global.nest(10,null);
	this.visible = false;
	this.setAll(px,py,w,h);
	ui.g.end();
	this.drawGrid();
	ui.g.begin(false);
};
$hxClasses["found.tool.NodeEditor"] = found_tool_NodeEditor;
found_tool_NodeEditor.__name__ = true;
found_tool_NodeEditor.__properties__ = {get_panY:"get_panY",get_panX:"get_panX"};
found_tool_NodeEditor.width = null;
found_tool_NodeEditor.height = null;
found_tool_NodeEditor.x = null;
found_tool_NodeEditor.y = null;
found_tool_NodeEditor.get_panX = function() {
	if(found_tool_NodeEditor.selectedNode != null) {
		var _this = found_tool_NodeEditor.selectedNode.nodes;
		return found_tool_NodeEditor.selectedNode.nodes.panX * (_this.scaleFactor * _this.zoom % 40) - 40;
	}
	return 0.0;
};
found_tool_NodeEditor.get_panY = function() {
	if(found_tool_NodeEditor.selectedNode != null) {
		var _this = found_tool_NodeEditor.selectedNode.nodes;
		return found_tool_NodeEditor.selectedNode.nodes.panY * (_this.scaleFactor * _this.zoom % 40) - 40;
	}
	return 0.0;
};
found_tool_NodeEditor.addCustomNode = function(section,node) {
	if(Object.prototype.hasOwnProperty.call(found_tool_NodeEditor.gameplayNodes.h,section)) {
		found_tool_NodeEditor.gameplayNodes.h[section].push(node);
	} else {
		found_tool_NodeEditor.gameplayNodes.h[section] = [node];
	}
};
found_tool_NodeEditor.getNodesArrayNames = function() {
	var names = [];
	var _g = 0;
	var _g1 = found_tool_NodeEditor.nodesArray;
	while(_g < _g1.length) {
		var nodes = _g1[_g];
		++_g;
		names.push(nodes.name);
	}
	return names;
};
found_tool_NodeEditor.pushNodeToSelectedGroup = function(tnode) {
	var valueX = found_tool_NodeEditor.get_panX();
	var valueY = found_tool_NodeEditor.get_panY();
	tnode.x = valueX * -1 + found_tool_NodeEditor.width * 0.5;
	tnode.y = valueY * -1 + found_tool_NodeEditor.height * 0.5;
	found_tool_NodeEditor.selectedNode.nodeCanvas.nodes.push(found_node_data_NodeCreator.createNode(tnode,found_tool_NodeEditor.selectedNode.nodes,found_tool_NodeEditor.selectedNode.nodeCanvas));
};
found_tool_NodeEditor.prototype = {
	visible: null
	,setAll: function(px,py,w,h) {
		found_tool_NodeEditor.x = px;
		found_tool_NodeEditor.y = py;
		found_tool_NodeEditor.width = w;
		found_tool_NodeEditor.height = h;
	}
	,nodeCanvasWindowHandle: null
	,nodeMenuWindowHandle: null
	,nodeMenuTabHandle: null
	,redraw: function() {
		this.nodeCanvasWindowHandle.redraws = this.nodeMenuWindowHandle.redraws = this.nodeMenuTabHandle.redraws = 2;
	}
	,render: function(ui) {
		if(!this.visible) {
			return;
		}
		var nodePanX = 0.0;
		var nodePanY = 0.0;
		if(found_tool_NodeEditor.selectedNode != null) {
			nodePanX += found_tool_NodeEditor.get_panX();
			nodePanY += found_tool_NodeEditor.get_panY();
			if(nodePanX > 0.0) {
				nodePanX = 0;
			} else if(Math.abs(nodePanX) > kha_System.windowWidth() - found_tool_NodeEditor.width) {
				nodePanX = -(kha_System.windowWidth() - found_tool_NodeEditor.width);
			}
			if(nodePanY > 0.0) {
				nodePanY = 0;
			} else if(Math.abs(nodePanY) > kha_System.windowHeight() - found_tool_NodeEditor.height) {
				nodePanY = -(kha_System.windowHeight() - found_tool_NodeEditor.height);
			}
			var updatedObjectList = found_State.active.getObjectNames();
			var updatedSpriteList = found_State.active.getObjectNames("sprite_object");
			var _g = 0;
			var _g1 = found_tool_NodeEditor.selectedNode.nodes.nodesSelected;
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				if(node.type == "GetObjectNode" || node.type == "GetRandomObjectNode") {
					node.buttons[0].data = updatedObjectList;
				} else if(node.type == "FlipSpriteNode") {
					node.buttons[0].data = updatedSpriteList;
				} else if(node.type == "GetPropNode") {
					var props = found_Trait.getProps(node.buttons[0].data[0]);
					var out = [];
					var _g2 = 0;
					while(_g2 < props.length) {
						var p = props[_g2];
						++_g2;
						out.push(p.split("~")[0]);
					}
					node.buttons[1].data = out;
				}
			}
		}
		if(ui.window(this.nodeCanvasWindowHandle,found_tool_NodeEditor.x,found_tool_NodeEditor.y,found_tool_NodeEditor.width,found_tool_NodeEditor.height)) {
			ui.g.set_color(-1);
			ui.g.drawImage(found_tool_NodeEditor.grid,nodePanX,nodePanY);
			var t = ui.t;
			ui.t = zui_Themes.dark;
			var oldS = ui.ops.scaleFactor;
			ui.setScale(ui.ops.scaleFactor * 1.5);
			this.renderNodes(ui);
			ui.t = t;
			ui.setScale(oldS);
		}
		this.renderNodesMenu(ui);
	}
	,renderNodes: function(ui) {
		if(found_tool_NodeEditor.selectedNode != null) {
			found_tool_NodeEditor.selectedNode.nodes.nodeCanvas(ui,found_tool_NodeEditor.selectedNode.nodeCanvas);
		}
	}
	,renderNodesMenu: function(ui) {
		if(found_tool_NodeEditor.selectedNode == null) {
			return;
		}
		var numTabs = 3;
		if(ui.window(this.nodeMenuWindowHandle,found_tool_NodeEditor.x,found_tool_NodeEditor.y,ui.t.ELEMENT_W * ui.ops.scaleFactor * 0.5 * numTabs | 0,found_tool_NodeEditor.height * 0.75 | 0,true)) {
			if(ui.tab(this.nodeMenuTabHandle,"Std")) {
				if(ui.panel(zui_Handle.global.nest(95,null),"Logic")) {
					if(ui.button("Gate")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_LogicNode.gate);
					}
					if(ui.button("Branch")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_LogicNode.branch);
					}
					if(ui.button("Is False")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_LogicNode.isFalse);
					}
					if(ui.button("Is True")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_LogicNode.isTrue);
					}
					if(ui.button("While")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_LogicNode.whileN);
					}
				}
				if(ui.panel(zui_Handle.global.nest(96,null),"Variable")) {
					if(ui.button("String")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_VariableNode.string);
					}
					if(ui.button("Float")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_VariableNode.float);
					}
					if(ui.button("Int")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_VariableNode.int);
					}
					if(ui.button("Boolean")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_VariableNode.boolean);
					}
					if(ui.button("Vector2")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_VariableNode.vector2);
					}
					if(ui.button("GetProp")) {
						var def = Reflect.copy(found_node_data_VariableNode.getProp);
						var ext = "_vhx";
						def.buttons[0].data = [found_tool_NodeEditor.selectedNode.name + ext];
						found_tool_NodeEditor.pushNodeToSelectedGroup(def);
					}
				}
				if(ui.panel(zui_Handle.global.nest(97,null),"Std")) {
					if(ui.button("Print")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_StdNode.print);
					}
					if(ui.button("Parse Int")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_StdNode.parseInt);
					}
					if(ui.button("Parse Float")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_StdNode.parseFloat);
					}
					if(ui.button("Float To Int")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_StdNode.floatToInt);
					}
				}
				if(ui.panel(zui_Handle.global.nest(98,null),"Math")) {
					if(ui.button("Maths")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_MathNode.maths);
					}
					if(ui.button("Rad to Deg")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_MathNode.radtodeg);
					}
					if(ui.button("Deg to Rad")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_MathNode.degtorad);
					}
					if(ui.button("Random (Int)")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_MathNode.randi);
					}
					if(ui.button("Random (Float)")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_MathNode.randf);
					}
				}
			}
			if(ui.tab(this.nodeMenuTabHandle,"Foundry2d")) {
				if(ui.panel(zui_Handle.global.nest(99,null),"Event")) {
					if(ui.button("On Add")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.onAddNode);
					}
					if(ui.button("On Init")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.onInitNode);
					}
					if(ui.button("On Update")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.onUpdateNode);
					}
					if(ui.button("MultiEvent")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.multiEventNode);
					}
					if(ui.button("Event Listener")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.eventListenNode);
					}
					if(ui.button("Send Event")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.sendEventNode);
					}
				}
				if(ui.panel(zui_Handle.global.nest(100,null),"Input")) {
					if(ui.button("On Mouse")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.onMouseNode);
					}
					if(ui.button("Mouse Coord")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.mouseCoordNode);
					}
					if(ui.button("On Keyboard")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.onKeyboardNode);
					}
					if(ui.button("On Gamepad Axis")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.onGamepadAxisInputNode);
					}
					if(ui.button("On Gamepad Button")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.onGamepadButtonInputNode);
					}
				}
				if(ui.panel(zui_Handle.global.nest(101,null),"Math")) {
					if(ui.button("Split Vec2")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.splitVec2Node);
					}
					if(ui.button("Join Vec2")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.joinVec2Node);
					}
					if(ui.button("Add Vec2")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.addVec2Node);
					}
					if(ui.button("Multiply Vec2")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.multiplyVec2Node);
					}
					if(ui.button("Multiply 2 Vec2")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.multiplyVec2sNode);
					}
				}
				if(ui.panel(zui_Handle.global.nest(102,null),"Time")) {
					if(ui.button("Every X Seconds")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.everyXNode);
					}
					if(ui.button("Cooldown X Seconds")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.cooldownNode);
					}
				}
				if(ui.panel(zui_Handle.global.nest(103,null),"Transform")) {
					if(ui.button("Get Position")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.getPositionNode);
					}
					if(ui.button("Get Center")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.getCenterNode);
					}
					if(ui.button("Get Forward")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.getForwardNode);
					}
					if(ui.button("Get Width/Height")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.getWidthHeightNode);
					}
					if(ui.button("Set Object Location")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.setObjectLocationNode);
					}
					if(ui.button("Get Rotation")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.getRotationNode);
					}
					if(ui.button("Translate Object")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.translateObjectNode);
					}
					if(ui.button("Rotate Toward Position")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.rotateTowardPositionNode);
					}
				}
				if(ui.panel(zui_Handle.global.nest(104,null),"Object")) {
					if(ui.button("Get Object")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.getObjectNode);
					}
					if(ui.button("Spawn Object")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.spawnObjectNode);
					}
					if(ui.button("Is Object Outside View")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.isObjectOutsideViewNode);
					}
					if(ui.button("Destroy Object")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.destroyObjectNode);
					}
					if(ui.button("Destroy Object Outside View")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.destroyObjectOutsideViewNode);
					}
					if(ui.button("Get Random Object from list")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.getRandomObjectNode);
					}
				}
				if(ui.panel(zui_Handle.global.nest(105,null),"Sprite")) {
					if(ui.button("Flip Sprite")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.flipSpriteNode);
					}
				}
				if(ui.panel(zui_Handle.global.nest(106,null),"Physics")) {
					if(ui.button("On Collision Event")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.onCollisionNode);
					}
					if(ui.button("Apply Force To Rigidbody")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.applyForceToRigidbodyNode);
					}
					if(ui.button("Apply Impulse To Rigidbody")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.applyImpulseToRigidbodyNode);
					}
				}
				if(ui.panel(zui_Handle.global.nest(107,null),"Controllers")) {
					if(ui.button("Top-down Controller")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.topDownControllerNode);
					}
					if(ui.button("Platformer 2D Controller")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.platformer2DControllerNode);
					}
				}
				if(ui.panel(zui_Handle.global.nest(108,null),"Movement")) {
					if(ui.button("Bullet Movement")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.bulletMovementNode);
					}
				}
				if(ui.panel(zui_Handle.global.nest(109,null),"Camera")) {
					if(ui.button("Set Camera Position")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.setCameraTargetPositionNode);
					}
					if(ui.button("Set Camera Follow Target")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.setCameraFollowTargetNode);
					}
				}
				if(ui.panel(zui_Handle.global.nest(110,null),"Animation")) {
					if(ui.button("Play Animation")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.playAnimationNode);
					}
				}
				if(ui.panel(zui_Handle.global.nest(111,null),"Audio")) {
					if(ui.button("Play Music")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.playMusicNode);
					}
					if(ui.button("Play Sfx")) {
						found_tool_NodeEditor.pushNodeToSelectedGroup(found_node_data_FoundryNode.playSfxNode);
					}
				}
			}
			if(ui.tab(this.nodeMenuTabHandle,"Custom")) {
				var sec = haxe_ds_StringMap.keysIterator(found_tool_NodeEditor.gameplayNodes.h);
				while(sec.hasNext()) {
					var sec1 = sec.next();
					if(ui.panel(zui_Handle.global.nest(112,null),sec1)) {
						var nodes = found_tool_NodeEditor.gameplayNodes.h[sec1];
						var _g = 0;
						while(_g < nodes.length) {
							var node = nodes[_g];
							++_g;
							if(ui.button(node.name)) {
								found_tool_NodeEditor.pushNodeToSelectedGroup(node);
							}
						}
					}
				}
			}
		}
	}
	,drawGrid: function() {
		var doubleGridSize = found_tool_NodeEditor.gridSize * 2;
		var ww = kha_System.windowWidth();
		var wh = kha_System.windowHeight();
		var w = ww + doubleGridSize * 2;
		var h = wh + doubleGridSize * 2;
		found_tool_NodeEditor.grid = kha_Image.createRenderTarget(w,h);
		found_tool_NodeEditor.grid.get_g2().begin(true,-14408668);
		found_tool_NodeEditor.grid.get_g2().set_color(-14671840);
		found_tool_NodeEditor.grid.get_g2().fillRect(0,0,w,h);
		var _g = 0;
		var _g1 = (h / doubleGridSize | 0) + 1;
		while(_g < _g1) {
			var i = _g++;
			found_tool_NodeEditor.grid.get_g2().set_color(-14145496);
			found_tool_NodeEditor.grid.get_g2().drawLine(0,i * doubleGridSize,w,i * doubleGridSize,2);
			found_tool_NodeEditor.grid.get_g2().set_color(-13487566);
			found_tool_NodeEditor.grid.get_g2().drawLine(0,i * doubleGridSize + found_tool_NodeEditor.gridSize,w,i * doubleGridSize + found_tool_NodeEditor.gridSize);
		}
		var _g = 0;
		var _g1 = (w / doubleGridSize | 0) + 1;
		while(_g < _g1) {
			var i = _g++;
			found_tool_NodeEditor.grid.get_g2().set_color(-14145496);
			found_tool_NodeEditor.grid.get_g2().drawLine(i * doubleGridSize,0,i * doubleGridSize,h,2);
			found_tool_NodeEditor.grid.get_g2().set_color(-13487566);
			found_tool_NodeEditor.grid.get_g2().drawLine(i * doubleGridSize + found_tool_NodeEditor.gridSize,0,i * doubleGridSize + found_tool_NodeEditor.gridSize,h);
		}
		found_tool_NodeEditor.grid.get_g2().end();
	}
	,__class__: found_tool_NodeEditor
};
var found_tool_OneOf = {};
found_tool_OneOf.fromA = function(a) {
	return haxe_ds_Either.Left(a);
};
found_tool_OneOf.fromB = function(b) {
	return haxe_ds_Either.Right(b);
};
found_tool_OneOf.toA = function(this1) {
	if(this1._hx_index == 0) {
		var a = this1.v;
		return a;
	} else {
		return null;
	}
};
found_tool_OneOf.toB = function(this1) {
	if(this1._hx_index == 1) {
		var b = this1.v;
		return b;
	} else {
		return null;
	}
};
var found_tool_TileEditorState = function() { };
$hxClasses["found.tool.TileEditorState"] = found_tool_TileEditorState;
found_tool_TileEditorState.__name__ = true;
var found_tool_TileEditor = function(visible) {
	if(visible == null) {
		visible = true;
	}
	this.endHeight = 0.0;
	this.limit = 10048;
	this.editorStateHandle = zui_Handle.global.nest(45,null);
	this.mapHeightHandle = zui_Handle.global.nest(42,null);
	this.mapWidthHandle = zui_Handle.global.nest(41,null);
	this.tilsheetListHandle = zui_Handle.global.nest(40,null);
	this.tilesheets = [];
	this.editorWindowHandle = zui_Handle.global.nest(38,null);
	this.state = found_tool_TileEditorState.Draw;
	this.canDrawTile = false;
	this.unusedIds = [];
	this.tileHandle = zui_Handle.global.nest(46,{ value : 0});
	this.tileSelected = null;
	this.map = null;
	this.y = 256;
	this.x = 512;
	this.visible = visible;
	found_tool_TileEditor.ui = new zui_Zui({ font : kha_Assets.fonts.font_default, autoNotifyInput : false, theme : zui_Canvas.themes[0]});
	this.width = found_Found.WIDTH * 0.175 | 0;
	this.height = found_Found.HEIGHT * 0.8 | 0;
	this.tilesheetListops = { addLabel : "New Tilesheet", addCb : $bind(this,this.addTilesheet), removeCb : $bind(this,this.removeTilesheet), getNameCb : $bind(this,this.getTilesheetName), setNameCb : $bind(this,this.setTilesheetName), itemDrawCb : $bind(this,this.drawTilesheetItem), showRadio : true};
	kha_input_Mouse.get().notify($bind(this,this.onMouseDownTE),$bind(this,this.onMouseUpTE),$bind(this,this.onMouseMoveTE),$bind(this,this.onMouseWheelTE));
	kha_input_Keyboard.get().notify($bind(this,this.onKeyDownTE),$bind(this,this.onKeyUpTE),$bind(this,this.onKeyPressTE));
	this.mouse = found_Input.getMouse();
};
$hxClasses["found.tool.TileEditor"] = found_tool_TileEditor;
found_tool_TileEditor.__name__ = true;
found_tool_TileEditor.ui = null;
found_tool_TileEditor.prototype = {
	width: null
	,height: null
	,x: null
	,y: null
	,visible: null
	,curTile: null
	,tilesheetListops: null
	,map: null
	,tileSelected: null
	,tileHandle: null
	,unusedIds: null
	,canDrawTile: null
	,state: null
	,editorWindowHandle: null
	,tilesheets: null
	,tilsheetListHandle: null
	,mouse: null
	,redraw: function() {
		this.editorWindowHandle.redraws = 2;
	}
	,mapWidthHandle: null
	,mapHeightHandle: null
	,editorStateHandle: null
	,limit: null
	,render: function(canvas) {
		if(!this.visible || found_tool_TileEditor.selectedTilemapIdIndex < 0 || this.mouse == null) {
			if(found_Input.getMouse().hidden) {
				found_Input.getMouse().show();
			}
			return;
		}
		found_tool_TileEditor.ui.begin(canvas.get_g2());
		found_tool_TileEditor.ui.enabled = !zui_Popup.show;
		if(this.map == null) {
			this.map = found_State.active._entities[found_tool_TileEditor.tilemapIds[found_tool_TileEditor.selectedTilemapIdIndex]];
			this.curTile = this.map.tiles.h[0];
			var raw = this.map.get_raw();
			this.tilesheets = raw.images;
		}
		var newSelection = found_tool_TileEditor.selectedTilemapIdIndex;
		var vec = new kha_math_Vector2();
		if(found_tool_TileEditor.ui.window(this.editorWindowHandle,this.x,this.y,this.width,this.height,true)) {
			this.endHeight = found_tool_TileEditor.ui._y;
			if(found_tool_TileEditor.ui.panel(zui_Handle.global.nest(39,{ selected : true}),"Tilemap editor")) {
				var changed = false;
				found_tool_TileEditor.ui.indent();
				found_tool_TileEditor.ui.text("Tilesheets: ");
				found_tool_TileEditor.ui.indent();
				var lastSelectedTilesheet = this.tilsheetListHandle.nest(0).position;
				var tilesheetSelected = zui_Ext.list(found_tool_TileEditor.ui,this.tilsheetListHandle,this.tilesheets,this.tilesheetListops);
				found_tool_TileEditor.ui.unindent();
				if(lastSelectedTilesheet != tilesheetSelected) {
					this.curTile = this.map.pivotTiles[tilesheetSelected];
					this.tileSelected = null;
				}
				this.mapWidthHandle.value = this.map.w;
				var w = zui_Ext.floatInput(found_tool_TileEditor.ui,this.mapWidthHandle,"Map Width");
				if(this.mapWidthHandle.changed) {
					var value = w;
					var grid = this.map.tw;
					var x;
					if(value % grid == 0) {
						x = value;
					} else {
						value += grid - Math.floor(value) % grid;
						x = value;
					}
					var w = x | 0;
					if(w > this.limit) {
						w = this.limit;
					}
					this.resizeMapdata(w,this.map.h);
					changed = true;
				}
				this.mapHeightHandle.value = this.map.h;
				var h = zui_Ext.floatInput(found_tool_TileEditor.ui,this.mapHeightHandle,"Map Height");
				if(this.mapHeightHandle.changed) {
					var value = h;
					var grid = this.map.tw;
					var x;
					if(value % grid == 0) {
						x = value;
					} else {
						value += grid - Math.floor(value) % grid;
						x = value;
					}
					var h = x | 0;
					if(h > this.limit) {
						h = this.limit;
					}
					this.resizeMapdata(this.map.w,h);
					changed = true;
				}
				if(found_tool_TileEditor.ui.button("Change Tilemap Grid Size")) {
					GridSizeDialog.open(this.map);
				}
				this.editorStateHandle.position = this.state;
				found_tool_TileEditor.ui.combo(this.editorStateHandle,found_tool_TileEditor.editorStates,"Draw State",true);
				if(this.editorStateHandle.changed) {
					this.state = this.editorStateHandle.position;
				}
				if(this.curTile != null) {
					var r = found_tool_TileEditor.ui.curRatio == -1 ? 1.0 : found_tool_TileEditor.ui.ratios[found_tool_TileEditor.ui.curRatio];
					var px = found_tool_TileEditor.ui._x + found_tool_TileEditor.ui.buttonOffsetY;
					var py = found_tool_TileEditor.ui._y;
					var curImg = this.curTile.get_data().image;
					var state = found_tool_TileEditor.ui.image(curImg);
					var scroll = found_tool_TileEditor.ui.currentWindow != null && found_tool_TileEditor.ui.currentWindow.scrollEnabled;
					if(!scroll) {
						var _this = found_tool_TileEditor.ui;
						px += (_this.t.SCROLL_W * _this.ops.scaleFactor | 0) * r * 0.5;
					}
					var ratio = Math.abs((py - found_tool_TileEditor.ui._y) / curImg.get_height());
					var invRatio = Math.abs(curImg.get_height() / (py - found_tool_TileEditor.ui._y));
					found_tool_TileEditor.ui.g.set_color(kha_Color.fromBytes(0,0,200,128));
					var scrollOffset = found_tool_TileEditor.ui.currentWindow.scrollOffset;
					if(this.tileSelected == null) {
						this.tileSelected = { index : 0, x : px, y : py, w : this.map.tw * ratio, h : this.map.th * ratio};
						found_tool_TileEditor.ui.g.fillRect(this.tileSelected.x,this.tileSelected.y + scrollOffset,this.tileSelected.w,this.tileSelected.h);
					} else {
						found_tool_TileEditor.ui.g.fillRect(this.tileSelected.x,this.tileSelected.y + scrollOffset,this.tileSelected.w,this.tileSelected.h);
					}
					py -= scrollOffset * 1.5;
					if(state == 2 || this.tileHandle.changed) {
						var x = Math.abs(found_tool_TileEditor.ui._windowX - found_tool_TileEditor.ui.inputX);
						var y = Math.abs(found_tool_TileEditor.ui._windowY - found_tool_TileEditor.ui.inputY);
						var imgX = (x - px) * invRatio;
						var imgY = (y - py) * invRatio;
						var grid = this.map.tw;
						var value = imgX;
						if(value % grid == 0) {
							imgX = value;
						} else {
							value += grid - Math.floor(value) % grid;
							imgX = value;
						}
						var value = imgY;
						var imgY1;
						if(value % grid == 0) {
							imgY1 = value;
						} else {
							value += grid - Math.floor(value) % grid;
							imgY1 = value;
						}
						imgY = imgY1 - grid;
						var value = curImg.get_width();
						var imgW;
						if(value % grid == 0) {
							imgW = value;
						} else {
							value += grid - Math.floor(value) % grid;
							imgW = value;
						}
						var value = curImg.get_height();
						var imgH;
						if(value % grid == 0) {
							imgH = value;
						} else {
							value += grid - Math.floor(value) % grid;
							imgH = value;
						}
						var widthIndicies = imgW / this.map.tw | 0;
						var index = this.tileHandle.value | 0;
						if(!this.tileHandle.changed) {
							index = widthIndicies - (imgW - imgX) / grid | 0;
							index += widthIndicies * (imgH / this.map.tw - (imgH - imgY) / grid | 0) - 1;
						}
						x = (index * grid | 0) % imgW * ratio + px;
						y = Math.floor(index * grid / imgW) * this.map.th * ratio + py;
						this.tileSelected = { index : index, x : x, y : y, w : this.map.tw * ratio, h : this.map.th * ratio};
						var pivotTile = this.map.pivotTiles[this.curTile.dataId];
						if(!this.map.tiles.h.hasOwnProperty(pivotTile.tileId + index)) {
							var id = pivotTile.tileId + index;
							pivotTile.raw.usedIds.push(id);
							this.unusedIds.push(id);
							this.curTile = found_anim_Tile.createTile(this.map,Reflect.copy(pivotTile.raw),id);
						} else if(pivotTile.tileId + this.tileSelected.index != this.curTile.tileId) {
							this.curTile = this.map.tiles.h[pivotTile.tileId + this.tileSelected.index];
						}
					}
					this.tileHandle.value = this.tileSelected.index;
					found_tool_TileEditor.ui.slider(this.tileHandle,"Selected Tile",0,this.currentMaxTiles() - 1);
					if(this.tileHandle.changed) {
						var index = Math.floor(this.tileHandle.value);
						var x = (index * this.map.tw | 0) % curImg.get_width() * ratio + px;
						var y = Math.floor(index * this.map.tw / curImg.get_width()) * this.map.th * ratio + py;
						this.tileSelected = { index : index, x : x, y : y, w : this.map.tw * ratio, h : this.map.th * ratio};
						changed = true;
					}
					found_tool_TileEditor.ui.g.set_color(-1);
					if(found_State.active.physics_world != null) {
						if(found_tool_TileEditor.ui.button("Edit Selected Tile Collisions") && this.curTile != null && !this.tileHandle.changed) {
							if(this.curTile.raw.rigidBodies == null) {
								this.curTile.raw.rigidBodies = new haxe_ds_IntMap();
							}
							if(!this.curTile.raw.rigidBodies.h.hasOwnProperty(this.curTile.tileId)) {
								if(!this.curTile.raw.rigidBodies.h.hasOwnProperty(this.curTile.tileId)) {
									var body = echo_Body.get_defaults();
									body.mass = 0;
									body.shapes = [];
									this.curTile.raw.rigidBodies.h[this.curTile.tileId] = body;
								}
							}
							CollisionEditorDialog.open(null,this.curTile);
							changed = true;
						}
					} else {
						found_tool_TileEditor.ui.text("Tile collisions:");
						if(found_tool_TileEditor.ui.button("Create Physics World")) {
							found_App.editorui.inspector.selectScene();
						}
					}
				}
				if(changed) {
					EditorHierarchy.getInstance().makeDirty();
					this.map.dataChanged = true;
				}
				found_tool_TileEditor.ui.unindent();
			}
			this.endHeight = Math.abs(this.endHeight - found_tool_TileEditor.ui._y);
		}
		this.canDrawTile = found_tool_TileEditor.ui.dragHandle != this.editorWindowHandle && !zui_Popup.show && this.isInTilemap() && this.curTile != null;
		found_tool_TileEditor.ui.end();
		if(this.canDrawTile) {
			found_Input.getMouse().hide();
			canvas.get_g2().begin(false,0);
			canvas.get_g2().set_color(-1);
			canvas.get_g2().drawScaledImage(kha_Assets.images.basic,this.mouse.x,this.mouse.y,10,10);
			vec.x = this.mouse.x;
			vec.y = this.mouse.y;
			var cam = found_State.active.cam;
			this.curTile.render(canvas,vec,kha_Color.fromBytes(255,255,255,128),new kha_math_Vector2(cam.zoom,cam.zoom),false);
			canvas.get_g2().end();
		} else {
			found_Input.getMouse().show();
		}
		if(found_tool_TileEditor.selectedTilemapIdIndex != newSelection) {
			this.map = null;
			this.curTile = null;
		}
	}
	,resizeMapdata: function(w,h) {
		var tiles = [];
		var _g = 0;
		var _g1 = this.map.data.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.map.data[i] != -1) {
				tiles.push({ pos : new kha_math_Vector2(i % this.map.w * this.map.tw,(i / this.map.w | 0) * this.map.th), tileId : this.map.data[i]});
			}
		}
		if(this.map.w != w || this.map.h != h) {
			this.map.set_w(w);
			this.map.set_h(h);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = w * h;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(-1);
		}
		this.map.data = _g;
		var rawData = this.map.get_raw();
		rawData.map.h = { };
		var _g = 0;
		while(_g < tiles.length) {
			var tile = tiles[_g];
			++_g;
			var _this = this.map;
			var tx = tile.pos.x / _this.tw | 0;
			var ty = tile.pos.y / _this.th | 0;
			var index = tx < 0 ? -1 : tx >= _this.w ? -1 : ty < 0 ? -1 : ty >= _this.h ? -1 : ty * _this.w + tx;
			this.map.data[index] = tile.tileId;
			if(rawData.map.h.hasOwnProperty(tile.tileId)) {
				rawData.map.h[tile.tileId].push(index);
			} else {
				rawData.map.h[tile.tileId] = [index];
			}
		}
		rawData.width = w;
		rawData.height = h;
	}
	,currentMaxTiles: function(tileToGetMaxOf) {
		var curTile = tileToGetMaxOf != null ? tileToGetMaxOf : this.curTile;
		return (curTile.get_data().image.get_width() / curTile.map.tw | 0) * (curTile.get_data().image.get_height() / curTile.map.th | 0);
	}
	,drawTilesheetItem: function(handle,index) {
		if(index == -1) {
			return;
		}
		var data = this.tilesheets[index];
		var imagePathHandle = zui_Handle.global.nest(55,null);
		imagePathHandle.text = data.imagePath;
		found_tool_TileEditor.ui.indent();
		found_tool_TileEditor.ui.row([0.8,0.2]);
		var path = found_tool_TileEditor.ui.textInput(imagePathHandle);
		if(found_tool_TileEditor.ui.button("...")) {
			FileBrowserDialog.open(function(path) {
				if(path == "") {
					return;
				}
			});
		}
		if(imagePathHandle.changed) {
			data.imagePath = path;
		}
		found_tool_TileEditor.ui.unindent();
	}
	,getTilesheetName: function(index) {
		return this.tilesheets[index].name;
	}
	,setTilesheetName: function(index,name) {
		if(name == "" || index == -1) {
			return;
		}
		this.tilesheets[index].name = name;
	}
	,addTilesheet: function(title) {
		var _gthis = this;
		FileBrowserDialog.open(function(path) {
			if(path == "") {
				return;
			}
			found_data_Data.getImage(path,function(image) {
				var tilesheet = found_data_Creator.createType(title,"sprite_object");
				var curPivot = _gthis.map.pivotTiles[_gthis.map.pivotTiles.length - 1];
				var originId = curPivot != null ? _gthis.currentMaxTiles(curPivot) + curPivot.tileId : 0;
				tilesheet.id = originId;
				tilesheet.usedIds = [originId];
				tilesheet.width = image.get_width();
				tilesheet.height = image.get_height();
				tilesheet.tileWidth = _gthis.map.tw;
				tilesheet.tileHeight = _gthis.map.th;
				tilesheet.imagePath = path;
				_gthis.tilesheets.push(tilesheet);
				haxe_Log.trace(tilesheet,{ fileName : "found/tool/TileEditor.hx", lineNumber : 364, className : "found.tool.TileEditor", methodName : "addTilesheet"});
				_gthis.tileSelected = null;
				var tile = found_anim_Tile.createTile(_gthis.map,tilesheet,originId,true);
				if(_gthis.curTile == null) {
					_gthis.curTile = tile;
					_gthis.tilsheetListHandle.nest(0).position = -1;
				}
				_gthis.map.dataChanged = true;
			});
		});
	}
	,removeTilesheet: function(index) {
		this.tilesheets.splice(index,1);
		var tile = this.map.pivotTiles[index];
		tile.map.removeBodies(found_State.active);
		var indicies = [];
		var _g = tile.tileId;
		var _g1 = tile.tileId + this.currentMaxTiles(tile);
		while(_g < _g1) {
			var i = _g++;
			this.map.tiles.remove(i);
			indicies.push(i);
		}
		var _g = 0;
		var _g1 = this.map.data.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = indicies.length;
			while(_g2 < _g3) {
				var y = _g2++;
				if(indicies[y] == this.map.data[i]) {
					this.map.data[i] = -1;
				}
			}
		}
		this.map.pivotTiles.splice(index,1);
		this.map.imageData.splice(index,1);
		if(this.curTile != null && this.curTile.dataId == index) {
			this.curTile = null;
		}
	}
	,getTilePos: function() {
		var px = 0.0;
		var py = 0.0;
		var addX = this.map.get_position().x > 0 ? -this.map.get_position().x : Math.abs(this.map.get_position().x);
		var addY = this.map.get_position().y > 0 ? -this.map.get_position().y : Math.abs(this.map.get_position().y);
		var pos = found_State.active.cam.screenToWorld(new kha_math_Vector2(this.mouse.x,this.mouse.y));
		px = Math.abs(pos.x) < found_Found.GRID * 0.75 ? pos.x - this.curTile._w * 2 : pos.x - this.curTile._w;
		py = Math.abs(pos.y) < found_Found.GRID * 0.75 ? pos.y - this.curTile._h * 2 : pos.y - this.curTile._h;
		px = Math.floor(px + addX);
		var value = px;
		var grid = found_Found.GRID;
		if(value % grid == 0) {
			px = value;
		} else {
			value += grid - Math.floor(value) % grid;
			px = value;
		}
		py = Math.floor(py + addY);
		var value = py;
		var grid = found_Found.GRID;
		if(value % grid == 0) {
			py = value;
		} else {
			value += grid - Math.floor(value) % grid;
			py = value;
		}
		var x = px;
		var y = py;
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		var this1 = new kha_math_FastVector2(x,y);
		return this1;
	}
	,addTile: function() {
		if(!this.visible || found_tool_TileEditor.selectedTilemapIdIndex < 0 || !this.canDrawTile) {
			return;
		}
		var _g = 0;
		var _g1 = this.unusedIds.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.curTile.tileId == this.unusedIds[i]) {
				this.unusedIds.splice(i,1);
				break;
			}
		}
		var pos = this.getTilePos();
		var _this = this.map;
		var pos1 = pos;
		var tx = pos1.x / _this.tw | 0;
		var ty = pos1.y / _this.th | 0;
		var index = tx < 0 ? -1 : tx >= _this.w ? -1 : ty < 0 ? -1 : ty >= _this.h ? -1 : ty * _this.w + tx;
		if(index > -1 && this.curTile.tileId != null) {
			var lastId = this.map.data[index];
			var changed = false;
			var rawData = this.map.get_raw();
			if(this.state == found_tool_TileEditorState.Draw) {
				this.map.data[index] = this.curTile.tileId;
				if(rawData.map.h.hasOwnProperty(this.curTile.tileId)) {
					var indicies = rawData.map.h[this.curTile.tileId];
					if(indicies[indicies.length - 1] == index) {
						return;
					}
					indicies.push(index);
				} else {
					rawData.map.h[this.curTile.tileId] = [index];
				}
				if(this.curTile.raw.rigidBodies != null && this.curTile.raw.rigidBodies.h.hasOwnProperty(this.curTile.tileId)) {
					var body = this.curTile.raw.rigidBodies.h[this.curTile.tileId];
					body.x = index % this.map.w * this.map.tw + this.map.get_position().x;
					body.y = (index / this.map.w | 0) * this.map.th + this.map.get_position().y;
					var addBody = true;
					var _g = 0;
					var _g1 = this.curTile.bodies;
					while(_g < _g1.length) {
						var bod = _g1[_g];
						++_g;
						if(bod.frame.get_offset().x == body.x && bod.frame.get_offset().y == body.y) {
							addBody = false;
							break;
						}
					}
					if(addBody) {
						this.curTile.bodies.push(found_State.active.physics_world.add(new echo_Body(body)));
					}
				}
				changed = true;
			}
			if(this.state == found_tool_TileEditorState.Erase && lastId != -1) {
				this.map.data[index] = -1;
				var arr = rawData.map.h[lastId];
				var bodies = this.map.tiles.h[lastId].bodies;
				var body = null;
				var _g = 0;
				var _g1 = arr.length;
				while(_g < _g1) {
					var i = _g++;
					if(arr[i] == index) {
						arr.splice(i,1);
						body = bodies.splice(i,1)[0];
					}
				}
				if(found_State.active.physics_world != null && body != null) {
					found_State.active.physics_world.remove(body);
					body.dispose();
				}
				changed = true;
			}
			if(changed) {
				EditorHierarchy.getInstance().makeDirty();
				this.map.dataChanged = true;
			}
		}
	}
	,selectTilemap: function(uid) {
		if(uid < 0) {
			found_tool_TileEditor.selectedTilemapIdIndex = -1;
			this.map = null;
			return;
		}
		found_tool_TileEditor.selectedTilemapIdIndex = -1;
		var _g = 0;
		var _g1 = found_tool_TileEditor.tilemapIds.length;
		while(_g < _g1) {
			var i = _g++;
			if(found_tool_TileEditor.tilemapIds[i] == uid) {
				found_tool_TileEditor.selectedTilemapIdIndex = i;
			}
		}
		if(found_tool_TileEditor.selectedTilemapIdIndex == -1) {
			found_tool_TileEditor.selectedTilemapIdIndex = found_tool_TileEditor.tilemapIds.push(uid) - 1;
		}
	}
	,endHeight: null
	,isInTilemap: function() {
		var pos = found_State.active.cam.screenToWorld(new kha_math_Vector2(this.mouse.x,this.mouse.y));
		var x = this.map.get_position().x;
		var y = this.map.get_position().y;
		var w = this.map.get_width();
		var h = this.map.get_height();
		var out = pos.x > x && pos.x < x + w && pos.y > y && pos.y < y + h && (this.mouse.y < found_tool_TileEditor.ui._windowY || this.mouse.y > found_tool_TileEditor.ui._windowY + this.endHeight || this.mouse.x < found_tool_TileEditor.ui._windowX || this.mouse.x > found_tool_TileEditor.ui._windowX + this.width);
		return out;
	}
	,onMouseDownTE: function(button,x,y) {
		found_tool_TileEditor.ui.onMouseDown(button,x,y);
	}
	,onMouseUpTE: function(button,x,y) {
		found_tool_TileEditor.ui.onMouseUp(button,x,y);
	}
	,onMouseMoveTE: function(x,y,movementX,movementY) {
		found_tool_TileEditor.ui.onMouseMove(x,y,movementX,movementY);
	}
	,onMouseWheelTE: function(delta) {
		found_tool_TileEditor.ui.onMouseWheel(delta);
	}
	,onKeyDownTE: function(code) {
		found_tool_TileEditor.ui.onKeyDown(code);
	}
	,onKeyUpTE: function(code) {
		found_tool_TileEditor.ui.onKeyUp(code);
	}
	,onKeyPressTE: function(char) {
		found_tool_TileEditor.ui.onKeyPress(char);
	}
	,__class__: found_tool_TileEditor
};
var found_trait_TestScript = function() {
	var _gthis = this;
	found_Trait.call(this);
	this.notifyOnInit(function() {
		_gthis.object.onCollision({ tileId : 70, objectName : "Tilemap", onEnter : $bind(_gthis,_gthis.onCollisionEnter)});
	});
};
$hxClasses["found.trait.TestScript"] = found_trait_TestScript;
found_trait_TestScript.__name__ = true;
found_trait_TestScript.__super__ = found_Trait;
found_trait_TestScript.prototype = $extend(found_Trait.prototype,{
	onCollisionEnter: function(body,otherBody,data) {
		if(body == this.object.body) {
			haxe_Log.trace(body.frame.get_offset().x + " " + body.frame.get_offset().y + "x Y from current Object",{ fileName : "found/trait/TestScript.hx", lineNumber : 15, className : "found.trait.TestScript", methodName : "onCollisionEnter"});
		}
		haxe_Log.trace("Collided on spikes",{ fileName : "found/trait/TestScript.hx", lineNumber : 17, className : "found.trait.TestScript", methodName : "onCollisionEnter"});
	}
	,__class__: found_trait_TestScript
});
var found_trait_internal_Arrows = function() {
	this.vPos = new kha_math_Vector2();
	this.hPos = new kha_math_Vector2();
	this.rectPos = new kha_math_Vector2();
	this.visible = false;
	found_Trait.call(this);
	this.mouse = found_Input.getMouse();
	this.notifyOnRender2D($bind(this,this.render));
};
$hxClasses["found.trait.internal.Arrows"] = found_trait_internal_Arrows;
found_trait_internal_Arrows.__name__ = true;
found_trait_internal_Arrows.__properties__ = {get_instance:"get_instance"};
found_trait_internal_Arrows.instance = null;
found_trait_internal_Arrows.get_instance = function() {
	if(found_trait_internal_Arrows.instance == null) {
		found_trait_internal_Arrows.instance = new found_trait_internal_Arrows();
	}
	return found_trait_internal_Arrows.instance;
};
found_trait_internal_Arrows.__super__ = found_Trait;
found_trait_internal_Arrows.prototype = $extend(found_Trait.prototype,{
	visible: null
	,mouse: null
	,rectSize: null
	,height: null
	,width: null
	,rectPos: null
	,hPos: null
	,vPos: null
	,update: function() {
		var x = this.object.get_position().x;
		var y = this.object.get_position().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var pos_x = x;
		var pos_y = y;
		var mpos = found_State.active.cam.screenToWorld(new kha_math_Vector2(this.mouse.x,this.mouse.y));
		var vec = this.hPos;
		var x = pos_x + vec.x;
		var y = pos_y + vec.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var hpos_x = x;
		var hpos_y = y;
		var isDown = this.mouse.down("left");
		if(isDown && mpos.x > hpos_x && mpos.x < hpos_x + this.width && mpos.y > hpos_y && mpos.y < hpos_y + this.rectSize) {
			if(EditorUi.arrow == -1) {
				EditorUi.arrow = 0;
			}
		}
		var vec = this.vPos;
		var x = pos_x + vec.x;
		var y = pos_y + vec.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var vpos_x = x;
		var vpos_y = y;
		if(isDown && mpos.x > vpos_x && mpos.x < vpos_x + this.rectSize && mpos.y > vpos_y && mpos.y < vpos_y + this.width) {
			if(EditorUi.arrow == -1) {
				EditorUi.arrow = 1;
			}
		}
		var vec = this.rectPos;
		var x = pos_x + vec.x;
		var y = pos_y + vec.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var rpos_x = x;
		var rpos_y = y;
		if(isDown && mpos.x > rpos_x && mpos.x < rpos_x + this.rectSize && mpos.y > rpos_y && mpos.y < rpos_y + this.rectSize) {
			if(EditorUi.arrow == -1) {
				EditorUi.arrow = 2;
			}
		}
	}
	,render: function(g) {
		if(!this.visible || this.object == found_State.active.cam || found_App.editorui.currentView != 0) {
			return;
		}
		var _this = found_Found.popupZuiInstance;
		this.height = this.rectSize = _this.t.ELEMENT_H * _this.ops.scaleFactor * 0.5;
		var _this = found_Found.popupZuiInstance;
		this.width = _this.t.ELEMENT_W * _this.ops.scaleFactor;
		this.rectPos.x = 0;
		this.rectPos.y = -this.rectSize;
		this.hPos.x = this.rectSize;
		this.hPos.y = -this.rectSize;
		this.vPos.x = 0;
		this.vPos.y = -this.rectSize - this.width;
		this.update();
		var size = this.rectSize * 0.33;
		g.set_color(-256);
		g.fillRect(this.rectPos.x,this.rectPos.y,this.rectSize,this.rectSize);
		g.set_color(-16711936);
		var w = this.width - this.rectSize;
		g.fillRect(this.hPos.x,this.hPos.y + this.rectSize * 0.5 - size * 0.5,w,size);
		g.fillTriangle(this.hPos.x + w,this.hPos.y,this.hPos.x + this.width,this.hPos.y + this.rectSize * 0.5,this.hPos.x + w,this.hPos.y + this.rectSize);
		g.set_color(-65536);
		g.fillRect(this.vPos.x + this.rectSize * 0.5 - size * 0.5,this.vPos.y + this.rectSize,size,w);
		g.fillTriangle(this.vPos.x,this.vPos.y + this.rectSize,this.vPos.x + this.rectSize,this.vPos.y + this.rectSize,this.vPos.x + this.rectSize * 0.5,this.vPos.y);
	}
	,__class__: found_trait_internal_Arrows
});
var found_trait_internal_CameraMovement = function() {
	this.considerRotation = false;
	var _gthis = this;
	found_Trait.call(this);
	this.notifyOnInit(function() {
		_gthis.camera = js_Boot.__cast(_gthis.object , found_object_Camera);
	});
	this.notifyOnUpdate($bind(this,this.update));
};
$hxClasses["found.trait.internal.CameraMovement"] = found_trait_internal_CameraMovement;
found_trait_internal_CameraMovement.__name__ = true;
found_trait_internal_CameraMovement.__super__ = found_Trait;
found_trait_internal_CameraMovement.prototype = $extend(found_Trait.prototype,{
	camera: null
	,considerRotation: null
	,update: function(dt) {
		if(this.camera.target != null) {
			var _this = this.camera.target.get_center();
			var value = this.camera.zoom;
			var x = _this.x * value;
			var y = _this.y * value;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var pos_x = x;
			var pos_y = y;
			var center = this.camera.get_origin();
			var x = this.camera.get_position().x;
			var y = this.camera.get_position().y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var lpos_x = x;
			var lpos_y = y;
			if(this.camera.offsetX < Math.abs(Math.abs(this.camera.get_position().x - center.x) - pos_x)) {
				lpos_x = found_math_Util.lerp(this.camera.get_position().x,pos_x - center.x,this.camera.camSpeedX * found_Timer.delta);
			}
			if(this.camera.offsetY < Math.abs(Math.abs(this.camera.get_position().y - center.y) - pos_y)) {
				lpos_y = found_math_Util.lerp(this.camera.get_position().y,pos_y - center.y,this.camera.camSpeedY * found_Timer.delta);
			}
			var tmp = this.camera;
			var vec = this.camera.get_position();
			tmp.move(new kha_math_Vector2(lpos_x - vec.x,lpos_y - vec.y),this.considerRotation);
		}
		if(found_Input.getKeyboard().down("w") && this.camera.zoom <= 2.0) {
			this.camera.zoom += 0.1;
		} else if(found_Input.getKeyboard().down("s") && this.camera.zoom >= 0.1) {
			this.camera.zoom -= 0.1;
		}
	}
	,__class__: found_trait_internal_CameraMovement
});
var found_trait_internal_LoadingScript = function() {
	var _gthis = this;
	found_Trait.call(this);
	this.notifyOnInit($bind(this,this.doStuff));
	this.notifyOnInit(function() {
		_gthis.object.translate($bind(_gthis,_gthis.center));
	});
	this.notifyOnUpdate(function(dt) {
	});
};
$hxClasses["found.trait.internal.LoadingScript"] = found_trait_internal_LoadingScript;
found_trait_internal_LoadingScript.__name__ = true;
found_trait_internal_LoadingScript.__super__ = found_Trait;
found_trait_internal_LoadingScript.prototype = $extend(found_Trait.prototype,{
	doStuff: function() {
		haxe_Log.trace("Hello World !",{ fileName : "found/trait/internal/LoadingScript.hx", lineNumber : 28, className : "found.trait.internal.LoadingScript", methodName : "doStuff"});
	}
	,center: function(data) {
		var tmp = found_Found.WIDTH * 0.5;
		var tmp1 = this.object.get_width() * 0.5;
		data._positions.x = tmp - tmp1;
		var tmp = found_Found.HEIGHT * 0.5;
		var tmp1 = this.object.get_height() * 0.5;
		data._positions.y = tmp - tmp1;
		return data;
	}
	,move: function(data) {
		var speed = 25.0;
		data._positions.x += speed * data.dt;
		return data;
	}
	,__class__: found_trait_internal_LoadingScript
});
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native"}
});
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = true;
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = true;
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = true;
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	a1: null
	,a2: null
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_crypto_Crc32 = function() { };
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = true;
haxe_crypto_Crc32.make = function(data) {
	var c_crc = -1;
	var b = data.b.bufferValue;
	var _g = 0;
	var _g1 = data.length;
	while(_g < _g1) {
		var i = _g++;
		var tmp = (c_crc ^ b.bytes[i]) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		c_crc = c_crc >>> 8 ^ tmp;
	}
	return c_crc ^ -1;
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = true;
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = true;
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.count = null;
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.kvIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		var k = keys[idx - 1];
		return { key : k, value : h[k]};
	}};
};
haxe_ds_StringMap.prototype = {
	h: null
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
	,__properties__: {set_position:"set_position"}
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = true;
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
var haxe_io_Path = function() { };
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = true;
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths = _g;
	if(paths.length == 0) {
		return "";
	}
	var path = paths[0];
	var _g = 1;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = tmp;
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
var haxe_io_UInt8Array = {};
haxe_io_UInt8Array.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos;
	}
	return new Uint8Array(bytes.b.bufferValue,bytePos,length);
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__ : true, __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"]
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = true;
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.table;
			var _g = t.n;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = true;
haxe_zip__$InflateImpl_Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = true;
haxe_zip_InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,isFinal: null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n = h.n;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = true;
haxe_zip_Reader.readZip = function(i) {
	var r = new haxe_zip_Reader(i);
	return r.read();
};
haxe_zip_Reader.unzip = function(f) {
	if(!f.compressed) {
		return f.data;
	}
	var c = new haxe_zip_Uncompress(-15);
	var s = new haxe_io_Bytes(new ArrayBuffer(f.fileSize));
	var r = c.execute(f.data,0,s,0);
	c.close();
	if(!r.done || r.read != f.data.length || r.write != f.fileSize) {
		throw haxe_Exception.thrown("Invalid compressed data for " + f.fileName);
	}
	f.compressed = false;
	f.dataSize = f.fileSize;
	f.data = s;
	return f.data;
};
haxe_zip_Reader.prototype = {
	i: null
	,readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw haxe_Exception.thrown("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		if((flags & 63473) != 0) {
			throw haxe_Exception.thrown("Unsupported flags " + flags);
		}
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw haxe_Exception.thrown("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			crc32 = null;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.crc32 == null) {
				if(e.compressed) {
					var bufSize = 65536;
					if(tmp == null) {
						tmp = new haxe_io_Bytes(new ArrayBuffer(bufSize));
					}
					var out = new haxe_io_BytesBuffer();
					var z = new haxe_zip_InflateImpl(this.i,false,false);
					while(true) {
						var n = z.readBytes(tmp,0,bufSize);
						out.addBytes(tmp,0,n);
						if(n < bufSize) {
							break;
						}
					}
					e.data = out.getBytes();
				} else {
					e.data = this.i.read(e.dataSize);
				}
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var haxe_zip_Uncompress = function(windowBits) {
	throw haxe_Exception.thrown("Not implemented for this platform");
};
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = true;
haxe_zip_Uncompress.prototype = {
	execute: function(src,srcPos,dst,dstPos) {
		return null;
	}
	,close: function() {
	}
	,__class__: haxe_zip_Uncompress
};
var haxe_zip_Writer = function(o) {
	this.o = o;
	this.files = new haxe_ds_List();
};
$hxClasses["haxe.zip.Writer"] = haxe_zip_Writer;
haxe_zip_Writer.__name__ = true;
haxe_zip_Writer.prototype = {
	o: null
	,files: null
	,writeZipDate: function(date) {
		var hour = date.getHours();
		var min = date.getMinutes();
		var sec = date.getSeconds() >> 1;
		this.o.writeUInt16(hour << 11 | min << 5 | sec);
		var year = date.getFullYear() - 1980;
		var month = date.getMonth() + 1;
		var day = date.getDate();
		this.o.writeUInt16(year << 9 | month << 5 | day);
	}
	,writeEntryHeader: function(f) {
		var o = this.o;
		var flags = 0;
		if(f.extraFields != null) {
			var _g_head = f.extraFields.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e = val;
				if(e._hx_index == 2) {
					flags |= 2048;
				}
			}
		}
		o.writeInt32(67324752);
		o.writeUInt16(20);
		o.writeUInt16(flags);
		if(f.data == null) {
			f.fileSize = 0;
			f.dataSize = 0;
			f.crc32 = 0;
			f.compressed = false;
			f.data = new haxe_io_Bytes(new ArrayBuffer(0));
		} else {
			if(f.crc32 == null) {
				if(f.compressed) {
					throw haxe_Exception.thrown("CRC32 must be processed before compression");
				}
				f.crc32 = haxe_crypto_Crc32.make(f.data);
			}
			if(!f.compressed) {
				f.fileSize = f.data.length;
			}
			f.dataSize = f.data.length;
		}
		o.writeUInt16(f.compressed ? 8 : 0);
		this.writeZipDate(f.fileTime);
		o.writeInt32(f.crc32);
		o.writeInt32(f.dataSize);
		o.writeInt32(f.fileSize);
		o.writeUInt16(f.fileName.length);
		var e = new haxe_io_BytesOutput();
		if(f.extraFields != null) {
			var _g_head = f.extraFields.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var f1 = val;
				switch(f1._hx_index) {
				case 0:
					var bytes = f1.bytes;
					var tag = f1.tag;
					e.writeUInt16(tag);
					e.writeUInt16(bytes.length);
					e.write(bytes);
					break;
				case 1:
					var crc = f1.crc;
					var name = f1.name;
					var namebytes = haxe_io_Bytes.ofString(name);
					e.writeUInt16(28789);
					e.writeUInt16(namebytes.length + 5);
					e.writeByte(1);
					e.writeInt32(crc);
					e.write(namebytes);
					break;
				case 2:
					break;
				}
			}
		}
		var ebytes = e.getBytes();
		o.writeUInt16(ebytes.length);
		o.writeString(f.fileName);
		o.write(ebytes);
		this.files.add({ name : f.fileName, compressed : f.compressed, clen : f.data.length, size : f.fileSize, crc : f.crc32, date : f.fileTime, fields : ebytes});
	}
	,write: function(files) {
		var _g_head = files.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var f = val;
			this.writeEntryHeader(f);
			this.o.writeFullBytes(f.data,0,f.data.length);
		}
		this.writeCDR();
	}
	,writeCDR: function() {
		var cdr_size = 0;
		var cdr_offset = 0;
		var _g_head = this.files.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var f = val;
			var namelen = f.name.length;
			var extraFieldsLength = f.fields.length;
			this.o.writeInt32(33639248);
			this.o.writeUInt16(20);
			this.o.writeUInt16(20);
			this.o.writeUInt16(0);
			this.o.writeUInt16(f.compressed ? 8 : 0);
			this.writeZipDate(f.date);
			this.o.writeInt32(f.crc);
			this.o.writeInt32(f.clen);
			this.o.writeInt32(f.size);
			this.o.writeUInt16(namelen);
			this.o.writeUInt16(extraFieldsLength);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeInt32(0);
			this.o.writeInt32(cdr_offset);
			this.o.writeString(f.name);
			this.o.write(f.fields);
			cdr_size += 46 + namelen + extraFieldsLength;
			cdr_offset += 30 + namelen + extraFieldsLength + f.clen;
		}
		this.o.writeInt32(101010256);
		this.o.writeUInt16(0);
		this.o.writeUInt16(0);
		this.o.writeUInt16(this.files.length);
		this.o.writeUInt16(this.files.length);
		this.o.writeInt32(cdr_size);
		this.o.writeInt32(cdr_offset);
		this.o.writeUInt16(0);
	}
	,__class__: haxe_zip_Writer
};
var hxmath_frames_Frame2 = {};
hxmath_frames_Frame2.__properties__ = {get_linearMatrix:"get_linearMatrix"};
hxmath_frames_Frame2._new = function(offset,angleDegrees) {
	var this1 = new hxmath_frames_Frame2Default(offset,angleDegrees);
	return this1;
};
hxmath_frames_Frame2.calculateMatrix = function(matrix,offset,angleDegrees) {
	var angle = Math.PI / 180 * angleDegrees;
	var self = matrix;
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = s;
	self.c = -s;
	self.d = c;
	var self = matrix;
	self.tx = offset.x;
	self.ty = offset.y;
	return matrix;
};
hxmath_frames_Frame2.lerp = function(frameA,frameB,t) {
	var a = frameA.get_offset();
	var b = frameB.get_offset();
	var this1 = new hxmath_math_Vector2Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y);
	var a = frameA.get_angleDegrees();
	var b = frameB.get_angleDegrees();
	if(Math.abs(a - b) > 180.) {
		if(a < b) {
			a += 360;
		} else {
			b += 360;
		}
	}
	var x = (1.0 - t) * a + t * b;
	return hxmath_frames_Frame2._new(this1,x < 0 ? 360 - -x % 360 : x % 360);
};
hxmath_frames_Frame2.concat = function(this1,other) {
	var self = this1;
	var self1 = self;
	var self = hxmath_frames_Frame2._new(self1.get_offset(),self1.get_angleDegrees());
	var self1 = self;
	var self2 = self1.get_matrix();
	var m_a = self2.a;
	var m_b = self2.b;
	var m_c = self2.c;
	var m_d = self2.d;
	var v = other.get_offset();
	var this1 = new hxmath_math_Vector2Default(m_a * v.x + m_c * v.y,m_b * v.x + m_d * v.y);
	var a = self.get_offset();
	var self1 = this1;
	self1.x += a.x;
	self1.y += a.y;
	var resultOffset = self1;
	var x = self.get_angleDegrees() + other.get_angleDegrees();
	self.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
	self.set_offset(resultOffset);
	return self;
};
hxmath_frames_Frame2.concatWith = function(this1,other) {
	var self = this1;
	var self1 = self;
	var self2 = self1.get_matrix();
	var m_a = self2.a;
	var m_b = self2.b;
	var m_c = self2.c;
	var m_d = self2.d;
	var v = other.get_offset();
	var this1 = new hxmath_math_Vector2Default(m_a * v.x + m_c * v.y,m_b * v.x + m_d * v.y);
	var a = self.get_offset();
	var self1 = this1;
	self1.x += a.x;
	self1.y += a.y;
	var resultOffset = self1;
	var x = self.get_angleDegrees() + other.get_angleDegrees();
	self.set_angleDegrees(x < 0 ? 360 - -x % 360 : x % 360);
	self.set_offset(resultOffset);
	return self;
};
hxmath_frames_Frame2.transformFrom = function(this1,p) {
	var self = this1;
	var m = self.get_matrix();
	var self = m;
	var m_a = self.a;
	var m_b = self.b;
	var m_c = self.c;
	var m_d = self.d;
	var self_x = m_a * p.x + m_c * p.y;
	var self_y = m_b * p.x + m_d * p.y;
	var self = m;
	var b_x = self.tx;
	var b_y = self.ty;
	var this1 = new hxmath_math_Vector2Default(self_x,self_y);
	var self = this1;
	self.x += b_x;
	self.y += b_y;
	return self;
};
hxmath_frames_Frame2.transformTo = function(this1,p) {
	var self = this1;
	var self1 = self;
	var self2 = self1.get_matrix();
	var self_a = self2.a;
	var self_b = self2.b;
	var self_c = self2.c;
	var self_d = self2.d;
	var b = self.get_offset();
	var self = p;
	var v_x = self.x;
	var v_y = self.y;
	v_x -= b.x;
	v_y -= b.y;
	var this1 = new hxmath_math_Vector2Default(self_a * v_x + self_b * v_y,self_c * v_x + self_d * v_y);
	return this1;
};
hxmath_frames_Frame2.linearTransformFrom = function(this1,v) {
	var self = this1;
	var self1 = self;
	var self = self1.get_matrix();
	var m_a = self.a;
	var m_b = self.b;
	var m_c = self.c;
	var m_d = self.d;
	var this1 = new hxmath_math_Vector2Default(m_a * v.x + m_c * v.y,m_b * v.x + m_d * v.y);
	return this1;
};
hxmath_frames_Frame2.linearTransformTo = function(this1,v) {
	var self = this1;
	var self1 = self;
	var self = self1.get_matrix();
	var self_a = self.a;
	var self_b = self.b;
	var self_c = self.c;
	var self_d = self.d;
	var this1 = new hxmath_math_Vector2Default(self_a * v.x + self_b * v.y,self_c * v.x + self_d * v.y);
	return this1;
};
hxmath_frames_Frame2.inverse = function(this1) {
	var self = this1;
	var self1 = self;
	var self2 = self1.get_matrix();
	var self_a = self2.a;
	var self_b = self2.b;
	var self_c = self2.c;
	var self_d = self2.d;
	var v = self.get_offset();
	var this1 = new hxmath_math_Vector2Default(self_a * v.x + self_b * v.y,self_c * v.x + self_d * v.y);
	var self1 = this1;
	self1.x = -self1.x;
	self1.y = -self1.y;
	return hxmath_frames_Frame2._new(self1,-self.get_angleDegrees());
};
hxmath_frames_Frame2.clone = function(this1) {
	var self = this1;
	return hxmath_frames_Frame2._new(self.get_offset(),self.get_angleDegrees());
};
hxmath_frames_Frame2.get_linearMatrix = function(this1) {
	var self = this1;
	var self1 = self.get_matrix();
	var this1 = new hxmath_math_Matrix2x2Default(self1.a,self1.b,self1.c,self1.d);
	return this1;
};
var hxmath_frames_IFrame2 = function() { };
$hxClasses["hxmath.frames.IFrame2"] = hxmath_frames_IFrame2;
hxmath_frames_IFrame2.__name__ = true;
hxmath_frames_IFrame2.__isInterface__ = true;
hxmath_frames_IFrame2.prototype = {
	get_matrix: null
	,get_offset: null
	,set_offset: null
	,get_angleDegrees: null
	,set_angleDegrees: null
	,__class__: hxmath_frames_IFrame2
	,__properties__: {set_angleDegrees:"set_angleDegrees",get_angleDegrees:"get_angleDegrees",set_offset:"set_offset",get_offset:"get_offset",get_matrix:"get_matrix"}
};
var hxmath_frames_Frame2Default = function(offset,angleDegrees,isCached) {
	if(isCached == null) {
		isCached = true;
	}
	if(angleDegrees == null) {
		angleDegrees = 0.0;
	}
	this.isDirty = true;
	this.isCached = true;
	var tmp;
	if(offset == null) {
		var this1 = new hxmath_math_Vector2Default(0.0,0.0);
		tmp = this1;
	} else {
		tmp = offset;
	}
	this.internalOffset = tmp;
	this.internalAngleDegrees = angleDegrees;
	this.isCached = isCached;
	this.isDirty = true;
	var this1 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
	this.internalMatrix = this1;
};
$hxClasses["hxmath.frames.Frame2Default"] = hxmath_frames_Frame2Default;
hxmath_frames_Frame2Default.__name__ = true;
hxmath_frames_Frame2Default.__interfaces__ = [hxmath_frames_IFrame2];
hxmath_frames_Frame2Default.prototype = {
	internalMatrix: null
	,internalOffset: null
	,internalAngleDegrees: null
	,isCached: null
	,isDirty: null
	,toString: function() {
		return "Frame2 { offset: " + Std.string(this.internalOffset) + ", angleDegrees: " + this.internalAngleDegrees + " }";
	}
	,get_matrix: function() {
		if(!this.isCached || this.isDirty) {
			var matrix = this.internalMatrix;
			var offset = this.internalOffset;
			var angle = Math.PI / 180 * this.internalAngleDegrees;
			var self = matrix;
			var s = Math.sin(angle);
			var c = Math.cos(angle);
			self.a = c;
			self.b = s;
			self.c = -s;
			self.d = c;
			var self = matrix;
			self.tx = offset.x;
			self.ty = offset.y;
			this.isDirty = false;
		}
		return this.internalMatrix;
	}
	,get_offset: function() {
		return this.internalOffset;
	}
	,set_offset: function(offset) {
		this.internalOffset = offset;
		this.isDirty = true;
		return offset;
	}
	,get_angleDegrees: function() {
		return this.internalAngleDegrees;
	}
	,set_angleDegrees: function(angleDegrees) {
		this.internalAngleDegrees = angleDegrees;
		this.isDirty = true;
		return angleDegrees;
	}
	,__class__: hxmath_frames_Frame2Default
	,__properties__: {set_angleDegrees:"set_angleDegrees",get_angleDegrees:"get_angleDegrees",set_offset:"set_offset",get_offset:"get_offset",get_matrix:"get_matrix"}
};
var hxmath_math_IntVector2Default = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["hxmath.math.IntVector2Default"] = hxmath_math_IntVector2Default;
hxmath_math_IntVector2Default.__name__ = true;
hxmath_math_IntVector2Default.prototype = {
	x: null
	,y: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,__class__: hxmath_math_IntVector2Default
};
var hxmath_math_IntVector2 = {};
hxmath_math_IntVector2.__properties__ = {get_rotatedRight:"get_rotatedRight",get_rotatedLeft:"get_rotatedLeft",get_lengthSq:"get_lengthSq",get_yAxis:"get_yAxis",get_xAxis:"get_xAxis",get_zero:"get_zero"};
hxmath_math_IntVector2._new = function(x,y) {
	var this1 = new hxmath_math_IntVector2Default(x,y);
	return this1;
};
hxmath_math_IntVector2.fromArray = function(rawData) {
	if(rawData.length != 2) {
		throw haxe_Exception.thrown("Invalid rawData.");
	}
	return hxmath_math_IntVector2._new(rawData[0],rawData[1]);
};
hxmath_math_IntVector2.toVector2 = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	return this1;
};
hxmath_math_IntVector2.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
hxmath_math_IntVector2.multiply = function(a,s) {
	var self = a;
	var self1 = hxmath_math_IntVector2._new(self.x,self.y);
	self1.x *= s;
	self1.y *= s;
	return self1;
};
hxmath_math_IntVector2.add = function(a,b) {
	var self = a;
	var self1 = hxmath_math_IntVector2._new(self.x,self.y);
	self1.x += b.x;
	self1.y += b.y;
	return self1;
};
hxmath_math_IntVector2.subtract = function(a,b) {
	var self = a;
	var self1 = hxmath_math_IntVector2._new(self.x,self.y);
	self1.x -= b.x;
	self1.y -= b.y;
	return self1;
};
hxmath_math_IntVector2.negate = function(a) {
	return hxmath_math_IntVector2._new(-a.x,-a.y);
};
hxmath_math_IntVector2.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x) {
			return a.y == b.y;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math_IntVector2.max = function(a,b) {
	var self = a;
	var self1 = hxmath_math_IntVector2._new(self.x,self.y);
	var a = self1.x;
	var b1 = b.x;
	self1.x = b1 > a ? b1 : a;
	var a = self1.y;
	var b1 = b.y;
	self1.y = b1 > a ? b1 : a;
	return self1;
};
hxmath_math_IntVector2.min = function(a,b) {
	var self = a;
	var self1 = hxmath_math_IntVector2._new(self.x,self.y);
	var a = self1.x;
	var b1 = b.x;
	self1.x = b1 < a ? b1 : a;
	var a = self1.y;
	var b1 = b.y;
	self1.y = b1 < a ? b1 : a;
	return self1;
};
hxmath_math_IntVector2.set = function(this1,x,y) {
	var self = this1;
	self.x = x;
	self.y = y;
	return self;
};
hxmath_math_IntVector2.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math_IntVector2.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	return self;
};
hxmath_math_IntVector2.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	return self;
};
hxmath_math_IntVector2.maxWith = function(this1,a) {
	var self = this1;
	var a1 = self.x;
	var b = a.x;
	self.x = b > a1 ? b : a1;
	var a1 = self.y;
	var b = a.y;
	self.y = b > a1 ? b : a1;
	return self;
};
hxmath_math_IntVector2.minWith = function(this1,a) {
	var self = this1;
	var a1 = self.x;
	var b = a.x;
	self.x = b < a1 ? b : a1;
	var a1 = self.y;
	var b = a.y;
	self.y = b < a1 ? b : a1;
	return self;
};
hxmath_math_IntVector2.copyTo = function(this1,target) {
	var self = this1;
	var self1 = self;
	var value = self1.x;
	var self1 = target;
	self1.x = value;
	var self1 = self;
	var value = self1.y;
	var self = target;
	self.y = value;
};
hxmath_math_IntVector2.clone = function(this1) {
	var self = this1;
	return hxmath_math_IntVector2._new(self.x,self.y);
};
hxmath_math_IntVector2.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_IntVector2.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_IntVector2.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	return self;
};
hxmath_math_IntVector2.applyScalarFunc = function(this1,func) {
	var self = this1;
	var self1 = self;
	var value = func(self1.x);
	var self1 = self;
	self1.x = value;
	var self1 = self;
	var value = func(self1.y);
	var self1 = self;
	self1.y = value;
	return self;
};
hxmath_math_IntVector2.rotateLeft = function(this1) {
	var self = this1;
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
hxmath_math_IntVector2.rotateRight = function(this1) {
	var self = this1;
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
hxmath_math_IntVector2.get_zero = function() {
	return hxmath_math_IntVector2._new(0,0);
};
hxmath_math_IntVector2.get_xAxis = function() {
	return hxmath_math_IntVector2._new(1,0);
};
hxmath_math_IntVector2.get_yAxis = function() {
	return hxmath_math_IntVector2._new(0,1);
};
hxmath_math_IntVector2.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y;
};
hxmath_math_IntVector2.get_rotatedLeft = function(this1) {
	var self = this1;
	var self1 = self;
	var self = hxmath_math_IntVector2._new(self1.x,self1.y);
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
hxmath_math_IntVector2.get_rotatedRight = function(this1) {
	var self = this1;
	var self1 = self;
	var self = hxmath_math_IntVector2._new(self1.x,self1.y);
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
var hxmath_math_MathUtil = function() { };
$hxClasses["hxmath.math.MathUtil"] = hxmath_math_MathUtil;
hxmath_math_MathUtil.__name__ = true;
hxmath_math_MathUtil.intMax = function(a,b) {
	if(b > a) {
		return b;
	} else {
		return a;
	}
};
hxmath_math_MathUtil.intMin = function(a,b) {
	if(b < a) {
		return b;
	} else {
		return a;
	}
};
hxmath_math_MathUtil.lerpCyclic = function(a,b,t,max) {
	if(Math.abs(a - b) > 0.5 * max) {
		if(a < b) {
			a += max;
		} else {
			b += max;
		}
	}
	var x = (1.0 - t) * a + t * b;
	if(x < 0) {
		return max - -x % max;
	} else {
		return x % max;
	}
};
hxmath_math_MathUtil.sign = function(x,w) {
	if(w == null) {
		w = 0;
	}
	if(Math.abs(x) < w) {
		return 0;
	} else if(x <= -w) {
		return -1;
	} else {
		return 1;
	}
};
hxmath_math_MathUtil.rangeDistance = function(aStart,aWidth,bStart,bWidth) {
	if(aStart + aWidth < bStart) {
		return bStart - (aStart + aWidth);
	} else if(bStart + bWidth < aStart) {
		return aStart - (bStart + bWidth);
	} else {
		return 0;
	}
};
hxmath_math_MathUtil.openRangeContains = function(aStart,aWidth,x) {
	if(x > aStart) {
		return x < aStart + aWidth;
	} else {
		return false;
	}
};
hxmath_math_MathUtil.openRangesIntersect = function(aStart,aWidth,bStart,bWidth) {
	return !(aStart >= bStart + bWidth || bStart >= aStart + aWidth);
};
hxmath_math_MathUtil.closedRangeContains = function(aStart,aWidth,x) {
	if(x >= aStart) {
		return x <= aStart + aWidth;
	} else {
		return false;
	}
};
hxmath_math_MathUtil.radToDeg = function(rad) {
	return 180 / Math.PI * rad;
};
hxmath_math_MathUtil.degToRad = function(deg) {
	return Math.PI / 180 * deg;
};
hxmath_math_MathUtil.wrap = function(x,n) {
	if(x < 0) {
		return n - -x % n;
	} else {
		return x % n;
	}
};
hxmath_math_MathUtil.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
hxmath_math_MathUtil.orient2d = function(a,b,c) {
	var result = (a.x - c.x) * (b.y - c.y) - (a.y - c.y) * (b.x - c.x);
	if(result > 0) {
		return 1;
	} else if(result < 0) {
		return -1;
	} else {
		return 0;
	}
};
hxmath_math_MathUtil.det2x2 = function(m00,m10,m01,m11) {
	return m00 * m11 - m10 * m01;
};
hxmath_math_MathUtil.det3x3 = function(m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	return m00 * (m11 * m22 - m21 * m12) - m10 * (m01 * m22 - m21 * m02) + m20 * (m01 * m12 - m11 * m02);
};
hxmath_math_MathUtil.det4x4 = function(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	return m00 * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)) - m10 * (m01 * (m22 * m33 - m32 * m23) - m21 * (m02 * m33 - m32 * m03) + m31 * (m02 * m23 - m22 * m03)) + m20 * (m01 * (m12 * m33 - m32 * m13) - m11 * (m02 * m33 - m32 * m03) + m31 * (m02 * m13 - m12 * m03)) - m30 * (m01 * (m12 * m23 - m22 * m13) - m11 * (m02 * m23 - m22 * m03) + m21 * (m02 * m13 - m12 * m03));
};
var hxmath_math_Matrix2x2Default = function(a,b,c,d) {
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
};
$hxClasses["hxmath.math.Matrix2x2Default"] = hxmath_math_Matrix2x2Default;
hxmath_math_Matrix2x2Default.__name__ = true;
hxmath_math_Matrix2x2Default.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,toString: function() {
		return "[a: " + this.a + ", b: " + this.b + ", c: " + this.c + ", d: " + this.d + "]";
	}
	,__class__: hxmath_math_Matrix2x2Default
};
var hxmath_math_Matrix2x2 = {};
hxmath_math_Matrix2x2.__properties__ = {get_transpose:"get_transpose",get_det:"get_det",get_identity:"get_identity",get_zero:"get_zero"};
hxmath_math_Matrix2x2._new = function(a,b,c,d) {
	var this1 = new hxmath_math_Matrix2x2Default(a,b,c,d);
	return this1;
};
hxmath_math_Matrix2x2.fromArray = function(rawData) {
	if(rawData.length != 4) {
		throw haxe_Exception.thrown("Invalid rawData.");
	}
	var this1 = new hxmath_math_Matrix2x2Default(rawData[0],rawData[1],rawData[2],rawData[3]);
	return this1;
};
hxmath_math_Matrix2x2.fromMatrix2x2Shape = function(other) {
	var this1 = new hxmath_math_Matrix2x2Default(other.a,other.b,other.c,other.d);
	return this1;
};
hxmath_math_Matrix2x2.multiplyScalar = function(s,m) {
	var this1 = new hxmath_math_Matrix2x2Default(s * m.a,s * m.b,s * m.c,s * m.d);
	return this1;
};
hxmath_math_Matrix2x2.multiplyVector = function(m,v) {
	var this1 = new hxmath_math_Vector2Default(m.a * v.x + m.c * v.y,m.b * v.x + m.d * v.y);
	return this1;
};
hxmath_math_Matrix2x2.multiply = function(m,n) {
	var this1 = new hxmath_math_Matrix2x2Default(m.a * n.a + m.c * n.b,m.a * n.c + m.c * n.d,m.b * n.a + m.d * n.b,m.b * n.c + m.d * n.d);
	return this1;
};
hxmath_math_Matrix2x2.add = function(m,n) {
	var self = m;
	var this1 = new hxmath_math_Matrix2x2Default(self.a,self.b,self.c,self.d);
	var self = this1;
	self.a += n.a;
	self.b += n.b;
	self.c += n.c;
	self.d += n.d;
	return self;
};
hxmath_math_Matrix2x2.subtract = function(m,n) {
	var self = m;
	var this1 = new hxmath_math_Matrix2x2Default(self.a,self.b,self.c,self.d);
	var self = this1;
	self.a -= n.a;
	self.b -= n.b;
	self.c -= n.c;
	self.d -= n.d;
	return self;
};
hxmath_math_Matrix2x2.negate = function(m) {
	var this1 = new hxmath_math_Matrix2x2Default(-m.a,-m.b,-m.c,-m.d);
	return this1;
};
hxmath_math_Matrix2x2.equals = function(m,n) {
	if(!(m == null && n == null)) {
		if(m != null && n != null && m.a == n.a && m.b == n.b && m.c == n.c) {
			return m.d == n.d;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math_Matrix2x2.rotate = function(angle) {
	var this1 = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
	var self = this1;
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = s;
	self.c = -s;
	self.d = c;
	return self;
};
hxmath_math_Matrix2x2.scale = function(sx,sy) {
	var this1 = new hxmath_math_Matrix2x2Default(sx,0.0,0.0,sy);
	return this1;
};
hxmath_math_Matrix2x2.setRotate = function(this1,angle) {
	var self = this1;
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = s;
	self.c = -s;
	self.d = c;
	return self;
};
hxmath_math_Matrix2x2.set = function(this1,a,b,c,d) {
	var self = this1;
	self.a = a;
	self.b = b;
	self.c = c;
	self.d = d;
	return this1;
};
hxmath_math_Matrix2x2.addWith = function(this1,m) {
	var self = this1;
	self.a += m.a;
	self.b += m.b;
	self.c += m.c;
	self.d += m.d;
	return self;
};
hxmath_math_Matrix2x2.subtractWith = function(this1,m) {
	var self = this1;
	self.a -= m.a;
	self.b -= m.b;
	self.c -= m.c;
	self.d -= m.d;
	return self;
};
hxmath_math_Matrix2x2.copyTo = function(this1,target) {
	var self = this1;
	var self1 = self;
	var value = self1.a;
	var self1 = target;
	self1.a = value;
	var self1 = self;
	var value = self1.b;
	var self1 = target;
	self1.b = value;
	var self1 = self;
	var value = self1.c;
	var self1 = target;
	self1.c = value;
	var self1 = self;
	var value = self1.d;
	var self = target;
	self.d = value;
};
hxmath_math_Matrix2x2.copyToShape = function(this1,target) {
	var self = this1;
	target.a = self.a;
	target.b = self.b;
	target.c = self.c;
	target.d = self.d;
};
hxmath_math_Matrix2x2.copyFromShape = function(this1,source) {
	var self = this1;
	self.a = source.a;
	self.b = source.b;
	self.c = source.c;
	self.d = source.d;
};
hxmath_math_Matrix2x2.clone = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Matrix2x2Default(self.a,self.b,self.c,self.d);
	return this1;
};
hxmath_math_Matrix2x2.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.a;
	case 1:
		return self.b;
	case 2:
		return self.c;
	case 3:
		return self.d;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix2x2.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.a = value;
	case 1:
		return self.b = value;
	case 2:
		return self.c = value;
	case 3:
		return self.d = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix2x2.getElement = function(this1,column,row) {
	var self = this1;
	var self1 = self;
	switch(row * 2 + column) {
	case 0:
		return self1.a;
	case 1:
		return self1.b;
	case 2:
		return self1.c;
	case 3:
		return self1.d;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix2x2.setElement = function(this1,column,row,value) {
	var self = this1;
	var self1 = self;
	switch(row * 2 + column) {
	case 0:
		return self1.a = value;
	case 1:
		return self1.b = value;
	case 2:
		return self1.c = value;
	case 3:
		return self1.d = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix2x2.col = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		var this1 = new hxmath_math_Vector2Default(self.a,self.b);
		return this1;
	case 1:
		var this1 = new hxmath_math_Vector2Default(self.c,self.d);
		return this1;
	default:
		throw haxe_Exception.thrown("Invalid column");
	}
};
hxmath_math_Matrix2x2.row = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		var this1 = new hxmath_math_Vector2Default(self.a,self.c);
		return this1;
	case 1:
		var this1 = new hxmath_math_Vector2Default(self.b,self.d);
		return this1;
	default:
		throw haxe_Exception.thrown("Invalid row");
	}
};
hxmath_math_Matrix2x2.transposeMultiplyVector = function(this1,v) {
	var self = this1;
	var this1 = new hxmath_math_Vector2Default(self.a * v.x + self.b * v.y,self.c * v.x + self.d * v.y);
	return this1;
};
hxmath_math_Matrix2x2.applyScalarFunc = function(this1,func) {
	var self = this1;
	var self1 = self;
	var value = func(self1.a);
	var self1 = self;
	self1.a = value;
	var self1 = self;
	var value = func(self1.b);
	var self1 = self;
	self1.b = value;
	var self1 = self;
	var value = func(self1.c);
	var self1 = self;
	self1.c = value;
	var self1 = self;
	var value = func(self1.d);
	var self1 = self;
	self1.d = value;
	return self;
};
hxmath_math_Matrix2x2.get_zero = function() {
	var this1 = new hxmath_math_Matrix2x2Default(0.0,0.0,0.0,0.0);
	return this1;
};
hxmath_math_Matrix2x2.get_identity = function() {
	var this1 = new hxmath_math_Matrix2x2Default(1.0,0.0,0.0,1.0);
	return this1;
};
hxmath_math_Matrix2x2.get_det = function(this1) {
	var self = this1;
	return self.a * self.d - self.c * self.b;
};
hxmath_math_Matrix2x2.get_transpose = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Matrix2x2Default(self.a,self.c,self.b,self.d);
	return this1;
};
var hxmath_math_Matrix3x2Default = function(a,b,c,d,tx,ty) {
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["hxmath.math.Matrix3x2Default"] = hxmath_math_Matrix3x2Default;
hxmath_math_Matrix3x2Default.__name__ = true;
hxmath_math_Matrix3x2Default.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,toString: function() {
		return "[a: " + this.a + ", b: " + this.b + ", c: " + this.c + ", d: " + this.d + ", tx: " + this.tx + ", ty: " + this.ty + "]";
	}
	,__class__: hxmath_math_Matrix3x2Default
};
var hxmath_math_Matrix3x2 = {};
hxmath_math_Matrix3x2.__properties__ = {set_linearSubMatrix:"set_linearSubMatrix",get_linearSubMatrix:"get_linearSubMatrix",set_t:"set_t",get_t:"get_t",get_identity:"get_identity",get_zero:"get_zero"};
hxmath_math_Matrix3x2._new = function(a,b,c,d,tx,ty) {
	var this1 = new hxmath_math_Matrix3x2Default(a,b,c,d,tx,ty);
	return this1;
};
hxmath_math_Matrix3x2.fromArray = function(rawData) {
	if(rawData.length != 6) {
		throw haxe_Exception.thrown("Invalid rawData.");
	}
	var this1 = new hxmath_math_Matrix3x2Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5]);
	return this1;
};
hxmath_math_Matrix3x2.fromMatrix3x2Shape = function(other) {
	var this1 = new hxmath_math_Matrix3x2Default(other.a,other.b,other.c,other.d,other.tx,other.ty);
	return this1;
};
hxmath_math_Matrix3x2.multiplyScalar = function(s,m) {
	var this1 = new hxmath_math_Matrix3x2Default(s * m.a,s * m.b,s * m.c,s * m.d,s * m.tx,s * m.ty);
	return this1;
};
hxmath_math_Matrix3x2.transform = function(m,v) {
	var self = m;
	var m_a = self.a;
	var m_b = self.b;
	var m_c = self.c;
	var m_d = self.d;
	var self_x = m_a * v.x + m_c * v.y;
	var self_y = m_b * v.x + m_d * v.y;
	var self = m;
	var b_x = self.tx;
	var b_y = self.ty;
	var this1 = new hxmath_math_Vector2Default(self_x,self_y);
	var self = this1;
	self.x += b_x;
	self.y += b_y;
	return self;
};
hxmath_math_Matrix3x2.concat = function(m,n) {
	var self = m;
	var mLinear_a = self.a;
	var mLinear_b = self.b;
	var mLinear_c = self.c;
	var mLinear_d = self.d;
	var self = n;
	var nLinear_a = self.a;
	var nLinear_b = self.b;
	var nLinear_c = self.c;
	var nLinear_d = self.d;
	var resultLinear_a = mLinear_a * nLinear_a + mLinear_c * nLinear_b;
	var resultLinear_b = mLinear_a * nLinear_c + mLinear_c * nLinear_d;
	var resultLinear_c = mLinear_b * nLinear_a + mLinear_d * nLinear_b;
	var resultLinear_d = mLinear_b * nLinear_c + mLinear_d * nLinear_d;
	var v_x = n.tx;
	var v_y = n.ty;
	var self_x = mLinear_a * v_x + mLinear_c * v_y;
	var self_y = mLinear_b * v_x + mLinear_d * v_y;
	var b_x = m.tx;
	var b_y = m.ty;
	var resultAffine_x = self_x;
	var resultAffine_y = self_y;
	resultAffine_x += b_x;
	resultAffine_y += b_y;
	var this1 = new hxmath_math_Matrix3x2Default(resultLinear_a,resultLinear_b,resultLinear_c,resultLinear_d,resultAffine_x,resultAffine_y);
	return this1;
};
hxmath_math_Matrix3x2.add = function(m,n) {
	var self = m;
	var this1 = new hxmath_math_Matrix3x2Default(self.a,self.b,self.c,self.d,self.tx,self.ty);
	var self = this1;
	self.a += n.a;
	self.b += n.b;
	self.c += n.c;
	self.d += n.d;
	self.tx += n.tx;
	self.ty += n.ty;
	return self;
};
hxmath_math_Matrix3x2.subtract = function(m,n) {
	var self = m;
	var this1 = new hxmath_math_Matrix3x2Default(self.a,self.b,self.c,self.d,self.tx,self.ty);
	var self = this1;
	self.a -= n.a;
	self.b -= n.b;
	self.c -= n.c;
	self.d -= n.d;
	self.tx -= n.tx;
	self.ty -= n.ty;
	return self;
};
hxmath_math_Matrix3x2.negate = function(m) {
	var this1 = new hxmath_math_Matrix3x2Default(-m.a,-m.b,-m.c,-m.d,-m.tx,-m.ty);
	return this1;
};
hxmath_math_Matrix3x2.equals = function(m,n) {
	if(!(m == null && n == null)) {
		if(m != null && n != null && m.a == n.a && m.b == n.b && m.c == n.c && m.d == n.d && m.tx == n.tx) {
			return m.ty == n.ty;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math_Matrix3x2.rotate = function(angle) {
	var this1 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
	var m = this1;
	var value_a = 0.0;
	var value_b = 0.0;
	var value_c = 0.0;
	var value_d = 0.0;
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	value_a = c;
	value_b = s;
	value_c = -s;
	value_d = c;
	var self = m;
	self.a = value_a;
	self.b = value_b;
	self.c = value_c;
	self.d = value_d;
	return m;
};
hxmath_math_Matrix3x2.translate = function(v) {
	var this1 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
	var m = this1;
	var self = m;
	self.tx = v.x;
	self.ty = v.y;
	return m;
};
hxmath_math_Matrix3x2.orbit = function(center,angle) {
	var this1 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
	var m = this1;
	var value_a = 0.0;
	var value_b = 0.0;
	var value_c = 0.0;
	var value_d = 0.0;
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	value_a = c;
	value_b = s;
	value_c = -s;
	value_d = c;
	var self = m;
	self.a = value_a;
	self.b = value_b;
	self.c = value_c;
	self.d = value_d;
	var self = m;
	var m_a = self.a;
	var m_b = self.b;
	var m_c = self.c;
	var m_d = self.d;
	var b_x = m_a * center.x + m_c * center.y;
	var b_y = m_b * center.x + m_d * center.y;
	var self = center;
	var t_x = self.x;
	var t_y = self.y;
	t_x -= b_x;
	t_y -= b_y;
	var self = m;
	self.tx = t_x;
	self.ty = t_y;
	return m;
};
hxmath_math_Matrix3x2.copyTo = function(this1,target) {
	var self = this1;
	var self1 = self;
	var value = self1.a;
	var self1 = target;
	self1.a = value;
	var self1 = self;
	var value = self1.b;
	var self1 = target;
	self1.b = value;
	var self1 = self;
	var value = self1.tx;
	var self1 = target;
	self1.tx = value;
	var self1 = self;
	var value = self1.c;
	var self1 = target;
	self1.c = value;
	var self1 = self;
	var value = self1.d;
	var self1 = target;
	self1.d = value;
	var self1 = self;
	var value = self1.ty;
	var self = target;
	self.ty = value;
};
hxmath_math_Matrix3x2.copyToShape = function(this1,target) {
	var self = this1;
	target.a = self.a;
	target.b = self.b;
	target.c = self.c;
	target.d = self.d;
	target.tx = self.tx;
	target.ty = self.ty;
};
hxmath_math_Matrix3x2.copyFromShape = function(this1,source) {
	var self = this1;
	self.a = source.a;
	self.b = source.b;
	self.c = source.c;
	self.d = source.d;
	self.tx = source.tx;
	self.ty = source.ty;
};
hxmath_math_Matrix3x2.setRotate = function(this1,angle) {
	var self = this1;
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	self.a = c;
	self.b = s;
	self.c = -s;
	self.d = c;
	return self;
};
hxmath_math_Matrix3x2.setTranslate = function(this1,x,y) {
	var self = this1;
	self.tx = x;
	self.ty = y;
	return self;
};
hxmath_math_Matrix3x2.set = function(this1,a,b,c,d,tx,ty) {
	var self = this1;
	self.a = a;
	self.b = b;
	self.c = c;
	self.d = d;
	self.tx = tx;
	self.ty = ty;
	return self;
};
hxmath_math_Matrix3x2.addWith = function(this1,m) {
	var self = this1;
	self.a += m.a;
	self.b += m.b;
	self.c += m.c;
	self.d += m.d;
	self.tx += m.tx;
	self.ty += m.ty;
	return self;
};
hxmath_math_Matrix3x2.subtractWith = function(this1,m) {
	var self = this1;
	self.a -= m.a;
	self.b -= m.b;
	self.c -= m.c;
	self.d -= m.d;
	self.tx -= m.tx;
	self.ty -= m.ty;
	return self;
};
hxmath_math_Matrix3x2.clone = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Matrix3x2Default(self.a,self.b,self.c,self.d,self.tx,self.ty);
	return this1;
};
hxmath_math_Matrix3x2.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.a;
	case 1:
		return self.b;
	case 2:
		return self.tx;
	case 3:
		return self.c;
	case 4:
		return self.d;
	case 5:
		return self.ty;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix3x2.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.a = value;
	case 1:
		return self.b = value;
	case 2:
		return self.tx = value;
	case 3:
		return self.c = value;
	case 4:
		return self.d = value;
	case 5:
		return self.ty = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix3x2.getElement = function(this1,column,row) {
	var self = this1;
	var self1 = self;
	switch(row * 3 + column) {
	case 0:
		return self1.a;
	case 1:
		return self1.b;
	case 2:
		return self1.tx;
	case 3:
		return self1.c;
	case 4:
		return self1.d;
	case 5:
		return self1.ty;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix3x2.setElement = function(this1,column,row,value) {
	var self = this1;
	var self1 = self;
	switch(row * 3 + column) {
	case 0:
		return self1.a = value;
	case 1:
		return self1.b = value;
	case 2:
		return self1.tx = value;
	case 3:
		return self1.c = value;
	case 4:
		return self1.d = value;
	case 5:
		return self1.ty = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix3x2.col = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		var this1 = new hxmath_math_Vector2Default(self.a,self.c);
		return this1;
	case 1:
		var this1 = new hxmath_math_Vector2Default(self.b,self.d);
		return this1;
	case 2:
		var this1 = new hxmath_math_Vector2Default(self.tx,self.ty);
		return this1;
	default:
		throw haxe_Exception.thrown("Invalid column");
	}
};
hxmath_math_Matrix3x2.row = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		var this1 = new hxmath_math_Vector3Default(self.a,self.b,self.tx);
		return this1;
	case 1:
		var this1 = new hxmath_math_Vector3Default(self.c,self.d,self.ty);
		return this1;
	default:
		throw haxe_Exception.thrown("Invalid row");
	}
};
hxmath_math_Matrix3x2.applyScalarFunc = function(this1,func) {
	var self = this1;
	var self1 = self;
	var value = func(self1.a);
	var self1 = self;
	self1.a = value;
	var self1 = self;
	var value = func(self1.b);
	var self1 = self;
	self1.b = value;
	var self1 = self;
	var value = func(self1.tx);
	var self1 = self;
	self1.tx = value;
	var self1 = self;
	var value = func(self1.c);
	var self1 = self;
	self1.c = value;
	var self1 = self;
	var value = func(self1.d);
	var self1 = self;
	self1.d = value;
	var self1 = self;
	var value = func(self1.ty);
	var self1 = self;
	self1.ty = value;
	return self;
};
hxmath_math_Matrix3x2.applySubMatrixTranspose = function(this1) {
	var self = this1;
	var temp = self.c;
	self.c = self.b;
	self.b = temp;
	return self;
};
hxmath_math_Matrix3x2.applyInvertFrame = function(this1) {
	var self = this1;
	var self1 = self;
	var temp = self1.c;
	self1.c = self1.b;
	self1.b = temp;
	var tx = -(self.a * self.tx + self.c * self.ty);
	var ty = -(self.b * self.tx + self.d * self.ty);
	self.tx = tx;
	self.ty = ty;
	return self;
};
hxmath_math_Matrix3x2.get_zero = function() {
	var this1 = new hxmath_math_Matrix3x2Default(0.0,0.0,0.0,0.0,0.0,0.0);
	return this1;
};
hxmath_math_Matrix3x2.get_identity = function() {
	var this1 = new hxmath_math_Matrix3x2Default(1.0,0.0,0.0,1.0,0.0,0.0);
	return this1;
};
hxmath_math_Matrix3x2.get_t = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Vector2Default(self.tx,self.ty);
	return this1;
};
hxmath_math_Matrix3x2.set_t = function(this1,t) {
	var self = this1;
	self.tx = t.x;
	self.ty = t.y;
	return t;
};
hxmath_math_Matrix3x2.get_linearSubMatrix = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Matrix2x2Default(self.a,self.b,self.c,self.d);
	return this1;
};
hxmath_math_Matrix3x2.set_linearSubMatrix = function(this1,value) {
	var self = this1;
	self.a = value.a;
	self.b = value.b;
	self.c = value.c;
	self.d = value.d;
	return value;
};
var hxmath_math_Matrix3x3Default = function(m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	this.m00 = m00;
	this.m10 = m10;
	this.m20 = m20;
	this.m01 = m01;
	this.m11 = m11;
	this.m21 = m21;
	this.m02 = m02;
	this.m12 = m12;
	this.m22 = m22;
};
$hxClasses["hxmath.math.Matrix3x3Default"] = hxmath_math_Matrix3x3Default;
hxmath_math_Matrix3x3Default.__name__ = true;
hxmath_math_Matrix3x3Default.prototype = {
	m00: null
	,m01: null
	,m02: null
	,m10: null
	,m11: null
	,m12: null
	,m20: null
	,m21: null
	,m22: null
	,toString: function() {
		return "[[" + this.m00 + ", " + this.m10 + ", " + this.m20 + "], [" + this.m01 + ", " + this.m11 + ", " + this.m21 + "], [" + this.m02 + ", " + this.m12 + ", " + this.m22 + "]]";
	}
	,__class__: hxmath_math_Matrix3x3Default
};
var hxmath_math_Matrix3x3 = {};
hxmath_math_Matrix3x3.__properties__ = {get_transpose:"get_transpose",get_det:"get_det",get_identity:"get_identity",get_zero:"get_zero"};
hxmath_math_Matrix3x3._new = function(m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	var this1 = new hxmath_math_Matrix3x3Default(m00,m10,m20,m01,m11,m21,m02,m12,m22);
	return this1;
};
hxmath_math_Matrix3x3.fromArray = function(rawData) {
	if(rawData.length != 9) {
		throw haxe_Exception.thrown("Invalid rawData.");
	}
	var this1 = new hxmath_math_Matrix3x3Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5],rawData[6],rawData[7],rawData[8]);
	return this1;
};
hxmath_math_Matrix3x3.fromMatrix3x3Shape = function(other) {
	var this1 = new hxmath_math_Matrix3x3Default(other.m00,other.m10,other.m20,other.m01,other.m11,other.m21,other.m02,other.m12,other.m22);
	return this1;
};
hxmath_math_Matrix3x3.multiplyScalar = function(s,a) {
	var this1 = new hxmath_math_Matrix3x3Default(s * a.m00,s * a.m10,s * a.m20,s * a.m01,s * a.m11,s * a.m21,s * a.m02,s * a.m12,s * a.m22);
	return this1;
};
hxmath_math_Matrix3x3.multiplyVector = function(a,v) {
	var this1 = new hxmath_math_Vector3Default(a.m00 * v.x + a.m10 * v.y + a.m20 * v.z,a.m01 * v.x + a.m11 * v.y + a.m21 * v.z,a.m02 * v.x + a.m12 * v.y + a.m22 * v.z);
	return this1;
};
hxmath_math_Matrix3x3.multiply = function(a,b) {
	var this1 = new hxmath_math_Matrix3x3Default(a.m00 * b.m00 + a.m10 * b.m01 + a.m20 * b.m02,a.m00 * b.m10 + a.m10 * b.m11 + a.m20 * b.m12,a.m00 * b.m20 + a.m10 * b.m21 + a.m20 * b.m22,a.m01 * b.m00 + a.m11 * b.m01 + a.m21 * b.m02,a.m01 * b.m10 + a.m11 * b.m11 + a.m21 * b.m12,a.m01 * b.m20 + a.m11 * b.m21 + a.m21 * b.m22,a.m02 * b.m00 + a.m12 * b.m01 + a.m22 * b.m02,a.m02 * b.m10 + a.m12 * b.m11 + a.m22 * b.m12,a.m02 * b.m20 + a.m12 * b.m21 + a.m22 * b.m22);
	return this1;
};
hxmath_math_Matrix3x3.add = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Matrix3x3Default(self.m00,self.m10,self.m20,self.m01,self.m11,self.m21,self.m02,self.m12,self.m22);
	var self = this1;
	self.m00 += b.m00;
	self.m10 += b.m10;
	self.m20 += b.m20;
	self.m01 += b.m01;
	self.m11 += b.m11;
	self.m21 += b.m21;
	self.m02 += b.m02;
	self.m12 += b.m12;
	self.m22 += b.m22;
	return self;
};
hxmath_math_Matrix3x3.subtract = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Matrix3x3Default(self.m00,self.m10,self.m20,self.m01,self.m11,self.m21,self.m02,self.m12,self.m22);
	var self = this1;
	self.m00 -= b.m00;
	self.m10 -= b.m10;
	self.m20 -= b.m20;
	self.m01 -= b.m01;
	self.m11 -= b.m11;
	self.m21 -= b.m21;
	self.m02 -= b.m02;
	self.m12 -= b.m12;
	self.m22 -= b.m22;
	return self;
};
hxmath_math_Matrix3x3.negate = function(a) {
	var this1 = new hxmath_math_Matrix3x3Default(-a.m00,-a.m10,-a.m20,-a.m01,-a.m11,-a.m21,-a.m02,-a.m12,-a.m22);
	return this1;
};
hxmath_math_Matrix3x3.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.m00 == b.m00 && a.m10 == b.m10 && a.m20 == b.m20 && a.m01 == b.m01 && a.m11 == b.m11 && a.m21 == b.m21 && a.m02 == b.m02 && a.m12 == b.m12) {
			return a.m22 == b.m22;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math_Matrix3x3.rotationX = function(angleDegrees) {
	var angleRadians = Math.PI / 180 * angleDegrees;
	var s = Math.sin(angleRadians);
	var c = Math.cos(angleRadians);
	var this1 = new hxmath_math_Matrix3x3Default(1,0,0,0,c,-s,0,s,c);
	return this1;
};
hxmath_math_Matrix3x3.rotationY = function(angleDegrees) {
	var angleRadians = Math.PI / 180 * angleDegrees;
	var s = Math.sin(angleRadians);
	var c = Math.cos(angleRadians);
	var this1 = new hxmath_math_Matrix3x3Default(c,0,s,0,1,0,-s,0,c);
	return this1;
};
hxmath_math_Matrix3x3.rotationZ = function(angleDegrees) {
	var angleRadians = Math.PI / 180 * angleDegrees;
	var s = Math.sin(angleRadians);
	var c = Math.cos(angleRadians);
	var this1 = new hxmath_math_Matrix3x3Default(c,-s,0,s,c,0,0,0,1);
	return this1;
};
hxmath_math_Matrix3x3.scale = function(sx,sy,sz) {
	var this1 = new hxmath_math_Matrix3x3Default(sx,0.0,0.0,0.0,sy,0.0,0.0,0.0,sz);
	return this1;
};
hxmath_math_Matrix3x3.set = function(this1,m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	var self = this1;
	self.m00 = m00;
	self.m10 = m10;
	self.m20 = m20;
	self.m01 = m01;
	self.m11 = m11;
	self.m21 = m21;
	self.m02 = m02;
	self.m12 = m12;
	self.m22 = m22;
	return self;
};
hxmath_math_Matrix3x3.addWith = function(this1,a) {
	var self = this1;
	self.m00 += a.m00;
	self.m10 += a.m10;
	self.m20 += a.m20;
	self.m01 += a.m01;
	self.m11 += a.m11;
	self.m21 += a.m21;
	self.m02 += a.m02;
	self.m12 += a.m12;
	self.m22 += a.m22;
	return self;
};
hxmath_math_Matrix3x3.subtractWith = function(this1,a) {
	var self = this1;
	self.m00 -= a.m00;
	self.m10 -= a.m10;
	self.m20 -= a.m20;
	self.m01 -= a.m01;
	self.m11 -= a.m11;
	self.m21 -= a.m21;
	self.m02 -= a.m02;
	self.m12 -= a.m12;
	self.m22 -= a.m22;
	return self;
};
hxmath_math_Matrix3x3.copyTo = function(this1,target) {
	var self = this1;
	var self1 = self;
	var value = self1.m00;
	var self1 = target;
	self1.m00 = value;
	var self1 = self;
	var value = self1.m10;
	var self1 = target;
	self1.m10 = value;
	var self1 = self;
	var value = self1.m20;
	var self1 = target;
	self1.m20 = value;
	var self1 = self;
	var value = self1.m01;
	var self1 = target;
	self1.m01 = value;
	var self1 = self;
	var value = self1.m11;
	var self1 = target;
	self1.m11 = value;
	var self1 = self;
	var value = self1.m21;
	var self1 = target;
	self1.m21 = value;
	var self1 = self;
	var value = self1.m02;
	var self1 = target;
	self1.m02 = value;
	var self1 = self;
	var value = self1.m12;
	var self1 = target;
	self1.m12 = value;
	var self1 = self;
	var value = self1.m22;
	var self = target;
	self.m22 = value;
};
hxmath_math_Matrix3x3.copyToShape = function(this1,target) {
	var self = this1;
	target.m00 = self.m00;
	target.m01 = self.m01;
	target.m02 = self.m02;
	target.m10 = self.m10;
	target.m11 = self.m11;
	target.m12 = self.m12;
	target.m20 = self.m20;
	target.m21 = self.m21;
	target.m22 = self.m22;
};
hxmath_math_Matrix3x3.copyFromShape = function(this1,source) {
	var self = this1;
	self.m00 = source.m00;
	self.m01 = source.m01;
	self.m02 = source.m02;
	self.m10 = source.m10;
	self.m11 = source.m11;
	self.m12 = source.m12;
	self.m20 = source.m20;
	self.m21 = source.m21;
	self.m22 = source.m22;
};
hxmath_math_Matrix3x3.clone = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Matrix3x3Default(self.m00,self.m10,self.m20,self.m01,self.m11,self.m21,self.m02,self.m12,self.m22);
	return this1;
};
hxmath_math_Matrix3x3.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.m00;
	case 1:
		return self.m10;
	case 2:
		return self.m20;
	case 3:
		return self.m01;
	case 4:
		return self.m11;
	case 5:
		return self.m21;
	case 6:
		return self.m02;
	case 7:
		return self.m12;
	case 8:
		return self.m22;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix3x3.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.m00 = value;
	case 1:
		return self.m10 = value;
	case 2:
		return self.m20 = value;
	case 3:
		return self.m01 = value;
	case 4:
		return self.m11 = value;
	case 5:
		return self.m21 = value;
	case 6:
		return self.m02 = value;
	case 7:
		return self.m12 = value;
	case 8:
		return self.m22 = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix3x3.getElement = function(this1,column,row) {
	var self = this1;
	var self1 = self;
	switch(row * 3 + column) {
	case 0:
		return self1.m00;
	case 1:
		return self1.m10;
	case 2:
		return self1.m20;
	case 3:
		return self1.m01;
	case 4:
		return self1.m11;
	case 5:
		return self1.m21;
	case 6:
		return self1.m02;
	case 7:
		return self1.m12;
	case 8:
		return self1.m22;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix3x3.setElement = function(this1,column,row,value) {
	var self = this1;
	var self1 = self;
	switch(row * 3 + column) {
	case 0:
		return self1.m00 = value;
	case 1:
		return self1.m10 = value;
	case 2:
		return self1.m20 = value;
	case 3:
		return self1.m01 = value;
	case 4:
		return self1.m11 = value;
	case 5:
		return self1.m21 = value;
	case 6:
		return self1.m02 = value;
	case 7:
		return self1.m12 = value;
	case 8:
		return self1.m22 = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix3x3.col = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		var this1 = new hxmath_math_Vector3Default(self.m00,self.m01,self.m02);
		return this1;
	case 1:
		var this1 = new hxmath_math_Vector3Default(self.m10,self.m11,self.m12);
		return this1;
	case 2:
		var this1 = new hxmath_math_Vector3Default(self.m20,self.m21,self.m22);
		return this1;
	default:
		throw haxe_Exception.thrown("Invalid column");
	}
};
hxmath_math_Matrix3x3.row = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		var this1 = new hxmath_math_Vector3Default(self.m00,self.m10,self.m20);
		return this1;
	case 1:
		var this1 = new hxmath_math_Vector3Default(self.m01,self.m11,self.m21);
		return this1;
	case 2:
		var this1 = new hxmath_math_Vector3Default(self.m02,self.m12,self.m22);
		return this1;
	default:
		throw haxe_Exception.thrown("Invalid row");
	}
};
hxmath_math_Matrix3x3.applyScalarFunc = function(this1,func) {
	var self = this1;
	var self1 = self;
	var value = func(self1.m00);
	var self1 = self;
	self1.m00 = value;
	var self1 = self;
	var value = func(self1.m10);
	var self1 = self;
	self1.m10 = value;
	var self1 = self;
	var value = func(self1.m20);
	var self1 = self;
	self1.m20 = value;
	var self1 = self;
	var value = func(self1.m01);
	var self1 = self;
	self1.m01 = value;
	var self1 = self;
	var value = func(self1.m11);
	var self1 = self;
	self1.m11 = value;
	var self1 = self;
	var value = func(self1.m21);
	var self1 = self;
	self1.m21 = value;
	var self1 = self;
	var value = func(self1.m02);
	var self1 = self;
	self1.m02 = value;
	var self1 = self;
	var value = func(self1.m12);
	var self1 = self;
	self1.m12 = value;
	var self1 = self;
	var value = func(self1.m22);
	var self1 = self;
	self1.m22 = value;
	return self;
};
hxmath_math_Matrix3x3.get_zero = function() {
	var this1 = new hxmath_math_Matrix3x3Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
	return this1;
};
hxmath_math_Matrix3x3.get_identity = function() {
	var this1 = new hxmath_math_Matrix3x3Default(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
	return this1;
};
hxmath_math_Matrix3x3.get_det = function(this1) {
	var self = this1;
	var m01 = self.m01;
	var m11 = self.m11;
	var m21 = self.m21;
	var m02 = self.m02;
	var m12 = self.m12;
	var m22 = self.m22;
	return self.m00 * (m11 * m22 - m21 * m12) - self.m10 * (m01 * m22 - m21 * m02) + self.m20 * (m01 * m12 - m11 * m02);
};
hxmath_math_Matrix3x3.get_transpose = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Matrix3x3Default(self.m00,self.m01,self.m02,self.m10,self.m11,self.m12,self.m20,self.m21,self.m22);
	return this1;
};
var hxmath_math_Matrix4x4Default = function(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	this.m00 = m00;
	this.m10 = m10;
	this.m20 = m20;
	this.m30 = m30;
	this.m01 = m01;
	this.m11 = m11;
	this.m21 = m21;
	this.m31 = m31;
	this.m02 = m02;
	this.m12 = m12;
	this.m22 = m22;
	this.m32 = m32;
	this.m03 = m03;
	this.m13 = m13;
	this.m23 = m23;
	this.m33 = m33;
};
$hxClasses["hxmath.math.Matrix4x4Default"] = hxmath_math_Matrix4x4Default;
hxmath_math_Matrix4x4Default.__name__ = true;
hxmath_math_Matrix4x4Default.prototype = {
	m00: null
	,m01: null
	,m02: null
	,m03: null
	,m10: null
	,m11: null
	,m12: null
	,m13: null
	,m20: null
	,m21: null
	,m22: null
	,m23: null
	,m30: null
	,m31: null
	,m32: null
	,m33: null
	,toString: function() {
		return "[[" + this.m00 + ", " + this.m10 + ", " + this.m20 + ", " + this.m30 + "], [" + this.m01 + ", " + this.m11 + ", " + this.m21 + ", " + this.m31 + "], [" + this.m02 + ", " + this.m12 + ", " + this.m22 + ", " + this.m32 + "], [" + this.m03 + ", " + this.m13 + ", " + this.m23 + ", " + this.m33 + "]]";
	}
	,__class__: hxmath_math_Matrix4x4Default
};
var hxmath_math_Matrix4x4 = {};
hxmath_math_Matrix4x4.__properties__ = {get_subMatrix:"get_subMatrix",get_transpose:"get_transpose",get_det:"get_det",set_t:"set_t",get_t:"get_t",get_identity:"get_identity",get_zero:"get_zero"};
hxmath_math_Matrix4x4._new = function(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	var this1 = new hxmath_math_Matrix4x4Default(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33);
	return this1;
};
hxmath_math_Matrix4x4.fromArray = function(rawData) {
	if(rawData.length != 16) {
		throw haxe_Exception.thrown("Invalid rawData.");
	}
	var this1 = new hxmath_math_Matrix4x4Default(rawData[0],rawData[1],rawData[2],rawData[3],rawData[4],rawData[5],rawData[6],rawData[7],rawData[8],rawData[9],rawData[10],rawData[11],rawData[12],rawData[13],rawData[14],rawData[15]);
	return this1;
};
hxmath_math_Matrix4x4.fromMatrix4x4Shape = function(other) {
	var this1 = new hxmath_math_Matrix4x4Default(other.m00,other.m10,other.m20,other.m30,other.m01,other.m11,other.m21,other.m31,other.m02,other.m12,other.m22,other.m32,other.m03,other.m13,other.m23,other.m33);
	return this1;
};
hxmath_math_Matrix4x4.multiplyVector = function(a,v) {
	var this1 = new hxmath_math_Vector4Default(a.m00 * v.x + a.m10 * v.y + a.m20 * v.z + a.m30 * v.w,a.m01 * v.x + a.m11 * v.y + a.m21 * v.z + a.m31 * v.w,a.m02 * v.x + a.m12 * v.y + a.m22 * v.z + a.m32 * v.w,a.m03 * v.x + a.m13 * v.y + a.m23 * v.z + a.m33 * v.w);
	return this1;
};
hxmath_math_Matrix4x4.multiply = function(a,b) {
	var this1 = new hxmath_math_Matrix4x4Default(a.m00 * b.m00 + a.m10 * b.m01 + a.m20 * b.m02 + a.m30 * b.m03,a.m00 * b.m10 + a.m10 * b.m11 + a.m20 * b.m12 + a.m30 * b.m13,a.m00 * b.m20 + a.m10 * b.m21 + a.m20 * b.m22 + a.m30 * b.m23,a.m00 * b.m30 + a.m10 * b.m31 + a.m20 * b.m32 + a.m30 * b.m33,a.m01 * b.m00 + a.m11 * b.m01 + a.m21 * b.m02 + a.m31 * b.m03,a.m01 * b.m10 + a.m11 * b.m11 + a.m21 * b.m12 + a.m31 * b.m13,a.m01 * b.m20 + a.m11 * b.m21 + a.m21 * b.m22 + a.m31 * b.m23,a.m01 * b.m30 + a.m11 * b.m31 + a.m21 * b.m32 + a.m31 * b.m33,a.m02 * b.m00 + a.m12 * b.m01 + a.m22 * b.m02 + a.m32 * b.m03,a.m02 * b.m10 + a.m12 * b.m11 + a.m22 * b.m12 + a.m32 * b.m13,a.m02 * b.m20 + a.m12 * b.m21 + a.m22 * b.m22 + a.m32 * b.m23,a.m02 * b.m30 + a.m12 * b.m31 + a.m22 * b.m32 + a.m32 * b.m33,a.m03 * b.m00 + a.m13 * b.m01 + a.m23 * b.m02 + a.m33 * b.m03,a.m03 * b.m10 + a.m13 * b.m11 + a.m23 * b.m12 + a.m33 * b.m13,a.m03 * b.m20 + a.m13 * b.m21 + a.m23 * b.m22 + a.m33 * b.m23,a.m03 * b.m30 + a.m13 * b.m31 + a.m23 * b.m32 + a.m33 * b.m33);
	return this1;
};
hxmath_math_Matrix4x4.add = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Matrix4x4Default(self.m00,self.m10,self.m20,self.m30,self.m01,self.m11,self.m21,self.m31,self.m02,self.m12,self.m22,self.m32,self.m03,self.m13,self.m23,self.m33);
	var self = this1;
	self.m00 += b.m00;
	self.m10 += b.m10;
	self.m20 += b.m20;
	self.m30 += b.m30;
	self.m01 += b.m01;
	self.m11 += b.m11;
	self.m21 += b.m21;
	self.m31 += b.m31;
	self.m02 += b.m02;
	self.m12 += b.m12;
	self.m22 += b.m22;
	self.m32 += b.m32;
	self.m03 += b.m03;
	self.m13 += b.m13;
	self.m23 += b.m23;
	self.m33 += b.m33;
	return self;
};
hxmath_math_Matrix4x4.subtract = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Matrix4x4Default(self.m00,self.m10,self.m20,self.m30,self.m01,self.m11,self.m21,self.m31,self.m02,self.m12,self.m22,self.m32,self.m03,self.m13,self.m23,self.m33);
	var self = this1;
	self.m00 -= b.m00;
	self.m10 -= b.m10;
	self.m20 -= b.m20;
	self.m30 -= b.m30;
	self.m01 -= b.m01;
	self.m11 -= b.m11;
	self.m21 -= b.m21;
	self.m31 -= b.m31;
	self.m02 -= b.m02;
	self.m12 -= b.m12;
	self.m22 -= b.m22;
	self.m32 -= b.m32;
	self.m03 -= b.m03;
	self.m13 -= b.m13;
	self.m23 -= b.m23;
	self.m33 -= b.m33;
	return self;
};
hxmath_math_Matrix4x4.negate = function(a) {
	var this1 = new hxmath_math_Matrix4x4Default(-a.m00,-a.m10,-a.m20,-a.m30,-a.m01,-a.m11,-a.m21,-a.m31,-a.m02,-a.m12,-a.m22,-a.m32,-a.m03,-a.m13,-a.m23,-a.m33);
	return this1;
};
hxmath_math_Matrix4x4.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.m00 == b.m00 && a.m10 == b.m10 && a.m20 == b.m20 && a.m30 == b.m30 && a.m01 == b.m01 && a.m11 == b.m11 && a.m21 == b.m21 && a.m31 == b.m31 && a.m02 == b.m02 && a.m12 == b.m12 && a.m22 == b.m22 && a.m32 == b.m32 && a.m03 == b.m03 && a.m13 == b.m13 && a.m23 == b.m23) {
			return a.m33 == b.m33;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math_Matrix4x4.set = function(this1,m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	var self = this1;
	self.m00 = m00;
	self.m10 = m10;
	self.m20 = m20;
	self.m30 = m30;
	self.m01 = m01;
	self.m11 = m11;
	self.m21 = m21;
	self.m31 = m31;
	self.m02 = m02;
	self.m12 = m12;
	self.m22 = m22;
	self.m32 = m32;
	self.m03 = m03;
	self.m13 = m13;
	self.m23 = m23;
	self.m33 = m33;
	return self;
};
hxmath_math_Matrix4x4.addWith = function(this1,a) {
	var self = this1;
	self.m00 += a.m00;
	self.m10 += a.m10;
	self.m20 += a.m20;
	self.m30 += a.m30;
	self.m01 += a.m01;
	self.m11 += a.m11;
	self.m21 += a.m21;
	self.m31 += a.m31;
	self.m02 += a.m02;
	self.m12 += a.m12;
	self.m22 += a.m22;
	self.m32 += a.m32;
	self.m03 += a.m03;
	self.m13 += a.m13;
	self.m23 += a.m23;
	self.m33 += a.m33;
	return self;
};
hxmath_math_Matrix4x4.subtractWith = function(this1,a) {
	var self = this1;
	self.m00 -= a.m00;
	self.m10 -= a.m10;
	self.m20 -= a.m20;
	self.m30 -= a.m30;
	self.m01 -= a.m01;
	self.m11 -= a.m11;
	self.m21 -= a.m21;
	self.m31 -= a.m31;
	self.m02 -= a.m02;
	self.m12 -= a.m12;
	self.m22 -= a.m22;
	self.m32 -= a.m32;
	self.m03 -= a.m03;
	self.m13 -= a.m13;
	self.m23 -= a.m23;
	self.m33 -= a.m33;
	return self;
};
hxmath_math_Matrix4x4.copyTo = function(this1,target) {
	var self = this1;
	var self1 = self;
	var value = self1.m00;
	var self1 = target;
	self1.m00 = value;
	var self1 = self;
	var value = self1.m10;
	var self1 = target;
	self1.m10 = value;
	var self1 = self;
	var value = self1.m20;
	var self1 = target;
	self1.m20 = value;
	var self1 = self;
	var value = self1.m30;
	var self1 = target;
	self1.m30 = value;
	var self1 = self;
	var value = self1.m01;
	var self1 = target;
	self1.m01 = value;
	var self1 = self;
	var value = self1.m11;
	var self1 = target;
	self1.m11 = value;
	var self1 = self;
	var value = self1.m21;
	var self1 = target;
	self1.m21 = value;
	var self1 = self;
	var value = self1.m31;
	var self1 = target;
	self1.m31 = value;
	var self1 = self;
	var value = self1.m02;
	var self1 = target;
	self1.m02 = value;
	var self1 = self;
	var value = self1.m12;
	var self1 = target;
	self1.m12 = value;
	var self1 = self;
	var value = self1.m22;
	var self1 = target;
	self1.m22 = value;
	var self1 = self;
	var value = self1.m32;
	var self1 = target;
	self1.m32 = value;
	var self1 = self;
	var value = self1.m03;
	var self1 = target;
	self1.m03 = value;
	var self1 = self;
	var value = self1.m13;
	var self1 = target;
	self1.m13 = value;
	var self1 = self;
	var value = self1.m23;
	var self1 = target;
	self1.m23 = value;
	var self1 = self;
	var value = self1.m33;
	var self = target;
	self.m33 = value;
};
hxmath_math_Matrix4x4.copyToShape = function(this1,target) {
	var self = this1;
	target.m00 = self.m00;
	target.m01 = self.m01;
	target.m02 = self.m02;
	target.m03 = self.m03;
	target.m10 = self.m10;
	target.m11 = self.m11;
	target.m12 = self.m12;
	target.m13 = self.m13;
	target.m20 = self.m20;
	target.m21 = self.m21;
	target.m22 = self.m22;
	target.m23 = self.m23;
	target.m30 = self.m30;
	target.m31 = self.m31;
	target.m32 = self.m32;
	target.m33 = self.m33;
};
hxmath_math_Matrix4x4.copyFromShape = function(this1,source) {
	var self = this1;
	self.m00 = source.m00;
	self.m01 = source.m01;
	self.m02 = source.m02;
	self.m03 = source.m03;
	self.m10 = source.m10;
	self.m11 = source.m11;
	self.m12 = source.m12;
	self.m13 = source.m13;
	self.m20 = source.m20;
	self.m21 = source.m21;
	self.m22 = source.m22;
	self.m23 = source.m23;
	self.m30 = source.m30;
	self.m31 = source.m31;
	self.m32 = source.m32;
	self.m33 = source.m33;
};
hxmath_math_Matrix4x4.setRotateFromQuaternion = function(this1,q) {
	var self = this1;
	var s = q.s;
	var x = q.x;
	var y = q.y;
	var z = q.z;
	self.m00 = 1 - 2 * (y * y + z * z);
	self.m10 = 2 * (x * y - s * z);
	self.m20 = 2 * (s * y + x * z);
	self.m01 = 2 * (x * y + s * z);
	self.m11 = 1 - 2 * (x * x + z * z);
	self.m21 = 2 * (y * z - s * x);
	self.m02 = 2 * (x * z - s * y);
	self.m12 = 2 * (y * z + s * x);
	self.m22 = 1 - 2 * (x * x + y * y);
	return self;
};
hxmath_math_Matrix4x4.setTranslate = function(this1,x,y,z) {
	var self = this1;
	self.m30 = x;
	self.m31 = y;
	self.m32 = z;
	self.m33 = 1.0;
	return self;
};
hxmath_math_Matrix4x4.clone = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Matrix4x4Default(self.m00,self.m10,self.m20,self.m30,self.m01,self.m11,self.m21,self.m31,self.m02,self.m12,self.m22,self.m32,self.m03,self.m13,self.m23,self.m33);
	return this1;
};
hxmath_math_Matrix4x4.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.m00;
	case 1:
		return self.m10;
	case 2:
		return self.m20;
	case 3:
		return self.m30;
	case 4:
		return self.m01;
	case 5:
		return self.m11;
	case 6:
		return self.m21;
	case 7:
		return self.m31;
	case 8:
		return self.m02;
	case 9:
		return self.m12;
	case 10:
		return self.m22;
	case 11:
		return self.m32;
	case 12:
		return self.m03;
	case 13:
		return self.m13;
	case 14:
		return self.m23;
	case 15:
		return self.m33;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix4x4.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.m00 = value;
	case 1:
		return self.m10 = value;
	case 2:
		return self.m20 = value;
	case 3:
		return self.m30 = value;
	case 4:
		return self.m01 = value;
	case 5:
		return self.m11 = value;
	case 6:
		return self.m21 = value;
	case 7:
		return self.m31 = value;
	case 8:
		return self.m02 = value;
	case 9:
		return self.m12 = value;
	case 10:
		return self.m22 = value;
	case 11:
		return self.m32 = value;
	case 12:
		return self.m03 = value;
	case 13:
		return self.m13 = value;
	case 14:
		return self.m23 = value;
	case 15:
		return self.m33 = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix4x4.getElement = function(this1,column,row) {
	var self = this1;
	var self1 = self;
	switch(row * 4 + column) {
	case 0:
		return self1.m00;
	case 1:
		return self1.m10;
	case 2:
		return self1.m20;
	case 3:
		return self1.m30;
	case 4:
		return self1.m01;
	case 5:
		return self1.m11;
	case 6:
		return self1.m21;
	case 7:
		return self1.m31;
	case 8:
		return self1.m02;
	case 9:
		return self1.m12;
	case 10:
		return self1.m22;
	case 11:
		return self1.m32;
	case 12:
		return self1.m03;
	case 13:
		return self1.m13;
	case 14:
		return self1.m23;
	case 15:
		return self1.m33;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix4x4.setElement = function(this1,column,row,value) {
	var self = this1;
	var self1 = self;
	switch(row * 4 + column) {
	case 0:
		return self1.m00 = value;
	case 1:
		return self1.m10 = value;
	case 2:
		return self1.m20 = value;
	case 3:
		return self1.m30 = value;
	case 4:
		return self1.m01 = value;
	case 5:
		return self1.m11 = value;
	case 6:
		return self1.m21 = value;
	case 7:
		return self1.m31 = value;
	case 8:
		return self1.m02 = value;
	case 9:
		return self1.m12 = value;
	case 10:
		return self1.m22 = value;
	case 11:
		return self1.m32 = value;
	case 12:
		return self1.m03 = value;
	case 13:
		return self1.m13 = value;
	case 14:
		return self1.m23 = value;
	case 15:
		return self1.m33 = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Matrix4x4.col = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		var this1 = new hxmath_math_Vector4Default(self.m00,self.m01,self.m02,self.m03);
		return this1;
	case 1:
		var this1 = new hxmath_math_Vector4Default(self.m10,self.m11,self.m12,self.m13);
		return this1;
	case 2:
		var this1 = new hxmath_math_Vector4Default(self.m20,self.m21,self.m22,self.m23);
		return this1;
	case 3:
		var this1 = new hxmath_math_Vector4Default(self.m30,self.m31,self.m32,self.m33);
		return this1;
	default:
		throw haxe_Exception.thrown("Invalid column");
	}
};
hxmath_math_Matrix4x4.row = function(this1,index) {
	var self = this1;
	switch(index) {
	case 0:
		var this1 = new hxmath_math_Vector4Default(self.m00,self.m10,self.m20,self.m30);
		return this1;
	case 1:
		var this1 = new hxmath_math_Vector4Default(self.m01,self.m11,self.m21,self.m31);
		return this1;
	case 2:
		var this1 = new hxmath_math_Vector4Default(self.m02,self.m12,self.m22,self.m32);
		return this1;
	case 3:
		var this1 = new hxmath_math_Vector4Default(self.m03,self.m13,self.m23,self.m33);
		return this1;
	default:
		throw haxe_Exception.thrown("Invalid row");
	}
};
hxmath_math_Matrix4x4.applyScalarFunc = function(this1,func) {
	var self = this1;
	var self1 = self;
	var value = func(self1.m00);
	var self1 = self;
	self1.m00 = value;
	var self1 = self;
	var value = func(self1.m10);
	var self1 = self;
	self1.m10 = value;
	var self1 = self;
	var value = func(self1.m20);
	var self1 = self;
	self1.m20 = value;
	var self1 = self;
	var value = func(self1.m30);
	var self1 = self;
	self1.m30 = value;
	var self1 = self;
	var value = func(self1.m01);
	var self1 = self;
	self1.m01 = value;
	var self1 = self;
	var value = func(self1.m11);
	var self1 = self;
	self1.m11 = value;
	var self1 = self;
	var value = func(self1.m21);
	var self1 = self;
	self1.m21 = value;
	var self1 = self;
	var value = func(self1.m31);
	var self1 = self;
	self1.m31 = value;
	var self1 = self;
	var value = func(self1.m02);
	var self1 = self;
	self1.m02 = value;
	var self1 = self;
	var value = func(self1.m12);
	var self1 = self;
	self1.m12 = value;
	var self1 = self;
	var value = func(self1.m22);
	var self1 = self;
	self1.m22 = value;
	var self1 = self;
	var value = func(self1.m32);
	var self1 = self;
	self1.m32 = value;
	var self1 = self;
	var value = func(self1.m03);
	var self1 = self;
	self1.m03 = value;
	var self1 = self;
	var value = func(self1.m13);
	var self1 = self;
	self1.m13 = value;
	var self1 = self;
	var value = func(self1.m23);
	var self1 = self;
	self1.m23 = value;
	var self1 = self;
	var value = func(self1.m33);
	var self1 = self;
	self1.m33 = value;
	return self;
};
hxmath_math_Matrix4x4.applySubMatrixTranspose = function(this1) {
	var self = this1;
	var temp = self.m01;
	self.m01 = self.m10;
	self.m10 = temp;
	temp = self.m02;
	self.m02 = self.m20;
	self.m20 = temp;
	temp = self.m12;
	self.m12 = self.m21;
	self.m21 = temp;
	return self;
};
hxmath_math_Matrix4x4.applyInvertFrame = function(this1) {
	var self = this1;
	var self1 = self;
	var temp = self1.m01;
	self1.m01 = self1.m10;
	self1.m10 = temp;
	temp = self1.m02;
	self1.m02 = self1.m20;
	self1.m20 = temp;
	temp = self1.m12;
	self1.m12 = self1.m21;
	self1.m21 = temp;
	var tx = -(self.m00 * self.m30 + self.m10 * self.m31 + self.m20 * self.m32);
	var ty = -(self.m01 * self.m30 + self.m11 * self.m31 + self.m21 * self.m32);
	var tz = -(self.m02 * self.m30 + self.m12 * self.m31 + self.m22 * self.m32);
	self.m30 = tx;
	self.m31 = ty;
	self.m32 = tz;
	return self;
};
hxmath_math_Matrix4x4.get_zero = function() {
	var this1 = new hxmath_math_Matrix4x4Default(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
	return this1;
};
hxmath_math_Matrix4x4.get_identity = function() {
	var this1 = new hxmath_math_Matrix4x4Default(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	return this1;
};
hxmath_math_Matrix4x4.get_t = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Vector3Default(self.m30,self.m31,self.m32);
	return this1;
};
hxmath_math_Matrix4x4.set_t = function(this1,t) {
	var self = this1;
	self.m30 = t.x;
	self.m31 = t.y;
	self.m32 = t.z;
	return t;
};
hxmath_math_Matrix4x4.get_transpose = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Matrix4x4Default(self.m00,self.m01,self.m02,self.m03,self.m10,self.m11,self.m12,self.m13,self.m20,self.m21,self.m22,self.m23,self.m30,self.m31,self.m32,self.m33);
	return this1;
};
hxmath_math_Matrix4x4.get_det = function(this1) {
	var self = this1;
	var m01 = self.m01;
	var m11 = self.m11;
	var m21 = self.m21;
	var m31 = self.m31;
	var m02 = self.m02;
	var m12 = self.m12;
	var m22 = self.m22;
	var m32 = self.m32;
	var m03 = self.m03;
	var m13 = self.m13;
	var m23 = self.m23;
	var m33 = self.m33;
	return self.m00 * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)) - self.m10 * (m01 * (m22 * m33 - m32 * m23) - m21 * (m02 * m33 - m32 * m03) + m31 * (m02 * m23 - m22 * m03)) + self.m20 * (m01 * (m12 * m33 - m32 * m13) - m11 * (m02 * m33 - m32 * m03) + m31 * (m02 * m13 - m12 * m03)) - self.m30 * (m01 * (m12 * m23 - m22 * m13) - m11 * (m02 * m23 - m22 * m03) + m21 * (m02 * m13 - m12 * m03));
};
hxmath_math_Matrix4x4.get_subMatrix = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Matrix3x3Default(self.m00,self.m10,self.m20,self.m01,self.m11,self.m21,self.m02,self.m12,self.m22);
	return this1;
};
var hxmath_math_QuaternionDefault = function(s,x,y,z) {
	this.s = s;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["hxmath.math.QuaternionDefault"] = hxmath_math_QuaternionDefault;
hxmath_math_QuaternionDefault.__name__ = true;
hxmath_math_QuaternionDefault.prototype = {
	s: null
	,x: null
	,y: null
	,z: null
	,toString: function() {
		return "[" + this.s + ", (" + this.x + ", " + this.y + ", " + this.z + ")]";
	}
	,__class__: hxmath_math_QuaternionDefault
};
var hxmath_math_Quaternion = {};
hxmath_math_Quaternion.__properties__ = {get_normal:"get_normal",get_lengthSq:"get_lengthSq",get_length:"get_length",get_matrix:"get_matrix",get_identity:"get_identity",get_zero:"get_zero"};
hxmath_math_Quaternion._new = function(s,x,y,z) {
	var this1 = new hxmath_math_QuaternionDefault(s,x,y,z);
	return this1;
};
hxmath_math_Quaternion.fromArray = function(rawData) {
	if(rawData.length != 4) {
		throw haxe_Exception.thrown("Invalid rawData.");
	}
	var this1 = new hxmath_math_QuaternionDefault(rawData[0],rawData[1],rawData[2],rawData[3]);
	return this1;
};
hxmath_math_Quaternion.fromAxisAngle = function(angleDegrees,axis) {
	var angleRadians = Math.PI / 180 * angleDegrees;
	var cosHalfAngle = Math.cos(angleRadians / 2.0);
	var sinHalfAngle = Math.sin(angleRadians / 2.0);
	var this1 = new hxmath_math_QuaternionDefault(cosHalfAngle,sinHalfAngle * axis.x,sinHalfAngle * axis.y,sinHalfAngle * axis.z);
	return this1;
};
hxmath_math_Quaternion.multiplyScalar = function(a,s) {
	var self = a;
	var this1 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
	var self = this1;
	self.s *= s;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math_Quaternion.multiply = function(a,b) {
	var this1 = new hxmath_math_QuaternionDefault(a.s * b.s - a.x * b.x - a.y * b.y - a.z * b.z,a.s * b.x + b.s * a.x + a.y * b.z - a.z * b.y,a.s * b.y + b.s * a.y + a.z * b.x - a.x * b.z,a.s * b.z + b.s * a.z + a.x * b.y - a.y * b.x);
	return this1;
};
hxmath_math_Quaternion.add = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
	var self = this1;
	self.s += b.s;
	self.x += b.x;
	self.y += b.y;
	self.z += b.z;
	return self;
};
hxmath_math_Quaternion.subtract = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
	var self = this1;
	self.s -= b.s;
	self.x -= b.x;
	self.y -= b.y;
	self.z -= b.z;
	return self;
};
hxmath_math_Quaternion.conjugate = function(a) {
	var this1 = new hxmath_math_QuaternionDefault(a.s,-a.x,-a.y,-a.z);
	return this1;
};
hxmath_math_Quaternion.negate = function(a) {
	var this1 = new hxmath_math_QuaternionDefault(-a.s,-a.x,-a.y,-a.z);
	return this1;
};
hxmath_math_Quaternion.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.s == b.s && a.x == b.x && a.y == b.y) {
			return a.z == b.z;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math_Quaternion.lerp = function(a,b,t) {
	var s = 1.0 - t;
	var self = a;
	var self_s = self.s;
	var self_x = self.x;
	var self_y = self.y;
	var self_z = self.z;
	self_s *= s;
	self_x *= s;
	self_y *= s;
	self_z *= s;
	var self = b;
	var b_s = self.s;
	var b_x = self.x;
	var b_y = self.y;
	var b_z = self.z;
	b_s *= t;
	b_x *= t;
	b_y *= t;
	b_z *= t;
	var this1 = new hxmath_math_QuaternionDefault(self_s,self_x,self_y,self_z);
	var self = this1;
	self.s += b_s;
	self.x += b_x;
	self.y += b_y;
	self.z += b_z;
	return self;
};
hxmath_math_Quaternion.slerp = function(a,b,t) {
	var cosHalfTheta = a.s * b.s + a.x * b.x + a.y * b.y + a.z * b.z;
	if(Math.abs(cosHalfTheta) >= 1.0) {
		return a;
	}
	var halfTheta = Math.acos(cosHalfTheta);
	var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
	if(Math.abs(sinHalfTheta) < 1e-3) {
		var s = 1.0 - t;
		var self = a;
		var self_s = self.s;
		var self_x = self.x;
		var self_y = self.y;
		var self_z = self.z;
		self_s *= s;
		self_x *= s;
		self_y *= s;
		self_z *= s;
		var self = b;
		var b_s = self.s;
		var b_x = self.x;
		var b_y = self.y;
		var b_z = self.z;
		b_s *= t;
		b_x *= t;
		b_y *= t;
		b_z *= t;
		var this1 = new hxmath_math_QuaternionDefault(self_s,self_x,self_y,self_z);
		var self = this1;
		self.s += b_s;
		self.x += b_x;
		self.y += b_y;
		self.z += b_z;
		var self1 = self;
		var self = self1;
		var length = Math.sqrt(self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z);
		if(length > 0.0) {
			var k = 1.0 / length;
			var self = self1;
			self.s *= k;
			self.x *= k;
			self.y *= k;
			self.z *= k;
		}
		return self1;
	}
	var ta = Math.sin((1 - t) * halfTheta) / sinHalfTheta;
	var tb = Math.sin(t * halfTheta) / sinHalfTheta;
	var this1 = new hxmath_math_QuaternionDefault(0,0,0,0);
	var result = this1;
	result.x = a.x * ta + b.x * tb;
	result.y = a.y * ta + b.y * tb;
	result.z = a.z * ta + b.z * tb;
	result.s = a.s * ta + b.s * tb;
	return result;
};
hxmath_math_Quaternion.dot = function(a,b) {
	return a.s * b.s + a.x * b.x + a.y * b.y + a.z * b.z;
};
hxmath_math_Quaternion.set = function(this1,s,x,y,z) {
	var self = this1;
	self.s = s;
	self.x = x;
	self.y = y;
	self.z = z;
	return self;
};
hxmath_math_Quaternion.invert = function(this1) {
	var self = this1;
	var self1 = self;
	var this1 = new hxmath_math_QuaternionDefault(self1.s,self1.x,self1.y,self1.z);
	var self = this1;
	var self1 = self;
	self1.x = -self1.x;
	self1.y = -self1.y;
	self1.z = -self1.z;
	var self = self1;
	var self1 = self;
	var length = Math.sqrt(self1.s * self1.s + self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		var self1 = self;
		self1.s *= k;
		self1.x *= k;
		self1.y *= k;
		self1.z *= k;
	}
	return self;
};
hxmath_math_Quaternion.multiplyWithScalar = function(this1,s) {
	var self = this1;
	self.s *= s;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math_Quaternion.addWith = function(this1,a) {
	var self = this1;
	self.s += a.s;
	self.x += a.x;
	self.y += a.y;
	self.z += a.z;
	return self;
};
hxmath_math_Quaternion.subtractWith = function(this1,a) {
	var self = this1;
	self.s -= a.s;
	self.x -= a.x;
	self.y -= a.y;
	self.z -= a.z;
	return self;
};
hxmath_math_Quaternion.copyTo = function(this1,target) {
	var self = this1;
	var self1 = self;
	var value = self1.s;
	var self1 = target;
	self1.s = value;
	var self1 = self;
	var value = self1.x;
	var self1 = target;
	self1.x = value;
	var self1 = self;
	var value = self1.y;
	var self1 = target;
	self1.y = value;
	var self1 = self;
	var value = self1.z;
	var self = target;
	self.z = value;
};
hxmath_math_Quaternion.copyToShape = function(this1,target) {
	var self = this1;
	target.s = self.s;
	target.x = self.x;
	target.y = self.y;
	target.z = self.z;
};
hxmath_math_Quaternion.copyFromShape = function(this1,source) {
	var self = this1;
	self.s = source.s;
	self.x = source.x;
	self.y = source.y;
	self.z = source.z;
};
hxmath_math_Quaternion.clone = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_QuaternionDefault(self.s,self.x,self.y,self.z);
	return this1;
};
hxmath_math_Quaternion.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.s;
	case 1:
		return self.x;
	case 2:
		return self.y;
	case 3:
		return self.z;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Quaternion.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.s = value;
	case 1:
		return self.x = value;
	case 2:
		return self.y = value;
	case 3:
		return self.z = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Quaternion.applyScalarFunc = function(this1,func) {
	var self = this1;
	var self1 = self;
	var value = func(self1.s);
	var self1 = self;
	self1.s = value;
	var self1 = self;
	var value = func(self1.x);
	var self1 = self;
	self1.x = value;
	var self1 = self;
	var value = func(self1.y);
	var self1 = self;
	self1.y = value;
	var self1 = self;
	var value = func(self1.z);
	var self1 = self;
	self1.z = value;
	return self;
};
hxmath_math_Quaternion.log = function(this1) {
	var self = this1;
	var theta = Math.acos(self.s);
	var sinTheta = Math.sin(theta);
	if(sinTheta > 0.0) {
		var k = theta / sinTheta;
		var this1 = new hxmath_math_QuaternionDefault(0.0,k * self.x,k * self.y,k * self.z);
		return this1;
	} else {
		var this1 = new hxmath_math_QuaternionDefault(0,0,0,0);
		return this1;
	}
};
hxmath_math_Quaternion.exp = function(this1) {
	var self = this1;
	var theta = Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
	var sinTheta = Math.sin(theta);
	var cosTheta = Math.cos(theta);
	if(theta > 0.0) {
		var this1 = new hxmath_math_QuaternionDefault(cosTheta,sinTheta * self.x,sinTheta * self.y,sinTheta * self.z);
		return this1;
	} else {
		var this1 = new hxmath_math_QuaternionDefault(cosTheta,0,0,0);
		return this1;
	}
};
hxmath_math_Quaternion.rotate = function(this1,u) {
	var self = this1;
	var a = 2.0 * (self.x * u.x + self.y * u.y + self.z * u.z);
	var b = self.s * self.s - self.x * self.x - self.y * self.y - self.z * self.z;
	var c = 2.0 * self.s;
	var this1 = new hxmath_math_Vector3Default(a * self.x + b * u.x + c * (self.y * u.z - self.z * u.y),a * self.y + b * u.y + c * (self.z * u.x - self.x * u.z),a * self.z + b * u.z + c * (self.x * u.y - self.y * u.x));
	return this1;
};
hxmath_math_Quaternion.angleWith = function(this1,b) {
	var self = this1;
	var self1 = self;
	var self2 = b;
	return 2.0 * Math.acos((self.s * b.s + self.x * b.x + self.y * b.y + self.z * b.z) / (Math.sqrt(self1.s * self1.s + self1.x * self1.x + self1.y * self1.y + self1.z * self1.z) * Math.sqrt(self2.s * self2.s + self2.x * self2.x + self2.y * self2.y + self2.z * self2.z)));
};
hxmath_math_Quaternion.normalize = function(this1) {
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.s * self1.s + self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		var self1 = self;
		self1.s *= k;
		self1.x *= k;
		self1.y *= k;
		self1.z *= k;
	}
	return self;
};
hxmath_math_Quaternion.applyConjugate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	self.z = -self.z;
	return self;
};
hxmath_math_Quaternion.applyInvert = function(this1) {
	var self = this1;
	var self1 = self;
	self1.x = -self1.x;
	self1.y = -self1.y;
	self1.z = -self1.z;
	var self = self1;
	var self1 = self;
	var length = Math.sqrt(self1.s * self1.s + self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
	if(length > 0.0) {
		var k = 1.0 / length;
		var self1 = self;
		self1.s *= k;
		self1.x *= k;
		self1.y *= k;
		self1.z *= k;
	}
	return self;
};
hxmath_math_Quaternion.get_zero = function() {
	var this1 = new hxmath_math_QuaternionDefault(0,0,0,0);
	return this1;
};
hxmath_math_Quaternion.get_identity = function() {
	var this1 = new hxmath_math_QuaternionDefault(1,0,0,0);
	return this1;
};
hxmath_math_Quaternion.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z);
};
hxmath_math_Quaternion.get_lengthSq = function(this1) {
	var self = this1;
	return self.s * self.s + self.x * self.x + self.y * self.y + self.z * self.z;
};
hxmath_math_Quaternion.get_matrix = function(this1) {
	var self = this1;
	var s = self.s;
	var x = self.x;
	var y = self.y;
	var z = self.z;
	var this1 = new hxmath_math_Matrix3x3Default(1 - 2 * (y * y + z * z),2 * (x * y - s * z),2 * (s * y + x * z),2 * (x * y + s * z),1 - 2 * (x * x + z * z),2 * (y * z - s * x),2 * (x * z - s * y),2 * (y * z + s * x),1 - 2 * (x * x + y * y));
	var m = this1;
	return m;
};
hxmath_math_Quaternion.get_normal = function(this1) {
	var self = this1;
	var self1 = self;
	var s = 1.0 / Math.sqrt(self1.s * self1.s + self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
	var self1 = self;
	var this1 = new hxmath_math_QuaternionDefault(self1.s,self1.x,self1.y,self1.z);
	var self = this1;
	self.s *= s;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
var hxmath_math_Vector2 = {};
hxmath_math_Vector2.__properties__ = {get_rotatedRight:"get_rotatedRight",get_rotatedLeft:"get_rotatedLeft",get_normal:"get_normal",set_angle:"set_angle",get_angle:"get_angle",get_lengthSq:"get_lengthSq",get_length:"get_length",get_yAxis:"get_yAxis",get_xAxis:"get_xAxis",get_zero:"get_zero"};
hxmath_math_Vector2._new = function(x,y) {
	var this1 = new hxmath_math_Vector2Default(x,y);
	return this1;
};
hxmath_math_Vector2.fromArray = function(rawData) {
	if(rawData.length != 2) {
		throw haxe_Exception.thrown("Invalid rawData.");
	}
	var this1 = new hxmath_math_Vector2Default(rawData[0],rawData[1]);
	return this1;
};
hxmath_math_Vector2.fromPolar = function(angle,radius) {
	var this1 = new hxmath_math_Vector2Default(radius * Math.cos(angle),radius * Math.sin(angle));
	return this1;
};
hxmath_math_Vector2.fromVector2Shape = function(other) {
	var this1 = new hxmath_math_Vector2Default(other.x,other.y);
	return this1;
};
hxmath_math_Vector2.toIntVector2 = function(this1,func) {
	var self = this1;
	if(func == null) {
		func = function(x) {
			return x | 0;
		};
	}
	return hxmath_math_IntVector2._new(func(self.x),func(self.y));
};
hxmath_math_Vector2.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
hxmath_math_Vector2.multiply = function(a,s) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self = this1;
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math_Vector2.divide = function(a,s) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self = this1;
	self.x /= s;
	self.y /= s;
	return self;
};
hxmath_math_Vector2.add = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self = this1;
	self.x += b.x;
	self.y += b.y;
	return self;
};
hxmath_math_Vector2.subtract = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self = this1;
	self.x -= b.x;
	self.y -= b.y;
	return self;
};
hxmath_math_Vector2.negate = function(a) {
	var this1 = new hxmath_math_Vector2Default(-a.x,-a.y);
	return this1;
};
hxmath_math_Vector2.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x) {
			return a.y == b.y;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math_Vector2.lerp = function(a,b,t) {
	var this1 = new hxmath_math_Vector2Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y);
	return this1;
};
hxmath_math_Vector2.max = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self = this1;
	self.x = Math.max(self.x,b.x);
	self.y = Math.max(self.y,b.y);
	return self;
};
hxmath_math_Vector2.min = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self = this1;
	self.x = Math.min(self.x,b.x);
	self.y = Math.min(self.y,b.y);
	return self;
};
hxmath_math_Vector2.project = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self = this1;
	var s = (self.x * b.x + self.y * b.y) / (b.x * b.x + b.y * b.y);
	var self1 = b;
	var self2 = self1;
	var value = self2.x;
	var self2 = self;
	self2.x = value;
	var self2 = self1;
	var value = self2.y;
	var self1 = self;
	self1.y = value;
	var self1 = self;
	self1.x *= s;
	self1.y *= s;
	return self;
};
hxmath_math_Vector2.reflect = function(v,normal) {
	var self = v;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self = this1;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	var s = (self_x * normal.x + self_y * normal.y) / (normal.x * normal.x + normal.y * normal.y);
	var self1 = normal;
	var self2 = self1;
	var value = self2.x;
	self_x = value;
	var self2 = self1;
	var value = self2.y;
	self_y = value;
	self_x *= s;
	self_y *= s;
	self_x *= 2.0;
	self_y *= 2.0;
	var self1 = self;
	self1.x -= self_x;
	self1.y -= self_y;
	return self;
};
hxmath_math_Vector2.orthoNormalize = function(u,v) {
	var self = u;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		var self1 = self;
		self1.x /= length;
		self1.y /= length;
	}
	var self = v;
	var a_x = self.x;
	var a_y = self.y;
	var s = (a_x * u.x + a_y * u.y) / (u.x * u.x + u.y * u.y);
	var self = u;
	var self1 = self;
	var value = self1.x;
	a_x = value;
	var self1 = self;
	var value = self1.y;
	a_y = value;
	a_x *= s;
	a_y *= s;
	var self = v;
	self.x -= a_x;
	self.y -= a_y;
	var self = v;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		var self1 = self;
		self1.x /= length;
		self1.y /= length;
	}
};
hxmath_math_Vector2.set = function(this1,x,y) {
	var self = this1;
	self.x = x;
	self.y = y;
	return self;
};
hxmath_math_Vector2.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math_Vector2.divideWith = function(this1,s) {
	var self = this1;
	self.x /= s;
	self.y /= s;
	return self;
};
hxmath_math_Vector2.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	return self;
};
hxmath_math_Vector2.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	return self;
};
hxmath_math_Vector2.maxWith = function(this1,a) {
	var self = this1;
	self.x = Math.max(self.x,a.x);
	self.y = Math.max(self.y,a.y);
	return self;
};
hxmath_math_Vector2.minWith = function(this1,a) {
	var self = this1;
	self.x = Math.min(self.x,a.x);
	self.y = Math.min(self.y,a.y);
	return self;
};
hxmath_math_Vector2.projectOnto = function(this1,a) {
	var self = this1;
	var s = (self.x * a.x + self.y * a.y) / (a.x * a.x + a.y * a.y);
	var self1 = a;
	var self2 = self1;
	var value = self2.x;
	var self2 = self;
	self2.x = value;
	var self2 = self1;
	var value = self2.y;
	var self1 = self;
	self1.y = value;
	var self1 = self;
	self1.x *= s;
	self1.y *= s;
	return self;
};
hxmath_math_Vector2.reflectBy = function(this1,normal) {
	var self = this1;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	var s = (self_x * normal.x + self_y * normal.y) / (normal.x * normal.x + normal.y * normal.y);
	var self1 = normal;
	var self2 = self1;
	var value = self2.x;
	self_x = value;
	var self2 = self1;
	var value = self2.y;
	self_y = value;
	self_x *= s;
	self_y *= s;
	self_x *= 2.0;
	self_y *= 2.0;
	var self1 = self;
	self1.x -= self_x;
	self1.y -= self_y;
	return self;
};
hxmath_math_Vector2.copyTo = function(this1,target) {
	var self = this1;
	var self1 = self;
	var value = self1.x;
	var self1 = target;
	self1.x = value;
	var self1 = self;
	var value = self1.y;
	var self = target;
	self.y = value;
};
hxmath_math_Vector2.copyToShape = function(this1,target) {
	var self = this1;
	target.x = self.x;
	target.y = self.y;
};
hxmath_math_Vector2.copyFromShape = function(this1,source) {
	var self = this1;
	self.x = source.x;
	self.y = source.y;
};
hxmath_math_Vector2.clone = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	return this1;
};
hxmath_math_Vector2.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Vector2.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Vector2.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	return self;
};
hxmath_math_Vector2.applyScalarFunc = function(this1,func) {
	var self = this1;
	var self1 = self;
	var value = func(self1.x);
	var self1 = self;
	self1.x = value;
	var self1 = self;
	var value = func(self1.y);
	var self1 = self;
	self1.y = value;
	return self;
};
hxmath_math_Vector2.angleWith = function(this1,b) {
	var self = this1;
	var self1 = self;
	var self2 = b;
	return Math.acos((self.x * b.x + self.y * b.y) / (Math.sqrt(self1.x * self1.x + self1.y * self1.y) * Math.sqrt(self2.x * self2.x + self2.y * self2.y)));
};
hxmath_math_Vector2.signedAngleWith = function(this1,b) {
	var self = this1;
	var x = self.x * b.y - b.x * self.y;
	var self1 = self;
	var self = self1;
	var self2 = b;
	return (Math.abs(x) < 0 ? 0 : x <= 0 ? -1 : 1) * Math.acos((self1.x * b.x + self1.y * b.y) / (Math.sqrt(self.x * self.x + self.y * self.y) * Math.sqrt(self2.x * self2.x + self2.y * self2.y)));
};
hxmath_math_Vector2.distanceTo = function(this1,b) {
	var self = this1;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	self_x -= b.x;
	self_y -= b.y;
	return Math.sqrt(self_x * self_x + self_y * self_y);
};
hxmath_math_Vector2.normalize = function(this1) {
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		var self1 = self;
		self1.x /= length;
		self1.y /= length;
	}
	return self;
};
hxmath_math_Vector2.normalizeTo = function(this1,newLength) {
	var self = this1;
	var self1 = self;
	var self2 = self1;
	var length = Math.sqrt(self2.x * self2.x + self2.y * self2.y);
	if(length > 0.0) {
		var self2 = self1;
		self2.x /= length;
		self2.y /= length;
	}
	var self1 = self;
	self1.x *= newLength;
	self1.y *= newLength;
	return self;
};
hxmath_math_Vector2.clamp = function(this1,min,max) {
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length < min) {
		var self1 = self;
		var self2 = self1;
		var self3 = self2;
		var length1 = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
		if(length1 > 0.0) {
			var self3 = self2;
			self3.x /= length1;
			self3.y /= length1;
		}
		var self2 = self1;
		self2.x *= min;
		self2.y *= min;
	} else if(length > max) {
		var self1 = self;
		var self2 = self1;
		var self3 = self2;
		var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
		if(length > 0.0) {
			var self3 = self2;
			self3.x /= length;
			self3.y /= length;
		}
		var self2 = self1;
		self2.x *= max;
		self2.y *= max;
	}
	return self;
};
hxmath_math_Vector2.rotate = function(this1,angle,pivot) {
	var self = this1;
	var cosAngle = Math.cos(angle);
	var sinAngle = Math.sin(angle);
	var dx = self.x;
	var dy = self.y;
	if(pivot != null) {
		dx = self.x - pivot.x;
		dy = self.y - pivot.y;
	}
	self.x = dx * cosAngle - dy * sinAngle;
	self.y = dx * sinAngle + dy * cosAngle;
	return self;
};
hxmath_math_Vector2.rotateLeft = function(this1) {
	var self = this1;
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
hxmath_math_Vector2.rotateRight = function(this1) {
	var self = this1;
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
hxmath_math_Vector2.get_zero = function() {
	var this1 = new hxmath_math_Vector2Default(0.0,0.0);
	return this1;
};
hxmath_math_Vector2.get_xAxis = function() {
	var this1 = new hxmath_math_Vector2Default(1.0,0.0);
	return this1;
};
hxmath_math_Vector2.get_yAxis = function() {
	var this1 = new hxmath_math_Vector2Default(0.0,1.0);
	return this1;
};
hxmath_math_Vector2.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.x * self.x + self.y * self.y);
};
hxmath_math_Vector2.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y;
};
hxmath_math_Vector2.get_angle = function(this1) {
	var self = this1;
	return Math.atan2(self.y,self.x);
};
hxmath_math_Vector2.get_normal = function(this1) {
	var self = this1;
	var self1 = self;
	var this1 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		var self1 = self;
		self1.x /= length;
		self1.y /= length;
	}
	return self;
};
hxmath_math_Vector2.get_rotatedLeft = function(this1) {
	var self = this1;
	var self1 = self;
	var this1 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self = this1;
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
hxmath_math_Vector2.get_rotatedRight = function(this1) {
	var self = this1;
	var self1 = self;
	var this1 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self = this1;
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
hxmath_math_Vector2.set_angle = function(this1,angle) {
	var self = this1;
	var self1 = this1;
	var len = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	var y = len * Math.sin(angle);
	var self1 = self;
	self1.x = len * Math.cos(angle);
	self1.y = y;
	return angle;
};
var hxmath_math_Vector3Default = function(x,y,z) {
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["hxmath.math.Vector3Default"] = hxmath_math_Vector3Default;
hxmath_math_Vector3Default.__name__ = true;
hxmath_math_Vector3Default.prototype = {
	x: null
	,y: null
	,z: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: hxmath_math_Vector3Default
};
var hxmath_math_Vector3 = {};
hxmath_math_Vector3.__properties__ = {get_lengthSq:"get_lengthSq",get_length:"get_length",get_zAxis:"get_zAxis",get_yAxis:"get_yAxis",get_xAxis:"get_xAxis",get_zero:"get_zero"};
hxmath_math_Vector3._new = function(x,y,z) {
	var this1 = new hxmath_math_Vector3Default(x,y,z);
	return this1;
};
hxmath_math_Vector3.fromArray = function(rawData) {
	if(rawData.length != 3) {
		throw haxe_Exception.thrown("Invalid rawData.");
	}
	var this1 = new hxmath_math_Vector3Default(rawData[0],rawData[1],rawData[2]);
	return this1;
};
hxmath_math_Vector3.fromVector3Shape = function(other) {
	var this1 = new hxmath_math_Vector3Default(other.x,other.y,other.z);
	return this1;
};
hxmath_math_Vector3.dot = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z;
};
hxmath_math_Vector3.cross = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var self = this1;
	var newX = self.y * b.z - self.z * b.y;
	var newY = self.z * b.x - self.x * b.z;
	var newZ = self.x * b.y - self.y * b.x;
	self.x = newX;
	self.y = newY;
	self.z = newZ;
	return self;
};
hxmath_math_Vector3.multiply = function(a,s) {
	var self = a;
	var this1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var self = this1;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math_Vector3.divide = function(a,s) {
	var self = a;
	var this1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var self = this1;
	self.x /= s;
	self.y /= s;
	self.z /= s;
	return self;
};
hxmath_math_Vector3.add = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var self = this1;
	self.x += b.x;
	self.y += b.y;
	self.z += b.z;
	return self;
};
hxmath_math_Vector3.subtract = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var self = this1;
	self.x -= b.x;
	self.y -= b.y;
	self.z -= b.z;
	return self;
};
hxmath_math_Vector3.negate = function(a) {
	var this1 = new hxmath_math_Vector3Default(-a.x,-a.y,-a.z);
	return this1;
};
hxmath_math_Vector3.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x && a.y == b.y) {
			return a.z == b.z;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math_Vector3.lerp = function(a,b,t) {
	var this1 = new hxmath_math_Vector3Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y,(1.0 - t) * a.z + t * b.z);
	return this1;
};
hxmath_math_Vector3.max = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var self = this1;
	self.x = Math.max(self.x,b.x);
	self.y = Math.max(self.y,b.y);
	self.z = Math.max(self.z,b.z);
	return self;
};
hxmath_math_Vector3.min = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var self = this1;
	self.x = Math.min(self.x,b.x);
	self.y = Math.min(self.y,b.y);
	self.z = Math.min(self.z,b.z);
	return self;
};
hxmath_math_Vector3.project = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var self = this1;
	var s = (self.x * b.x + self.y * b.y + self.z * b.z) / (b.x * b.x + b.y * b.y + b.z * b.z);
	var self1 = b;
	var self2 = self1;
	var value = self2.x;
	var self2 = self;
	self2.x = value;
	var self2 = self1;
	var value = self2.y;
	var self2 = self;
	self2.y = value;
	var self2 = self1;
	var value = self2.z;
	var self1 = self;
	self1.z = value;
	var self1 = self;
	self1.x *= s;
	self1.y *= s;
	self1.z *= s;
	return self;
};
hxmath_math_Vector3.reflect = function(v,normal) {
	var self = v;
	var this1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	var self = this1;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	var self_z = self1.z;
	var s = (self_x * normal.x + self_y * normal.y + self_z * normal.z) / (normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);
	var self1 = normal;
	var self2 = self1;
	var value = self2.x;
	self_x = value;
	var self2 = self1;
	var value = self2.y;
	self_y = value;
	var self2 = self1;
	var value = self2.z;
	self_z = value;
	self_x *= s;
	self_y *= s;
	self_z *= s;
	self_x *= 2.0;
	self_y *= 2.0;
	self_z *= 2.0;
	var self1 = self;
	self1.x -= self_x;
	self1.y -= self_y;
	self1.z -= self_z;
	return self;
};
hxmath_math_Vector3.orthoNormalize = function(u,v,w) {
	var self = u;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
	if(length > 0.0) {
		var self1 = self;
		self1.x /= length;
		self1.y /= length;
		self1.z /= length;
	}
	var self = v;
	var a_x = self.x;
	var a_y = self.y;
	var a_z = self.z;
	var s = (a_x * u.x + a_y * u.y + a_z * u.z) / (u.x * u.x + u.y * u.y + u.z * u.z);
	var self = u;
	var self1 = self;
	var value = self1.x;
	a_x = value;
	var self1 = self;
	var value = self1.y;
	a_y = value;
	var self1 = self;
	var value = self1.z;
	a_z = value;
	a_x *= s;
	a_y *= s;
	a_z *= s;
	var self = v;
	self.x -= a_x;
	self.y -= a_y;
	self.z -= a_z;
	var self = v;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
	if(length > 0.0) {
		var self1 = self;
		self1.x /= length;
		self1.y /= length;
		self1.z /= length;
	}
	var self = w;
	var a_x = self.x;
	var a_y = self.y;
	var a_z = self.z;
	var s = (a_x * u.x + a_y * u.y + a_z * u.z) / (u.x * u.x + u.y * u.y + u.z * u.z);
	var self = u;
	var self1 = self;
	var value = self1.x;
	a_x = value;
	var self1 = self;
	var value = self1.y;
	a_y = value;
	var self1 = self;
	var value = self1.z;
	a_z = value;
	a_x *= s;
	a_y *= s;
	a_z *= s;
	var self = w;
	self.x -= a_x;
	self.y -= a_y;
	self.z -= a_z;
	var self = w;
	var a_x = self.x;
	var a_y = self.y;
	var a_z = self.z;
	var s = (a_x * v.x + a_y * v.y + a_z * v.z) / (v.x * v.x + v.y * v.y + v.z * v.z);
	var self = v;
	var self1 = self;
	var value = self1.x;
	a_x = value;
	var self1 = self;
	var value = self1.y;
	a_y = value;
	var self1 = self;
	var value = self1.z;
	a_z = value;
	a_x *= s;
	a_y *= s;
	a_z *= s;
	var self = w;
	self.x -= a_x;
	self.y -= a_y;
	self.z -= a_z;
	var self = w;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
	if(length > 0.0) {
		var self1 = self;
		self1.x /= length;
		self1.y /= length;
		self1.z /= length;
	}
};
hxmath_math_Vector3.set = function(this1,x,y,z) {
	var self = this1;
	self.x = x;
	self.y = y;
	self.z = z;
	return self;
};
hxmath_math_Vector3.crossWith = function(this1,a) {
	var self = this1;
	var newX = self.y * a.z - self.z * a.y;
	var newY = self.z * a.x - self.x * a.z;
	var newZ = self.x * a.y - self.y * a.x;
	self.x = newX;
	self.y = newY;
	self.z = newZ;
	return self;
};
hxmath_math_Vector3.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	return self;
};
hxmath_math_Vector3.divideWith = function(this1,s) {
	var self = this1;
	self.x /= s;
	self.y /= s;
	self.z /= s;
	return self;
};
hxmath_math_Vector3.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	self.z += a.z;
	return self;
};
hxmath_math_Vector3.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	self.z -= a.z;
	return self;
};
hxmath_math_Vector3.maxWith = function(this1,a) {
	var self = this1;
	self.x = Math.max(self.x,a.x);
	self.y = Math.max(self.y,a.y);
	self.z = Math.max(self.z,a.z);
	return self;
};
hxmath_math_Vector3.minWith = function(this1,a) {
	var self = this1;
	self.x = Math.min(self.x,a.x);
	self.y = Math.min(self.y,a.y);
	self.z = Math.min(self.z,a.z);
	return self;
};
hxmath_math_Vector3.projectOnto = function(this1,a) {
	var self = this1;
	var s = (self.x * a.x + self.y * a.y + self.z * a.z) / (a.x * a.x + a.y * a.y + a.z * a.z);
	var self1 = a;
	var self2 = self1;
	var value = self2.x;
	var self2 = self;
	self2.x = value;
	var self2 = self1;
	var value = self2.y;
	var self2 = self;
	self2.y = value;
	var self2 = self1;
	var value = self2.z;
	var self1 = self;
	self1.z = value;
	var self1 = self;
	self1.x *= s;
	self1.y *= s;
	self1.z *= s;
	return self;
};
hxmath_math_Vector3.projectOntoPlane = function(this1,normal) {
	var self = this1;
	var self1 = self;
	var a_x = self1.x;
	var a_y = self1.y;
	var a_z = self1.z;
	var s = (a_x * normal.x + a_y * normal.y + a_z * normal.z) / (normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);
	var self1 = normal;
	var self2 = self1;
	var value = self2.x;
	a_x = value;
	var self2 = self1;
	var value = self2.y;
	a_y = value;
	var self2 = self1;
	var value = self2.z;
	a_z = value;
	a_x *= s;
	a_y *= s;
	a_z *= s;
	var self1 = self;
	self1.x -= a_x;
	self1.y -= a_y;
	self1.z -= a_z;
	return self;
};
hxmath_math_Vector3.reflectBy = function(this1,normal) {
	var self = this1;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	var self_z = self1.z;
	var s = (self_x * normal.x + self_y * normal.y + self_z * normal.z) / (normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);
	var self1 = normal;
	var self2 = self1;
	var value = self2.x;
	self_x = value;
	var self2 = self1;
	var value = self2.y;
	self_y = value;
	var self2 = self1;
	var value = self2.z;
	self_z = value;
	self_x *= s;
	self_y *= s;
	self_z *= s;
	self_x *= 2.0;
	self_y *= 2.0;
	self_z *= 2.0;
	var self1 = self;
	self1.x -= self_x;
	self1.y -= self_y;
	self1.z -= self_z;
	return self;
};
hxmath_math_Vector3.copyTo = function(this1,target) {
	var self = this1;
	var self1 = self;
	var value = self1.x;
	var self1 = target;
	self1.x = value;
	var self1 = self;
	var value = self1.y;
	var self1 = target;
	self1.y = value;
	var self1 = self;
	var value = self1.z;
	var self = target;
	self.z = value;
};
hxmath_math_Vector3.copyToShape = function(this1,target) {
	var self = this1;
	target.x = self.x;
	target.y = self.y;
	target.z = self.z;
};
hxmath_math_Vector3.copyFromShape = function(this1,source) {
	var self = this1;
	self.x = source.x;
	self.y = source.y;
	self.z = source.z;
};
hxmath_math_Vector3.clone = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Vector3Default(self.x,self.y,self.z);
	return this1;
};
hxmath_math_Vector3.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	case 2:
		return self.z;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Vector3.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	case 2:
		return self.z = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Vector3.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	self.z = -self.z;
	return self;
};
hxmath_math_Vector3.applyScalarFunc = function(this1,func) {
	var self = this1;
	var self1 = self;
	var value = func(self1.x);
	var self1 = self;
	self1.x = value;
	var self1 = self;
	var value = func(self1.y);
	var self1 = self;
	self1.y = value;
	var self1 = self;
	var value = func(self1.z);
	var self1 = self;
	self1.z = value;
	return self;
};
hxmath_math_Vector3.angleWith = function(this1,b) {
	var self = this1;
	var self1 = self;
	var self2 = b;
	return Math.acos((self.x * b.x + self.y * b.y + self.z * b.z) / (Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z) * Math.sqrt(self2.x * self2.x + self2.y * self2.y + self2.z * self2.z)));
};
hxmath_math_Vector3.distanceTo = function(this1,b) {
	var self = this1;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	var self_z = self1.z;
	self_x -= b.x;
	self_y -= b.y;
	self_z -= b.z;
	return Math.sqrt(self_x * self_x + self_y * self_y + self_z * self_z);
};
hxmath_math_Vector3.normalize = function(this1) {
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
	if(length > 0.0) {
		var self1 = self;
		self1.x /= length;
		self1.y /= length;
		self1.z /= length;
	}
	return self;
};
hxmath_math_Vector3.normalizeTo = function(this1,newLength) {
	var self = this1;
	var self1 = self;
	var self2 = self1;
	var length = Math.sqrt(self2.x * self2.x + self2.y * self2.y + self2.z * self2.z);
	if(length > 0.0) {
		var self2 = self1;
		self2.x /= length;
		self2.y /= length;
		self2.z /= length;
	}
	var self1 = self;
	self1.x *= newLength;
	self1.y *= newLength;
	self1.z *= newLength;
	return self;
};
hxmath_math_Vector3.clamp = function(this1,min,max) {
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z);
	if(length < min) {
		var self1 = self;
		var self2 = self1;
		var self3 = self2;
		var length1 = Math.sqrt(self3.x * self3.x + self3.y * self3.y + self3.z * self3.z);
		if(length1 > 0.0) {
			var self3 = self2;
			self3.x /= length1;
			self3.y /= length1;
			self3.z /= length1;
		}
		var self2 = self1;
		self2.x *= min;
		self2.y *= min;
		self2.z *= min;
	} else if(length > max) {
		var self1 = self;
		var self2 = self1;
		var self3 = self2;
		var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y + self3.z * self3.z);
		if(length > 0.0) {
			var self3 = self2;
			self3.x /= length;
			self3.y /= length;
			self3.z /= length;
		}
		var self2 = self1;
		self2.x *= max;
		self2.y *= max;
		self2.z *= max;
	}
	return self;
};
hxmath_math_Vector3.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
};
hxmath_math_Vector3.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y + self.z * self.z;
};
hxmath_math_Vector3.get_zero = function() {
	var this1 = new hxmath_math_Vector3Default(0.0,0.0,0.0);
	return this1;
};
hxmath_math_Vector3.get_xAxis = function() {
	var this1 = new hxmath_math_Vector3Default(1.0,0.0,0.0);
	return this1;
};
hxmath_math_Vector3.get_yAxis = function() {
	var this1 = new hxmath_math_Vector3Default(0.0,1.0,0.0);
	return this1;
};
hxmath_math_Vector3.get_zAxis = function() {
	var this1 = new hxmath_math_Vector3Default(0.0,0.0,1.0);
	return this1;
};
var hxmath_math_Vector4Default = function(x,y,z,w) {
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["hxmath.math.Vector4Default"] = hxmath_math_Vector4Default;
hxmath_math_Vector4Default.__name__ = true;
hxmath_math_Vector4Default.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: hxmath_math_Vector4Default
};
var hxmath_math_Vector4 = {};
hxmath_math_Vector4.__properties__ = {get_lengthSq:"get_lengthSq",get_length:"get_length",get_wAxis:"get_wAxis",get_zAxis:"get_zAxis",get_yAxis:"get_yAxis",get_xAxis:"get_xAxis",get_zero:"get_zero"};
hxmath_math_Vector4._new = function(x,y,z,w) {
	var this1 = new hxmath_math_Vector4Default(x,y,z,w);
	return this1;
};
hxmath_math_Vector4.fromArray = function(rawData) {
	if(rawData.length != 4) {
		throw haxe_Exception.thrown("Invalid rawData.");
	}
	var this1 = new hxmath_math_Vector4Default(rawData[0],rawData[1],rawData[2],rawData[3]);
	return this1;
};
hxmath_math_Vector4.fromVector4Shape = function(other) {
	var this1 = new hxmath_math_Vector4Default(other.x,other.y,other.z,other.w);
	return this1;
};
hxmath_math_Vector4.dot = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};
hxmath_math_Vector4.multiply = function(a,s) {
	var self = a;
	var this1 = new hxmath_math_Vector4Default(self.x,self.y,self.z,self.w);
	var self = this1;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	self.w *= s;
	return self;
};
hxmath_math_Vector4.divide = function(a,s) {
	var self = a;
	var this1 = new hxmath_math_Vector4Default(self.x,self.y,self.z,self.w);
	var self = this1;
	self.x /= s;
	self.y /= s;
	self.z /= s;
	self.w /= s;
	return self;
};
hxmath_math_Vector4.add = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector4Default(self.x,self.y,self.z,self.w);
	var self = this1;
	self.x += b.x;
	self.y += b.y;
	self.z += b.z;
	self.w += b.w;
	return self;
};
hxmath_math_Vector4.subtract = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector4Default(self.x,self.y,self.z,self.w);
	var self = this1;
	self.x -= b.x;
	self.y -= b.y;
	self.z -= b.z;
	self.w -= b.w;
	return self;
};
hxmath_math_Vector4.negate = function(a) {
	var this1 = new hxmath_math_Vector4Default(-a.x,-a.y,-a.z,-a.w);
	return this1;
};
hxmath_math_Vector4.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x && a.y == b.y && a.z == b.z) {
			return a.w == b.w;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math_Vector4.lerp = function(a,b,t) {
	var this1 = new hxmath_math_Vector4Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y,(1.0 - t) * a.z + t * b.z,(1.0 - t) * a.w + t * b.w);
	return this1;
};
hxmath_math_Vector4.max = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector4Default(self.x,self.y,self.z,self.w);
	var self = this1;
	self.x = Math.max(self.x,b.x);
	self.y = Math.max(self.y,b.y);
	self.z = Math.max(self.z,b.z);
	self.w = Math.max(self.w,b.w);
	return self;
};
hxmath_math_Vector4.min = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector4Default(self.x,self.y,self.z,self.w);
	var self = this1;
	self.x = Math.min(self.x,b.x);
	self.y = Math.min(self.y,b.y);
	self.z = Math.min(self.z,b.z);
	self.w = Math.min(self.w,b.w);
	return self;
};
hxmath_math_Vector4.project = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector4Default(self.x,self.y,self.z,self.w);
	var self = this1;
	var s = (self.x * b.x + self.y * b.y + self.z * b.z + self.w * b.w) / (b.x * b.x + b.y * b.y + b.z * b.z + b.w * b.w);
	var self1 = b;
	var self2 = self1;
	var value = self2.x;
	var self2 = self;
	self2.x = value;
	var self2 = self1;
	var value = self2.y;
	var self2 = self;
	self2.y = value;
	var self2 = self1;
	var value = self2.z;
	var self2 = self;
	self2.z = value;
	var self2 = self1;
	var value = self2.w;
	var self1 = self;
	self1.w = value;
	var self1 = self;
	self1.x *= s;
	self1.y *= s;
	self1.z *= s;
	self1.w *= s;
	return self;
};
hxmath_math_Vector4.set = function(this1,x,y,z,w) {
	var self = this1;
	self.x = x;
	self.y = y;
	self.z = z;
	self.w = w;
	return self;
};
hxmath_math_Vector4.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	self.z *= s;
	self.w *= s;
	return self;
};
hxmath_math_Vector4.divideWith = function(this1,s) {
	var self = this1;
	self.x /= s;
	self.y /= s;
	self.z /= s;
	self.w /= s;
	return self;
};
hxmath_math_Vector4.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	self.z += a.z;
	self.w += a.w;
	return self;
};
hxmath_math_Vector4.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	self.z -= a.z;
	self.w -= a.w;
	return self;
};
hxmath_math_Vector4.maxWith = function(this1,a) {
	var self = this1;
	self.x = Math.max(self.x,a.x);
	self.y = Math.max(self.y,a.y);
	self.z = Math.max(self.z,a.z);
	self.w = Math.max(self.w,a.w);
	return self;
};
hxmath_math_Vector4.minWith = function(this1,a) {
	var self = this1;
	self.x = Math.min(self.x,a.x);
	self.y = Math.min(self.y,a.y);
	self.z = Math.min(self.z,a.z);
	self.w = Math.min(self.w,a.w);
	return self;
};
hxmath_math_Vector4.projectOnto = function(this1,a) {
	var self = this1;
	var s = (self.x * a.x + self.y * a.y + self.z * a.z + self.w * a.w) / (a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w);
	var self1 = a;
	var self2 = self1;
	var value = self2.x;
	var self2 = self;
	self2.x = value;
	var self2 = self1;
	var value = self2.y;
	var self2 = self;
	self2.y = value;
	var self2 = self1;
	var value = self2.z;
	var self2 = self;
	self2.z = value;
	var self2 = self1;
	var value = self2.w;
	var self1 = self;
	self1.w = value;
	var self1 = self;
	self1.x *= s;
	self1.y *= s;
	self1.z *= s;
	self1.w *= s;
	return self;
};
hxmath_math_Vector4.copyTo = function(this1,target) {
	var self = this1;
	var self1 = self;
	var value = self1.x;
	var self1 = target;
	self1.x = value;
	var self1 = self;
	var value = self1.y;
	var self1 = target;
	self1.y = value;
	var self1 = self;
	var value = self1.z;
	var self1 = target;
	self1.z = value;
	var self1 = self;
	var value = self1.w;
	var self = target;
	self.w = value;
};
hxmath_math_Vector4.copyToShape = function(this1,target) {
	var self = this1;
	target.x = self.x;
	target.y = self.y;
	target.z = self.z;
	target.w = self.w;
};
hxmath_math_Vector4.copyFromShape = function(this1,source) {
	var self = this1;
	self.x = source.x;
	self.y = source.y;
	self.z = source.z;
	self.w = source.w;
};
hxmath_math_Vector4.clone = function(this1) {
	var self = this1;
	var this1 = new hxmath_math_Vector4Default(self.x,self.y,self.z,self.w);
	return this1;
};
hxmath_math_Vector4.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	case 2:
		return self.z;
	case 3:
		return self.w;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Vector4.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	case 2:
		return self.z = value;
	case 3:
		return self.w = value;
	default:
		throw haxe_Exception.thrown("Invalid element");
	}
};
hxmath_math_Vector4.applyScalarFunc = function(this1,func) {
	var self = this1;
	var self1 = self;
	var value = func(self1.x);
	var self1 = self;
	self1.x = value;
	var self1 = self;
	var value = func(self1.y);
	var self1 = self;
	self1.y = value;
	var self1 = self;
	var value = func(self1.z);
	var self1 = self;
	self1.z = value;
	var self1 = self;
	var value = func(self1.w);
	var self1 = self;
	self1.w = value;
	return self;
};
hxmath_math_Vector4.distanceTo = function(this1,b) {
	var self = this1;
	var self1 = self;
	var self_x = self1.x;
	var self_y = self1.y;
	var self_z = self1.z;
	var self_w = self1.w;
	self_x -= b.x;
	self_y -= b.y;
	self_z -= b.z;
	self_w -= b.w;
	return Math.sqrt(self_x * self_x + self_y * self_y + self_z * self_z + self_w * self_w);
};
hxmath_math_Vector4.normalize = function(this1) {
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z + self1.w * self1.w);
	if(length > 0.0) {
		var self1 = self;
		self1.x /= length;
		self1.y /= length;
		self1.z /= length;
		self1.w /= length;
	}
	return self;
};
hxmath_math_Vector4.normalizeTo = function(this1,newLength) {
	var self = this1;
	var self1 = self;
	var self2 = self1;
	var length = Math.sqrt(self2.x * self2.x + self2.y * self2.y + self2.z * self2.z + self2.w * self2.w);
	if(length > 0.0) {
		var self2 = self1;
		self2.x /= length;
		self2.y /= length;
		self2.z /= length;
		self2.w /= length;
	}
	var self1 = self;
	self1.x *= newLength;
	self1.y *= newLength;
	self1.z *= newLength;
	self1.w *= newLength;
	return self;
};
hxmath_math_Vector4.clamp = function(this1,min,max) {
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y + self1.z * self1.z + self1.w * self1.w);
	if(length < min) {
		var self1 = self;
		var self2 = self1;
		var self3 = self2;
		var length1 = Math.sqrt(self3.x * self3.x + self3.y * self3.y + self3.z * self3.z + self3.w * self3.w);
		if(length1 > 0.0) {
			var self3 = self2;
			self3.x /= length1;
			self3.y /= length1;
			self3.z /= length1;
			self3.w /= length1;
		}
		var self2 = self1;
		self2.x *= min;
		self2.y *= min;
		self2.z *= min;
		self2.w *= min;
	} else if(length > max) {
		var self1 = self;
		var self2 = self1;
		var self3 = self2;
		var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y + self3.z * self3.z + self3.w * self3.w);
		if(length > 0.0) {
			var self3 = self2;
			self3.x /= length;
			self3.y /= length;
			self3.z /= length;
			self3.w /= length;
		}
		var self2 = self1;
		self2.x *= max;
		self2.y *= max;
		self2.z *= max;
		self2.w *= max;
	}
	return self;
};
hxmath_math_Vector4.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w);
};
hxmath_math_Vector4.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w;
};
hxmath_math_Vector4.get_zero = function() {
	var this1 = new hxmath_math_Vector4Default(0.0,0.0,0.0,0.0);
	return this1;
};
hxmath_math_Vector4.get_xAxis = function() {
	var this1 = new hxmath_math_Vector4Default(1.0,0.0,0.0,0.0);
	return this1;
};
hxmath_math_Vector4.get_yAxis = function() {
	var this1 = new hxmath_math_Vector4Default(0.0,1.0,0.0,0.0);
	return this1;
};
hxmath_math_Vector4.get_zAxis = function() {
	var this1 = new hxmath_math_Vector4Default(0.0,0.0,1.0,0.0);
	return this1;
};
hxmath_math_Vector4.get_wAxis = function() {
	var this1 = new hxmath_math_Vector4Default(0.0,0.0,0.0,1.0);
	return this1;
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__toStr = null;
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = true;
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var kha__$Assets_ImageList = function() {
	this.names = ["audio_file","audio_file_grey","backgroundEmpty","basic","blank","camera_image","camera_object","file","file_grey","file_grey_bigger","folder","folder2","foundry_icon","information","layers","layers_grey","light_object","loading","mesh_image","mesh_object","pause","picture","picture_grey","platformerPack_character","play","play_button","play_button_grey","script","sprite_object","tilesheet","warning"];
	this.warningDescription = { name : "warning", original_height : 16, file_sizes : [363], original_width : 16, files : ["warning.png"], type : "image"};
	this.warningName = "warning";
	this.warning = null;
	this.tilesheetDescription = { name : "tilesheet", original_height : 448, file_sizes : [65340], original_width : 896, files : ["tilesheet.png"], type : "image"};
	this.tilesheetName = "tilesheet";
	this.tilesheet = null;
	this.sprite_objectDescription = { name : "sprite_object", original_height : 16, file_sizes : [380], original_width : 16, files : ["sprite_object.png"], type : "image"};
	this.sprite_objectName = "sprite_object";
	this.sprite_object = null;
	this.scriptDescription = { name : "script", original_height : 16, file_sizes : [505], original_width : 16, files : ["script.png"], type : "image"};
	this.scriptName = "script";
	this.script = null;
	this.play_button_greyDescription = { name : "play_button_grey", original_height : 16, file_sizes : [333], original_width : 16, files : ["play-button_grey.png"], type : "image"};
	this.play_button_greyName = "play_button_grey";
	this.play_button_grey = null;
	this.play_buttonDescription = { name : "play_button", original_height : 16, file_sizes : [288], original_width : 16, files : ["play-button.png"], type : "image"};
	this.play_buttonName = "play_button";
	this.play_button = null;
	this.playDescription = { name : "play", original_height : 16, file_sizes : [223], original_width : 14, files : ["play.png"], type : "image"};
	this.playName = "play";
	this.play = null;
	this.platformerPack_characterDescription = { name : "platformerPack_character", original_height : 192, file_sizes : [22792], original_width : 384, files : ["platformerPack_character.png"], type : "image"};
	this.platformerPack_characterName = "platformerPack_character";
	this.platformerPack_character = null;
	this.picture_greyDescription = { name : "picture_grey", original_height : 16, file_sizes : [290], original_width : 16, files : ["picture_grey.png"], type : "image"};
	this.picture_greyName = "picture_grey";
	this.picture_grey = null;
	this.pictureDescription = { name : "picture", original_height : 16, file_sizes : [270], original_width : 16, files : ["picture.png"], type : "image"};
	this.pictureName = "picture";
	this.picture = null;
	this.pauseDescription = { name : "pause", original_height : 16, file_sizes : [174], original_width : 16, files : ["pause.png"], type : "image"};
	this.pauseName = "pause";
	this.pause = null;
	this.mesh_objectDescription = { name : "mesh_object", original_height : 16, file_sizes : [527], original_width : 16, files : ["mesh_object.png"], type : "image"};
	this.mesh_objectName = "mesh_object";
	this.mesh_object = null;
	this.mesh_imageDescription = { name : "mesh_image", original_height : 200, file_sizes : [3695], original_width : 200, files : ["mesh_image.png"], type : "image"};
	this.mesh_imageName = "mesh_image";
	this.mesh_image = null;
	this.loadingDescription = { name : "loading", original_height : 555, file_sizes : [24532], original_width : 666, files : ["loading.png"], type : "image"};
	this.loadingName = "loading";
	this.loading = null;
	this.light_objectDescription = { name : "light_object", original_height : 15, file_sizes : [465], original_width : 16, files : ["light_object.png"], type : "image"};
	this.light_objectName = "light_object";
	this.light_object = null;
	this.layers_greyDescription = { name : "layers_grey", original_height : 16, file_sizes : [453], original_width : 16, files : ["layers_grey.png"], type : "image"};
	this.layers_greyName = "layers_grey";
	this.layers_grey = null;
	this.layersDescription = { name : "layers", original_height : 16, file_sizes : [377], original_width : 16, files : ["layers.png"], type : "image"};
	this.layersName = "layers";
	this.layers = null;
	this.informationDescription = { name : "information", original_height : 16, file_sizes : [321], original_width : 16, files : ["information.png"], type : "image"};
	this.informationName = "information";
	this.information = null;
	this.foundry_iconDescription = { name : "foundry_icon", original_height : 512, file_sizes : [58470], original_width : 493, files : ["foundry_icon.png"], type : "image"};
	this.foundry_iconName = "foundry_icon";
	this.foundry_icon = null;
	this.folder2Description = { name : "folder2", original_height : 16, file_sizes : [299], original_width : 16, files : ["folder2.png"], type : "image"};
	this.folder2Name = "folder2";
	this.folder2 = null;
	this.folderDescription = { name : "folder", original_height : 16, file_sizes : [326], original_width : 16, files : ["folder.png"], type : "image"};
	this.folderName = "folder";
	this.folder = null;
	this.file_grey_biggerDescription = { name : "file_grey_bigger", original_height : 256, file_sizes : [9228], original_width : 256, files : ["file_grey_bigger.png"], type : "image"};
	this.file_grey_biggerName = "file_grey_bigger";
	this.file_grey_bigger = null;
	this.file_greyDescription = { name : "file_grey", original_height : 16, file_sizes : [234], original_width : 16, files : ["file_grey.png"], type : "image"};
	this.file_greyName = "file_grey";
	this.file_grey = null;
	this.fileDescription = { name : "file", original_height : 16, file_sizes : [224], original_width : 16, files : ["file.png"], type : "image"};
	this.fileName = "file";
	this.file = null;
	this.camera_objectDescription = { name : "camera_object", original_height : 16, file_sizes : [514], original_width : 16, files : ["camera_object.png"], type : "image"};
	this.camera_objectName = "camera_object";
	this.camera_object = null;
	this.camera_imageDescription = { name : "camera_image", original_height : 858, file_sizes : [30232], original_width : 981, files : ["camera_image.png"], type : "image"};
	this.camera_imageName = "camera_image";
	this.camera_image = null;
	this.blankDescription = { name : "blank", original_height : 16, file_sizes : [98], original_width : 16, files : ["blank.png"], type : "image"};
	this.blankName = "blank";
	this.blank = null;
	this.basicDescription = { name : "basic", original_height : 250, file_sizes : [3551], original_width : 250, files : ["basic.png"], type : "image"};
	this.basicName = "basic";
	this.basic = null;
	this.backgroundEmptyDescription = { name : "backgroundEmpty", original_height : 1024, file_sizes : [20027], original_width : 1024, files : ["backgroundEmpty.png"], type : "image"};
	this.backgroundEmptyName = "backgroundEmpty";
	this.backgroundEmpty = null;
	this.audio_file_greyDescription = { name : "audio_file_grey", original_height : 16, file_sizes : [288], original_width : 16, files : ["audio-file_grey.png"], type : "image"};
	this.audio_file_greyName = "audio_file_grey";
	this.audio_file_grey = null;
	this.audio_fileDescription = { name : "audio_file", original_height : 16, file_sizes : [285], original_width : 16, files : ["audio-file.png"], type : "image"};
	this.audio_fileName = "audio_file";
	this.audio_file = null;
};
$hxClasses["kha._Assets.ImageList"] = kha__$Assets_ImageList;
kha__$Assets_ImageList.__name__ = true;
kha__$Assets_ImageList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,audio_file: null
	,audio_fileName: null
	,audio_fileDescription: null
	,audio_fileLoad: function(done,failure) {
		kha_Assets.loadImage("audio_file",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "audio_fileLoad"});
	}
	,audio_fileUnload: function() {
		this.audio_file.unload();
		this.audio_file = null;
	}
	,audio_file_grey: null
	,audio_file_greyName: null
	,audio_file_greyDescription: null
	,audio_file_greyLoad: function(done,failure) {
		kha_Assets.loadImage("audio_file_grey",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "audio_file_greyLoad"});
	}
	,audio_file_greyUnload: function() {
		this.audio_file_grey.unload();
		this.audio_file_grey = null;
	}
	,backgroundEmpty: null
	,backgroundEmptyName: null
	,backgroundEmptyDescription: null
	,backgroundEmptyLoad: function(done,failure) {
		kha_Assets.loadImage("backgroundEmpty",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "backgroundEmptyLoad"});
	}
	,backgroundEmptyUnload: function() {
		this.backgroundEmpty.unload();
		this.backgroundEmpty = null;
	}
	,basic: null
	,basicName: null
	,basicDescription: null
	,basicLoad: function(done,failure) {
		kha_Assets.loadImage("basic",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "basicLoad"});
	}
	,basicUnload: function() {
		this.basic.unload();
		this.basic = null;
	}
	,blank: null
	,blankName: null
	,blankDescription: null
	,blankLoad: function(done,failure) {
		kha_Assets.loadImage("blank",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "blankLoad"});
	}
	,blankUnload: function() {
		this.blank.unload();
		this.blank = null;
	}
	,camera_image: null
	,camera_imageName: null
	,camera_imageDescription: null
	,camera_imageLoad: function(done,failure) {
		kha_Assets.loadImage("camera_image",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "camera_imageLoad"});
	}
	,camera_imageUnload: function() {
		this.camera_image.unload();
		this.camera_image = null;
	}
	,camera_object: null
	,camera_objectName: null
	,camera_objectDescription: null
	,camera_objectLoad: function(done,failure) {
		kha_Assets.loadImage("camera_object",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "camera_objectLoad"});
	}
	,camera_objectUnload: function() {
		this.camera_object.unload();
		this.camera_object = null;
	}
	,file: null
	,fileName: null
	,fileDescription: null
	,fileLoad: function(done,failure) {
		kha_Assets.loadImage("file",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "fileLoad"});
	}
	,fileUnload: function() {
		this.file.unload();
		this.file = null;
	}
	,file_grey: null
	,file_greyName: null
	,file_greyDescription: null
	,file_greyLoad: function(done,failure) {
		kha_Assets.loadImage("file_grey",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "file_greyLoad"});
	}
	,file_greyUnload: function() {
		this.file_grey.unload();
		this.file_grey = null;
	}
	,file_grey_bigger: null
	,file_grey_biggerName: null
	,file_grey_biggerDescription: null
	,file_grey_biggerLoad: function(done,failure) {
		kha_Assets.loadImage("file_grey_bigger",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "file_grey_biggerLoad"});
	}
	,file_grey_biggerUnload: function() {
		this.file_grey_bigger.unload();
		this.file_grey_bigger = null;
	}
	,folder: null
	,folderName: null
	,folderDescription: null
	,folderLoad: function(done,failure) {
		kha_Assets.loadImage("folder",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "folderLoad"});
	}
	,folderUnload: function() {
		this.folder.unload();
		this.folder = null;
	}
	,folder2: null
	,folder2Name: null
	,folder2Description: null
	,folder2Load: function(done,failure) {
		kha_Assets.loadImage("folder2",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "folder2Load"});
	}
	,folder2Unload: function() {
		this.folder2.unload();
		this.folder2 = null;
	}
	,foundry_icon: null
	,foundry_iconName: null
	,foundry_iconDescription: null
	,foundry_iconLoad: function(done,failure) {
		kha_Assets.loadImage("foundry_icon",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "foundry_iconLoad"});
	}
	,foundry_iconUnload: function() {
		this.foundry_icon.unload();
		this.foundry_icon = null;
	}
	,information: null
	,informationName: null
	,informationDescription: null
	,informationLoad: function(done,failure) {
		kha_Assets.loadImage("information",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "informationLoad"});
	}
	,informationUnload: function() {
		this.information.unload();
		this.information = null;
	}
	,layers: null
	,layersName: null
	,layersDescription: null
	,layersLoad: function(done,failure) {
		kha_Assets.loadImage("layers",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "layersLoad"});
	}
	,layersUnload: function() {
		this.layers.unload();
		this.layers = null;
	}
	,layers_grey: null
	,layers_greyName: null
	,layers_greyDescription: null
	,layers_greyLoad: function(done,failure) {
		kha_Assets.loadImage("layers_grey",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "layers_greyLoad"});
	}
	,layers_greyUnload: function() {
		this.layers_grey.unload();
		this.layers_grey = null;
	}
	,light_object: null
	,light_objectName: null
	,light_objectDescription: null
	,light_objectLoad: function(done,failure) {
		kha_Assets.loadImage("light_object",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "light_objectLoad"});
	}
	,light_objectUnload: function() {
		this.light_object.unload();
		this.light_object = null;
	}
	,loading: null
	,loadingName: null
	,loadingDescription: null
	,loadingLoad: function(done,failure) {
		kha_Assets.loadImage("loading",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "loadingLoad"});
	}
	,loadingUnload: function() {
		this.loading.unload();
		this.loading = null;
	}
	,mesh_image: null
	,mesh_imageName: null
	,mesh_imageDescription: null
	,mesh_imageLoad: function(done,failure) {
		kha_Assets.loadImage("mesh_image",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "mesh_imageLoad"});
	}
	,mesh_imageUnload: function() {
		this.mesh_image.unload();
		this.mesh_image = null;
	}
	,mesh_object: null
	,mesh_objectName: null
	,mesh_objectDescription: null
	,mesh_objectLoad: function(done,failure) {
		kha_Assets.loadImage("mesh_object",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "mesh_objectLoad"});
	}
	,mesh_objectUnload: function() {
		this.mesh_object.unload();
		this.mesh_object = null;
	}
	,pause: null
	,pauseName: null
	,pauseDescription: null
	,pauseLoad: function(done,failure) {
		kha_Assets.loadImage("pause",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "pauseLoad"});
	}
	,pauseUnload: function() {
		this.pause.unload();
		this.pause = null;
	}
	,picture: null
	,pictureName: null
	,pictureDescription: null
	,pictureLoad: function(done,failure) {
		kha_Assets.loadImage("picture",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "pictureLoad"});
	}
	,pictureUnload: function() {
		this.picture.unload();
		this.picture = null;
	}
	,picture_grey: null
	,picture_greyName: null
	,picture_greyDescription: null
	,picture_greyLoad: function(done,failure) {
		kha_Assets.loadImage("picture_grey",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "picture_greyLoad"});
	}
	,picture_greyUnload: function() {
		this.picture_grey.unload();
		this.picture_grey = null;
	}
	,platformerPack_character: null
	,platformerPack_characterName: null
	,platformerPack_characterDescription: null
	,platformerPack_characterLoad: function(done,failure) {
		kha_Assets.loadImage("platformerPack_character",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "platformerPack_characterLoad"});
	}
	,platformerPack_characterUnload: function() {
		this.platformerPack_character.unload();
		this.platformerPack_character = null;
	}
	,play: null
	,playName: null
	,playDescription: null
	,playLoad: function(done,failure) {
		kha_Assets.loadImage("play",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "playLoad"});
	}
	,playUnload: function() {
		this.play.unload();
		this.play = null;
	}
	,play_button: null
	,play_buttonName: null
	,play_buttonDescription: null
	,play_buttonLoad: function(done,failure) {
		kha_Assets.loadImage("play_button",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "play_buttonLoad"});
	}
	,play_buttonUnload: function() {
		this.play_button.unload();
		this.play_button = null;
	}
	,play_button_grey: null
	,play_button_greyName: null
	,play_button_greyDescription: null
	,play_button_greyLoad: function(done,failure) {
		kha_Assets.loadImage("play_button_grey",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "play_button_greyLoad"});
	}
	,play_button_greyUnload: function() {
		this.play_button_grey.unload();
		this.play_button_grey = null;
	}
	,script: null
	,scriptName: null
	,scriptDescription: null
	,scriptLoad: function(done,failure) {
		kha_Assets.loadImage("script",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "scriptLoad"});
	}
	,scriptUnload: function() {
		this.script.unload();
		this.script = null;
	}
	,sprite_object: null
	,sprite_objectName: null
	,sprite_objectDescription: null
	,sprite_objectLoad: function(done,failure) {
		kha_Assets.loadImage("sprite_object",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "sprite_objectLoad"});
	}
	,sprite_objectUnload: function() {
		this.sprite_object.unload();
		this.sprite_object = null;
	}
	,tilesheet: null
	,tilesheetName: null
	,tilesheetDescription: null
	,tilesheetLoad: function(done,failure) {
		kha_Assets.loadImage("tilesheet",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "tilesheetLoad"});
	}
	,tilesheetUnload: function() {
		this.tilesheet.unload();
		this.tilesheet = null;
	}
	,warning: null
	,warningName: null
	,warningDescription: null
	,warningLoad: function(done,failure) {
		kha_Assets.loadImage("warning",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 126, className : "kha._Assets.ImageList", methodName : "warningLoad"});
	}
	,warningUnload: function() {
		this.warning.unload();
		this.warning = null;
	}
	,names: null
	,__class__: kha__$Assets_ImageList
};
var kha__$Assets_SoundList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.SoundList"] = kha__$Assets_SoundList;
kha__$Assets_SoundList.__name__ = true;
kha__$Assets_SoundList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_SoundList
};
var kha__$Assets_BlobList = function() {
	this.names = ["_themes_json","codeView_json","default_json","dexie_js","drawView_json","index_html","keepme","listTraits_json","loading_json","main_json","projectView_json","temp_txt","wasmfs_js"];
	this.wasmfs_jsDescription = { name : "wasmfs_js", file_sizes : [132297], files : ["wasmfs.js"], type : "blob"};
	this.wasmfs_jsName = "wasmfs_js";
	this.wasmfs_js = null;
	this.temp_txtDescription = { name : "temp_txt", file_sizes : [264], files : ["temp.txt"], type : "blob"};
	this.temp_txtName = "temp_txt";
	this.temp_txt = null;
	this.projectView_jsonDescription = { name : "projectView_json", file_sizes : [1836], files : ["projectView.json"], type : "blob"};
	this.projectView_jsonName = "projectView_json";
	this.projectView_json = null;
	this.main_jsonDescription = { name : "main_json", file_sizes : [828], files : ["main.json"], type : "blob"};
	this.main_jsonName = "main_json";
	this.main_json = null;
	this.loading_jsonDescription = { name : "loading_json", file_sizes : [1139], files : ["loading.json"], type : "blob"};
	this.loading_jsonName = "loading_json";
	this.loading_json = null;
	this.listTraits_jsonDescription = { name : "listTraits_json", file_sizes : [3], files : ["listTraits.json"], type : "blob"};
	this.listTraits_jsonName = "listTraits_json";
	this.listTraits_json = null;
	this.keepmeDescription = { name : "keepme", file_sizes : [0], files : ["keepme"], type : "blob"};
	this.keepmeName = "keepme";
	this.keepme = null;
	this.index_htmlDescription = { name : "index_html", file_sizes : [449], files : ["index.html"], type : "blob"};
	this.index_htmlName = "index_html";
	this.index_html = null;
	this.drawView_jsonDescription = { name : "drawView_json", file_sizes : [588], files : ["drawView.json"], type : "blob"};
	this.drawView_jsonName = "drawView_json";
	this.drawView_json = null;
	this.dexie_jsDescription = { name : "dexie_js", file_sizes : [176240], files : ["dexie.js"], type : "blob"};
	this.dexie_jsName = "dexie_js";
	this.dexie_js = null;
	this.default_jsonDescription = { name : "default_json", file_sizes : [1380], files : ["default.json"], type : "blob"};
	this.default_jsonName = "default_json";
	this.default_json = null;
	this.codeView_jsonDescription = { name : "codeView_json", file_sizes : [1063], files : ["codeView.json"], type : "blob"};
	this.codeView_jsonName = "codeView_json";
	this.codeView_json = null;
	this._themes_jsonDescription = { name : "_themes_json", file_sizes : [678], files : ["_themes.json"], type : "blob"};
	this._themes_jsonName = "_themes_json";
	this._themes_json = null;
};
$hxClasses["kha._Assets.BlobList"] = kha__$Assets_BlobList;
kha__$Assets_BlobList.__name__ = true;
kha__$Assets_BlobList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,_themes_json: null
	,_themes_jsonName: null
	,_themes_jsonDescription: null
	,_themes_jsonLoad: function(done,failure) {
		kha_Assets.loadBlob("_themes_json",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 134, className : "kha._Assets.BlobList", methodName : "_themes_jsonLoad"});
	}
	,_themes_jsonUnload: function() {
		this._themes_json.unload();
		this._themes_json = null;
	}
	,codeView_json: null
	,codeView_jsonName: null
	,codeView_jsonDescription: null
	,codeView_jsonLoad: function(done,failure) {
		kha_Assets.loadBlob("codeView_json",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 134, className : "kha._Assets.BlobList", methodName : "codeView_jsonLoad"});
	}
	,codeView_jsonUnload: function() {
		this.codeView_json.unload();
		this.codeView_json = null;
	}
	,default_json: null
	,default_jsonName: null
	,default_jsonDescription: null
	,default_jsonLoad: function(done,failure) {
		kha_Assets.loadBlob("default_json",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 134, className : "kha._Assets.BlobList", methodName : "default_jsonLoad"});
	}
	,default_jsonUnload: function() {
		this.default_json.unload();
		this.default_json = null;
	}
	,dexie_js: null
	,dexie_jsName: null
	,dexie_jsDescription: null
	,dexie_jsLoad: function(done,failure) {
		kha_Assets.loadBlob("dexie_js",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 134, className : "kha._Assets.BlobList", methodName : "dexie_jsLoad"});
	}
	,dexie_jsUnload: function() {
		this.dexie_js.unload();
		this.dexie_js = null;
	}
	,drawView_json: null
	,drawView_jsonName: null
	,drawView_jsonDescription: null
	,drawView_jsonLoad: function(done,failure) {
		kha_Assets.loadBlob("drawView_json",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 134, className : "kha._Assets.BlobList", methodName : "drawView_jsonLoad"});
	}
	,drawView_jsonUnload: function() {
		this.drawView_json.unload();
		this.drawView_json = null;
	}
	,index_html: null
	,index_htmlName: null
	,index_htmlDescription: null
	,index_htmlLoad: function(done,failure) {
		kha_Assets.loadBlob("index_html",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 134, className : "kha._Assets.BlobList", methodName : "index_htmlLoad"});
	}
	,index_htmlUnload: function() {
		this.index_html.unload();
		this.index_html = null;
	}
	,keepme: null
	,keepmeName: null
	,keepmeDescription: null
	,keepmeLoad: function(done,failure) {
		kha_Assets.loadBlob("keepme",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 134, className : "kha._Assets.BlobList", methodName : "keepmeLoad"});
	}
	,keepmeUnload: function() {
		this.keepme.unload();
		this.keepme = null;
	}
	,listTraits_json: null
	,listTraits_jsonName: null
	,listTraits_jsonDescription: null
	,listTraits_jsonLoad: function(done,failure) {
		kha_Assets.loadBlob("listTraits_json",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 134, className : "kha._Assets.BlobList", methodName : "listTraits_jsonLoad"});
	}
	,listTraits_jsonUnload: function() {
		this.listTraits_json.unload();
		this.listTraits_json = null;
	}
	,loading_json: null
	,loading_jsonName: null
	,loading_jsonDescription: null
	,loading_jsonLoad: function(done,failure) {
		kha_Assets.loadBlob("loading_json",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 134, className : "kha._Assets.BlobList", methodName : "loading_jsonLoad"});
	}
	,loading_jsonUnload: function() {
		this.loading_json.unload();
		this.loading_json = null;
	}
	,main_json: null
	,main_jsonName: null
	,main_jsonDescription: null
	,main_jsonLoad: function(done,failure) {
		kha_Assets.loadBlob("main_json",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 134, className : "kha._Assets.BlobList", methodName : "main_jsonLoad"});
	}
	,main_jsonUnload: function() {
		this.main_json.unload();
		this.main_json = null;
	}
	,projectView_json: null
	,projectView_jsonName: null
	,projectView_jsonDescription: null
	,projectView_jsonLoad: function(done,failure) {
		kha_Assets.loadBlob("projectView_json",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 134, className : "kha._Assets.BlobList", methodName : "projectView_jsonLoad"});
	}
	,projectView_jsonUnload: function() {
		this.projectView_json.unload();
		this.projectView_json = null;
	}
	,temp_txt: null
	,temp_txtName: null
	,temp_txtDescription: null
	,temp_txtLoad: function(done,failure) {
		kha_Assets.loadBlob("temp_txt",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 134, className : "kha._Assets.BlobList", methodName : "temp_txtLoad"});
	}
	,temp_txtUnload: function() {
		this.temp_txt.unload();
		this.temp_txt = null;
	}
	,wasmfs_js: null
	,wasmfs_jsName: null
	,wasmfs_jsDescription: null
	,wasmfs_jsLoad: function(done,failure) {
		kha_Assets.loadBlob("wasmfs_js",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 134, className : "kha._Assets.BlobList", methodName : "wasmfs_jsLoad"});
	}
	,wasmfs_jsUnload: function() {
		this.wasmfs_js.unload();
		this.wasmfs_js = null;
	}
	,names: null
	,__class__: kha__$Assets_BlobList
};
var kha__$Assets_FontList = function() {
	this.names = ["font_default"];
	this.font_defaultDescription = { name : "font_default", file_sizes : [88828], files : ["font_default.ttf"], type : "font"};
	this.font_defaultName = "font_default";
	this.font_default = null;
};
$hxClasses["kha._Assets.FontList"] = kha__$Assets_FontList;
kha__$Assets_FontList.__name__ = true;
kha__$Assets_FontList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,font_default: null
	,font_defaultName: null
	,font_defaultDescription: null
	,font_defaultLoad: function(done,failure) {
		kha_Assets.loadFont("font_default",function(font) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 138, className : "kha._Assets.FontList", methodName : "font_defaultLoad"});
	}
	,font_defaultUnload: function() {
		this.font_default.unload();
		this.font_default = null;
	}
	,names: null
	,__class__: kha__$Assets_FontList
};
var kha__$Assets_VideoList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.VideoList"] = kha__$Assets_VideoList;
kha__$Assets_VideoList.__name__ = true;
kha__$Assets_VideoList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_VideoList
};
var kha_Assets = function() { };
$hxClasses["kha.Assets"] = kha_Assets;
kha_Assets.__name__ = true;
kha_Assets.__properties__ = {get_videoFormats:"get_videoFormats",get_fontFormats:"get_fontFormats",get_soundFormats:"get_soundFormats",get_imageFormats:"get_imageFormats"};
kha_Assets.progress = null;
kha_Assets.loadEverything = function(callback,filter,uncompressSoundsFilter,failed) {
	var lists = [kha__$Assets_ImageList,kha__$Assets_SoundList,kha__$Assets_BlobList,kha__$Assets_FontList,kha__$Assets_VideoList];
	var listInstances = [kha_Assets.images,kha_Assets.sounds,kha_Assets.blobs,kha_Assets.fonts,kha_Assets.videos];
	var fileCount = 0;
	var _g = 0;
	while(_g < lists.length) {
		var list = lists[_g];
		++_g;
		var _g1 = 0;
		var _g2 = Type.getInstanceFields(list);
		while(_g1 < _g2.length) {
			var file = _g2[_g1];
			++_g1;
			if(StringTools.endsWith(file,"Description")) {
				fileCount += 1;
			}
		}
	}
	if(fileCount == 0) {
		callback();
		return;
	}
	var filesLeft = fileCount;
	var loadFunc = function(desc,done,failure) {
		var name = desc.name;
		switch(desc.type) {
		case "blob":
			kha_Assets.loadBlob(name,function(blob) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 122, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "font":
			kha_Assets.loadFont(name,function(font) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 124, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "image":
			kha_Assets.loadImage(name,function(image) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 113, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "sound":
			kha_Assets.loadSound(name,function(sound) {
				if(uncompressSoundsFilter == null || uncompressSoundsFilter(desc)) {
					sound.uncompress(done);
				} else {
					done();
				}
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 115, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "video":
			kha_Assets.loadVideo(name,function(video) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 126, className : "kha.Assets", methodName : "loadEverything"});
			break;
		}
	};
	var onLoaded = function() {
		filesLeft -= 1;
		kha_Assets.progress = 1 - filesLeft / fileCount;
		if(filesLeft == 0) {
			callback();
		}
	};
	var onError = function(err) {
		(kha_Assets.reporter(failed,{ fileName : "kha/Assets.hx", lineNumber : 137, className : "kha.Assets", methodName : "loadEverything"}))(err);
		onLoaded();
	};
	var _g = 0;
	var _g1 = lists.length;
	while(_g < _g1) {
		var i = _g++;
		var list = lists[i];
		var listInstance = listInstances[i];
		var _g2 = 0;
		var _g3 = Type.getInstanceFields(list);
		while(_g2 < _g3.length) {
			var field = _g3[_g2];
			++_g2;
			if(!StringTools.endsWith(field,"Description")) {
				continue;
			}
			var desc = Reflect.field(listInstance,field);
			if(filter == null || filter(desc)) {
				loadFunc(desc,onLoaded,onError);
			} else {
				onLoaded();
			}
		}
	}
};
kha_Assets.loadImage = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.images,name + "Description");
	kha_LoaderImpl.loadImageFromDescription(description,function(image) {
		kha_Assets.images[name] = image;
		done(image);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadImageFromPath = function(path,readable,done,failed,pos) {
	var description = { files : [path], readable : readable};
	kha_LoaderImpl.loadImageFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.imageFormats = null;
kha_Assets.get_imageFormats = function() {
	return kha_LoaderImpl.getImageFormats();
};
kha_Assets.loadBlob = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.blobs,name + "Description");
	kha_LoaderImpl.loadBlobFromDescription(description,function(blob) {
		kha_Assets.blobs[name] = blob;
		done(blob);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadBlobFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadBlobFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.loadSound = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.sounds,name + "Description");
	kha_LoaderImpl.loadSoundFromDescription(description,function(sound) {
		kha_Assets.sounds[name] = sound;
		done(sound);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadSoundFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadSoundFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.soundFormats = null;
kha_Assets.get_soundFormats = function() {
	return kha_LoaderImpl.getSoundFormats();
};
kha_Assets.loadFont = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.fonts,name + "Description");
	kha_LoaderImpl.loadFontFromDescription(description,function(font) {
		kha_Assets.fonts[name] = font;
		done(font);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadFontFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadFontFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.fontFormats = null;
kha_Assets.get_fontFormats = function() {
	return ["ttf"];
};
kha_Assets.loadVideo = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.videos,name + "Description");
	kha_LoaderImpl.loadVideoFromDescription(description,function(video) {
		kha_Assets.videos[name] = video;
		done(video);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadVideoFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadVideoFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.videoFormats = null;
kha_Assets.get_videoFormats = function() {
	return kha_LoaderImpl.getVideoFormats();
};
kha_Assets.reporter = function(custom,pos) {
	if(custom != null) {
		return custom;
	} else {
		var _g = haxe_Log.trace;
		var infos = pos;
		return function(v) {
			_g(v,infos);
		};
	}
};
var kha_Canvas = function() { };
$hxClasses["kha.Canvas"] = kha_Canvas;
kha_Canvas.__name__ = true;
kha_Canvas.__isInterface__ = true;
kha_Canvas.prototype = {
	get_width: null
	,get_height: null
	,get_g1: null
	,get_g2: null
	,get_g4: null
	,width: null
	,height: null
	,g1: null
	,g2: null
	,g4: null
	,__class__: kha_Canvas
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha_Image = function() { };
$hxClasses["kha.Image"] = kha_Image;
kha_Image.__name__ = true;
kha_Image.__interfaces__ = [kha_Resource,kha_Canvas];
kha_Image.__properties__ = {get_nonPow2Supported:"get_nonPow2Supported",get_maxSize:"get_maxSize"};
kha_Image.create = function(width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,false);
	} else {
		return new kha_WebGLImage(width,height,format,false,0,1);
	}
};
kha_Image.create3D = function(width,height,depth,format,usage) {
	return null;
};
kha_Image.createRenderTarget = function(width,height,format,depthStencil,antiAliasingSamples,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(antiAliasingSamples == null) {
		antiAliasingSamples = 1;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,true);
	} else {
		return new kha_WebGLImage(width,height,format,true,depthStencil,antiAliasingSamples);
	}
};
kha_Image.fromCanvas = function(canvas) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(canvas.width,canvas.height,0,false);
		img.image = canvas;
		img.createTexture();
		return img;
	} else {
		var img = new kha_WebGLImage(canvas.width,canvas.height,0,false,0,1);
		img.image = canvas;
		img.createTexture();
		return img;
	}
};
kha_Image.fromImage = function(image,readable) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(image.width,image.height,0,false);
		img.image = image;
		img.createTexture();
		return img;
	} else {
		var img = new kha_WebGLImage(image.width,image.height,0,false,0,1);
		img.image = image;
		img.createTexture();
		return img;
	}
};
kha_Image.fromBytes = function(bytes,width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl != null) {
		var img = new kha_WebGLImage(width,height,format,false,0,1);
		img.image = img.bytesToArray(bytes);
		img.createTexture();
		return img;
	}
	var img = new kha_CanvasImage(width,height,format,false);
	var g2 = img.get_g2();
	var canvas = g2.canvas;
	var imageData = new ImageData(new Uint8ClampedArray(bytes.b.bufferValue),width,height);
	canvas.putImageData(imageData,0,0);
	return img;
};
kha_Image.fromBytes3D = function(bytes,width,height,depth,format,usage) {
	return null;
};
kha_Image.fromEncodedBytes = function(bytes,fileExtention,doneCallback,errorCallback,readable) {
	if(readable == null) {
		readable = false;
	}
	var dataUrl = "data:image;base64," + haxe_crypto_Base64.encode(bytes);
	var imageElement = js_Boot.__cast(window.document.createElement("img") , HTMLImageElement);
	imageElement.onload = function() {
		doneCallback(kha_Image.fromImage(imageElement,readable));
	};
	imageElement.onerror = function() {
		errorCallback("Image was not created");
	};
	imageElement.src = dataUrl;
};
kha_Image.fromVideo = function(video) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(video.element.videoWidth,video.element.videoHeight,0,false);
		img.video = video.element;
		img.createTexture();
		return img;
	} else {
		var img = new kha_WebGLImage(video.element.videoWidth,video.element.videoHeight,0,false,0,1);
		img.video = video.element;
		img.createTexture();
		return img;
	}
};
kha_Image.get_maxSize = function() {
	if(kha_SystemImpl.gl == null) {
		return 8192;
	} else {
		return kha_SystemImpl.gl.getParameter(3379);
	}
};
kha_Image.get_nonPow2Supported = function() {
	return kha_SystemImpl.gl != null;
};
kha_Image.renderTargetsInvertedY = function() {
	return true;
};
kha_Image.prototype = {
	isOpaque: function(x,y) {
		return false;
	}
	,at: function(x,y) {
		return -16777216;
	}
	,unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,getPixels: function() {
		return null;
	}
	,generateMipmaps: function(levels) {
	}
	,setMipmaps: function(mipmaps) {
	}
	,setDepthStencilFrom: function(image) {
	}
	,clear: function(x,y,z,width,height,depth,color) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_depth: function() {
		return 1;
	}
	,get_format: function() {
		return 0;
	}
	,get_realWidth: function() {
		return 0;
	}
	,get_realHeight: function() {
		return 0;
	}
	,get_stride: function() {
		return 0;
	}
	,get_g1: function() {
		return null;
	}
	,get_g2: function() {
		return null;
	}
	,get_g4: function() {
		return null;
	}
	,__class__: kha_Image
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_stride:"get_stride",get_realHeight:"get_realHeight",get_realWidth:"get_realWidth",get_format:"get_format",get_depth:"get_depth",get_height:"get_height",get_width:"get_width"}
};
var kha_CanvasImage = function(width,height,format,renderTarget) {
	this.g2canvas = null;
	this.myWidth = width;
	this.myHeight = height;
	this.myFormat = format;
	this.renderTarget = renderTarget;
	this.image = null;
	this.video = null;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.CanvasImage"] = kha_CanvasImage;
kha_CanvasImage.__name__ = true;
kha_CanvasImage.context = null;
kha_CanvasImage.init = function() {
	var canvas = window.document.createElement("canvas");
	if(canvas != null) {
		kha_CanvasImage.context = canvas.getContext("2d");
		canvas.width = 2048;
		canvas.height = 2048;
		kha_CanvasImage.context.globalCompositeOperation = "copy";
	}
};
kha_CanvasImage.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_CanvasImage.__super__ = kha_Image;
kha_CanvasImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,myFormat: null
	,renderTarget: null
	,frameBuffer: null
	,graphics1: null
	,g2canvas: null
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,get_g2: function() {
		if(this.g2canvas == null) {
			var canvas = window.document.createElement("canvas");
			this.image = canvas;
			var context = canvas.getContext("2d");
			canvas.width = this.get_width();
			canvas.height = this.get_height();
			this.g2canvas = new kha_js_CanvasGraphics(context);
		}
		return this.g2canvas;
	}
	,get_g4: function() {
		return null;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_format: function() {
		return this.myFormat;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,get_stride: function() {
		if(this.myFormat == 0) {
			return 4 * this.get_width();
		} else {
			return this.get_width();
		}
	}
	,isOpaque: function(x,y) {
		if(this.data == null) {
			if(kha_CanvasImage.context == null) {
				return true;
			} else {
				this.createImageData();
			}
		}
		return this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3] != 0;
	}
	,at: function(x,y) {
		if(this.data == null) {
			if(kha_CanvasImage.context == null) {
				return -16777216;
			} else {
				this.createImageData();
			}
		}
		var r = this.data.data[y * (this.image.width | 0) * 4 + x * 4];
		var g = this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 1];
		var b = this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 2];
		var a = this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3];
		return kha_Color._new(a << 24 | r << 16 | g << 8 | b);
	}
	,createImageData: function() {
		kha_CanvasImage.context.strokeStyle = "rgba(0,0,0,0)";
		kha_CanvasImage.context.fillStyle = "rgba(0,0,0,0)";
		kha_CanvasImage.context.fillRect(0,0,this.image.width,this.image.height);
		kha_CanvasImage.context.drawImage(this.image,0,0,this.image.width,this.image.height,0,0,this.image.width,this.image.height);
		this.data = kha_CanvasImage.context.getImageData(0,0,this.image.width,this.image.height);
	}
	,texture: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.myFormat == 0 ? 4 * this.get_width() * this.get_height() : this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,new Uint8Array(this.bytes.b.bufferValue));
			if(kha_SystemImpl.gl.getError() == 1282) {
				var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
				var _g = 0;
				var _g1 = this.get_height();
				while(_g < _g1) {
					var y = _g++;
					var _g2 = 0;
					var _g3 = this.get_width();
					while(_g2 < _g3) {
						var x = _g2++;
						var _this = this.bytes;
						var pos = y * this.get_width() + x;
						var value = _this.b[pos];
						var pos1 = y * this.get_width() * 4 + x * 4;
						rgbaBytes.b[pos1] = value;
						var pos2 = y * this.get_width() * 4 + x * 4 + 1;
						rgbaBytes.b[pos2] = value;
						var pos3 = y * this.get_width() * 4 + x * 4 + 2;
						rgbaBytes.b[pos3] = value;
						var pos4 = y * this.get_width() * 4 + x * 4 + 3;
						rgbaBytes.b[pos4] = 255;
					}
				}
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,new Uint8Array(rgbaBytes.b.bufferValue));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,getPixels: function() {
		var context = this.g2canvas.canvas;
		var imageData = context.getImageData(0,0,this.get_width(),this.get_height());
		var bytes = new haxe_io_Bytes(new ArrayBuffer(imageData.data.length));
		var _g = 0;
		var _g1 = imageData.data.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = imageData.data[i];
		}
		return bytes;
	}
	,unload: function() {
		this.image = null;
		this.video = null;
		this.data = null;
	}
	,__class__: kha_CanvasImage
});
var kha_Color = {};
kha_Color.__properties__ = {set_value:"set_value",get_value:"get_value",set_A:"set_A",get_A:"get_A",set_B:"set_B",get_B:"get_B",set_G:"set_G",get_G:"get_G",set_R:"set_R",get_R:"get_R",set_Ab:"set_Ab",get_Ab:"get_Ab",set_Bb:"set_Bb",get_Bb:"get_Bb",set_Gb:"set_Gb",get_Gb:"get_Gb",set_Rb:"set_Rb",get_Rb:"get_Rb"};
kha_Color.fromValue = function(value) {
	return kha_Color._new(value);
};
kha_Color.fromBytes = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return kha_Color._new(a << 24 | r << 16 | g << 8 | b);
};
kha_Color.fromFloats = function(r,g,b,a) {
	if(a == null) {
		a = 1;
	}
	return kha_Color._new((a * 255 | 0) << 24 | (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0));
};
kha_Color.fromString = function(value) {
	if((value.length == 7 || value.length == 9) && value.charCodeAt(0) == 35) {
		var colorValue = Std.parseInt("0x" + HxOverrides.substr(value,1,null));
		if(value.length == 7) {
			colorValue += -16777216;
		}
		return kha_Color._new(colorValue | 0);
	} else {
		throw haxe_Exception.thrown("Invalid Color string: '" + value + "'");
	}
};
kha_Color._new = function(value) {
	var this1 = value;
	return this1;
};
kha_Color.get_value = function(this1) {
	return this1;
};
kha_Color.set_value = function(this1,value) {
	this1 = value;
	return this1;
};
kha_Color.get_Rb = function(this1) {
	return (this1 & 16711680) >>> 16;
};
kha_Color.get_Gb = function(this1) {
	return (this1 & 65280) >>> 8;
};
kha_Color.get_Bb = function(this1) {
	return this1 & 255;
};
kha_Color.get_Ab = function(this1) {
	return this1 >>> 24;
};
kha_Color.set_Rb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | i << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha_Color.set_Gb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | i << 8 | this1 & 255;
	return i;
};
kha_Color.set_Bb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | i;
	return i;
};
kha_Color.set_Ab = function(this1,i) {
	this1 = i << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha_Color.get_R = function(this1) {
	return ((this1 & 16711680) >>> 16) * 0.00392156862745098;
};
kha_Color.get_G = function(this1) {
	return ((this1 & 65280) >>> 8) * 0.00392156862745098;
};
kha_Color.get_B = function(this1) {
	return (this1 & 255) * 0.00392156862745098;
};
kha_Color.get_A = function(this1) {
	return (this1 >>> 24) * 0.00392156862745098;
};
kha_Color.set_R = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (f * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha_Color.set_G = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (f * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha_Color.set_B = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | (f * 255 | 0);
	return f;
};
kha_Color.set_A = function(this1,f) {
	this1 = (f * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
var kha_Display = function() {
};
$hxClasses["kha.Display"] = kha_Display;
kha_Display.__name__ = true;
kha_Display.__properties__ = {get_all:"get_all",get_primary:"get_primary"};
kha_Display.get_primary = function() {
	return kha_Display.instance;
};
kha_Display.get_all = function() {
	return [kha_Display.get_primary()];
};
kha_Display.prototype = {
	get_available: function() {
		return true;
	}
	,get_name: function() {
		return "Display";
	}
	,get_x: function() {
		return window.screen.left;
	}
	,get_y: function() {
		return window.screen.top;
	}
	,get_width: function() {
		return window.screen.width;
	}
	,get_height: function() {
		return window.screen.height;
	}
	,get_frequency: function() {
		return 60;
	}
	,get_pixelsPerInch: function() {
		var dpiElement = window.document.createElement("div");
		dpiElement.style.position = "absolute";
		dpiElement.style.width = "1in";
		dpiElement.style.height = "1in";
		dpiElement.style.left = "-100%";
		dpiElement.style.top = "-100%";
		window.document.body.appendChild(dpiElement);
		var dpi = dpiElement.offsetHeight;
		dpiElement.remove();
		return dpi;
	}
	,get_modes: function() {
		return [];
	}
	,__class__: kha_Display
	,__properties__: {get_modes:"get_modes",get_pixelsPerInch:"get_pixelsPerInch",get_frequency:"get_frequency",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x",get_name:"get_name",get_available:"get_available"}
};
var kha_DisplayMode = function(width,height,frequency,bitsPerPixel) {
	this.width = width;
	this.height = height;
	this.frequency = frequency;
	this.bitsPerPixel = bitsPerPixel;
};
$hxClasses["kha.DisplayMode"] = kha_DisplayMode;
kha_DisplayMode.__name__ = true;
kha_DisplayMode.prototype = {
	width: null
	,height: null
	,frequency: null
	,bitsPerPixel: null
	,__class__: kha_DisplayMode
};
var kha_Framebuffer = function($window,g1,g2,g4) {
	this.window = $window;
	this.graphics1 = g1;
	this.graphics2 = g2;
	this.graphics4 = g4;
};
$hxClasses["kha.Framebuffer"] = kha_Framebuffer;
kha_Framebuffer.__name__ = true;
kha_Framebuffer.__interfaces__ = [kha_Canvas];
kha_Framebuffer.prototype = {
	window: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,init: function(g1,g2,g4) {
		this.graphics1 = g1;
		this.graphics2 = g2;
		this.graphics4 = g4;
	}
	,get_g1: function() {
		return this.graphics1;
	}
	,get_g2: function() {
		return this.graphics2;
	}
	,get_g4: function() {
		return this.graphics4;
	}
	,width: null
	,get_width: function() {
		return kha_System.windowWidth(this.window);
	}
	,height: null
	,get_height: function() {
		return kha_System.windowHeight(this.window);
	}
	,__class__: kha_Framebuffer
	,__properties__: {get_height:"get_height",get_width:"get_width",get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1"}
};
var kha_FramebufferOptions = function(frequency,verticalSync,colorBufferBits,depthBufferBits,stencilBufferBits,samplesPerPixel) {
	if(samplesPerPixel == null) {
		samplesPerPixel = 1;
	}
	if(stencilBufferBits == null) {
		stencilBufferBits = 8;
	}
	if(depthBufferBits == null) {
		depthBufferBits = 16;
	}
	if(colorBufferBits == null) {
		colorBufferBits = 32;
	}
	if(verticalSync == null) {
		verticalSync = true;
	}
	if(frequency == null) {
		frequency = 60;
	}
	this.samplesPerPixel = 1;
	this.stencilBufferBits = 8;
	this.depthBufferBits = 16;
	this.colorBufferBits = 32;
	this.verticalSync = true;
	this.frequency = 60;
	this.frequency = frequency;
	this.verticalSync = verticalSync;
	this.colorBufferBits = colorBufferBits;
	this.depthBufferBits = depthBufferBits;
	this.stencilBufferBits = stencilBufferBits;
	this.samplesPerPixel = samplesPerPixel;
};
$hxClasses["kha.FramebufferOptions"] = kha_FramebufferOptions;
kha_FramebufferOptions.__name__ = true;
kha_FramebufferOptions.prototype = {
	frequency: null
	,verticalSync: null
	,colorBufferBits: null
	,depthBufferBits: null
	,stencilBufferBits: null
	,samplesPerPixel: null
	,__class__: kha_FramebufferOptions
};
var kha_AlignedQuad = function() {
};
$hxClasses["kha.AlignedQuad"] = kha_AlignedQuad;
kha_AlignedQuad.__name__ = true;
kha_AlignedQuad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,xadvance: null
	,__class__: kha_AlignedQuad
};
var kha_KravurImage = function(size,ascent,descent,lineGap,width,height,chars,pixels) {
	this.mySize = size;
	this.width = width;
	this.height = height;
	this.chars = chars;
	this.baseline = ascent;
	var _g = 0;
	while(_g < chars.length) {
		var char = chars[_g];
		++_g;
		char.yoff += this.baseline;
	}
	this.texture = kha_Image.create(width,height,1);
	var bytes = this.texture.lock();
	var pos = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = width;
		while(_g2 < _g3) {
			var x = _g2++;
			var v = pixels.readU8(pos);
			bytes.b[pos] = v;
			++pos;
		}
	}
	this.texture.unlock();
};
$hxClasses["kha.KravurImage"] = kha_KravurImage;
kha_KravurImage.__name__ = true;
kha_KravurImage.charBlocks = null;
kha_KravurImage.prototype = {
	mySize: null
	,chars: null
	,texture: null
	,width: null
	,height: null
	,baseline: null
	,getTexture: function() {
		return this.texture;
	}
	,getBakedQuad: function(q,char_index,xpos,ypos) {
		if(char_index >= this.chars.length) {
			return null;
		}
		var ipw = 1.0 / this.width;
		var iph = 1.0 / this.height;
		var b = this.chars[char_index];
		if(b == null) {
			return null;
		}
		var round_x = Math.round(xpos + b.xoff);
		var round_y = Math.round(ypos + b.yoff);
		q.x0 = round_x;
		q.y0 = round_y;
		q.x1 = round_x + b.x1 - b.x0;
		q.y1 = round_y + b.y1 - b.y0;
		q.s0 = b.x0 * ipw;
		q.t0 = b.y0 * iph;
		q.s1 = b.x1 * ipw;
		q.t1 = b.y1 * iph;
		q.xadvance = b.xadvance;
		return q;
	}
	,getCharWidth: function(charIndex) {
		if(this.chars.length == 0) {
			return 0;
		}
		var offset = kha_KravurImage.charBlocks[0];
		if(charIndex < offset) {
			return this.chars[0].xadvance;
		}
		var _g = 1;
		var _g1 = kha_KravurImage.charBlocks.length / 2 | 0;
		while(_g < _g1) {
			var i = _g++;
			var prevEnd = kha_KravurImage.charBlocks[i * 2 - 1];
			var start = kha_KravurImage.charBlocks[i * 2];
			if(charIndex > start - 1) {
				offset += start - 1 - prevEnd;
			}
		}
		if(charIndex - offset >= this.chars.length) {
			return this.chars[0].xadvance;
		}
		return this.chars[charIndex - offset].xadvance;
	}
	,getHeight: function() {
		return this.mySize;
	}
	,stringWidth: function(str) {
		var width = 0;
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var c = _g++;
			width += this.getCharWidth(HxOverrides.cca(str,c));
		}
		return width;
	}
	,charactersWidth: function(characters,start,length) {
		var width = 0;
		var _g = start;
		var _g1 = start + length;
		while(_g < _g1) {
			var i = _g++;
			width += this.getCharWidth(characters[i]);
		}
		return width;
	}
	,getBaselinePosition: function() {
		return this.baseline;
	}
	,__class__: kha_KravurImage
};
var kha_Kravur = function(blob,fontIndex) {
	if(fontIndex == null) {
		fontIndex = 0;
	}
	this.images = new haxe_ds_IntMap();
	this.blob = blob;
	this.fontIndex = fontIndex;
};
$hxClasses["kha.Kravur"] = kha_Kravur;
kha_Kravur.__name__ = true;
kha_Kravur.__interfaces__ = [kha_Resource];
kha_Kravur.fromBytes = function(bytes,fontIndex) {
	if(fontIndex == null) {
		fontIndex = 0;
	}
	return new kha_Kravur(kha_internal_BytesBlob.fromBytes(bytes),fontIndex);
};
kha_Kravur.prototype = {
	oldGlyphs: null
	,blob: null
	,images: null
	,fontIndex: null
	,_get: function(fontSize) {
		var glyphs = kha_graphics2_Graphics.fontGlyphs;
		if(glyphs != this.oldGlyphs) {
			this.oldGlyphs = glyphs;
			kha_KravurImage.charBlocks = [glyphs[0]];
			var nextChar = kha_KravurImage.charBlocks[0] + 1;
			var _g = 1;
			var _g1 = glyphs.length;
			while(_g < _g1) {
				var i = _g++;
				if(glyphs[i] != nextChar) {
					kha_KravurImage.charBlocks.push(glyphs[i - 1]);
					kha_KravurImage.charBlocks.push(glyphs[i]);
					nextChar = glyphs[i] + 1;
				} else {
					++nextChar;
				}
			}
			kha_KravurImage.charBlocks.push(glyphs[glyphs.length - 1]);
		}
		var imageIndex = this.fontIndex * 10000000 + fontSize * 10000 + glyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			var width = 64;
			var height = 32;
			var this1 = new Array(glyphs.length);
			var baked = this1;
			var _g = 0;
			var _g1 = baked.length;
			while(_g < _g1) {
				var i = _g++;
				baked[i] = new kha_graphics2_truetype_Stbtt_$bakedchar();
			}
			var pixels = null;
			var offset = kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex(this.blob,this.fontIndex);
			if(offset == -1) {
				offset = kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex(this.blob,0);
			}
			var status = -1;
			while(status <= 0) {
				if(height < width) {
					height *= 2;
				} else {
					width *= 2;
				}
				pixels = kha_internal_BytesBlob.alloc(width * height);
				status = kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap(this.blob,offset,fontSize,pixels,width,height,glyphs,baked);
			}
			var info = new kha_graphics2_truetype_Stbtt_$fontinfo();
			kha_graphics2_truetype_StbTruetype.stbtt_InitFont(info,this.blob,offset);
			var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics(info);
			var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(info,fontSize);
			var ascent = Math.round(metrics.ascent * scale);
			var descent = Math.round(metrics.descent * scale);
			var lineGap = Math.round(metrics.lineGap * scale);
			var image = new kha_KravurImage(fontSize | 0,ascent,descent,lineGap,width,height,baked,pixels);
			this.images.h[imageIndex] = image;
			return image;
		}
		return this.images.h[imageIndex];
	}
	,height: function(fontSize) {
		return this._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this._get(fontSize).getBaselinePosition();
	}
	,setFontIndex: function(fontIndex) {
		this.fontIndex = fontIndex;
	}
	,unload: function() {
		this.blob = null;
		this.images = null;
	}
	,__class__: kha_Kravur
};
var kha_LoaderImpl = function() { };
$hxClasses["kha.LoaderImpl"] = kha_LoaderImpl;
kha_LoaderImpl.__name__ = true;
kha_LoaderImpl.getImageFormats = function() {
	return ["png","jpg","hdr"];
};
kha_LoaderImpl.loadImageFromDescription = function(desc,done,failed) {
	var readable = Object.prototype.hasOwnProperty.call(desc,"readable") && desc.readable;
	if(StringTools.endsWith(desc.files[0],".hdr")) {
		kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
			var hdrImage = kha_internal_HdrFormat.parse(blob.toBytes());
			done(kha_Image.fromBytes(haxe_io_Bytes.ofData(hdrImage.data.buffer),hdrImage.width,hdrImage.height,2,readable ? 1 : 0));
		},failed);
	} else {
		var img = window.document.createElement("img");
		img.onerror = function(event) {
			failed({ url : desc.files[0], error : event});
		};
		img.onload = function(event) {
			done(kha_Image.fromImage(img,readable));
		};
		img.crossOrigin = "";
		img.src = desc.files[0];
	}
};
kha_LoaderImpl.getSoundFormats = function() {
	var element = window.document.createElement("audio");
	var formats = [];
	if(element.canPlayType("audio/mp4") != "") {
		formats.push("mp4");
	}
	if(element.canPlayType("audio/mp3") != "") {
		formats.push("mp3");
	}
	if(element.canPlayType("audio/wav") != "") {
		formats.push("wav");
	}
	if(kha_SystemImpl._hasWebAudio || element.canPlayType("audio/ogg") != "") {
		formats.push("ogg");
	}
	return formats;
};
kha_LoaderImpl.loadSoundFromDescription = function(desc,done,failed) {
	if(kha_SystemImpl._hasWebAudio) {
		var element = window.document.createElement("audio");
		if(element.canPlayType("audio/mp4") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var i = _g++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".mp4")) {
					new kha_js_WebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/mp3") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var i = _g++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".mp3")) {
					new kha_js_WebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/wav") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var i = _g++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".wav")) {
					new kha_js_WebAudioSound(file,done,failed);
					return;
				}
			}
		}
		var _g = 0;
		var _g1 = desc.files.length;
		while(_g < _g1) {
			var i = _g++;
			var file = desc.files[i];
			if(StringTools.endsWith(file,".ogg")) {
				new kha_js_WebAudioSound(file,done,failed);
				return;
			}
		}
		failed({ url : desc.files.join(","), error : "Unable to find sound files with supported audio formats"});
	} else if(kha_SystemImpl.mobile) {
		var element = window.document.createElement("audio");
		if(element.canPlayType("audio/mp4") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var i = _g++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".mp4")) {
					new kha_js_MobileWebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/mp3") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var i = _g++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".mp3")) {
					new kha_js_MobileWebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/wav") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var i = _g++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".wav")) {
					new kha_js_MobileWebAudioSound(file,done,failed);
					return;
				}
			}
		}
		var _g = 0;
		var _g1 = desc.files.length;
		while(_g < _g1) {
			var i = _g++;
			var file = desc.files[i];
			if(StringTools.endsWith(file,".ogg")) {
				new kha_js_MobileWebAudioSound(file,done,failed);
				return;
			}
		}
		failed({ url : desc.files.join(","), error : "Unable to find sound files with supported audio formats"});
	} else {
		new kha_js_Sound(desc.files,done,failed);
	}
};
kha_LoaderImpl.getVideoFormats = function() {
	return ["mp4","webm"];
};
kha_LoaderImpl.loadVideoFromDescription = function(desc,done,failed) {
	kha_js_Video.fromFile(desc.files,done);
};
kha_LoaderImpl.loadRemote = function(desc,done,failed) {
	var request = new XMLHttpRequest();
	request.open("GET",desc.files[0],true);
	request.responseType = "arraybuffer";
	request.onreadystatechange = function() {
		if(request.readyState != 4) {
			return;
		}
		if(request.status >= 200 && request.status < 400 || request.status == 0 && request.statusText == "") {
			var bytes = null;
			var arrayBuffer = request.response;
			if(arrayBuffer != null) {
				var byteArray = new Uint8Array(arrayBuffer);
				bytes = haxe_io_Bytes.ofData(byteArray);
			} else if(request.responseBody != null) {
				var data = VBArray(request.responseBody).toArray();
				bytes = new haxe_io_Bytes(new ArrayBuffer(data.length));
				var _g = 0;
				var _g1 = data.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[i] = data[i];
				}
			} else {
				failed({ url : desc.files[0]});
				return;
			}
			done(new kha_internal_BytesBlob(bytes));
		} else {
			failed({ url : desc.files[0]});
		}
	};
	request.send(null);
};
kha_LoaderImpl.loadBlobFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadRemote(desc,done,failed);
};
kha_LoaderImpl.loadFontFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
		done(new kha_Kravur(blob));
	},failed);
};
var kha_Macros = function() { };
$hxClasses["kha.Macros"] = kha_Macros;
kha_Macros.__name__ = true;
var kha_TargetRectangle = function(x,y,w,h,s,r) {
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
	this.scaleFactor = s;
	this.rotation = r;
};
$hxClasses["kha.TargetRectangle"] = kha_TargetRectangle;
kha_TargetRectangle.__name__ = true;
kha_TargetRectangle.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,scaleFactor: null
	,rotation: null
	,__class__: kha_TargetRectangle
};
var kha_Scaler = function() { };
$hxClasses["kha.Scaler"] = kha_Scaler;
kha_Scaler.__name__ = true;
kha_Scaler.targetRect = function(width,height,destinationWidth,destinationHeight,rotation) {
	var scalex;
	var scaley;
	var scalew;
	var scaleh;
	var scale;
	switch(rotation) {
	case 0:
		if(width / height > destinationWidth / destinationHeight) {
			scale = destinationWidth / width;
			scalew = width * scale;
			scaleh = height * scale;
			scalex = 0;
			scaley = (destinationHeight - scaleh) * 0.5;
		} else {
			scale = destinationHeight / height;
			scalew = width * scale;
			scaleh = height * scale;
			scalex = (destinationWidth - scalew) * 0.5;
			scaley = 0;
		}
		break;
	case 90:
		if(width / height > destinationHeight / destinationWidth) {
			scale = destinationHeight / width;
			scalew = width * scale;
			scaleh = height * scale;
			scalex = (destinationWidth - scaleh) * 0.5 + scaleh;
			scaley = 0;
		} else {
			scale = destinationWidth / height;
			scalew = width * scale;
			scaleh = height * scale;
			scalex = scaleh;
			scaley = (destinationHeight - scalew) * 0.5;
		}
		break;
	case 180:
		if(width / height > destinationWidth / destinationHeight) {
			scale = destinationWidth / width;
			scalew = width * scale;
			scaleh = height * scale;
			scalex = scalew;
			scaley = (destinationHeight - scaleh) * 0.5 + scaleh;
		} else {
			scale = destinationHeight / height;
			scalew = width * scale;
			scaleh = height * scale;
			scalex = (destinationWidth - scalew) * 0.5 + scalew;
			scaley = scaleh;
		}
		break;
	case 270:
		if(width / height > destinationHeight / destinationWidth) {
			scale = destinationHeight / width;
			scalew = width * scale;
			scaleh = height * scale;
			scalex = (destinationWidth - scaleh) * 0.5;
			scaley = scalew;
		} else {
			scale = destinationWidth / height;
			scalew = width * scale;
			scaleh = height * scale;
			scalex = 0;
			scaley = (destinationHeight - scalew) * 0.5 + scalew;
		}
		break;
	}
	return new kha_TargetRectangle(scalex,scaley,scalew,scaleh,scale,rotation);
};
kha_Scaler.transformXDirectly = function(x,y,sourceWidth,sourceHeight,destinationWidth,destinationHeight,rotation) {
	var targetRect = kha_Scaler.targetRect(sourceWidth,sourceHeight,destinationWidth,destinationHeight,rotation);
	switch(targetRect.rotation) {
	case 0:
		return (x - targetRect.x) / targetRect.scaleFactor | 0;
	case 90:
		return (y - targetRect.y) / targetRect.scaleFactor | 0;
	case 180:
		return (targetRect.x - x) / targetRect.scaleFactor | 0;
	case 270:
		return (targetRect.y - y) / targetRect.scaleFactor | 0;
	}
};
kha_Scaler.transformX = function(x,y,source,destination,rotation) {
	return kha_Scaler.transformXDirectly(x,y,source.get_width(),source.get_height(),destination.get_width(),destination.get_height(),rotation);
};
kha_Scaler.transformYDirectly = function(x,y,sourceWidth,sourceHeight,destinationWidth,destinationHeight,rotation) {
	var targetRect = kha_Scaler.targetRect(sourceWidth,sourceHeight,destinationWidth,destinationHeight,rotation);
	switch(targetRect.rotation) {
	case 0:
		return (y - targetRect.y) / targetRect.scaleFactor | 0;
	case 90:
		return (targetRect.x - x) / targetRect.scaleFactor | 0;
	case 180:
		return (targetRect.y - y) / targetRect.scaleFactor | 0;
	case 270:
		return (x - targetRect.x) / targetRect.scaleFactor | 0;
	}
};
kha_Scaler.transformY = function(x,y,source,destination,rotation) {
	return kha_Scaler.transformYDirectly(x,y,source.get_width(),source.get_height(),destination.get_width(),destination.get_height(),rotation);
};
kha_Scaler.scale = function(source,destination,rotation) {
	var g = destination.get_g2();
	var trans = kha_Scaler.getScaledTransformation(source.get_width(),source.get_height(),destination.get_width(),destination.get_height(),rotation);
	g.transformationIndex++;
	if(g.transformationIndex == g.transformations.length) {
		g.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
	}
	var _this = g.transformations[g.transformationIndex];
	_this._00 = trans._00;
	_this._10 = trans._10;
	_this._20 = trans._20;
	_this._01 = trans._01;
	_this._11 = trans._11;
	_this._21 = trans._21;
	_this._02 = trans._02;
	_this._12 = trans._12;
	_this._22 = trans._22;
	g.setTransformation(g.transformations[g.transformationIndex]);
	g.set_color(-1);
	g.set_opacity(1);
	g.drawImage(source,0,0);
	g.popTransformation();
};
kha_Scaler.getScaledTransformation = function(width,height,destinationWidth,destinationHeight,rotation) {
	var rect = kha_Scaler.targetRect(width,height,destinationWidth,destinationHeight,rotation);
	var sf = rect.scaleFactor;
	var transformation = new kha_math_FastMatrix3(sf,0,rect.x,0,sf,rect.y,0,0,1);
	switch(rotation) {
	case 0:
		break;
	case 90:
		var alpha = Math.PI / 2;
		var m__00 = Math.cos(alpha);
		var m__10 = -Math.sin(alpha);
		var m__20 = 0;
		var m__01 = Math.sin(alpha);
		var m__11 = Math.cos(alpha);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		transformation = new kha_math_FastMatrix3(transformation._00 * m__00 + transformation._10 * m__01 + transformation._20 * m__02,transformation._00 * m__10 + transformation._10 * m__11 + transformation._20 * m__12,transformation._00 * m__20 + transformation._10 * m__21 + transformation._20 * m__22,transformation._01 * m__00 + transformation._11 * m__01 + transformation._21 * m__02,transformation._01 * m__10 + transformation._11 * m__11 + transformation._21 * m__12,transformation._01 * m__20 + transformation._11 * m__21 + transformation._21 * m__22,transformation._02 * m__00 + transformation._12 * m__01 + transformation._22 * m__02,transformation._02 * m__10 + transformation._12 * m__11 + transformation._22 * m__12,transformation._02 * m__20 + transformation._12 * m__21 + transformation._22 * m__22);
		break;
	case 180:
		var alpha = Math.PI;
		var m__00 = Math.cos(alpha);
		var m__10 = -Math.sin(alpha);
		var m__20 = 0;
		var m__01 = Math.sin(alpha);
		var m__11 = Math.cos(alpha);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		transformation = new kha_math_FastMatrix3(transformation._00 * m__00 + transformation._10 * m__01 + transformation._20 * m__02,transformation._00 * m__10 + transformation._10 * m__11 + transformation._20 * m__12,transformation._00 * m__20 + transformation._10 * m__21 + transformation._20 * m__22,transformation._01 * m__00 + transformation._11 * m__01 + transformation._21 * m__02,transformation._01 * m__10 + transformation._11 * m__11 + transformation._21 * m__12,transformation._01 * m__20 + transformation._11 * m__21 + transformation._21 * m__22,transformation._02 * m__00 + transformation._12 * m__01 + transformation._22 * m__02,transformation._02 * m__10 + transformation._12 * m__11 + transformation._22 * m__12,transformation._02 * m__20 + transformation._12 * m__21 + transformation._22 * m__22);
		break;
	case 270:
		var alpha = Math.PI * 3 / 2;
		var m__00 = Math.cos(alpha);
		var m__10 = -Math.sin(alpha);
		var m__20 = 0;
		var m__01 = Math.sin(alpha);
		var m__11 = Math.cos(alpha);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		transformation = new kha_math_FastMatrix3(transformation._00 * m__00 + transformation._10 * m__01 + transformation._20 * m__02,transformation._00 * m__10 + transformation._10 * m__11 + transformation._20 * m__12,transformation._00 * m__20 + transformation._10 * m__21 + transformation._20 * m__22,transformation._01 * m__00 + transformation._11 * m__01 + transformation._21 * m__02,transformation._01 * m__10 + transformation._11 * m__11 + transformation._21 * m__12,transformation._01 * m__20 + transformation._11 * m__21 + transformation._21 * m__22,transformation._02 * m__00 + transformation._12 * m__01 + transformation._22 * m__02,transformation._02 * m__10 + transformation._12 * m__11 + transformation._22 * m__12,transformation._02 * m__20 + transformation._12 * m__21 + transformation._22 * m__22);
		break;
	}
	return transformation;
};
var kha_TimeTask = function() {
};
$hxClasses["kha.TimeTask"] = kha_TimeTask;
kha_TimeTask.__name__ = true;
kha_TimeTask.prototype = {
	task: null
	,start: null
	,period: null
	,duration: null
	,next: null
	,id: null
	,groupId: null
	,active: null
	,paused: null
	,__class__: kha_TimeTask
};
var kha_FrameTask = function(task,priority,id) {
	this.task = task;
	this.priority = priority;
	this.id = id;
	this.active = true;
	this.paused = false;
};
$hxClasses["kha.FrameTask"] = kha_FrameTask;
kha_FrameTask.__name__ = true;
kha_FrameTask.prototype = {
	task: null
	,priority: null
	,id: null
	,active: null
	,paused: null
	,__class__: kha_FrameTask
};
var kha_Scheduler = function() { };
$hxClasses["kha.Scheduler"] = kha_Scheduler;
kha_Scheduler.__name__ = true;
kha_Scheduler.timeTasks = null;
kha_Scheduler.pausedTimeTasks = null;
kha_Scheduler.outdatedTimeTasks = null;
kha_Scheduler.timeTasksScratchpad = null;
kha_Scheduler.frameTasks = null;
kha_Scheduler.toDeleteFrame = null;
kha_Scheduler.current = null;
kha_Scheduler.lastTime = null;
kha_Scheduler.lastFrameEnd = null;
kha_Scheduler.frame_tasks_sorted = null;
kha_Scheduler.stopped = null;
kha_Scheduler.vsync = null;
kha_Scheduler.onedifhz = null;
kha_Scheduler.currentFrameTaskId = null;
kha_Scheduler.currentTimeTaskId = null;
kha_Scheduler.currentGroupId = null;
kha_Scheduler.deltas = null;
kha_Scheduler.init = function() {
	kha_Scheduler.deltas = [];
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.stopped = true;
	kha_Scheduler.frame_tasks_sorted = true;
	kha_Scheduler.current = kha_Scheduler.lastTime = kha_Scheduler.lastFrameEnd = kha_Scheduler.realTime();
	kha_Scheduler.currentFrameTaskId = 0;
	kha_Scheduler.currentTimeTaskId = 0;
	kha_Scheduler.currentGroupId = 0;
	kha_Scheduler.timeTasks = [];
	kha_Scheduler.pausedTimeTasks = [];
	kha_Scheduler.outdatedTimeTasks = [];
	kha_Scheduler.timeTasksScratchpad = [];
	kha_Scheduler.frameTasks = [];
	kha_Scheduler.toDeleteFrame = [];
};
kha_Scheduler.start = function(restartTimers) {
	if(restartTimers == null) {
		restartTimers = false;
	}
	kha_Scheduler.vsync = kha_Window.get(0).get_vSynced();
	var hz = kha_Display.get_primary().get_frequency();
	if(hz >= 57 && hz <= 63) {
		hz = 60;
	}
	kha_Scheduler.onedifhz = 1.0 / hz;
	kha_Scheduler.stopped = false;
	kha_Scheduler.resetTime();
	kha_Scheduler.lastTime = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	if(restartTimers) {
		var _g = 0;
		var _g1 = kha_Scheduler.timeTasks;
		while(_g < _g1.length) {
			var timeTask = _g1[_g];
			++_g;
			timeTask.paused = false;
		}
		var _g = 0;
		var _g1 = kha_Scheduler.frameTasks;
		while(_g < _g1.length) {
			var frameTask = _g1[_g];
			++_g;
			frameTask.paused = false;
		}
	}
};
kha_Scheduler.stop = function() {
	kha_Scheduler.stopped = true;
};
kha_Scheduler.isStopped = function() {
	return kha_Scheduler.stopped;
};
kha_Scheduler.warpTimeTasksBack = function(time,tasks) {
	var _g = 0;
	while(_g < tasks.length) {
		var timeTask = tasks[_g];
		++_g;
		if(timeTask.start >= time) {
			timeTask.next = timeTask.start;
		} else if(timeTask.period > 0) {
			var sinceStart = time - timeTask.start;
			var times = Math.ceil(sinceStart / timeTask.period);
			timeTask.next = timeTask.start + times * timeTask.period;
		}
	}
};
kha_Scheduler.warp = function(time) {
	if(time < kha_Scheduler.lastTime) {
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.lastFrameEnd = time;
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.outdatedTimeTasks);
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.timeTasks);
		var _g = 0;
		var _g1 = kha_Scheduler.outdatedTimeTasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			if(task.next >= time) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g = 0;
		var _g1 = kha_Scheduler.timeTasksScratchpad;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task);
		}
		var _g = 0;
		var _g1 = kha_Scheduler.timeTasksScratchpad;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,task);
		}
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	} else if(time > kha_Scheduler.lastTime) {
		kha_Scheduler.startTime -= time - kha_Scheduler.lastTime;
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.lastFrameEnd = time;
		kha_Scheduler.executeTimeTasks(time);
	}
};
kha_Scheduler.executeFrame = function() {
	var now = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var delta = now - kha_Scheduler.lastTime;
	kha_Scheduler.lastTime = now;
	var frameEnd = kha_Scheduler.lastFrameEnd;
	if(delta >= 0) {
		if(kha_netsync_Session.the() == null) {
			if(delta > kha_Scheduler.maxframetime) {
				kha_Scheduler.startTime += delta - kha_Scheduler.maxframetime;
				delta = kha_Scheduler.maxframetime;
				frameEnd += delta;
			} else if(kha_Scheduler.vsync) {
				var measured = delta;
				var frames = Math.round(delta / kha_Scheduler.onedifhz);
				var realdif = frames * kha_Scheduler.onedifhz;
				delta = realdif;
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT - 2;
				while(_g < _g1) {
					var i = _g++;
					delta += kha_Scheduler.deltas[i];
					kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
				}
				delta += kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2];
				delta /= kha_Scheduler.DIF_COUNT;
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2] = realdif;
				frameEnd += delta;
			} else {
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT - 1;
				while(_g < _g1) {
					var i = _g++;
					kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
				}
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 1] = delta;
				var next = 0;
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT;
				while(_g < _g1) {
					var i = _g++;
					next += kha_Scheduler.deltas[i];
				}
				next /= kha_Scheduler.DIF_COUNT;
				frameEnd += next;
			}
		} else {
			frameEnd += delta;
		}
		if(!kha_Scheduler.stopped) {
			kha_Scheduler.lastFrameEnd = frameEnd;
		}
		var _g = 0;
		var _g1 = kha_Scheduler.pausedTimeTasks;
		while(_g < _g1.length) {
			var pausedTask = _g1[_g];
			++_g;
			pausedTask.next += delta;
		}
		if(kha_Scheduler.stopped) {
			var _g = 0;
			var _g1 = kha_Scheduler.timeTasks;
			while(_g < _g1.length) {
				var timeTask = _g1[_g];
				++_g;
				timeTask.next += delta;
			}
		}
		kha_Scheduler.executeTimeTasks(frameEnd);
		var _g = 0;
		var _g1 = kha_Scheduler.outdatedTimeTasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			if(task.next < frameEnd - 10.0) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g = 0;
		var _g1 = kha_Scheduler.timeTasksScratchpad;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task);
		}
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	}
	kha_Scheduler.current = frameEnd;
	kha_Scheduler.sortFrameTasks();
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(!kha_Scheduler.stopped && !frameTask.paused && frameTask.active) {
			if(!frameTask.task()) {
				frameTask.active = false;
			}
		}
	}
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(!frameTask.active) {
			kha_Scheduler.toDeleteFrame.push(frameTask);
		}
	}
	while(kha_Scheduler.toDeleteFrame.length > 0) HxOverrides.remove(kha_Scheduler.frameTasks,kha_Scheduler.toDeleteFrame.pop());
};
kha_Scheduler.executeTimeTasks = function(until) {
	while(kha_Scheduler.timeTasks.length > 0) {
		kha_Scheduler.activeTimeTask = kha_Scheduler.timeTasks[0];
		if(kha_Scheduler.activeTimeTask.next <= until) {
			kha_Scheduler.current = kha_Scheduler.activeTimeTask.next;
			kha_Scheduler.activeTimeTask.next += kha_Scheduler.activeTimeTask.period;
			HxOverrides.remove(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
			if(kha_Scheduler.activeTimeTask.active && kha_Scheduler.activeTimeTask.task()) {
				if(kha_Scheduler.activeTimeTask.period > 0 && (kha_Scheduler.activeTimeTask.duration == 0 || kha_Scheduler.activeTimeTask.duration >= kha_Scheduler.activeTimeTask.start + kha_Scheduler.activeTimeTask.next)) {
					kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
				} else {
					kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
				}
			} else {
				kha_Scheduler.activeTimeTask.active = false;
				kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
			}
		} else {
			break;
		}
	}
	kha_Scheduler.activeTimeTask = null;
};
kha_Scheduler.archiveTimeTask = function(timeTask,frameEnd) {
};
kha_Scheduler.time = function() {
	return kha_Scheduler.current;
};
kha_Scheduler.realTime = function() {
	return kha_System.get_time();
};
kha_Scheduler.resetTime = function() {
	var now = kha_System.get_time();
	var dif = now - kha_Scheduler.startTime;
	kha_Scheduler.startTime = now;
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		timeTask.start -= dif;
		timeTask.next -= dif;
	}
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.current = 0;
	kha_Scheduler.lastTime = 0;
	kha_Scheduler.lastFrameEnd = 0;
};
kha_Scheduler.addBreakableFrameTask = function(task,priority) {
	kha_Scheduler.frameTasks.push(new kha_FrameTask(task,priority,++kha_Scheduler.currentFrameTaskId));
	kha_Scheduler.frame_tasks_sorted = false;
	return kha_Scheduler.currentFrameTaskId;
};
kha_Scheduler.addFrameTask = function(task,priority) {
	return kha_Scheduler.addBreakableFrameTask(function() {
		task();
		return true;
	},priority);
};
kha_Scheduler.pauseFrameTask = function(id,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.paused = paused;
			break;
		}
	}
};
kha_Scheduler.removeFrameTask = function(id) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.active = false;
			break;
		}
	}
};
kha_Scheduler.generateGroupId = function() {
	return ++kha_Scheduler.currentGroupId;
};
kha_Scheduler.addBreakableTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	var t = new kha_TimeTask();
	t.active = true;
	t.task = task;
	t.id = ++kha_Scheduler.currentTimeTaskId;
	t.groupId = groupId;
	t.start = kha_Scheduler.current + start;
	t.period = 0;
	if(period != 0) {
		t.period = period;
	}
	t.duration = 0;
	if(duration != 0) {
		t.duration = t.start + duration;
	}
	t.next = t.start;
	kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,t);
	return t.id;
};
kha_Scheduler.addTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(groupId,function() {
		task();
		return true;
	},start,period,duration);
};
kha_Scheduler.addBreakableTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.addTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.getTimeTask = function(id) {
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		return kha_Scheduler.activeTimeTask;
	}
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.id == id) {
			return timeTask;
		}
	}
	var _g = 0;
	var _g1 = kha_Scheduler.pausedTimeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.id == id) {
			return timeTask;
		}
	}
	return null;
};
kha_Scheduler.pauseTimeTask = function(id,paused) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.pauseRunningTimeTask = function(timeTask,paused) {
	timeTask.paused = paused;
	if(paused) {
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
		kha_Scheduler.pausedTimeTasks.push(timeTask);
	} else {
		kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,timeTask);
		HxOverrides.remove(kha_Scheduler.pausedTimeTasks,timeTask);
	}
};
kha_Scheduler.pauseTimeTasks = function(groupId,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
		}
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.removeTimeTask = function(id) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		timeTask.active = false;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
	}
};
kha_Scheduler.removeTimeTasks = function(groupId) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			timeTask.active = false;
			kha_Scheduler.timeTasksScratchpad.push(timeTask);
		}
	}
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasksScratchpad;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
	}
	while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.active = false;
	}
};
kha_Scheduler.numTasksInSchedule = function() {
	return kha_Scheduler.timeTasks.length + kha_Scheduler.frameTasks.length;
};
kha_Scheduler.insertSorted = function(list,task) {
	var _g = 0;
	var _g1 = list.length;
	while(_g < _g1) {
		var i = _g++;
		if(list[i].next > task.next) {
			list.splice(i,0,task);
			return;
		}
	}
	list.push(task);
};
kha_Scheduler.sortFrameTasks = function() {
	if(kha_Scheduler.frame_tasks_sorted) {
		return;
	}
	kha_Scheduler.frameTasks.sort(function(a,b) {
		if(a.priority > b.priority) {
			return 1;
		} else if(a.priority < b.priority) {
			return -1;
		} else {
			return 0;
		}
	});
	kha_Scheduler.frame_tasks_sorted = true;
};
var kha_Shaders = function() { };
$hxClasses["kha.Shaders"] = kha_Shaders;
kha_Shaders.__name__ = true;
kha_Shaders.init = function() {
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_colored_fragData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_colored_fragData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_colored_fragData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_colored_frag = new kha_graphics4_FragmentShader(blobs,["painter-colored.frag.essl","painter-colored-webgl2.frag.essl","painter-colored-relaxed.frag.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_colored_vertData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_colored_vertData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_colored_vertData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_colored_vert = new kha_graphics4_VertexShader(blobs,["painter-colored.vert.essl","painter-colored-webgl2.vert.essl","painter-colored-relaxed.vert.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_image_fragData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_image_fragData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_image_fragData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_image_frag = new kha_graphics4_FragmentShader(blobs,["painter-image.frag.essl","painter-image-webgl2.frag.essl","painter-image-relaxed.frag.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_image_vertData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_image_vertData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_image_vertData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_image_vert = new kha_graphics4_VertexShader(blobs,["painter-image.vert.essl","painter-image-webgl2.vert.essl","painter-image-relaxed.vert.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_text_fragData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_text_fragData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_text_fragData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_text_frag = new kha_graphics4_FragmentShader(blobs,["painter-text.frag.essl","painter-text-webgl2.frag.essl","painter-text-relaxed.frag.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_text_vertData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_text_vertData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_text_vertData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_text_vert = new kha_graphics4_VertexShader(blobs,["painter-text.vert.essl","painter-text-webgl2.vert.essl","painter-text-relaxed.vert.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_video_fragData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_video_fragData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_video_fragData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_video_frag = new kha_graphics4_FragmentShader(blobs,["painter-video.frag.essl","painter-video-webgl2.frag.essl","painter-video-relaxed.frag.essl"]);
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"painter_video_vertData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_video_vertData" + 1);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data = Reflect.field(kha_Shaders,"painter_video_vertData" + 2);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.painter_video_vert = new kha_graphics4_VertexShader(blobs,["painter-video.vert.essl","painter-video-webgl2.vert.essl","painter-video-relaxed.vert.essl"]);
};
var kha_Sound = function() {
	this.sampleRate = 0;
	this.channels = 0;
	this.length = 0;
};
$hxClasses["kha.Sound"] = kha_Sound;
kha_Sound.__name__ = true;
kha_Sound.__interfaces__ = [kha_Resource];
kha_Sound.prototype = {
	compressedData: null
	,uncompressedData: null
	,length: null
	,channels: null
	,sampleRate: null
	,uncompress: function(done) {
		if(this.uncompressedData != null) {
			done();
			return;
		}
		var output = new haxe_io_BytesOutput();
		var header = kha_audio2_ogg_vorbis_Reader.readAll(this.compressedData,output,true);
		var soundBytes = output.getBytes();
		var count = soundBytes.length / 4 | 0;
		if(header.channel == 1) {
			this.length = count / kha_audio2_Audio.samplesPerSecond;
			var this1 = new Float32Array(count * 2);
			this.uncompressedData = this1;
			var _g = 0;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				this.uncompressedData[i * 2] = soundBytes.getFloat(i * 4);
				this.uncompressedData[i * 2 + 1] = soundBytes.getFloat(i * 4);
			}
		} else {
			this.length = count / 2 / kha_audio2_Audio.samplesPerSecond;
			var this1 = new Float32Array(count);
			this.uncompressedData = this1;
			var _g = 0;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				this.uncompressedData[i] = soundBytes.getFloat(i * 4);
			}
		}
		this.channels = header.channel;
		this.sampleRate = header.sampleRate;
		this.compressedData = null;
		done();
	}
	,unload: function() {
		this.compressedData = null;
		this.uncompressedData = null;
	}
	,__class__: kha_Sound
};
var kha_SystemOptions = function(title,width,height,$window,framebuffer) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(title == null) {
		title = "Kha";
	}
	this.framebuffer = null;
	this.window = null;
	this.height = -1;
	this.width = -1;
	this.title = "Kha";
	this.title = title;
	this.window = $window == null ? new kha_WindowOptions(null,-1,-1,800,600,-1,true,null,0) : $window;
	if(width > 0) {
		this.window.width = width;
		this.width = width;
	} else {
		this.width = this.window.width;
	}
	if(height > 0) {
		this.window.height = height;
		this.height = height;
	} else {
		this.height = this.window.height;
	}
	if(this.window.title == null) {
		this.window.title = title;
	}
	this.framebuffer = framebuffer == null ? new kha_FramebufferOptions(60,true,32,16,8,1) : framebuffer;
};
$hxClasses["kha.SystemOptions"] = kha_SystemOptions;
kha_SystemOptions.__name__ = true;
kha_SystemOptions.prototype = {
	title: null
	,width: null
	,height: null
	,window: null
	,framebuffer: null
	,__class__: kha_SystemOptions
};
var kha_System = function() { };
$hxClasses["kha.System"] = kha_System;
kha_System.__name__ = true;
kha_System.__properties__ = {get_refreshRate:"get_refreshRate",get_vsync:"get_vsync",get_language:"get_language",get_systemId:"get_systemId",get_screenRotation:"get_screenRotation",get_time:"get_time",get_title:"get_title"};
kha_System.theTitle = null;
kha_System.init = function(options,callback) {
	var features = 0;
	if(options.resizable) {
		features |= 1;
	}
	if(options.maximizable) {
		features |= 4;
	}
	if(options.minimizable) {
		features |= 2;
	}
	var newOptions = new kha_SystemOptions(options.title,options.width,options.height,new kha_WindowOptions(null,-1,-1,800,600,-1,true,features,options.windowMode),new kha_FramebufferOptions(60,options.vSync,32,16,8,options.samplesPerPixel));
	kha_System.start(newOptions,function(_) {
		callback();
	});
};
kha_System.start = function(options,callback) {
	kha_System.theTitle = options.title;
	kha_SystemImpl.init(options,callback);
};
kha_System.get_title = function() {
	return kha_System.theTitle;
};
kha_System.notifyOnRender = function(listener,id) {
	if(id == null) {
		id = 0;
	}
	kha_System.renderListeners.push(function(framebuffers) {
		if(id < framebuffers.length) {
			listener(framebuffers[id]);
		}
	});
};
kha_System.notifyOnFrames = function(listener) {
	kha_System.renderListeners.push(listener);
};
kha_System.removeFramesListener = function(listener) {
	HxOverrides.remove(kha_System.renderListeners,listener);
};
kha_System.notifyOnApplicationState = function(foregroundListener,resumeListener,pauseListener,backgroundListener,shutdownListener) {
	if(foregroundListener != null) {
		kha_System.foregroundListeners.push(foregroundListener);
	}
	if(resumeListener != null) {
		kha_System.resumeListeners.push(resumeListener);
	}
	if(pauseListener != null) {
		kha_System.pauseListeners.push(pauseListener);
	}
	if(backgroundListener != null) {
		kha_System.backgroundListeners.push(backgroundListener);
	}
	if(shutdownListener != null) {
		kha_System.shutdownListeners.push(shutdownListener);
	}
};
kha_System.removeApplicationStateListeners = function(foregroundListener,resumeListener,pauseListener,backgroundListener,shutdownListener) {
	if(foregroundListener != null) {
		HxOverrides.remove(kha_System.foregroundListeners,foregroundListener);
	}
	if(resumeListener != null) {
		HxOverrides.remove(kha_System.resumeListeners,resumeListener);
	}
	if(pauseListener != null) {
		HxOverrides.remove(kha_System.pauseListeners,pauseListener);
	}
	if(backgroundListener != null) {
		HxOverrides.remove(kha_System.backgroundListeners,backgroundListener);
	}
	if(shutdownListener != null) {
		HxOverrides.remove(kha_System.shutdownListeners,shutdownListener);
	}
};
kha_System.notifyOnDropFiles = function(dropFilesListener) {
	kha_System.dropFilesListeners.push(dropFilesListener);
};
kha_System.removeDropListener = function(listener) {
	HxOverrides.remove(kha_System.dropFilesListeners,listener);
};
kha_System.notifyOnCutCopyPaste = function(cutListener,copyListener,pasteListener) {
	kha_System.cutListener = cutListener;
	kha_System.copyListener = copyListener;
	kha_System.pasteListener = pasteListener;
};
kha_System.notifyOnLoginLogout = function(loginListener,logoutListener) {
	kha_System.loginListener = loginListener;
	kha_System.logoutListener = logoutListener;
};
kha_System.login = function() {
	kha_SystemImpl.login();
};
kha_System.waitingForLogin = function() {
	return kha_SystemImpl.waitingForLogin();
};
kha_System.allowUserChange = function() {
	kha_SystemImpl.allowUserChange();
};
kha_System.disallowUserChange = function() {
	kha_SystemImpl.disallowUserChange();
};
kha_System.render = function(framebuffers) {
	var _g = 0;
	var _g1 = kha_System.renderListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(framebuffers);
	}
};
kha_System.foreground = function() {
	var _g = 0;
	var _g1 = kha_System.foregroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.resume = function() {
	var _g = 0;
	var _g1 = kha_System.resumeListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.pause = function() {
	var _g = 0;
	var _g1 = kha_System.pauseListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.background = function() {
	var _g = 0;
	var _g1 = kha_System.backgroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.shutdown = function() {
	var _g = 0;
	var _g1 = kha_System.shutdownListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.dropFiles = function(filePath) {
	var _g = 0;
	var _g1 = kha_System.dropFilesListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(filePath);
	}
};
kha_System.time = null;
kha_System.get_time = function() {
	return kha_SystemImpl.getTime();
};
kha_System.windowWidth = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get($window).get_width();
};
kha_System.windowHeight = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get_all()[$window].get_height();
};
kha_System.screenRotation = null;
kha_System.get_screenRotation = function() {
	return 0;
};
kha_System.systemId = null;
kha_System.get_systemId = function() {
	return kha_SystemImpl.getSystemId();
};
kha_System.vibrate = function(ms) {
	kha_SystemImpl.vibrate(ms);
};
kha_System.get_language = function() {
	return kha_SystemImpl.getLanguage();
};
kha_System.stop = function() {
	return kha_SystemImpl.requestShutdown();
};
kha_System.loadUrl = function(url) {
	kha_SystemImpl.loadUrl(url);
};
kha_System.canSwitchFullscreen = function() {
	return true;
};
kha_System.isFullscreen = function() {
	if(kha_Window.get(0).get_mode() != 1) {
		return kha_Window.get(0).get_mode() == 2;
	} else {
		return true;
	}
};
kha_System.requestFullscreen = function() {
	kha_Window.get(0).set_mode(1);
};
kha_System.exitFullscreen = function() {
	kha_Window.get(0).set_mode(0);
};
kha_System.notifyOnFullscreenChange = function(func,error) {
};
kha_System.removeFullscreenListener = function(func,error) {
};
kha_System.changeResolution = function(width,height) {
};
kha_System.requestShutdown = function() {
	kha_System.stop();
};
kha_System.vsync = null;
kha_System.get_vsync = function() {
	return kha_Window.get(0).get_vSynced();
};
kha_System.refreshRate = null;
kha_System.get_refreshRate = function() {
	return kha_Display.get_primary().get_frequency();
};
kha_System.screenDpi = function() {
	return kha_Display.get_primary().get_pixelsPerInch();
};
kha_System.safeZone = function() {
	return kha_SystemImpl.safeZone();
};
kha_System.automaticSafeZone = function() {
	return kha_SystemImpl.automaticSafeZone();
};
kha_System.setSafeZone = function(value) {
	kha_SystemImpl.setSafeZone(value);
};
kha_System.unlockAchievement = function(id) {
	kha_SystemImpl.unlockAchievement(id);
};
var kha_GamepadStates = function() {
	this.axes = [];
	this.buttons = [];
};
$hxClasses["kha.GamepadStates"] = kha_GamepadStates;
kha_GamepadStates.__name__ = true;
kha_GamepadStates.prototype = {
	axes: null
	,buttons: null
	,__class__: kha_GamepadStates
};
var kha_SystemImpl = function() { };
$hxClasses["kha.SystemImpl"] = kha_SystemImpl;
kha_SystemImpl.__name__ = true;
kha_SystemImpl.gl = null;
kha_SystemImpl.gl2 = null;
kha_SystemImpl.halfFloat = null;
kha_SystemImpl.anisotropicFilter = null;
kha_SystemImpl.depthTexture = null;
kha_SystemImpl.drawBuffers = null;
kha_SystemImpl.elementIndexUint = null;
kha_SystemImpl._hasWebAudio = null;
kha_SystemImpl.khanvas = null;
kha_SystemImpl.options = null;
kha_SystemImpl.window = null;
kha_SystemImpl.errorHandler = function(message,source,lineno,colno,error) {
	$global.console.error("Error: " + message);
	$global.console.error("Stack:\n" + Std.string(error.stack));
	return true;
};
kha_SystemImpl.init = function(options,callback) {
	kha_SystemImpl.options = options;
	kha_SystemImpl.mobile = kha_SystemImpl.isMobile();
	kha_SystemImpl.ios = kha_SystemImpl.isIOS();
	kha_SystemImpl.chrome = kha_SystemImpl.isChrome();
	kha_SystemImpl.firefox = kha_SystemImpl.isFirefox();
	kha_SystemImpl.ie = kha_SystemImpl.isIE();
	if(kha_SystemImpl.mobile || kha_SystemImpl.chrome || kha_SystemImpl.firefox) {
		kha_SystemImpl.mobileAudioPlaying = false;
	} else {
		kha_SystemImpl.mobileAudioPlaying = true;
	}
	kha_SystemImpl.initSecondStep(callback);
};
kha_SystemImpl.initSecondStep = function(callback) {
	kha_SystemImpl.init2(kha_SystemImpl.options.window.width,kha_SystemImpl.options.window.height);
	callback(kha_SystemImpl.window);
};
kha_SystemImpl.initSensor = function() {
	if(kha_SystemImpl.ios) {
		window.ondevicemotion = function(event) {
			kha_input_Sensor._changed(0,-event.accelerationIncludingGravity.x,-event.accelerationIncludingGravity.y,-event.accelerationIncludingGravity.z);
		};
	} else {
		window.ondevicemotion = function(event) {
			kha_input_Sensor._changed(0,event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
		};
	}
	window.ondeviceorientation = function(event) {
		kha_input_Sensor._changed(1,event.beta,event.gamma,event.alpha);
	};
};
kha_SystemImpl.isMobile = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("Android") >= 0 || agent.indexOf("webOS") >= 0 || agent.indexOf("BlackBerry") >= 0 || agent.indexOf("Windows Phone") >= 0) {
		return true;
	}
	if(kha_SystemImpl.isIOS()) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIOS = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("iPhone") >= 0 || agent.indexOf("iPad") >= 0 || agent.indexOf("iPod") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isChrome = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("Chrome") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isFirefox = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("Firefox") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIE = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("MSIE ") >= 0 || agent.indexOf("Trident/") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.setCanvas = function(canvas) {
	kha_SystemImpl.khanvas = canvas;
};
kha_SystemImpl.getScreenRotation = function() {
	return 0;
};
kha_SystemImpl.getTime = function() {
	var now = window.performance != null ? window.performance.now() : Date.now();
	return now / 1000;
};
kha_SystemImpl.getSystemId = function() {
	return "HTML5";
};
kha_SystemImpl.vibrate = function(ms) {
	$global.navigator.vibrate(ms);
};
kha_SystemImpl.getLanguage = function() {
	var lang = $global.navigator.language;
	return HxOverrides.substr(lang,0,2).toLowerCase();
};
kha_SystemImpl.requestShutdown = function() {
	window.close();
	return true;
};
kha_SystemImpl.frame = null;
kha_SystemImpl.pressedKeys = null;
kha_SystemImpl.mouse = null;
kha_SystemImpl.surface = null;
kha_SystemImpl.gamepads = null;
kha_SystemImpl.gamepadStates = null;
kha_SystemImpl.mouseX = null;
kha_SystemImpl.mouseY = null;
kha_SystemImpl.touchX = null;
kha_SystemImpl.touchY = null;
kha_SystemImpl.init2 = function(defaultWidth,defaultHeight,backbufferFormat) {
	kha_SystemImpl.keyboard = new kha_input_Keyboard();
	kha_SystemImpl.mouse = new kha_input_MouseImpl();
	kha_SystemImpl.surface = new kha_input_Surface();
	kha_SystemImpl.gamepads = [];
	kha_SystemImpl.gamepadStates = [];
	kha_SystemImpl.gamepads[0] = new kha_input_Gamepad(0);
	kha_SystemImpl.gamepadStates[0] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[1] = new kha_input_Gamepad(1);
	kha_SystemImpl.gamepadStates[1] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[2] = new kha_input_Gamepad(2);
	kha_SystemImpl.gamepadStates[2] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[3] = new kha_input_Gamepad(3);
	kha_SystemImpl.gamepadStates[3] = new kha_GamepadStates();
	window.addEventListener("gamepadconnected",function(e) {
		kha_input_Gamepad.sendConnectEvent(e.gamepad.index);
	});
	window.addEventListener("gamepaddisconnected",function(e) {
		kha_input_Gamepad.sendDisconnectEvent(e.gamepad.index);
	});
	if(kha_SystemImpl.ie) {
		kha_SystemImpl.pressedKeys = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			kha_SystemImpl.pressedKeys.push(false);
		}
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			kha_SystemImpl.pressedKeys.push(null);
		}
	}
	var onCopy = function(e) {
		if(kha_System.copyListener != null) {
			var data = kha_System.copyListener();
			if(data != null) {
				e.clipboardData.setData("text/plain",data);
			}
			e.preventDefault();
		}
	};
	var onCut = function(e) {
		if(kha_System.cutListener != null) {
			var data = kha_System.cutListener();
			if(data != null) {
				e.clipboardData.setData("text/plain",data);
			}
			e.preventDefault();
		}
	};
	var onPaste = function(e) {
		if(kha_System.pasteListener != null) {
			var onPaste = e.clipboardData.getData("text/plain");
			kha_System.pasteListener(onPaste);
			e.preventDefault();
		}
	};
	var document = window.document;
	document.addEventListener("copy",onCopy);
	document.addEventListener("cut",onCut);
	document.addEventListener("paste",onPaste);
	kha_CanvasImage.init();
	kha_Scheduler.init();
	kha_SystemImpl.loadFinished(defaultWidth,defaultHeight);
};
kha_SystemImpl.copyToClipboard = function(text) {
	var textArea = window.document.createElement("textarea");
	textArea.value = text;
	textArea.style.top = "0";
	textArea.style.left = "0";
	textArea.style.position = "fixed";
	window.document.body.appendChild(textArea);
	textArea.focus();
	textArea.select();
	try {
		window.document.execCommand("copy");
	} catch( _g ) {
	}
	window.document.body.removeChild(textArea);
};
kha_SystemImpl.getMouse = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.mouse;
};
kha_SystemImpl.getKeyboard = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.keyboard;
};
kha_SystemImpl.checkGamepad = function(pad) {
	var _g = 0;
	var _g1 = pad.axes.length;
	while(_g < _g1) {
		var i = _g++;
		if(pad.axes[i] != null) {
			var axis = pad.axes[i];
			if(kha_SystemImpl.gamepadStates[pad.index].axes[i] != axis) {
				kha_SystemImpl.gamepadStates[pad.index].axes[i] = axis;
				kha_SystemImpl.gamepads[pad.index].sendAxisEvent(i,axis);
			}
		}
	}
	var _g = 0;
	var _g1 = pad.buttons.length;
	while(_g < _g1) {
		var i = _g++;
		if(pad.buttons[i] != null) {
			if(kha_SystemImpl.gamepadStates[pad.index].buttons[i] != pad.buttons[i].value) {
				kha_SystemImpl.gamepadStates[pad.index].buttons[i] = pad.buttons[i].value;
				kha_SystemImpl.gamepads[pad.index].sendButtonEvent(i,pad.buttons[i].value);
			}
		}
	}
	if(pad.axes.length <= 4 && pad.buttons.length > 7) {
		kha_SystemImpl.gamepadStates[pad.index].axes[4] = pad.buttons[6].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(4,pad.buttons[6].value);
		kha_SystemImpl.gamepadStates[pad.index].axes[5] = pad.buttons[7].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(5,pad.buttons[7].value);
	}
};
kha_SystemImpl.getCanvasElement = function() {
	if(kha_SystemImpl.khanvas != null) {
		return kha_SystemImpl.khanvas;
	}
	return window.document.getElementById("khanvas");
};
kha_SystemImpl.loadFinished = function(defaultWidth,defaultHeight) {
	var canvas = kha_SystemImpl.getCanvasElement();
	canvas.style.cursor = "default";
	var gl = false;
	try {
		kha_SystemImpl.gl = canvas.getContext("webgl2",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
		kha_SystemImpl.gl.pixelStorei(37441,1);
		kha_SystemImpl.halfFloat = { HALF_FLOAT_OES : 5131};
		kha_SystemImpl.depthTexture = { UNSIGNED_INT_24_8_WEBGL : 34042};
		kha_SystemImpl.drawBuffers = { COLOR_ATTACHMENT0_WEBGL : 36064};
		kha_SystemImpl.elementIndexUint = true;
		kha_SystemImpl.gl.getExtension("EXT_color_buffer_float");
		kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
		kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
		kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
		if(kha_SystemImpl.anisotropicFilter == null) {
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		gl = true;
		kha_SystemImpl.gl2 = true;
		kha_Shaders.init();
	} catch( _g ) {
		haxe_Log.trace("Could not initialize WebGL 2, falling back to WebGL.",{ fileName : "kha/SystemImpl.hx", lineNumber : 365, className : "kha.SystemImpl", methodName : "loadFinished"});
	}
	if(!kha_SystemImpl.gl2) {
		try {
			kha_SystemImpl.gl = canvas.getContext("experimental-webgl",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
			kha_SystemImpl.gl.pixelStorei(37441,1);
			kha_SystemImpl.gl.getExtension("OES_texture_float");
			kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
			kha_SystemImpl.halfFloat = kha_SystemImpl.gl.getExtension("OES_texture_half_float");
			kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
			kha_SystemImpl.depthTexture = kha_SystemImpl.gl.getExtension("WEBGL_depth_texture");
			kha_SystemImpl.gl.getExtension("EXT_shader_texture_lod");
			kha_SystemImpl.gl.getExtension("OES_standard_derivatives");
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
			if(kha_SystemImpl.anisotropicFilter == null) {
				kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			}
			kha_SystemImpl.drawBuffers = kha_SystemImpl.gl.getExtension("WEBGL_draw_buffers");
			kha_SystemImpl.elementIndexUint = kha_SystemImpl.gl.getExtension("OES_element_index_uint");
			gl = true;
			kha_Shaders.init();
		} catch( _g ) {
			haxe_Log.trace("Could not initialize WebGL, falling back to <canvas>.",{ fileName : "kha/SystemImpl.hx", lineNumber : 387, className : "kha.SystemImpl", methodName : "loadFinished"});
		}
	}
	kha_SystemImpl.setCanvas(canvas);
	kha_SystemImpl.window = new kha_Window(0,defaultWidth,defaultHeight,canvas);
	if(gl) {
		var g4 = new kha_js_graphics4_Graphics();
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,null,g4);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),new kha_js_graphics4_Graphics2(kha_SystemImpl.frame),g4);
	} else {
		kha_js_Font.Kravur = kha_Kravur; kha_Kravur = kha_js_Font;
		var g2 = new kha_js_CanvasGraphics(canvas.getContext("2d"));
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,g2,null);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),g2,null);
	}
	if(!kha_SystemImpl.mobile && kha_audio2_Audio._init()) {
		kha_SystemImpl._hasWebAudio = true;
		kha_audio2_Audio1._init();
	} else if(kha_SystemImpl.mobile) {
		kha_SystemImpl._hasWebAudio = false;
		kha_js_MobileWebAudio._init();
		kha_audio2_Audio1 = kha_js_MobileWebAudio;
	} else {
		kha_SystemImpl._hasWebAudio = false;
		kha_audio2_Audio1 = kha_js_AudioElementAudio;
	}
	kha_vr_VrInterface.instance = new kha_js_vr_VrInterface();
	kha_Scheduler.start();
	var $window = window;
	var requestAnimationFrame = $window.requestAnimationFrame;
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.mozRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.webkitRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.msRequestAnimationFrame;
	}
	var animate = null;
	animate = function(timestamp) {
		var $window = window;
		if(requestAnimationFrame == null) {
			$window.setTimeout(animate,16.6666666666666679);
		} else {
			requestAnimationFrame(animate);
		}
		var sysGamepads = kha_SystemImpl.getGamepads();
		if(sysGamepads != null) {
			var _g = 0;
			var _g1 = sysGamepads.length;
			while(_g < _g1) {
				var i = _g++;
				var pad = sysGamepads[i];
				if(pad != null) {
					kha_SystemImpl.checkGamepad(pad);
				}
			}
		}
		kha_Scheduler.executeFrame();
		if(canvas.getContext != null) {
			var displayWidth = canvas.clientWidth;
			var displayHeight = canvas.clientHeight;
			if(canvas.width != displayWidth || canvas.height != displayHeight) {
				canvas.width = displayWidth;
				canvas.height = displayHeight;
			}
			kha_System.render([kha_SystemImpl.frame]);
			if(kha_SystemImpl.gl != null) {
				kha_SystemImpl.gl.clearColor(1,1,1,1);
				kha_SystemImpl.gl.colorMask(false,false,false,true);
				kha_SystemImpl.gl.clear(16384);
				kha_SystemImpl.gl.colorMask(true,true,true,true);
			}
		}
	};
	if(requestAnimationFrame == null) {
		$window.setTimeout(animate,16.6666666666666679);
	} else {
		requestAnimationFrame(animate);
	}
	canvas.focus();
	canvas.oncontextmenu = function(event) {
		event.stopPropagation();
		event.preventDefault();
	};
	canvas.onmousedown = kha_SystemImpl.mouseDown;
	canvas.onmousemove = kha_SystemImpl.mouseMove;
	if(kha_SystemImpl.keyboard != null) {
		canvas.onkeydown = kha_SystemImpl.keyDown;
		canvas.onkeyup = kha_SystemImpl.keyUp;
		canvas.onkeypress = kha_SystemImpl.keyPress;
	}
	canvas.onblur = kha_SystemImpl.onBlur;
	canvas.onfocus = kha_SystemImpl.onFocus;
	canvas.onmousewheel = canvas.onwheel = kha_SystemImpl.mouseWheel;
	canvas.onmouseleave = kha_SystemImpl.mouseLeave;
	canvas.addEventListener("wheel mousewheel",kha_SystemImpl.mouseWheel,false);
	canvas.addEventListener("touchstart",kha_SystemImpl.touchDown,false);
	canvas.addEventListener("touchend",kha_SystemImpl.touchUp,false);
	canvas.addEventListener("touchmove",kha_SystemImpl.touchMove,false);
	canvas.addEventListener("touchcancel",kha_SystemImpl.touchCancel,false);
	window.addEventListener("unload",function() {
		kha_System.shutdown();
	});
};
kha_SystemImpl.lockMouse = function() {
	if(($_=kha_SystemImpl.khanvas,$bind($_,$_.requestPointerLock))) {
		kha_SystemImpl.khanvas.requestPointerLock();
	} else if(kha_SystemImpl.khanvas.mozRequestPointerLock) {
		kha_SystemImpl.khanvas.mozRequestPointerLock();
	} else if(kha_SystemImpl.khanvas.webkitRequestPointerLock) {
		kha_SystemImpl.khanvas.webkitRequestPointerLock();
	}
};
kha_SystemImpl.unlockMouse = function() {
	if(document.exitPointerLock) {
		document.exitPointerLock();
	} else if(document.mozExitPointerLock) {
		document.mozExitPointerLock();
	} else if(document.webkitExitPointerLock) {
		document.webkitExitPointerLock();
	}
};
kha_SystemImpl.canLockMouse = function() {
	return 'pointerLockElement' in document ||
		'mozPointerLockElement' in document ||
		'webkitPointerLockElement' in document;
};
kha_SystemImpl.isMouseLocked = function() {
	return document.pointerLockElement === kha_SystemImpl.khanvas ||
			document.mozPointerLockElement === kha_SystemImpl.khanvas ||
			document.webkitPointerLockElement === kha_SystemImpl.khanvas;
};
kha_SystemImpl.notifyOfMouseLockChange = function(func,error) {
	window.document.addEventListener("pointerlockchange",func,false);
	window.document.addEventListener("mozpointerlockchange",func,false);
	window.document.addEventListener("webkitpointerlockchange",func,false);
	window.document.addEventListener("pointerlockerror",error,false);
	window.document.addEventListener("mozpointerlockerror",error,false);
	window.document.addEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.removeFromMouseLockChange = function(func,error) {
	window.document.removeEventListener("pointerlockchange",func,false);
	window.document.removeEventListener("mozpointerlockchange",func,false);
	window.document.removeEventListener("webkitpointerlockchange",func,false);
	window.document.removeEventListener("pointerlockerror",error,false);
	window.document.removeEventListener("mozpointerlockerror",error,false);
	window.document.removeEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.setMouseXY = function(event) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.mouseX = (event.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.mouseY = (event.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.unlockiOSSound = function() {
	if(!kha_SystemImpl.ios || kha_SystemImpl.iosSoundEnabled) {
		return;
	}
	var buffer = kha_js_MobileWebAudio._context.createBuffer(1,1,22050);
	var source = kha_js_MobileWebAudio._context.createBufferSource();
	source.buffer = buffer;
	source.connect(kha_js_MobileWebAudio._context.destination);
	source.start();
	source.stop();
	kha_SystemImpl.iosSoundEnabled = true;
};
kha_SystemImpl.unlockSound = function() {
	if(!kha_SystemImpl.soundEnabled) {
		var context = kha_audio2_Audio._context;
		if(context == null) {
			context = kha_audio2_Audio1._context;
		}
		if(context != null) {
			context.resume().then(function(c) {
				kha_SystemImpl.soundEnabled = true;
			}).catch(function(err) {
				haxe_Log.trace(err,{ fileName : "kha/SystemImpl.hx", lineNumber : 627, className : "kha.SystemImpl", methodName : "unlockSound"});
			});
		}
		kha_audio2_Audio.wakeChannels();
	}
	kha_SystemImpl.unlockiOSSound();
};
kha_SystemImpl.mouseLeave = function() {
	kha_SystemImpl.mouse.sendLeaveEvent(0);
};
kha_SystemImpl.mouseWheel = function(event) {
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.insideInputEvent = true;
	var _g = kha_input_Mouse.wheelEventBlockBehavior;
	switch(_g._hx_index) {
	case 0:
		event.preventDefault();
		break;
	case 1:
		break;
	case 2:
		var func = _g.func;
		if(func(event)) {
			event.preventDefault();
		}
		break;
	}
	if(event.deltaMode == 0) {
		if(event.deltaY < 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,-1);
		} else if(event.deltaY > 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,1);
		}
		kha_SystemImpl.insideInputEvent = false;
		return;
	}
	if(event.deltaMode == 1) {
		kha_SystemImpl.minimumScroll = Math.min(kha_SystemImpl.minimumScroll,Math.abs(event.deltaY)) | 0;
		kha_SystemImpl.mouse.sendWheelEvent(0,event.deltaY / kha_SystemImpl.minimumScroll | 0);
		kha_SystemImpl.insideInputEvent = false;
		return;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.setMouseXY(event);
	if(event.which == 1) {
		kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		if(kha_SystemImpl.khanvas.setCapture != null) {
			kha_SystemImpl.khanvas.setCapture();
		} else {
			kha_SystemImpl.khanvas.ownerDocument.addEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
		}
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	} else if(event.which == 2) {
		kha_SystemImpl.mouse.sendDownEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	} else if(event.which == 3) {
		kha_SystemImpl.mouse.sendDownEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	} else if(event.which == 4) {
		kha_SystemImpl.mouse.sendDownEvent(0,3,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseBackUp);
	} else if(event.which == 5) {
		kha_SystemImpl.mouse.sendDownEvent(0,4,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseForwardUp);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseLeftUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 1) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	if(kha_SystemImpl.khanvas.releaseCapture != null) {
		kha_SystemImpl.khanvas.ownerDocument.releaseCapture();
	} else {
		kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
	}
	kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseMiddleUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 2) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	kha_SystemImpl.mouse.sendUpEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseRightUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 3) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	kha_SystemImpl.mouse.sendUpEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseBackUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 4) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseBackUp);
	kha_SystemImpl.mouse.sendUpEvent(0,3,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseForwardUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 5) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseForwardUp);
	kha_SystemImpl.mouse.sendUpEvent(0,4,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.documentMouseMove = function(event) {
	event.stopPropagation();
	kha_SystemImpl.mouseMove(event);
};
kha_SystemImpl.mouseMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	var lastMouseX = kha_SystemImpl.mouseX;
	var lastMouseY = kha_SystemImpl.mouseY;
	kha_SystemImpl.setMouseXY(event);
	var movementX = event.movementX;
	var movementY = event.movementY;
	if(event.movementX == null) {
		movementX = event.mozMovementX != null ? event.mozMovementX : event.webkitMovementX != null ? event.webkitMovementX : kha_SystemImpl.mouseX - lastMouseX;
		movementY = event.mozMovementY != null ? event.mozMovementY : event.webkitMovementY != null ? event.webkitMovementY : kha_SystemImpl.mouseY - lastMouseY;
	}
	if(kha_SystemImpl.firefox) {
		movementX = movementX * window.devicePixelRatio | 0;
		movementY = movementY * window.devicePixelRatio | 0;
	}
	kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY,movementX,movementY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.setTouchXY = function(touch) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.touchX = (touch.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.touchY = (touch.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.touchDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	event.stopPropagation();
	var _g = kha_input_Surface.touchDownEventBlockBehavior;
	switch(_g._hx_index) {
	case 0:
		event.preventDefault();
		break;
	case 1:
		break;
	case 2:
		var func = _g.func;
		if(func(event)) {
			event.preventDefault();
		}
		break;
	}
	var index = 0;
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(-1);
			if(id == -1) {
				id = kha_SystemImpl.iosTouchs.length;
			}
			kha_SystemImpl.iosTouchs[id] = touch.identifier;
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchStartEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		if(index == 0) {
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
		}
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
			kha_SystemImpl.iosTouchs[id] = -1;
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var index = 0;
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		kha_SystemImpl.setTouchXY(touch);
		if(index == 0) {
			var movementX = kha_SystemImpl.touchX - kha_SystemImpl.lastFirstTouchX;
			var movementY = kha_SystemImpl.touchY - kha_SystemImpl.lastFirstTouchY;
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
			kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.touchX,kha_SystemImpl.touchY,movementX,movementY);
		}
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.surface.sendMoveEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchCancel = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.iosTouchs = [];
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.onBlur = function() {
	kha_System.background();
};
kha_SystemImpl.onFocus = function() {
	kha_System.foreground();
};
kha_SystemImpl.keycodeToChar = function(key,keycode,shift) {
	if(key != null) {
		if(key.length == 1) {
			return key;
		}
		switch(key) {
		case "Add":
			return "+";
		case "Divide":
			return "/";
		case "Multiply":
			return "*";
		case "Subtract":
			return "-";
		}
	}
	switch(keycode) {
	case 48:
		if(shift) {
			return "=";
		} else {
			return "0";
		}
		break;
	case 49:
		if(shift) {
			return "!";
		} else {
			return "1";
		}
		break;
	case 50:
		if(shift) {
			return "\"";
		} else {
			return "2";
		}
		break;
	case 51:
		if(shift) {
			return "§";
		} else {
			return "3";
		}
		break;
	case 52:
		if(shift) {
			return "$";
		} else {
			return "4";
		}
		break;
	case 53:
		if(shift) {
			return "%";
		} else {
			return "5";
		}
		break;
	case 54:
		if(shift) {
			return "&";
		} else {
			return "6";
		}
		break;
	case 55:
		if(shift) {
			return "/";
		} else {
			return "7";
		}
		break;
	case 56:
		if(shift) {
			return "(";
		} else {
			return "8";
		}
		break;
	case 57:
		if(shift) {
			return ")";
		} else {
			return "9";
		}
		break;
	case 106:
		return "*";
	case 107:
		return "+";
	case 109:
		return "-";
	case 111:
		return "/";
	case 187:
		if(shift) {
			return "*";
		} else {
			return "+";
		}
		break;
	case 188:
		if(shift) {
			return ";";
		} else {
			return ",";
		}
		break;
	case 189:
		if(shift) {
			return "_";
		} else {
			return "-";
		}
		break;
	case 190:
		if(shift) {
			return ":";
		} else {
			return ".";
		}
		break;
	case 191:
		if(shift) {
			return "'";
		} else {
			return "#";
		}
		break;
	case 212:
		if(shift) {
			return "`";
		} else {
			return "´";
		}
		break;
	case 219:
		if(shift) {
			return "?";
		} else {
			return "ß";
		}
		break;
	case 226:
		if(shift) {
			return ">";
		} else {
			return "<";
		}
		break;
	}
	if(keycode >= 96 && keycode <= 105) {
		return String.fromCodePoint((-48 + keycode));
	}
	if(keycode >= 65 && keycode <= 90) {
		if(shift) {
			return String.fromCodePoint(keycode);
		} else {
			return String.fromCodePoint((keycode - 65 + 97));
		}
	}
	return String.fromCodePoint(keycode);
};
kha_SystemImpl.keyDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = kha_input_Keyboard.keyBehavior;
	switch(_g._hx_index) {
	case 0:
		kha_SystemImpl.defaultKeyBlock(event);
		break;
	case 1:
		event.preventDefault();
		break;
	case 2:
		break;
	case 3:
		var func = _g.func;
		if(func(event.keyCode)) {
			event.preventDefault();
		}
		break;
	}
	event.stopPropagation();
	if(kha_SystemImpl.ie) {
		if(kha_SystemImpl.pressedKeys[event.keyCode]) {
			event.preventDefault();
			return;
		}
		kha_SystemImpl.pressedKeys[event.keyCode] = true;
	} else if(event.repeat) {
		event.preventDefault();
		return;
	}
	var keyCode = kha_SystemImpl.fixedKeyCode(event);
	kha_SystemImpl.keyboard.sendDownEvent(keyCode);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.fixedKeyCode = function(event) {
	switch(event.keyCode) {
	case 91:case 93:
		return 224;
	case 186:
		return 59;
	case 187:
		return 61;
	case 189:
		return 173;
	default:
		return event.keyCode;
	}
};
kha_SystemImpl.defaultKeyBlock = function(e) {
	if(e.ctrlKey || e.metaKey) {
		if(e.keyCode == 67 || e.keyCode == 88 || e.keyCode == 86) {
			return;
		}
		if(e.metaKey && e.keyCode == 81) {
			return;
		}
		e.preventDefault();
		return;
	}
	if(e.keyCode >= 112 && e.keyCode <= 123) {
		return;
	}
	if(e.key == null || e.key.length == 1) {
		return;
	}
	e.preventDefault();
};
kha_SystemImpl.keyUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	event.preventDefault();
	event.stopPropagation();
	if(kha_SystemImpl.ie) {
		kha_SystemImpl.pressedKeys[event.keyCode] = false;
	}
	var keyCode = kha_SystemImpl.fixedKeyCode(event);
	kha_SystemImpl.keyboard.sendUpEvent(keyCode);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.keyPress = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	if(event.which == 0) {
		return;
	}
	event.preventDefault();
	event.stopPropagation();
	var code = event.which;
	kha_SystemImpl.keyboard.sendPressEvent(String.fromCodePoint(code));
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.canSwitchFullscreen = function() {
	return 'fullscreenElement ' in document ||
		'mozFullScreenElement' in document ||
		'webkitFullscreenElement' in document ||
		'msFullscreenElement' in document
		;
};
kha_SystemImpl.notifyOfFullscreenChange = function(func,error) {
	window.document.addEventListener("fullscreenchange",func,false);
	window.document.addEventListener("mozfullscreenchange",func,false);
	window.document.addEventListener("webkitfullscreenchange",func,false);
	window.document.addEventListener("MSFullscreenChange",func,false);
	window.document.addEventListener("fullscreenerror",error,false);
	window.document.addEventListener("mozfullscreenerror",error,false);
	window.document.addEventListener("webkitfullscreenerror",error,false);
	window.document.addEventListener("MSFullscreenError",error,false);
};
kha_SystemImpl.removeFromFullscreenChange = function(func,error) {
	window.document.removeEventListener("fullscreenchange",func,false);
	window.document.removeEventListener("mozfullscreenchange",func,false);
	window.document.removeEventListener("webkitfullscreenchange",func,false);
	window.document.removeEventListener("MSFullscreenChange",func,false);
	window.document.removeEventListener("fullscreenerror",error,false);
	window.document.removeEventListener("mozfullscreenerror",error,false);
	window.document.removeEventListener("webkitfullscreenerror",error,false);
	window.document.removeEventListener("MSFullscreenError",error,false);
};
kha_SystemImpl.setKeepScreenOn = function(on) {
};
kha_SystemImpl.loadUrl = function(url) {
	window.open(url,"_blank");
};
kha_SystemImpl.getGamepadId = function(index) {
	var sysGamepads = kha_SystemImpl.getGamepads();
	if(sysGamepads != null && sysGamepads[index]) {
		return sysGamepads[index].id;
	}
	return "unkown";
};
kha_SystemImpl.getGamepadVendor = function(index) {
	return "unknown";
};
kha_SystemImpl.getGamepads = function() {
	if(kha_SystemImpl.chrome && kha_vr_VrInterface.instance.IsVrEnabled()) {
		return null;
	}
	if(navigator.getGamepads) {
		return $global.navigator.getGamepads();
	} else {
		return null;
	}
};
kha_SystemImpl.getPen = function(num) {
	return null;
};
kha_SystemImpl.safeZone = function() {
	return 1.0;
};
kha_SystemImpl.login = function() {
};
kha_SystemImpl.automaticSafeZone = function() {
	return true;
};
kha_SystemImpl.setSafeZone = function(value) {
};
kha_SystemImpl.unlockAchievement = function(id) {
};
kha_SystemImpl.waitingForLogin = function() {
	return false;
};
kha_SystemImpl.disallowUserChange = function() {
};
kha_SystemImpl.allowUserChange = function() {
};
var kha_Video = function() {
};
$hxClasses["kha.Video"] = kha_Video;
kha_Video.__name__ = true;
kha_Video.__interfaces__ = [kha_Resource];
kha_Video.prototype = {
	width: function() {
		return 100;
	}
	,height: function() {
		return 100;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,getLength: function() {
		return 0;
	}
	,getCurrentPos: function() {
		return 0;
	}
	,get_position: function() {
		return 0;
	}
	,set_position: function(value) {
		return 0;
	}
	,getVolume: function() {
		return 1;
	}
	,setVolume: function(volume) {
	}
	,isFinished: function() {
		return this.getCurrentPos() >= this.getLength();
	}
	,unload: function() {
	}
	,__class__: kha_Video
	,__properties__: {set_position:"set_position",get_position:"get_position"}
};
var kha_WebGLImage = function(width,height,format,renderTarget,depthStencilFormat,samples) {
	this.pixels = null;
	this.MSAAFrameBuffer = null;
	this.depthTexture = null;
	this.texture = null;
	this.renderBuffer = null;
	this.frameBuffer = null;
	this.myWidth = width;
	this.myHeight = height;
	this.myFormat = format;
	this.renderTarget = renderTarget;
	this.samples = samples;
	this.image = null;
	this.video = null;
	this.depthStencilFormat = depthStencilFormat;
	kha_WebGLImage.init();
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.WebGLImage"] = kha_WebGLImage;
kha_WebGLImage.__name__ = true;
kha_WebGLImage.context = null;
kha_WebGLImage.canvas = null;
kha_WebGLImage.init = function() {
	if(kha_WebGLImage.context == null) {
		kha_WebGLImage.canvas = window.document.createElement("canvas");
		if(kha_WebGLImage.canvas != null) {
			kha_WebGLImage.context = kha_WebGLImage.canvas.getContext("2d");
			kha_WebGLImage.canvas.width = 4096;
			kha_WebGLImage.canvas.height = 4096;
			kha_WebGLImage.context.globalCompositeOperation = "copy";
		}
	}
};
kha_WebGLImage.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_WebGLImage.formatByteSize = function(format) {
	switch(format) {
	case 0:
		return 4;
	case 1:
		return 1;
	case 2:
		return 16;
	case 3:
		return 2;
	case 4:
		return 8;
	case 5:
		return 4;
	case 6:
		return 2;
	default:
		return 4;
	}
};
kha_WebGLImage.__super__ = kha_Image;
kha_WebGLImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,myFormat: null
	,renderTarget: null
	,samples: null
	,frameBuffer: null
	,renderBuffer: null
	,texture: null
	,depthTexture: null
	,MSAAFrameBuffer: null
	,MSAAColorBuffer: null
	,MSAADepthBuffer: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,depthStencilFormat: null
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,get_g2: function() {
		if(this.graphics2 == null) {
			this.graphics2 = new kha_js_graphics4_Graphics2(this);
		}
		return this.graphics2;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_format: function() {
		return this.myFormat;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,get_stride: function() {
		return kha_WebGLImage.formatByteSize(this.myFormat) * this.get_width();
	}
	,isOpaque: function(x,y) {
		if(this.data == null) {
			if(kha_WebGLImage.context == null) {
				return true;
			} else {
				this.createImageData();
			}
		}
		return this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3] != 0;
	}
	,at: function(x,y) {
		if(this.data == null) {
			if(kha_WebGLImage.context == null) {
				return -16777216;
			} else {
				this.createImageData();
			}
		}
		var r = this.data.data[y * this.get_width() * 4 + x * 4];
		var g = this.data.data[y * this.get_width() * 4 + x * 4 + 1];
		var b = this.data.data[y * this.get_width() * 4 + x * 4 + 2];
		var a = this.data.data[y * this.get_width() * 4 + x * 4 + 3];
		return kha_Color._new(a << 24 | r << 16 | g << 8 | b);
	}
	,createImageData: function() {
		if(((this.image) instanceof Uint8Array)) {
			this.data = new ImageData(new Uint8ClampedArray(this.image.buffer),this.get_width(),this.get_height());
		} else {
			if(this.get_width() > kha_WebGLImage.canvas.width || this.get_height() > kha_WebGLImage.canvas.height) {
				var cw = kha_WebGLImage.canvas.width;
				var ch = kha_WebGLImage.canvas.height;
				while(this.get_width() > cw || this.get_height() > ch) {
					cw *= 2;
					ch *= 2;
				}
				kha_WebGLImage.canvas.width = cw;
				kha_WebGLImage.canvas.height = ch;
			}
			kha_WebGLImage.context.strokeStyle = "rgba(0,0,0,0)";
			kha_WebGLImage.context.fillStyle = "rgba(0,0,0,0)";
			kha_WebGLImage.context.fillRect(0,0,this.image.width,this.image.height);
			kha_WebGLImage.context.drawImage(this.image,0,0,this.image.width,this.image.height,0,0,this.image.width,this.image.height);
			this.data = kha_WebGLImage.context.getImageData(0,0,this.image.width,this.image.height);
		}
	}
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.myFormat) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			}
			if(this.myFormat == 3) {
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.texture,0);
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(3553,colortex);
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,colortex,0);
					kha_SystemImpl.gl.bindTexture(3553,this.texture);
				}
			} else {
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAAFrameBuffer = kha_SystemImpl.gl.createFramebuffer();
					this.MSAAColorBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAAColorBuffer);
					var MSAAFormat;
					switch(this.myFormat) {
					case 0:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
						break;
					case 2:
						MSAAFormat = kha_SystemImpl.gl.RGBA32F;
						break;
					case 4:
						MSAAFormat = kha_SystemImpl.gl.RGBA16F;
						break;
					case 5:
						MSAAFormat = 33326;
						break;
					case 6:
						MSAAFormat = 33325;
						break;
					default:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
					}
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,MSAAFormat,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36064,36161,this.MSAAColorBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			var e = kha_SystemImpl.gl.checkFramebufferStatus(36160);
			if(e != 36053) {
				haxe_Log.trace("checkframebufferStatus error " + e,{ fileName : "kha/WebGLImage.hx", lineNumber : 258, className : "kha.WebGLImage", methodName : "createTexture"});
			}
			kha_SystemImpl.gl.bindRenderbuffer(36161,null);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			switch(this.myFormat) {
			case 0:
				if(((this.image) instanceof Uint8Array)) {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.myWidth,this.myHeight,0,6408,5121,this.image);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
				}
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.myWidth,this.myHeight,0,6409,5121,this.image);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,this.image);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.image);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
			}
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,33189,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				if(depthStencilFormat == 1) {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5125,null);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				}
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					if(depthStencilFormat == 1) {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33190,this.get_realWidth(),this.get_realHeight());
					} else {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33189,this.get_realWidth(),this.get_realHeight());
					}
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.depthTexture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			break;
		case 2:case 3:case 4:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,34041,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.get_realWidth(),this.get_realHeight(),0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,35056,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,33306,3553,this.depthTexture,0);
			}
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,setDepth: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
	}
	,setDepthStencilFrom: function(image) {
		this.depthTexture = (js_Boot.__cast(image , kha_WebGLImage)).depthTexture;
		kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
		kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.depthTexture,0);
		if(this.samples > 1 && kha_SystemImpl.gl2) {
			this.MSAADepthBuffer = (js_Boot.__cast(image , kha_WebGLImage)).MSAADepthBuffer;
			kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.MSAADepthBuffer);
		}
	}
	,bytesToArray: function(bytes) {
		switch(this.myFormat) {
		case 0:case 1:
			return new Uint8Array(bytes.b.bufferValue);
		case 2:case 4:case 5:case 6:
			return new Float32Array(bytes.b.bufferValue);
		default:
			return new Uint8Array(bytes.b.bufferValue);
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(kha_WebGLImage.formatByteSize(this.myFormat) * this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			switch(this.myFormat) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,this.bytesToArray(this.bytes));
				if(kha_SystemImpl.gl.getError() == 1282) {
					var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
					var _g = 0;
					var _g1 = this.get_height();
					while(_g < _g1) {
						var y = _g++;
						var _g2 = 0;
						var _g3 = this.get_width();
						while(_g2 < _g3) {
							var x = _g2++;
							var _this = this.bytes;
							var pos = y * this.get_width() + x;
							var value = _this.b[pos];
							var pos1 = y * this.get_width() * 4 + x * 4;
							rgbaBytes.b[pos1] = value;
							var pos2 = y * this.get_width() * 4 + x * 4 + 1;
							rgbaBytes.b[pos2] = value;
							var pos3 = y * this.get_width() * 4 + x * 4 + 2;
							rgbaBytes.b[pos3] = value;
							var pos4 = y * this.get_width() * 4 + x * 4 + 3;
							rgbaBytes.b[pos4] = 255;
						}
					}
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(rgbaBytes));
				}
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_width(),this.get_height(),0,6408,5126,this.bytesToArray(this.bytes));
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_width(),this.get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.bytesToArray(this.bytes));
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,pixels: null
	,getPixels: function() {
		if(this.frameBuffer == null) {
			return null;
		}
		if(this.pixels == null) {
			switch(this.myFormat) {
			case 0:case 1:
				this.pixels = new Uint8Array(kha_WebGLImage.formatByteSize(this.myFormat) * this.get_width() * this.get_height());
				break;
			case 2:case 5:
				this.pixels = new Float32Array((kha_WebGLImage.formatByteSize(this.myFormat) / 4 | 0) * this.get_width() * this.get_height());
				break;
			case 4:case 6:
				this.pixels = new Uint16Array((kha_WebGLImage.formatByteSize(this.myFormat) / 2 | 0) * this.get_width() * this.get_height());
				break;
			default:
				this.pixels = new Uint8Array(kha_WebGLImage.formatByteSize(this.myFormat) * this.get_width() * this.get_height());
			}
		}
		kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
		switch(this.myFormat) {
		case 0:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5121,this.pixels);
			break;
		case 1:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,5121,this.pixels);
			break;
		case 2:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5126,this.pixels);
			break;
		case 4:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.pixels);
			break;
		case 5:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.pixels);
			break;
		case 6:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.pixels);
			break;
		default:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5121,this.pixels);
		}
		return haxe_io_Bytes.ofData(this.pixels.buffer);
	}
	,unload: function() {
		if(this.texture != null) {
			kha_SystemImpl.gl.deleteTexture(this.texture);
		}
		if(this.depthTexture != null) {
			kha_SystemImpl.gl.deleteTexture(this.depthTexture);
		}
		if(this.frameBuffer != null) {
			kha_SystemImpl.gl.deleteFramebuffer(this.frameBuffer);
		}
		if(this.renderBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.renderBuffer);
		}
		if(this.MSAAFrameBuffer != null) {
			kha_SystemImpl.gl.deleteFramebuffer(this.MSAAFrameBuffer);
		}
		if(this.MSAAColorBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.MSAAColorBuffer);
		}
		if(this.MSAADepthBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.MSAADepthBuffer);
		}
	}
	,generateMipmaps: function(levels) {
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.generateMipmap(3553);
	}
	,setMipmaps: function(mipmaps) {
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.myFormat == 2) {
			var _g = 0;
			var _g1 = mipmaps.length;
			while(_g < _g1) {
				var i = _g++;
				kha_SystemImpl.gl.texImage2D(3553,i + 1,kha_SystemImpl.gl2 ? 34836 : 6408,mipmaps[i].get_width(),mipmaps[i].get_height(),0,6408,5126,(js_Boot.__cast(mipmaps[i] , kha_WebGLImage)).image);
			}
		} else if(this.myFormat == 4) {
			var _g = 0;
			var _g1 = mipmaps.length;
			while(_g < _g1) {
				var i = _g++;
				kha_SystemImpl.gl.texImage2D(3553,i + 1,kha_SystemImpl.gl2 ? 34842 : 6408,mipmaps[i].get_width(),mipmaps[i].get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,(js_Boot.__cast(mipmaps[i] , kha_WebGLImage)).image);
			}
		} else {
			var _g = 0;
			var _g1 = mipmaps.length;
			while(_g < _g1) {
				var i = _g++;
				kha_SystemImpl.gl.texImage2D(3553,i + 1,6408,6408,5121,(js_Boot.__cast(mipmaps[i] , kha_WebGLImage)).image);
			}
		}
	}
	,__class__: kha_WebGLImage
});
var kha_Window = function(num,defaultWidth,defaultHeight,canvas) {
	var _gthis = this;
	this.num = num;
	this.canvas = canvas;
	this.defaultWidth = defaultWidth;
	this.defaultHeight = defaultHeight;
	kha_Window.windows.push(this);
	kha_Window.resizeCallbacks[num] = [];
	kha_Window.windows.push(this);
	var observer = new MutationObserver(function(mutations,observer) {
		var isResize = false;
		var _g = 0;
		while(_g < mutations.length) {
			var mutation = mutations[_g];
			++_g;
			if(mutation.attributeName == "width" || mutation.attributeName == "height") {
				isResize = true;
				break;
			}
		}
		if(isResize) {
			_gthis.resize(canvas.clientWidth,canvas.clientHeight);
		}
	});
	observer.observe(canvas,{ attributes : true});
};
$hxClasses["kha.Window"] = kha_Window;
kha_Window.__name__ = true;
kha_Window.__properties__ = {get_all:"get_all"};
kha_Window.create = function(win,frame) {
	return null;
};
kha_Window.destroy = function($window) {
};
kha_Window.get = function(index) {
	return kha_Window.windows[index];
};
kha_Window.get_all = function() {
	return kha_Window.windows;
};
kha_Window.prototype = {
	num: null
	,canvas: null
	,defaultWidth: null
	,defaultHeight: null
	,resize: function(width,height) {
		var _g = 0;
		var _g1 = kha_Window.resizeCallbacks[this.num];
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback(width,height);
		}
	}
	,move: function(x,y) {
	}
	,changeWindowFeatures: function(features) {
	}
	,changeFramebuffer: function(frame) {
	}
	,get_x: function() {
		return 0;
	}
	,set_x: function(value) {
		return 0;
	}
	,get_y: function() {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,get_width: function() {
		if(this.canvas.clientWidth == 0) {
			return this.defaultWidth;
		} else {
			return this.canvas.clientWidth;
		}
	}
	,set_width: function(value) {
		return 800;
	}
	,get_height: function() {
		if(this.canvas.clientHeight == 0) {
			return this.defaultHeight;
		} else {
			return this.canvas.clientHeight;
		}
	}
	,set_height: function(value) {
		return 600;
	}
	,get_mode: function() {
		if(this.isFullscreen()) {
			return 1;
		} else {
			return 0;
		}
	}
	,set_mode: function(mode) {
		if(mode == 1 || mode == 2) {
			if(!this.isFullscreen()) {
				this.requestFullscreen();
			}
		} else if(this.isFullscreen()) {
			this.exitFullscreen();
		}
		return mode;
	}
	,isFullscreen: function() {
		return document.fullscreenElement === this.canvas ||
			document.mozFullScreenElement === this.canvas ||
			document.webkitFullscreenElement === this.canvas ||
			document.msFullscreenElement === this.canvas ;
	}
	,requestFullscreen: function() {
		if(($_=this.canvas,$bind($_,$_.requestFullscreen))) {
			var c = this.canvas;
			c.requestFullscreen({ navigationUI : "hide"});
		} else if(this.canvas.msRequestFullscreen) {
			this.canvas.msRequestFullscreen();
		} else if(this.canvas.mozRequestFullScreen) {
			this.canvas.mozRequestFullScreen();
		} else if(this.canvas.webkitRequestFullscreen) {
			this.canvas.webkitRequestFullscreen();
		}
	}
	,exitFullscreen: function() {
		if(document.exitFullscreen) {
			document.exitFullscreen();
		} else if(document.msExitFullscreen) {
			document.msExitFullscreen();
		} else if(document.mozCancelFullScreen) {
			document.mozCancelFullScreen();
		} else if(document.webkitExitFullscreen) {
			document.webkitExitFullscreen();
		}
	}
	,get_visible: function() {
		return true;
	}
	,set_visible: function(value) {
		return true;
	}
	,get_title: function() {
		return "Kha";
	}
	,set_title: function(value) {
		return "Kha";
	}
	,notifyOnResize: function(callback) {
		kha_Window.resizeCallbacks[this.num].push(callback);
	}
	,get_vSynced: function() {
		return true;
	}
	,__class__: kha_Window
	,__properties__: {get_vSynced:"get_vSynced",set_title:"set_title",get_title:"get_title",set_visible:"set_visible",get_visible:"get_visible",set_mode:"set_mode",get_mode:"get_mode",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var kha_WindowFeatures = {};
kha_WindowFeatures._new = function(value) {
	var this1 = value;
	return this1;
};
var kha_WindowOptions = function(title,x,y,width,height,display,visible,windowFeatures,mode) {
	if(mode == null) {
		mode = 0;
	}
	if(visible == null) {
		visible = true;
	}
	if(display == null) {
		display = -1;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	if(y == null) {
		y = -1;
	}
	if(x == null) {
		x = -1;
	}
	this.mode = 0;
	this.windowFeatures = 1 | 4 | 2;
	this.visible = true;
	this.display = -1;
	this.height = 600;
	this.width = 800;
	this.y = -1;
	this.x = -1;
	this.title = null;
	this.title = title;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.display = display;
	this.visible = visible;
	this.windowFeatures = windowFeatures == null ? 1 | 4 | 2 : windowFeatures;
	this.mode = mode;
};
$hxClasses["kha.WindowOptions"] = kha_WindowOptions;
kha_WindowOptions.__name__ = true;
kha_WindowOptions.prototype = {
	title: null
	,x: null
	,y: null
	,width: null
	,height: null
	,display: null
	,visible: null
	,windowFeatures: null
	,mode: null
	,__class__: kha_WindowOptions
};
var kha_Worker = function(file) {
	this.worker = new Worker(file);
};
$hxClasses["kha.Worker"] = kha_Worker;
kha_Worker.__name__ = true;
kha_Worker._create = function(file) {
	return new kha_Worker(file);
};
kha_Worker.prototype = {
	worker: null
	,notify: function(func) {
		this.worker.addEventListener("message",function(e) {
			func(e.data);
		});
	}
	,post: function(message) {
		this.worker.postMessage(message);
	}
	,__class__: kha_Worker
};
var kha_arrays_Float32Array = {};
kha_arrays_Float32Array.__properties__ = {get_length:"get_length"};
kha_arrays_Float32Array._new = function(elements) {
	var this1 = new Float32Array(elements);
	return this1;
};
kha_arrays_Float32Array.get_length = function(this1) {
	return this1.length;
};
kha_arrays_Float32Array.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays_Float32Array.get = function(this1,index) {
	return this1[index];
};
kha_arrays_Float32Array.data = function(this1) {
	return this1;
};
kha_arrays_Float32Array.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays_Int16Array = {};
kha_arrays_Int16Array.__properties__ = {get_length:"get_length"};
kha_arrays_Int16Array._new = function(elements) {
	var this1 = new Int16Array(elements);
	return this1;
};
kha_arrays_Int16Array.get_length = function(this1) {
	return this1.length;
};
kha_arrays_Int16Array.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays_Int16Array.get = function(this1,index) {
	return this1[index];
};
kha_arrays_Int16Array.data = function(this1) {
	return this1;
};
kha_arrays_Int16Array.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays_Int16Array.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays_Int16Array.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays_Int32Array = {};
kha_arrays_Int32Array.__properties__ = {get_length:"get_length"};
kha_arrays_Int32Array._new = function(elements) {
	var this1 = new Int32Array(elements);
	return this1;
};
kha_arrays_Int32Array.get_length = function(this1) {
	return this1.length;
};
kha_arrays_Int32Array.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays_Int32Array.get = function(this1,index) {
	return this1[index];
};
kha_arrays_Int32Array.data = function(this1) {
	return this1;
};
kha_arrays_Int32Array.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays_Int32Array.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays_Int32Array.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays_Uint32Array = {};
kha_arrays_Uint32Array.__properties__ = {get_length:"get_length"};
kha_arrays_Uint32Array._new = function(elements) {
	var this1 = new Uint32Array(elements);
	return this1;
};
kha_arrays_Uint32Array.get_length = function(this1) {
	return this1.length;
};
kha_arrays_Uint32Array.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays_Uint32Array.get = function(this1,index) {
	return this1[index];
};
kha_arrays_Uint32Array.data = function(this1) {
	return this1;
};
kha_arrays_Uint32Array.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays_Uint32Array.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays_Uint32Array.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_audio1_AudioChannel = function() { };
$hxClasses["kha.audio1.AudioChannel"] = kha_audio1_AudioChannel;
kha_audio1_AudioChannel.__name__ = true;
kha_audio1_AudioChannel.__isInterface__ = true;
kha_audio1_AudioChannel.prototype = {
	play: null
	,pause: null
	,stop: null
	,length: null
	,get_length: null
	,get_position: null
	,set_position: null
	,get_volume: null
	,set_volume: null
	,finished: null
	,get_finished: null
	,__class__: kha_audio1_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_internal_IntBox = function(value) {
	this.value = value;
};
$hxClasses["kha.internal.IntBox"] = kha_internal_IntBox;
kha_internal_IntBox.__name__ = true;
kha_internal_IntBox.prototype = {
	value: null
	,__class__: kha_internal_IntBox
};
var kha_audio2_Audio = function() { };
$hxClasses["kha.audio2.Audio"] = kha_audio2_Audio;
kha_audio2_Audio.__name__ = true;
kha_audio2_Audio.buffer = null;
kha_audio2_Audio._context = null;
kha_audio2_Audio.processingNode = null;
kha_audio2_Audio.initContext = function() {
	try {
		kha_audio2_Audio._context = new AudioContext();
		return;
	} catch( _g ) {
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( _g ) {
	}
};
kha_audio2_Audio._init = function() {
	kha_audio2_Audio.initContext();
	if(kha_audio2_Audio._context == null) {
		return false;
	}
	kha_audio2_Audio.samplesPerSecond = Math.round(kha_audio2_Audio._context.sampleRate);
	var bufferSize = 2048;
	kha_audio2_Audio.buffer = new kha_audio2_Buffer(bufferSize * 4,2,kha_audio2_Audio._context.sampleRate | 0);
	kha_audio2_Audio.processingNode = kha_audio2_Audio._context.createScriptProcessor(bufferSize,0,2);
	kha_audio2_Audio.processingNode.onaudioprocess = function(e) {
		var output1 = e.outputBuffer.getChannelData(0);
		var output2 = e.outputBuffer.getChannelData(1);
		if(kha_audio2_Audio.audioCallback != null) {
			kha_audio2_Audio.intBox.value = e.outputBuffer.length * 2;
			kha_audio2_Audio.audioCallback(kha_audio2_Audio.intBox,kha_audio2_Audio.buffer);
			var _g = 0;
			var _g1 = e.outputBuffer.length;
			while(_g < _g1) {
				var i = _g++;
				output1[i] = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
				kha_audio2_Audio.buffer.readLocation += 1;
				output2[i] = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
				kha_audio2_Audio.buffer.readLocation += 1;
				if(kha_audio2_Audio.buffer.readLocation >= kha_audio2_Audio.buffer.size) {
					kha_audio2_Audio.buffer.readLocation = 0;
				}
			}
		} else {
			var _g = 0;
			var _g1 = e.outputBuffer.length;
			while(_g < _g1) {
				var i = _g++;
				output1[i] = 0;
				output2[i] = 0;
			}
		}
	};
	kha_audio2_Audio.processingNode.connect(kha_audio2_Audio._context.destination);
	return true;
};
kha_audio2_Audio.samplesPerSecond = null;
kha_audio2_Audio.audioCallback = null;
kha_audio2_Audio.wakeChannels = function() {
	kha_SystemImpl.mobileAudioPlaying = true;
	var _g = 0;
	var _g1 = kha_audio2_Audio.virtualChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.wake();
	}
};
kha_audio2_Audio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var element = window.document.createElement("audio");
	var blob = new Blob([sound.compressedData.b.bufferValue],{ type : "audio/mp4"});
	element.src = URL.createObjectURL(blob);
	element.loop = loop;
	var channel = new kha_js_AEAudioChannel(element,loop);
	if(kha_SystemImpl.mobileAudioPlaying) {
		channel.play();
		return channel;
	} else {
		var virtualChannel = new kha_audio2_VirtualStreamChannel(channel,loop);
		kha_audio2_Audio.virtualChannels.push(virtualChannel);
		return virtualChannel;
	}
};
var kha_audio2_Audio1 = function() { };
$hxClasses["kha.audio2.Audio1"] = kha_audio2_Audio1;
kha_audio2_Audio1.__name__ = true;
kha_audio2_Audio1.soundChannels = null;
kha_audio2_Audio1.streamChannels = null;
kha_audio2_Audio1.internalSoundChannels = null;
kha_audio2_Audio1.internalStreamChannels = null;
kha_audio2_Audio1.sampleCache1 = null;
kha_audio2_Audio1.sampleCache2 = null;
kha_audio2_Audio1._init = function() {
	var this1 = new Array(32);
	kha_audio2_Audio1.soundChannels = this1;
	var this1 = new Array(32);
	kha_audio2_Audio1.streamChannels = this1;
	var this1 = new Array(32);
	kha_audio2_Audio1.internalSoundChannels = this1;
	var this1 = new Array(32);
	kha_audio2_Audio1.internalStreamChannels = this1;
	var this1 = new Float32Array(512);
	kha_audio2_Audio1.sampleCache1 = this1;
	var this1 = new Float32Array(512);
	kha_audio2_Audio1.sampleCache2 = this1;
	kha_audio2_Audio1.lastAllocationCount = 0;
	kha_audio2_Audio.audioCallback = kha_audio2_Audio1.mix;
};
kha_audio2_Audio1.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.mix = function(samplesBox,buffer) {
	var samples = samplesBox.value;
	if(kha_audio2_Audio1.sampleCache1.length < samples) {
		if(kha_audio2_Audio.disableGcInteractions) {
			haxe_Log.trace("Unexpected allocation request in audio thread.",{ fileName : "kha/audio2/Audio1.hx", lineNumber : 50, className : "kha.audio2.Audio1", methodName : "mix"});
			var _g = 0;
			var _g1 = samples;
			while(_g < _g1) {
				var i = _g++;
				buffer.data[buffer.writeLocation] = 0;
				buffer.writeLocation += 1;
				if(buffer.writeLocation >= buffer.size) {
					buffer.writeLocation = 0;
				}
			}
			kha_audio2_Audio1.lastAllocationCount = 0;
			kha_audio2_Audio.disableGcInteractions = false;
			return;
		}
		var this1 = new Float32Array(samples * 2);
		kha_audio2_Audio1.sampleCache1 = this1;
		var this1 = new Float32Array(samples * 2);
		kha_audio2_Audio1.sampleCache2 = this1;
		kha_audio2_Audio1.lastAllocationCount = 0;
	} else if(kha_audio2_Audio1.lastAllocationCount > 100) {
		kha_audio2_Audio.disableGcInteractions = true;
	} else {
		kha_audio2_Audio1.lastAllocationCount += 1;
	}
	var _g = 0;
	var _g1 = samples;
	while(_g < _g1) {
		var i = _g++;
		kha_audio2_Audio1.sampleCache2[i] = 0;
	}
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		kha_audio2_Audio1.internalSoundChannels[i] = kha_audio2_Audio1.soundChannels[i];
	}
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		kha_audio2_Audio1.internalStreamChannels[i] = kha_audio2_Audio1.streamChannels[i];
	}
	var _g = 0;
	var _g1 = kha_audio2_Audio1.internalSoundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		if(channel == null || channel.get_finished()) {
			continue;
		}
		channel.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g2 = 0;
		var _g3 = samples;
		while(_g2 < _g3) {
			var i = _g2++;
			kha_audio2_Audio1.sampleCache2[i] += kha_audio2_Audio1.sampleCache1[i] * channel.get_volume();
		}
	}
	var _g = 0;
	var _g1 = kha_audio2_Audio1.internalStreamChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		if(channel == null || channel.get_finished()) {
			continue;
		}
		channel.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g2 = 0;
		var _g3 = samples;
		while(_g2 < _g3) {
			var i = _g2++;
			kha_audio2_Audio1.sampleCache2[i] += kha_audio2_Audio1.sampleCache1[i] * channel.get_volume();
		}
	}
	var _g = 0;
	var _g1 = samples;
	while(_g < _g1) {
		var i = _g++;
		var a = kha_audio2_Audio1.sampleCache2[i];
		var a1 = a < 1.0 ? a : 1.0;
		buffer.data[buffer.writeLocation] = a1 > -1.0 ? a1 : -1.0;
		buffer.writeLocation += 1;
		if(buffer.writeLocation >= buffer.size) {
			buffer.writeLocation = 0;
		}
	}
};
kha_audio2_Audio1.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = null;
	if(kha_audio2_Audio.samplesPerSecond != sound.sampleRate) {
		channel = new kha_audio2_ResamplingAudioChannel(loop,sound.sampleRate);
	} else {
		channel = new kha_audio2_AudioChannel(loop);
	}
	channel.data = sound.uncompressedData;
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished()) {
			kha_audio2_Audio1.soundChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
kha_audio2_Audio1._playAgain = function(channel) {
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == channel) {
			kha_audio2_Audio1.soundChannels[i] = null;
		}
	}
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished() || kha_audio2_Audio1.soundChannels[i] == channel) {
			kha_audio2_Audio1.soundChannels[i] = channel;
			break;
		}
	}
};
kha_audio2_Audio1.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var hardwareChannel = kha_audio2_Audio.stream(sound,loop);
	if(hardwareChannel != null) {
		return hardwareChannel;
	}
	var channel = new kha_audio2_StreamChannel(sound.compressedData,loop);
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.streamChannels[i] == null || kha_audio2_Audio1.streamChannels[i].get_finished()) {
			kha_audio2_Audio1.streamChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
var kha_audio2_AudioChannel = function(looping) {
	this.looping = false;
	this.stopped = false;
	this.paused = false;
	this.myPosition = 0;
	this.myVolume = 1;
	this.data = null;
	this.looping = looping;
};
$hxClasses["kha.audio2.AudioChannel"] = kha_audio2_AudioChannel;
kha_audio2_AudioChannel.__name__ = true;
kha_audio2_AudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_AudioChannel.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_AudioChannel.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_AudioChannel.prototype = {
	data: null
	,myVolume: null
	,myPosition: null
	,paused: null
	,stopped: null
	,looping: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			var _g1 = requestedLength;
			while(_g < _g1) {
				var i = _g++;
				requestedSamples[i] = 0;
			}
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g = 0;
			var a = this.data.length - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g1 = a < b ? a : b;
			while(_g < _g1) {
				var i = _g++;
				requestedSamples[requestedSamplesIndex++] = this.data[this.myPosition++];
			}
			if(this.myPosition >= this.data.length) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples[requestedSamplesIndex++] = 0;
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,length: null
	,get_length: function() {
		return this.data.length / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		this.myPosition = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2);
		var a = this.myPosition;
		var b = this.data.length;
		var a1 = a < b ? a : b;
		this.myPosition = a1 > 0 ? a1 : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_Buffer = function(size,channels,samplesPerSecond) {
	this.size = size;
	var this1 = new Float32Array(size);
	this.data = this1;
	this.channels = channels;
	this.samplesPerSecond = samplesPerSecond;
	this.readLocation = 0;
	this.writeLocation = 0;
};
$hxClasses["kha.audio2.Buffer"] = kha_audio2_Buffer;
kha_audio2_Buffer.__name__ = true;
kha_audio2_Buffer.prototype = {
	channels: null
	,samplesPerSecond: null
	,data: null
	,size: null
	,readLocation: null
	,writeLocation: null
	,__class__: kha_audio2_Buffer
};
var kha_audio2_ResamplingAudioChannel = function(looping,sampleRate) {
	kha_audio2_AudioChannel.call(this,looping);
	this.sampleRate = sampleRate;
};
$hxClasses["kha.audio2.ResamplingAudioChannel"] = kha_audio2_ResamplingAudioChannel;
kha_audio2_ResamplingAudioChannel.__name__ = true;
kha_audio2_ResamplingAudioChannel.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_ResamplingAudioChannel.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_ResamplingAudioChannel.__super__ = kha_audio2_AudioChannel;
kha_audio2_ResamplingAudioChannel.prototype = $extend(kha_audio2_AudioChannel.prototype,{
	sampleRate: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			var _g1 = requestedLength;
			while(_g < _g1) {
				var i = _g++;
				requestedSamples[i] = 0;
			}
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g = 0;
			var value = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
			var a = (value % 2 == 0 ? value : value + 1) - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g1 = a < b ? a : b;
			while(_g < _g1) {
				var i = _g++;
				var index = requestedSamplesIndex++;
				var position = this.myPosition++;
				var even = position % 2 == 0;
				var factor = this.sampleRate / sampleRate;
				var value1;
				if(even) {
					position = position / 2 | 0;
					var pos = factor * position;
					var pos1 = Math.floor(pos);
					var pos2 = Math.floor(pos + 1);
					pos1 *= 2;
					pos2 *= 2;
					var minimum = 0;
					var maximum = this.data.length - 1;
					if(maximum % 2 != 0) {
						--maximum;
					}
					var a1 = pos1 < minimum || pos1 > maximum ? 0 : this.data[pos1];
					var b1 = pos2 < minimum || pos2 > maximum ? 0 : this.data[pos2];
					var t = pos - Math.floor(pos);
					value1 = (1 - t) * a1 + t * b1;
				} else {
					position = position / 2 | 0;
					var pos3 = factor * position;
					var pos11 = Math.floor(pos3);
					var pos21 = Math.floor(pos3 + 1);
					pos11 = pos11 * 2 + 1;
					pos21 = pos21 * 2 + 1;
					var minimum1 = 1;
					var maximum1 = this.data.length - 1;
					if(maximum1 % 2 == 0) {
						--maximum1;
					}
					var a2 = pos11 < minimum1 || pos11 > maximum1 ? 0 : this.data[pos11];
					var b2 = pos21 < minimum1 || pos21 > maximum1 ? 0 : this.data[pos21];
					var t1 = pos3 - Math.floor(pos3);
					value1 = (1 - t1) * a2 + t1 * b2;
				}
				requestedSamples[index] = value1;
			}
			var value2 = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
			if(this.myPosition >= (value2 % 2 == 0 ? value2 : value2 + 1)) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples[requestedSamplesIndex++] = 0;
	}
	,sample: function(position,sampleRate) {
		var even = position % 2 == 0;
		var factor = this.sampleRate / sampleRate;
		if(even) {
			position = position / 2 | 0;
			var pos = factor * position;
			var pos1 = Math.floor(pos);
			var pos2 = Math.floor(pos + 1);
			pos1 *= 2;
			pos2 *= 2;
			var minimum = 0;
			var maximum = this.data.length - 1;
			if(maximum % 2 != 0) {
				--maximum;
			}
			var a = pos1 < minimum || pos1 > maximum ? 0 : this.data[pos1];
			var b = pos2 < minimum || pos2 > maximum ? 0 : this.data[pos2];
			var t = pos - Math.floor(pos);
			return (1 - t) * a + t * b;
		} else {
			position = position / 2 | 0;
			var pos = factor * position;
			var pos1 = Math.floor(pos);
			var pos2 = Math.floor(pos + 1);
			pos1 = pos1 * 2 + 1;
			pos2 = pos2 * 2 + 1;
			var minimum = 1;
			var maximum = this.data.length - 1;
			if(maximum % 2 == 0) {
				--maximum;
			}
			var a = pos1 < minimum || pos1 > maximum ? 0 : this.data[pos1];
			var b = pos2 < minimum || pos2 > maximum ? 0 : this.data[pos2];
			var t = pos - Math.floor(pos);
			return (1 - t) * a + t * b;
		}
	}
	,lerp: function(v0,v1,t) {
		return (1 - t) * v0 + t * v1;
	}
	,sampleLength: function(sampleRate) {
		var value = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
		if(value % 2 == 0) {
			return value;
		} else {
			return value + 1;
		}
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,get_length: function() {
		return this.data.length / this.sampleRate / 2;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		var pos = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2.0);
		if(pos % 2 != 0) {
			++pos;
		}
		var value1 = Math.ceil(this.data.length * (kha_audio2_Audio.samplesPerSecond / this.sampleRate));
		var b = value1 % 2 == 0 ? value1 : value1 + 1;
		var a = pos < b ? pos : b;
		this.myPosition = a > 0 ? a : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_ResamplingAudioChannel
});
var kha_audio2_StreamChannel = function(data,loop) {
	this.paused = false;
	this.atend = false;
	this.myVolume = 1;
	this.loop = loop;
	this.reader = kha_audio2_ogg_vorbis_Reader.openFromBytes(data);
};
$hxClasses["kha.audio2.StreamChannel"] = kha_audio2_StreamChannel;
kha_audio2_StreamChannel.__name__ = true;
kha_audio2_StreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_StreamChannel.prototype = {
	reader: null
	,atend: null
	,loop: null
	,myVolume: null
	,paused: null
	,nextSamples: function(samples,length,sampleRate) {
		if(this.paused) {
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				samples[i] = 0;
			}
			return;
		}
		var count = this.reader.read(samples,length / 2 | 0,2,sampleRate,true) * 2;
		if(count < length) {
			if(this.loop) {
				this.reader.set_currentMillisecond(0);
			} else {
				this.atend = true;
			}
			var _g = count;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				samples[i] = 0;
			}
		}
	}
	,play: function() {
		this.paused = false;
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.atend = true;
	}
	,length: null
	,get_length: function() {
		return this.reader.get_totalMillisecond() / 1000.0;
	}
	,get_position: function() {
		return this.reader.get_currentMillisecond() / 1000.0;
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.atend;
	}
	,__class__: kha_audio2_StreamChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_VirtualStreamChannel = function(aeChannel,looping) {
	this.mode = 2;
	this.aeChannel = aeChannel;
	this.looping = looping;
	this.lastTickTime = kha_Scheduler.realTime();
	this.lastPosition = 0;
};
$hxClasses["kha.audio2.VirtualStreamChannel"] = kha_audio2_VirtualStreamChannel;
kha_audio2_VirtualStreamChannel.__name__ = true;
kha_audio2_VirtualStreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_VirtualStreamChannel.prototype = {
	aeChannel: null
	,mode: null
	,lastTickTime: null
	,lastPosition: null
	,looping: null
	,wake: function() {
		this.updatePosition();
		this.aeChannel.set_position(this.lastPosition);
		this.aeChannel.play();
	}
	,updatePosition: function() {
		var now = kha_Scheduler.realTime();
		switch(this.mode) {
		case 0:
			this.lastPosition = 0;
			break;
		case 1:
			break;
		case 2:
			this.lastPosition += now - this.lastTickTime;
			while(this.lastPosition > this.get_length()) this.lastPosition -= this.get_length();
			break;
		}
		this.lastTickTime = now;
	}
	,play: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.play();
		} else {
			this.updatePosition();
			this.mode = 2;
		}
	}
	,pause: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.pause();
		} else {
			this.updatePosition();
			this.mode = 1;
		}
	}
	,stop: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.stop();
		} else {
			this.updatePosition();
			this.mode = 0;
		}
	}
	,get_length: function() {
		return this.aeChannel.get_length();
	}
	,get_position: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.get_position();
		} else {
			this.updatePosition();
			return this.lastPosition;
		}
	}
	,set_position: function(value) {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.set_position(value);
		} else {
			this.updatePosition();
			return this.lastPosition = value;
		}
	}
	,get_volume: function() {
		return this.aeChannel.get_volume();
	}
	,set_volume: function(value) {
		return this.aeChannel.set_volume(value);
	}
	,get_finished: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.get_finished();
		} else if(this.mode != 0) {
			if(!this.looping) {
				return this.get_position() >= this.get_length();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: kha_audio2_VirtualStreamChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_ogg_tools_Crc32 = function() { };
$hxClasses["kha.audio2.ogg.tools.Crc32"] = kha_audio2_ogg_tools_Crc32;
kha_audio2_ogg_tools_Crc32.__name__ = true;
kha_audio2_ogg_tools_Crc32.table = null;
kha_audio2_ogg_tools_Crc32.init = function() {
	if(kha_audio2_ogg_tools_Crc32.table != null) {
		return;
	}
	var this1 = new Array(256);
	kha_audio2_ogg_tools_Crc32.table = this1;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		var s = i << 24;
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (UInt.gte(s,1 << 31) ? 79764919 : 0);
		kha_audio2_ogg_tools_Crc32.table[i] = s;
	}
};
kha_audio2_ogg_tools_Crc32.update = function(crc,byte) {
	return crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[byte ^ crc >>> 24];
};
var kha_audio2_ogg_tools_MathTools = function() { };
$hxClasses["kha.audio2.ogg.tools.MathTools"] = kha_audio2_ogg_tools_MathTools;
kha_audio2_ogg_tools_MathTools.__name__ = true;
kha_audio2_ogg_tools_MathTools.ilog = function(n) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	if(n < 16384) {
		if(n < 16) {
			return log2_4[n];
		} else if(n < 512) {
			return 5 + log2_4[n >> 5];
		} else {
			return 10 + log2_4[n >> 10];
		}
	} else if(n < 16777216) {
		if(n < 524288) {
			return 15 + log2_4[n >> 15];
		} else {
			return 20 + log2_4[n >> 20];
		}
	} else if(n < 536870912) {
		return 25 + log2_4[n >> 25];
	} else if(n < -2147483648) {
		return 30 + log2_4[n >> 30];
	} else {
		return 0;
	}
};
var kha_audio2_ogg_tools_Mdct = function() { };
$hxClasses["kha.audio2.ogg.tools.Mdct"] = kha_audio2_ogg_tools_Mdct;
kha_audio2_ogg_tools_Mdct.__name__ = true;
kha_audio2_ogg_tools_Mdct.inverseTransform = function(buffer,n,a,b,c,bitReverse) {
	var n2 = n >> 1;
	var n4 = n >> 2;
	var n8 = n >> 3;
	var this1 = new Array(n2);
	var buf2 = this1;
	var dOffset = n2 - 2;
	var aaOffset = 0;
	var eOffset = 0;
	var eStopOffset = n2;
	while(eOffset != eStopOffset) {
		buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
		buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset += 4;
	}
	eOffset = n2 - 3;
	while(dOffset >= 0) {
		buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
		buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset -= 4;
	}
	var u = buffer;
	var v = buf2;
	var aaOffset = n2 - 8;
	var eOffset0 = n4;
	var eOffset1 = 0;
	var dOffset0 = n4;
	var dOffset1 = 0;
	while(aaOffset >= 0) {
		var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
		var v40_20 = v[eOffset0] - v[eOffset1];
		u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
		u[dOffset0] = v[eOffset0] + v[eOffset1];
		u[dOffset1 + 1] = v41_21 * a[aaOffset + 4] - v40_20 * a[aaOffset + 5];
		u[dOffset1] = v40_20 * a[aaOffset + 4] + v41_21 * a[aaOffset + 5];
		v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
		v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
		u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
		u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
		u[dOffset1 + 3] = v41_21 * a[aaOffset] - v40_20 * a[aaOffset + 1];
		u[dOffset1 + 2] = v40_20 * a[aaOffset] + v41_21 * a[aaOffset + 1];
		aaOffset -= 8;
		dOffset0 += 4;
		dOffset1 += 4;
		eOffset0 += 4;
		eOffset1 += 4;
	}
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var i_off = n2 - 1 - n4 * 0;
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + -(n >> 3);
	var aOffset = 0;
	var i = (n >> 4 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eeOffset0] - u[eeOffset2];
		var k01_21 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
		u[eeOffset0] += u[eeOffset2];
		u[eeOffset0 + (-1)] += u[eeOffset2 + (-1)];
		u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
		k01_21 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
		u[eeOffset0 + (-2)] += u[eeOffset2 + (-2)];
		u[eeOffset0 + (-3)] += u[eeOffset2 + (-3)];
		u[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
		k01_21 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
		u[eeOffset0 + (-4)] += u[eeOffset2 + (-4)];
		u[eeOffset0 + (-5)] += u[eeOffset2 + (-5)];
		u[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
		k01_21 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
		u[eeOffset0 + (-6)] += u[eeOffset2 + (-6)];
		u[eeOffset0 + (-7)] += u[eeOffset2 + (-7)];
		u[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
	var i_off = n2 - 1 - n4;
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + -(n >> 3);
	var aOffset = 0;
	var i = (n >> 4 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eeOffset0] - u[eeOffset2];
		var k01_21 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
		u[eeOffset0] += u[eeOffset2];
		u[eeOffset0 + (-1)] += u[eeOffset2 + (-1)];
		u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
		k01_21 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
		u[eeOffset0 + (-2)] += u[eeOffset2 + (-2)];
		u[eeOffset0 + (-3)] += u[eeOffset2 + (-3)];
		u[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
		k01_21 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
		u[eeOffset0 + (-4)] += u[eeOffset2 + (-4)];
		u[eeOffset0 + (-5)] += u[eeOffset2 + (-5)];
		u[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
		k01_21 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
		u[eeOffset0 + (-6)] += u[eeOffset2 + (-6)];
		u[eeOffset0 + (-7)] += u[eeOffset2 + (-7)];
		u[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
	var d0 = n2 - 1 - n8 * 0;
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + -(n >> 4);
	var i = (n >> 5 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eOffset0] - u[eOffset2];
		var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
		u[eOffset0] += u[eOffset2];
		u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
		u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
		k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
		u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
		u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
		u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
		k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
		u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
		u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
		u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
		k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
		u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
		u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
		u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += 16;
	}
	var d0 = n2 - 1 - n8;
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + -(n >> 4);
	var i = (n >> 5 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eOffset0] - u[eOffset2];
		var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
		u[eOffset0] += u[eOffset2];
		u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
		u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
		k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
		u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
		u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
		u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
		k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
		u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
		u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
		u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
		k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
		u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
		u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
		u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += 16;
	}
	var d0 = n2 - 1 - n8 * 2;
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + -(n >> 4);
	var i = (n >> 5 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eOffset0] - u[eOffset2];
		var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
		u[eOffset0] += u[eOffset2];
		u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
		u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
		k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
		u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
		u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
		u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
		k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
		u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
		u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
		u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
		k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
		u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
		u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
		u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += 16;
	}
	var d0 = n2 - 1 - n8 * 3;
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + -(n >> 4);
	var i = (n >> 5 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eOffset0] - u[eOffset2];
		var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
		u[eOffset0] += u[eOffset2];
		u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
		u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
		k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
		u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
		u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
		u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
		k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
		u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
		u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
		u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 16;
		k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
		k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
		u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
		u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
		u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += 16;
	}
	var _g = 2;
	var _g1 = ld - 3 >> 1;
	while(_g < _g1) {
		var l = _g++;
		var k0 = n >> l + 2;
		var k0_2 = k0 >> 1;
		var lim = 1 << l + 1;
		var _g2 = 0;
		var _g3 = lim;
		while(_g2 < _g3) {
			var i = _g2++;
			var d0 = n2 - 1 - k0 * i;
			var k1 = 1 << l + 3;
			var aOffset = 0;
			var eOffset0 = d0;
			var eOffset2 = d0 + -k0_2;
			var i1 = (n >> l + 4 >> 2) + 1;
			while(--i1 > 0) {
				var k00_20 = u[eOffset0] - u[eOffset2];
				var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
				u[eOffset0] += u[eOffset2];
				u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
				u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
				u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
				aOffset += k1;
				k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
				k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
				u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
				u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
				u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
				u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
				aOffset += k1;
				k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
				k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
				u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
				u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
				u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
				u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
				aOffset += k1;
				k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
				k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
				u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
				u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
				u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
				u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
				eOffset0 -= 8;
				eOffset2 -= 8;
				aOffset += k1;
			}
		}
	}
	var _g = ld - 3 >> 1;
	var _g1 = ld - 6;
	while(_g < _g1) {
		var l = _g++;
		var k0 = n >> l + 2;
		var k1 = 1 << l + 3;
		var k0_2 = k0 >> 1;
		var rlim = n >> l + 6;
		var lim = 1 << l + 1;
		var aOffset = 0;
		var i_off = n2 - 1;
		var r = rlim + 1;
		while(--r > 0) {
			var A0 = a[aOffset];
			var A1 = a[aOffset + 1];
			var A2 = a[aOffset + k1];
			var A3 = a[aOffset + k1 + 1];
			var A4 = a[aOffset + k1 * 2];
			var A5 = a[aOffset + k1 * 2 + 1];
			var A6 = a[aOffset + k1 * 3];
			var A7 = a[aOffset + k1 * 3 + 1];
			var eeOffset0 = i_off;
			var eeOffset2 = i_off + -k0_2;
			var i = lim + 1;
			while(--i > 0) {
				var k00 = u[eeOffset0] - u[eeOffset2];
				var k11 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
				u[eeOffset0] += u[eeOffset2];
				u[eeOffset0 + (-1)] += u[eeOffset2 + (-1)];
				u[eeOffset2] = k00 * A0 - k11 * A1;
				u[eeOffset2 + (-1)] = k11 * A0 + k00 * A1;
				k00 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
				k11 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
				u[eeOffset0 + (-2)] += u[eeOffset2 + (-2)];
				u[eeOffset0 + (-3)] += u[eeOffset2 + (-3)];
				u[eeOffset2 + (-2)] = k00 * A2 - k11 * A3;
				u[eeOffset2 + (-3)] = k11 * A2 + k00 * A3;
				k00 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
				k11 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
				u[eeOffset0 + (-4)] += u[eeOffset2 + (-4)];
				u[eeOffset0 + (-5)] += u[eeOffset2 + (-5)];
				u[eeOffset2 + (-4)] = k00 * A4 - k11 * A5;
				u[eeOffset2 + (-5)] = k11 * A4 + k00 * A5;
				k00 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
				k11 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
				u[eeOffset0 + (-6)] += u[eeOffset2 + (-6)];
				u[eeOffset0 + (-7)] += u[eeOffset2 + (-7)];
				u[eeOffset2 + (-6)] = k00 * A6 - k11 * A7;
				u[eeOffset2 + (-7)] = k11 * A6 + k00 * A7;
				eeOffset0 -= k0;
				eeOffset2 -= k0;
			}
			aOffset += k1 * 4;
			i_off -= 8;
		}
	}
	var i_off = n2 - 1;
	var A2 = a[n >> 3];
	var zOffset = i_off;
	var baseOffset = i_off - 16 * (n >> 5);
	while(zOffset > baseOffset) {
		var t0 = u[zOffset];
		var t1 = u[zOffset + (-8)];
		u[zOffset + (-8)] = t0 - t1;
		u[zOffset] = t0 + t1;
		t0 = u[zOffset + (-1)];
		t1 = u[zOffset + (-9)];
		u[zOffset + (-9)] = t0 - t1;
		u[zOffset + (-1)] = t0 + t1;
		t0 = u[zOffset + (-2)];
		t1 = u[zOffset + (-10)];
		var k00 = t0 - t1;
		u[zOffset + (-2)] = t0 + t1;
		t0 = u[zOffset + (-3)];
		t1 = u[zOffset + (-11)];
		var k11 = t0 - t1;
		u[zOffset + (-3)] = t0 + t1;
		u[zOffset + (-10)] = (k00 + k11) * A2;
		u[zOffset + (-11)] = (k11 - k00) * A2;
		t0 = u[zOffset + (-4)];
		t1 = u[zOffset + (-12)];
		k00 = t1 - t0;
		u[zOffset + (-4)] = t0 + t1;
		t0 = u[zOffset + (-5)];
		t1 = u[zOffset + (-13)];
		k11 = t0 - t1;
		u[zOffset + (-5)] = t0 + t1;
		u[zOffset + (-12)] = k11;
		u[zOffset + (-13)] = k00;
		t0 = u[zOffset + (-6)];
		t1 = u[zOffset + (-14)];
		k00 = t1 - t0;
		u[zOffset + (-6)] = t0 + t1;
		t0 = u[zOffset + (-7)];
		t1 = u[zOffset + (-15)];
		k11 = t0 - t1;
		u[zOffset + (-7)] = t0 + t1;
		u[zOffset + (-14)] = (k00 + k11) * A2;
		u[zOffset + (-15)] = (k00 - k11) * A2;
		var t01 = u[zOffset];
		var t11 = u[zOffset + (-4)];
		var k001 = t01 - t11;
		var y0 = t01 + t11;
		t01 = u[zOffset + (-2)];
		t11 = u[zOffset + (-6)];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		u[zOffset] = y0 + y2;
		u[zOffset + (-2)] = y0 - y2;
		var k33 = u[zOffset + (-3)] - u[zOffset + (-7)];
		u[zOffset + (-4)] = k001 + k33;
		u[zOffset + (-6)] = k001 - k33;
		t01 = u[zOffset + (-1)];
		t11 = u[zOffset + (-5)];
		var k111 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = u[zOffset + (-3)] + u[zOffset + (-7)];
		u[zOffset + (-1)] = y1 + y3;
		u[zOffset + (-3)] = y1 - y3;
		u[zOffset + (-5)] = k111 - k22;
		u[zOffset + (-7)] = k111 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = u[zOffset1];
		var t12 = u[zOffset1 + (-4)];
		var k002 = t02 - t12;
		var y01 = t02 + t12;
		t02 = u[zOffset1 + (-2)];
		t12 = u[zOffset1 + (-6)];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		u[zOffset1] = y01 + y21;
		u[zOffset1 + (-2)] = y01 - y21;
		var k331 = u[zOffset1 + (-3)] - u[zOffset1 + (-7)];
		u[zOffset1 + (-4)] = k002 + k331;
		u[zOffset1 + (-6)] = k002 - k331;
		t02 = u[zOffset1 + (-1)];
		t12 = u[zOffset1 + (-5)];
		var k112 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = u[zOffset1 + (-3)] + u[zOffset1 + (-7)];
		u[zOffset1 + (-1)] = y11 + y31;
		u[zOffset1 + (-3)] = y11 - y31;
		u[zOffset1 + (-5)] = k112 - k221;
		u[zOffset1 + (-7)] = k112 + k221;
		zOffset -= 16;
	}
	var brOffset = 0;
	var dOffset0 = n4 - 4;
	var dOffset1 = n2 - 4;
	while(dOffset0 >= 0) {
		var k4 = bitReverse[brOffset];
		v[dOffset1 + 3] = u[k4];
		v[dOffset1 + 2] = u[k4 + 1];
		v[dOffset0 + 3] = u[k4 + 2];
		v[dOffset0 + 2] = u[k4 + 3];
		k4 = bitReverse[brOffset + 1];
		v[dOffset1 + 1] = u[k4];
		v[dOffset1] = u[k4 + 1];
		v[dOffset0 + 1] = u[k4 + 2];
		v[dOffset0] = u[k4 + 3];
		dOffset0 -= 4;
		dOffset1 -= 4;
		brOffset += 2;
	}
	var cOffset = 0;
	var dOffset = 0;
	var eOffset = n2 - 4;
	while(dOffset < eOffset) {
		var a02 = v[dOffset] - v[eOffset + 2];
		var a11 = v[dOffset + 1] + v[eOffset + 3];
		var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
		var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
		var b2 = v[dOffset] + v[eOffset + 2];
		var b3 = v[dOffset + 1] - v[eOffset + 3];
		v[dOffset] = b2 + b0;
		v[dOffset + 1] = b3 + b1;
		v[eOffset + 2] = b2 - b0;
		v[eOffset + 3] = b1 - b3;
		a02 = v[dOffset + 2] - v[eOffset];
		a11 = v[dOffset + 3] + v[eOffset + 1];
		b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
		b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
		b2 = v[dOffset + 2] + v[eOffset];
		b3 = v[dOffset + 3] - v[eOffset + 1];
		v[dOffset + 2] = b2 + b0;
		v[dOffset + 3] = b3 + b1;
		v[eOffset] = b2 - b0;
		v[eOffset + 1] = b1 - b3;
		cOffset += 4;
		dOffset += 4;
		eOffset -= 4;
	}
	var bOffset = n2 - 8;
	var eOffset = n2 - 8;
	var dOffset0 = 0;
	var dOffset1 = n2 - 4;
	var dOffset2 = n2;
	var dOffset3 = n - 4;
	while(eOffset >= 0) {
		var p3 = buf2[eOffset + 6] * b[bOffset + 7] - buf2[eOffset + 7] * b[bOffset + 6];
		var p2 = -buf2[eOffset + 6] * b[bOffset + 6] - buf2[eOffset + 7] * b[bOffset + 7];
		buffer[dOffset0] = p3;
		buffer[dOffset1 + 3] = -p3;
		buffer[dOffset2] = p2;
		buffer[dOffset3 + 3] = p2;
		var p1 = buf2[eOffset + 4] * b[bOffset + 5] - buf2[eOffset + 5] * b[bOffset + 4];
		var p0 = -buf2[eOffset + 4] * b[bOffset + 4] - buf2[eOffset + 5] * b[bOffset + 5];
		buffer[dOffset0 + 1] = p1;
		buffer[dOffset1 + 2] = -p1;
		buffer[dOffset2 + 1] = p0;
		buffer[dOffset3 + 2] = p0;
		p3 = buf2[eOffset + 2] * b[bOffset + 3] - buf2[eOffset + 3] * b[bOffset + 2];
		p2 = -buf2[eOffset + 2] * b[bOffset + 2] - buf2[eOffset + 3] * b[bOffset + 3];
		buffer[dOffset0 + 2] = p3;
		buffer[dOffset1 + 1] = -p3;
		buffer[dOffset2 + 2] = p2;
		buffer[dOffset3 + 1] = p2;
		p1 = buf2[eOffset] * b[bOffset + 1] - buf2[eOffset + 1] * b[bOffset];
		p0 = -buf2[eOffset] * b[bOffset] - buf2[eOffset + 1] * b[bOffset + 1];
		buffer[dOffset0 + 3] = p1;
		buffer[dOffset1] = -p1;
		buffer[dOffset2 + 3] = p0;
		buffer[dOffset3] = p0;
		bOffset -= 8;
		eOffset -= 8;
		dOffset0 += 4;
		dOffset2 += 4;
		dOffset1 -= 4;
		dOffset3 -= 4;
	}
};
kha_audio2_ogg_tools_Mdct.step3Iter0Loop = function(n,e,i_off,k_off,a) {
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var aOffset = 0;
	var i = (n >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eeOffset0] - e[eeOffset2];
		var k01_21 = e[eeOffset0 + (-1)] - e[eeOffset2 + (-1)];
		e[eeOffset0] += e[eeOffset2];
		e[eeOffset0 + (-1)] += e[eeOffset2 + (-1)];
		e[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-2)] - e[eeOffset2 + (-2)];
		k01_21 = e[eeOffset0 + (-3)] - e[eeOffset2 + (-3)];
		e[eeOffset0 + (-2)] += e[eeOffset2 + (-2)];
		e[eeOffset0 + (-3)] += e[eeOffset2 + (-3)];
		e[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-4)] - e[eeOffset2 + (-4)];
		k01_21 = e[eeOffset0 + (-5)] - e[eeOffset2 + (-5)];
		e[eeOffset0 + (-4)] += e[eeOffset2 + (-4)];
		e[eeOffset0 + (-5)] += e[eeOffset2 + (-5)];
		e[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-6)] - e[eeOffset2 + (-6)];
		k01_21 = e[eeOffset0 + (-7)] - e[eeOffset2 + (-7)];
		e[eeOffset0 + (-6)] += e[eeOffset2 + (-6)];
		e[eeOffset0 + (-7)] += e[eeOffset2 + (-7)];
		e[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerRLoop = function(lim,e,d0,k_off,a,k1) {
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + k_off;
	var i = (lim >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eOffset0] - e[eOffset2];
		var k01_21 = e[eOffset0 + (-1)] - e[eOffset2 + (-1)];
		e[eOffset0] += e[eOffset2];
		e[eOffset0 + (-1)] += e[eOffset2 + (-1)];
		e[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-2)] - e[eOffset2 + (-2)];
		k01_21 = e[eOffset0 + (-3)] - e[eOffset2 + (-3)];
		e[eOffset0 + (-2)] += e[eOffset2 + (-2)];
		e[eOffset0 + (-3)] += e[eOffset2 + (-3)];
		e[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-4)] - e[eOffset2 + (-4)];
		k01_21 = e[eOffset0 + (-5)] - e[eOffset2 + (-5)];
		e[eOffset0 + (-4)] += e[eOffset2 + (-4)];
		e[eOffset0 + (-5)] += e[eOffset2 + (-5)];
		e[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-6)] - e[eOffset2 + (-6)];
		k01_21 = e[eOffset0 + (-7)] - e[eOffset2 + (-7)];
		e[eOffset0 + (-6)] += e[eOffset2 + (-6)];
		e[eOffset0 + (-7)] += e[eOffset2 + (-7)];
		e[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += k1;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoop = function(n,e,i_off,k_off,a,aOffset0,aOffset1,k0) {
	var A0 = a[aOffset0];
	var A1 = a[aOffset0 + 1];
	var A2 = a[aOffset0 + aOffset1];
	var A3 = a[aOffset0 + aOffset1 + 1];
	var A4 = a[aOffset0 + aOffset1 * 2];
	var A5 = a[aOffset0 + aOffset1 * 2 + 1];
	var A6 = a[aOffset0 + aOffset1 * 3];
	var A7 = a[aOffset0 + aOffset1 * 3 + 1];
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var i = n + 1;
	while(--i > 0) {
		var k00 = e[eeOffset0] - e[eeOffset2];
		var k11 = e[eeOffset0 + (-1)] - e[eeOffset2 + (-1)];
		e[eeOffset0] += e[eeOffset2];
		e[eeOffset0 + (-1)] += e[eeOffset2 + (-1)];
		e[eeOffset2] = k00 * A0 - k11 * A1;
		e[eeOffset2 + (-1)] = k11 * A0 + k00 * A1;
		k00 = e[eeOffset0 + (-2)] - e[eeOffset2 + (-2)];
		k11 = e[eeOffset0 + (-3)] - e[eeOffset2 + (-3)];
		e[eeOffset0 + (-2)] += e[eeOffset2 + (-2)];
		e[eeOffset0 + (-3)] += e[eeOffset2 + (-3)];
		e[eeOffset2 + (-2)] = k00 * A2 - k11 * A3;
		e[eeOffset2 + (-3)] = k11 * A2 + k00 * A3;
		k00 = e[eeOffset0 + (-4)] - e[eeOffset2 + (-4)];
		k11 = e[eeOffset0 + (-5)] - e[eeOffset2 + (-5)];
		e[eeOffset0 + (-4)] += e[eeOffset2 + (-4)];
		e[eeOffset0 + (-5)] += e[eeOffset2 + (-5)];
		e[eeOffset2 + (-4)] = k00 * A4 - k11 * A5;
		e[eeOffset2 + (-5)] = k11 * A4 + k00 * A5;
		k00 = e[eeOffset0 + (-6)] - e[eeOffset2 + (-6)];
		k11 = e[eeOffset0 + (-7)] - e[eeOffset2 + (-7)];
		e[eeOffset0 + (-6)] += e[eeOffset2 + (-6)];
		e[eeOffset0 + (-7)] += e[eeOffset2 + (-7)];
		e[eeOffset2 + (-6)] = k00 * A6 - k11 * A7;
		e[eeOffset2 + (-7)] = k11 * A6 + k00 * A7;
		eeOffset0 -= k0;
		eeOffset2 -= k0;
	}
};
kha_audio2_ogg_tools_Mdct.iter54 = function(e,zOffset) {
	var t0 = e[zOffset];
	var t1 = e[zOffset + (-4)];
	var k00 = t0 - t1;
	var y0 = t0 + t1;
	t0 = e[zOffset + (-2)];
	t1 = e[zOffset + (-6)];
	var y2 = t0 + t1;
	var k22 = t0 - t1;
	e[zOffset] = y0 + y2;
	e[zOffset + (-2)] = y0 - y2;
	var k33 = e[zOffset + (-3)] - e[zOffset + (-7)];
	e[zOffset + (-4)] = k00 + k33;
	e[zOffset + (-6)] = k00 - k33;
	t0 = e[zOffset + (-1)];
	t1 = e[zOffset + (-5)];
	var k11 = t0 - t1;
	var y1 = t0 + t1;
	var y3 = e[zOffset + (-3)] + e[zOffset + (-7)];
	e[zOffset + (-1)] = y1 + y3;
	e[zOffset + (-3)] = y1 - y3;
	e[zOffset + (-5)] = k11 - k22;
	e[zOffset + (-7)] = k11 + k22;
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoopLd654 = function(n,e,i_off,a,baseN) {
	var A2 = a[baseN >> 3];
	var zOffset = i_off;
	var baseOffset = i_off - 16 * n;
	while(zOffset > baseOffset) {
		var t0 = e[zOffset];
		var t1 = e[zOffset + (-8)];
		e[zOffset + (-8)] = t0 - t1;
		e[zOffset] = t0 + t1;
		t0 = e[zOffset + (-1)];
		t1 = e[zOffset + (-9)];
		e[zOffset + (-9)] = t0 - t1;
		e[zOffset + (-1)] = t0 + t1;
		t0 = e[zOffset + (-2)];
		t1 = e[zOffset + (-10)];
		var k00 = t0 - t1;
		e[zOffset + (-2)] = t0 + t1;
		t0 = e[zOffset + (-3)];
		t1 = e[zOffset + (-11)];
		var k11 = t0 - t1;
		e[zOffset + (-3)] = t0 + t1;
		e[zOffset + (-10)] = (k00 + k11) * A2;
		e[zOffset + (-11)] = (k11 - k00) * A2;
		t0 = e[zOffset + (-4)];
		t1 = e[zOffset + (-12)];
		k00 = t1 - t0;
		e[zOffset + (-4)] = t0 + t1;
		t0 = e[zOffset + (-5)];
		t1 = e[zOffset + (-13)];
		k11 = t0 - t1;
		e[zOffset + (-5)] = t0 + t1;
		e[zOffset + (-12)] = k11;
		e[zOffset + (-13)] = k00;
		t0 = e[zOffset + (-6)];
		t1 = e[zOffset + (-14)];
		k00 = t1 - t0;
		e[zOffset + (-6)] = t0 + t1;
		t0 = e[zOffset + (-7)];
		t1 = e[zOffset + (-15)];
		k11 = t0 - t1;
		e[zOffset + (-7)] = t0 + t1;
		e[zOffset + (-14)] = (k00 + k11) * A2;
		e[zOffset + (-15)] = (k00 - k11) * A2;
		var t01 = e[zOffset];
		var t11 = e[zOffset + (-4)];
		var k001 = t01 - t11;
		var y0 = t01 + t11;
		t01 = e[zOffset + (-2)];
		t11 = e[zOffset + (-6)];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		e[zOffset] = y0 + y2;
		e[zOffset + (-2)] = y0 - y2;
		var k33 = e[zOffset + (-3)] - e[zOffset + (-7)];
		e[zOffset + (-4)] = k001 + k33;
		e[zOffset + (-6)] = k001 - k33;
		t01 = e[zOffset + (-1)];
		t11 = e[zOffset + (-5)];
		var k111 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = e[zOffset + (-3)] + e[zOffset + (-7)];
		e[zOffset + (-1)] = y1 + y3;
		e[zOffset + (-3)] = y1 - y3;
		e[zOffset + (-5)] = k111 - k22;
		e[zOffset + (-7)] = k111 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = e[zOffset1];
		var t12 = e[zOffset1 + (-4)];
		var k002 = t02 - t12;
		var y01 = t02 + t12;
		t02 = e[zOffset1 + (-2)];
		t12 = e[zOffset1 + (-6)];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		e[zOffset1] = y01 + y21;
		e[zOffset1 + (-2)] = y01 - y21;
		var k331 = e[zOffset1 + (-3)] - e[zOffset1 + (-7)];
		e[zOffset1 + (-4)] = k002 + k331;
		e[zOffset1 + (-6)] = k002 - k331;
		t02 = e[zOffset1 + (-1)];
		t12 = e[zOffset1 + (-5)];
		var k112 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = e[zOffset1 + (-3)] + e[zOffset1 + (-7)];
		e[zOffset1 + (-1)] = y11 + y31;
		e[zOffset1 + (-3)] = y11 - y31;
		e[zOffset1 + (-5)] = k112 - k221;
		e[zOffset1 + (-7)] = k112 + k221;
		zOffset -= 16;
	}
};
var kha_audio2_ogg_vorbis_Reader = function(input,seekFunc,inputLength) {
	this.seekFunc = seekFunc;
	this.inputLength = inputLength;
	this.decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	this.decoder.setupSampleNumber(seekFunc,inputLength);
	this.loopStart = this.get_header().comment.get_loopStart();
	this.loopLength = this.get_header().comment.get_loopLength();
};
$hxClasses["kha.audio2.ogg.vorbis.Reader"] = kha_audio2_ogg_vorbis_Reader;
kha_audio2_ogg_vorbis_Reader.__name__ = true;
kha_audio2_ogg_vorbis_Reader.openFromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	var bytes1 = input;
	return new kha_audio2_ogg_vorbis_Reader(input,function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
};
kha_audio2_ogg_vorbis_Reader.seekBytes = function(bytes,pos) {
	bytes.set_position(pos);
};
kha_audio2_ogg_vorbis_Reader.readAll = function(bytes,output,useFloat) {
	if(useFloat == null) {
		useFloat = false;
	}
	var input = new haxe_io_BytesInput(bytes);
	var decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	var bytes1 = input;
	decoder.setupSampleNumber(function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
	var header = decoder.header;
	var count = 0;
	var bufferSize = 4096;
	var this1 = new Float32Array(bufferSize * header.channel);
	var buffer = this1;
	while(true) {
		var n = decoder.read(buffer,bufferSize,header.channel,header.sampleRate,useFloat);
		var _g = 0;
		var _g1 = n * header.channel;
		while(_g < _g1) {
			var i = _g++;
			output.writeFloat(buffer[i]);
		}
		if(n == 0) {
			break;
		}
		count += n;
	}
	return decoder.header;
};
kha_audio2_ogg_vorbis_Reader.prototype = {
	decoder: null
	,get_header: function() {
		return this.decoder.header;
	}
	,get_totalSample: function() {
		return this.decoder.totalSample;
	}
	,get_totalMillisecond: function() {
		var samples = this.decoder.totalSample;
		var b = this.get_header().sampleRate;
		return UInt.toFloat(samples) / UInt.toFloat(b) * 1000;
	}
	,get_currentSample: function() {
		return this.decoder.currentSample;
	}
	,set_currentSample: function(value) {
		this.decoder.seek(this.seekFunc,this.inputLength,value);
		return this.decoder.currentSample;
	}
	,get_currentMillisecond: function() {
		var samples = this.get_currentSample();
		var b = this.get_header().sampleRate;
		return UInt.toFloat(samples) / UInt.toFloat(b) * 1000;
	}
	,set_currentMillisecond: function(value) {
		this.set_currentSample(Math.floor(UInt.toFloat(this.get_header().sampleRate) * (value / 1000)));
		return this.get_currentMillisecond();
	}
	,loopStart: null
	,loopLength: null
	,seekFunc: null
	,inputLength: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		if(useFloat == null) {
			useFloat = false;
		}
		this.decoder.ensurePosition(this.seekFunc);
		if(samples == null) {
			samples = this.decoder.totalSample;
		}
		if(channels == null) {
			channels = this.get_header().channel;
		}
		if(sampleRate == null) {
			sampleRate = this.get_header().sampleRate;
		}
		return this.decoder.read(output,samples,channels,sampleRate,useFloat);
	}
	,clone: function() {
		var reader = Object.create(kha_audio2_ogg_vorbis_Reader.prototype);
		reader.seekFunc = this.seekFunc;
		reader.inputLength = this.inputLength;
		reader.decoder = this.decoder.clone(this.seekFunc);
		reader.loopStart = this.loopStart;
		reader.loopLength = this.loopLength;
		return reader;
	}
	,sampleToMillisecond: function(samples) {
		var b = this.get_header().sampleRate;
		return UInt.toFloat(samples) / UInt.toFloat(b) * 1000;
	}
	,millisecondToSample: function(millseconds) {
		return Math.floor(UInt.toFloat(this.get_header().sampleRate) * (millseconds / 1000));
	}
	,__class__: kha_audio2_ogg_vorbis_Reader
	,__properties__: {set_currentMillisecond:"set_currentMillisecond",get_currentMillisecond:"get_currentMillisecond",set_currentSample:"set_currentSample",get_currentSample:"get_currentSample",get_totalMillisecond:"get_totalMillisecond",get_totalSample:"get_totalSample",get_header:"get_header"}
};
var kha_audio2_ogg_vorbis_VorbisDecodeState = function(input) {
	this.nextSeg = 0;
	this.firstDecode = false;
	this.bytesInSeg = 0;
	this.validBits = 0;
	this.input = input;
	this.inputPosition = 0;
	this.page = new kha_audio2_ogg_vorbis_data_Page();
	kha_audio2_ogg_tools_Crc32.init();
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecodeState"] = kha_audio2_ogg_vorbis_VorbisDecodeState;
kha_audio2_ogg_vorbis_VorbisDecodeState.__name__ = true;
kha_audio2_ogg_vorbis_VorbisDecodeState.prototype = {
	page: null
	,eof: null
	,pFirst: null
	,pLast: null
	,validBits: null
	,inputPosition: null
	,input: null
	,discardSamplesDeferred: null
	,segments: null
	,bytesInSeg: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,currentSample: null
	,previousWindow: null
	,previousLength: null
	,finalY: null
	,firstDecode: null
	,nextSeg: null
	,acc: null
	,lastSeg: null
	,lastSegWhich: null
	,endSegWithKnownLoc: null
	,knownLocForPacket: null
	,error: null
	,currentLoc: null
	,currentLocValid: null
	,firstAudioPageOffset: null
	,setup: function(loc0,loc1) {
		this.inputPosition += 1;
		var segmentCount = this.input.readByte();
		this.inputPosition += segmentCount;
		var this1 = new Array(segmentCount);
		var vec = this1;
		var _g = 0;
		var _g1 = segmentCount;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		this.segments = vec;
		this.endSegWithKnownLoc = -2;
		if(loc0 != -1 || loc1 != -1) {
			var i = segmentCount - 1;
			while(i >= 0) {
				if(this.segments[i] < 255) {
					break;
				}
				if(i >= 0) {
					this.endSegWithKnownLoc = i;
					this.knownLocForPacket = loc0;
				}
				--i;
			}
		}
		if(this.firstDecode) {
			var i = 0;
			var len = 0;
			var p = new kha_audio2_ogg_vorbis_data_ProbedPage();
			var _g = 0;
			var _g1 = segmentCount;
			while(_g < _g1) {
				var i = _g++;
				len += this.segments[i];
			}
			len += 27 + segmentCount;
			p.pageStart = this.firstAudioPageOffset;
			p.pageEnd = p.pageStart + len;
			p.firstDecodedSample = 0;
			p.lastDecodedSample = loc0;
			this.pFirst = p;
		}
		this.nextSeg = 0;
	}
	,clone: function(seekFunc) {
		var state = Object.create(kha_audio2_ogg_vorbis_VorbisDecodeState.prototype);
		seekFunc(this.inputPosition);
		state.input = this.input;
		state.eof = this.eof;
		state.validBits = this.validBits;
		state.discardSamplesDeferred = this.discardSamplesDeferred;
		state.firstDecode = this.firstDecode;
		state.nextSeg = this.nextSeg;
		state.bytesInSeg = this.bytesInSeg;
		state.acc = state.acc;
		state.lastSeg = this.lastSeg;
		state.lastSegWhich = this.lastSegWhich;
		state.currentLoc = this.currentLoc;
		state.currentLocValid = this.currentLocValid;
		state.inputPosition = this.inputPosition;
		state.firstAudioPageOffset = this.firstAudioPageOffset;
		state.error = this.error;
		state.segments = this.segments;
		state.pFirst = this.pFirst;
		state.pLast = this.pLast;
		state.page = this.page.clone();
		return state;
	}
	,next: function() {
		if(this.lastSeg) {
			return 0;
		}
		if(this.nextSeg == -1) {
			this.lastSegWhich = this.segments.length - 1;
			try {
				this.page.start(this);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(((_g1) instanceof kha_audio2_ogg_vorbis_data_ReaderError)) {
					var e = _g1;
					this.lastSeg = true;
					this.error = e;
					return 0;
				} else {
					throw _g;
				}
			}
			if((this.page.flag & 1) == 0) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 171, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "next"}));
			}
		}
		var len = this.segments[this.nextSeg++];
		if(len < 255) {
			this.lastSeg = true;
			this.lastSegWhich = this.nextSeg - 1;
		}
		if(this.nextSeg >= this.segments.length) {
			this.nextSeg = -1;
		}
		if(this.bytesInSeg != 0) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 184, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "next"}));
		}
		this.bytesInSeg = len;
		return len;
	}
	,startPacket: function() {
		while(this.nextSeg == -1) {
			this.page.start(this);
			if((this.page.flag & 1) != 0) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 193, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "startPacket"}));
			}
		}
		this.lastSeg = false;
		this.validBits = 0;
		this.bytesInSeg = 0;
	}
	,maybeStartPacket: function() {
		if(this.nextSeg == -1) {
			var eof = false;
			var x;
			try {
				this.inputPosition += 1;
				x = this.input.readByte();
			} catch( _g ) {
				if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
					eof = true;
					x = 0;
				} else {
					throw _g;
				}
			}
			if(eof) {
				return false;
			}
			var tmp;
			var tmp1;
			var tmp2;
			if(x == 79) {
				this.inputPosition += 1;
				tmp2 = this.input.readByte() != 103;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				this.inputPosition += 1;
				tmp1 = this.input.readByte() != 103;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				this.inputPosition += 1;
				tmp = this.input.readByte() != 83;
			} else {
				tmp = true;
			}
			if(tmp) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 218, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "maybeStartPacket"}));
			}
			this.page.startWithoutCapturePattern(this);
		}
		this.startPacket();
		return true;
	}
	,readBits: function(n) {
		if(this.validBits < 0) {
			return 0;
		} else if(this.validBits < n) {
			if(n > 24) {
				return this.readBits(24) + (this.readBits(n - 24) << 24);
			} else {
				if(this.validBits == 0) {
					this.acc = 0;
				}
				while(true) {
					if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
						this.validBits = -1;
						break;
					} else {
						this.bytesInSeg--;
						this.inputPosition += 1;
						this.acc = this.acc + (this.input.readByte() << this.validBits);
						this.validBits += 8;
					}
					if(!(this.validBits < n)) {
						break;
					}
				}
				if(this.validBits < 0) {
					return 0;
				} else {
					var z = this.acc & (1 << n) - 1;
					this.acc = this.acc >>> n;
					this.validBits -= n;
					return z;
				}
			}
		} else {
			var z = this.acc & (1 << n) - 1;
			this.acc = this.acc >>> n;
			this.validBits -= n;
			return z;
		}
	}
	,readPacketRaw: function() {
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			return -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			return this.input.readByte();
		}
	}
	,readPacket: function() {
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		return x;
	}
	,flushPacket: function() {
		while(this.bytesInSeg != 0 || !this.lastSeg && this.next() != 0) {
			this.bytesInSeg--;
			this.inputPosition += 1;
			this.input.readByte();
		}
	}
	,vorbisValidate: function() {
		var header = new haxe_io_Bytes(new ArrayBuffer(6));
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[0] = x;
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[1] = x;
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[2] = x;
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[3] = x;
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[4] = x;
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[5] = x;
		if(header.toString() != "vorbis") {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
		}
	}
	,firstPageValidate: function() {
		if(this.segments.length != 1) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"segmentCount",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 308, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
		if(this.segments[0] != 30) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 311, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
	}
	,startFirstDecode: function() {
		this.firstAudioPageOffset = this.inputPosition;
		this.firstDecode = true;
	}
	,capturePattern: function() {
		var tmp;
		var tmp1;
		var tmp2;
		this.inputPosition += 1;
		if(this.input.readByte() == 79) {
			this.inputPosition += 1;
			tmp2 = this.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			this.inputPosition += 1;
			tmp1 = this.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			this.inputPosition += 1;
			tmp = this.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 324, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
	}
	,skip: function(len) {
		this.inputPosition += len;
		var this1 = new Array(len);
		var vec = this1;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
	}
	,prepHuffman: function() {
		if(this.validBits <= 24) {
			if(this.validBits == 0) {
				this.acc = 0;
			}
			while(true) {
				if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
					return;
				} else {
					this.bytesInSeg--;
					this.inputPosition += 1;
					this.acc = this.acc + (this.input.readByte() << this.validBits);
					this.validBits += 8;
				}
				if(!(this.validBits <= 24)) {
					break;
				}
			}
		}
	}
	,decode: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		var val;
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = this.decodeScalarRaw(c);
		}
		if(c.sparse) {
			val = c.sortedValues[val];
		}
		return val;
	}
	,decodeRaw: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				return -1;
			} else {
				return i;
			}
		} else {
			return this.decodeScalarRaw(c);
		}
	}
	,isLastByte: function() {
		if(this.bytesInSeg == 0) {
			return this.lastSeg;
		} else {
			return false;
		}
	}
	,finishDecodePacket: function(previousLength,n,r) {
		var left = r.left.start;
		var currentLocValid = false;
		var n2 = n >> 1;
		if(this.firstDecode) {
			this.currentLoc = -n2;
			this.discardSamplesDeferred = n - r.right.end;
			currentLocValid = true;
			this.firstDecode = false;
		} else if(this.discardSamplesDeferred != 0) {
			r.left.start += this.discardSamplesDeferred;
			left = r.left.start;
			this.discardSamplesDeferred = 0;
		} else {
			var tmp = previousLength == 0 && currentLocValid;
		}
		if(this.lastSegWhich == this.endSegWithKnownLoc) {
			if(currentLocValid && (this.page.flag & 4) != 0) {
				var currentEnd = this.knownLocForPacket - (n - r.right.end);
				if(currentEnd < this.currentLoc + r.right.end) {
					var len = currentEnd < this.currentLoc ? 0 : currentEnd - this.currentLoc;
					len += r.left.start;
					this.currentLoc += len;
					return { len : len, left : left, right : r.right.start};
				}
			}
			this.currentLoc = this.knownLocForPacket - (n2 - r.left.start);
			currentLocValid = true;
		}
		if(currentLocValid) {
			this.currentLoc += r.right.start - r.left.start;
		}
		return { len : r.right.end, left : left, right : r.right.start};
	}
	,readInt32: function() {
		this.inputPosition += 4;
		return this.input.readInt32();
	}
	,readByte: function() {
		this.inputPosition += 1;
		return this.input.readByte();
	}
	,read: function(n) {
		this.inputPosition += n;
		var this1 = new Array(n);
		var vec = this1;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		return vec;
	}
	,readBytes: function(n) {
		this.inputPosition += n;
		return this.input.read(n);
	}
	,readString: function(n) {
		this.inputPosition += n;
		return this.input.readString(n);
	}
	,getSampleNumber: function(seekFunc,inputLength) {
		var restoreOffset = this.inputPosition;
		var previousSafe = UInt.gte(inputLength,65536) && UInt.gte(inputLength - 65536,this.firstAudioPageOffset) ? inputLength - 65536 : this.firstAudioPageOffset;
		seekFunc(this.inputPosition = previousSafe);
		var end = 0;
		var last = false;
		var _g = this.findPage(seekFunc,inputLength);
		switch(_g._hx_index) {
		case 0:
			var l = _g.last;
			var e = _g.end;
			end = e;
			last = l;
			break;
		case 1:
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		var lastPageLoc = this.inputPosition;
		_hx_loop1: while(!last) {
			seekFunc(this.inputPosition = end);
			var _g = this.findPage(seekFunc,inputLength);
			switch(_g._hx_index) {
			case 0:
				var l = _g.last;
				var e = _g.end;
				end = e;
				last = l;
				break;
			case 1:
				break _hx_loop1;
			}
			previousSafe = lastPageLoc + 1;
			lastPageLoc = this.inputPosition;
		}
		seekFunc(this.inputPosition = lastPageLoc);
		this.inputPosition += 6;
		var this1 = new Array(6);
		var vec = this1;
		var _g = 0;
		var _g1 = 6;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		var vorbisHeader = vec;
		this.inputPosition += 4;
		var lo = this.input.readInt32();
		this.inputPosition += 4;
		var hi = this.input.readInt32();
		if(lo == -1 && hi == -1 || hi > 0) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 553, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		this.pLast = new kha_audio2_ogg_vorbis_data_ProbedPage();
		this.pLast.pageStart = lastPageLoc;
		this.pLast.pageEnd = end;
		this.pLast.lastDecodedSample = lo;
		this.pLast.firstDecodedSample = null;
		this.pLast.afterPreviousPageStart = previousSafe;
		seekFunc(this.inputPosition = restoreOffset);
		return lo;
	}
	,forcePageResync: function() {
		this.nextSeg = -1;
	}
	,setInputOffset: function(seekFunc,n) {
		seekFunc(this.inputPosition = n);
	}
	,findPage: function(seekFunc,inputLength) {
		try {
			while(true) {
				this.inputPosition += 1;
				var n = this.input.readByte();
				if(n == 79) {
					var retryLoc = this.inputPosition;
					if(retryLoc - 25 > inputLength) {
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
					}
					var tmp;
					var tmp1;
					this.inputPosition += 1;
					if(this.input.readByte() == 103) {
						this.inputPosition += 1;
						tmp1 = this.input.readByte() != 103;
					} else {
						tmp1 = true;
					}
					if(!tmp1) {
						this.inputPosition += 1;
						tmp = this.input.readByte() != 83;
					} else {
						tmp = true;
					}
					if(tmp) {
						continue;
					}
					var this1 = new Array(27);
					var header = this1;
					header[0] = 79;
					header[1] = 103;
					header[2] = 103;
					header[3] = 83;
					this.inputPosition += 1;
					header[4] = this.input.readByte();
					this.inputPosition += 1;
					header[5] = this.input.readByte();
					this.inputPosition += 1;
					header[6] = this.input.readByte();
					this.inputPosition += 1;
					header[7] = this.input.readByte();
					this.inputPosition += 1;
					header[8] = this.input.readByte();
					this.inputPosition += 1;
					header[9] = this.input.readByte();
					this.inputPosition += 1;
					header[10] = this.input.readByte();
					this.inputPosition += 1;
					header[11] = this.input.readByte();
					this.inputPosition += 1;
					header[12] = this.input.readByte();
					this.inputPosition += 1;
					header[13] = this.input.readByte();
					this.inputPosition += 1;
					header[14] = this.input.readByte();
					this.inputPosition += 1;
					header[15] = this.input.readByte();
					this.inputPosition += 1;
					header[16] = this.input.readByte();
					this.inputPosition += 1;
					header[17] = this.input.readByte();
					this.inputPosition += 1;
					header[18] = this.input.readByte();
					this.inputPosition += 1;
					header[19] = this.input.readByte();
					this.inputPosition += 1;
					header[20] = this.input.readByte();
					this.inputPosition += 1;
					header[21] = this.input.readByte();
					this.inputPosition += 1;
					header[22] = this.input.readByte();
					this.inputPosition += 1;
					header[23] = this.input.readByte();
					this.inputPosition += 1;
					header[24] = this.input.readByte();
					this.inputPosition += 1;
					header[25] = this.input.readByte();
					this.inputPosition += 1;
					header[26] = this.input.readByte();
					if(header[4] != 0) {
						seekFunc(this.inputPosition = retryLoc);
						continue;
					}
					var goal = header[22] + (header[23] << 8) + (header[24] << 16) + (header[25] << 24);
					header[22] = 0;
					header[23] = 0;
					header[24] = 0;
					header[25] = 0;
					var crc = 0;
					var _g = 0;
					while(_g < 27) {
						var i = _g++;
						crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[header[i] ^ crc >>> 24];
					}
					var len = 0;
					try {
						var _g1 = 0;
						var _g2 = header[26];
						while(_g1 < _g2) {
							var i1 = _g1++;
							this.inputPosition += 1;
							var s = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[s ^ crc >>> 24];
							len += s;
						}
						var _g3 = 0;
						var _g4 = len;
						while(_g3 < _g4) {
							var i2 = _g3++;
							this.inputPosition += 1;
							var byte = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[byte ^ crc >>> 24];
						}
					} catch( _g5 ) {
						if(((haxe_Exception.caught(_g5).unwrap()) instanceof haxe_io_Eof)) {
							return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
						} else {
							throw _g5;
						}
					}
					if(crc == goal) {
						var end = this.inputPosition;
						seekFunc(this.inputPosition = retryLoc - 1);
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.Found(end,(header[5] & 4) != 0);
					}
				}
			}
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
			} else {
				throw _g;
			}
		}
	}
	,analyzePage: function(seekFunc,h) {
		var z = new kha_audio2_ogg_vorbis_data_ProbedPage();
		var this1 = new Array(255);
		var packetType = this1;
		z.pageStart = this.inputPosition;
		this.inputPosition += 27;
		var this1 = new Array(27);
		var vec = this1;
		var _g = 0;
		var _g1 = 27;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		var pageHeader = vec;
		if(!(pageHeader[0] == 79 && pageHeader[1] == 103 && pageHeader[2] == 103 && pageHeader[3] == 83)) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 661, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "analyzePage"}));
		}
		var n = pageHeader[26];
		this.inputPosition += n;
		var this1 = new Array(n);
		var vec = this1;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		var lacing = vec;
		var len = 0;
		var _g = 0;
		var _g1 = pageHeader[26];
		while(_g < _g1) {
			var i = _g++;
			len += lacing[i];
		}
		z.pageEnd = z.pageStart + 27 + pageHeader[26] + len;
		z.lastDecodedSample = pageHeader[6] + (pageHeader[7] << 8) + (pageHeader[8] << 16) + (pageHeader[9] << 16);
		if((pageHeader[5] & 4) != 0) {
			z.firstDecodedSample = null;
			seekFunc(this.inputPosition = z.pageStart);
			return z;
		}
		var numPacket = 0;
		var packetStart = (pageHeader[5] & 1) == 0;
		var modeCount = h.modes.length;
		var _g = 0;
		var _g1 = pageHeader[26];
		while(_g < _g1) {
			var i = _g++;
			if(packetStart) {
				if(lacing[i] == 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				this.inputPosition += 1;
				var n = this.input.readByte();
				if((n & 1) != 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				n >>= 1;
				var n1 = modeCount - 1;
				var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
				var b = n1 < 16384 ? n1 < 16 ? log2_4[n1] : n1 < 512 ? 5 + log2_4[n1 >> 5] : 10 + log2_4[n1 >> 10] : n1 < 16777216 ? n1 < 524288 ? 15 + log2_4[n1 >> 15] : 20 + log2_4[n1 >> 20] : n1 < 536870912 ? 25 + log2_4[n1 >> 25] : n1 < -2147483648 ? 30 + log2_4[n1 >> 30] : 0;
				n &= (1 << b) - 1;
				if(n >= modeCount) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				packetType[numPacket++] = h.modes[n].blockflag;
				var len = lacing[i] - 1;
				this.inputPosition += len;
				var this1 = new Array(len);
				var vec = this1;
				var _g2 = 0;
				var _g3 = len;
				while(_g2 < _g3) {
					var i1 = _g2++;
					vec[i1] = this.input.readByte();
				}
			} else {
				var len1 = lacing[i];
				this.inputPosition += len1;
				var this2 = new Array(len1);
				var vec1 = this2;
				var _g4 = 0;
				var _g5 = len1;
				while(_g4 < _g5) {
					var i2 = _g4++;
					vec1[i2] = this.input.readByte();
				}
			}
			packetStart = lacing[i] < 255;
		}
		var samples = 0;
		if(numPacket > 1) {
			samples += packetType[numPacket - 1] ? h.blocksize1 : h.blocksize0;
		}
		var i = numPacket - 2;
		while(i >= 1) {
			--i;
			if(packetType[i]) {
				if(packetType[i + 1]) {
					samples += h.blocksize1 >> 1;
				} else {
					samples += (h.blocksize1 - h.blocksize0 >> 2) + (h.blocksize0 >> 1);
				}
			} else {
				samples += h.blocksize0 >> 1;
			}
			--i;
		}
		z.firstDecodedSample = z.lastDecodedSample - samples;
		seekFunc(this.inputPosition = z.pageStart);
		return z;
	}
	,decodeScalarRaw: function(c) {
		this.prepHuffman();
		if(!(c.sortedCodewords != null || c.codewords != null)) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 788, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"}));
		}
		var codewordLengths = c.codewordLengths;
		var codewords = c.codewords;
		var sortedCodewords = c.sortedCodewords;
		if(c.entries > 8 ? sortedCodewords != null : codewords != null) {
			var n = this.acc;
			n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
			n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
			n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
			n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
			var code = n >>> 16 | n << 16;
			var x = 0;
			var n = c.sortedEntries;
			while(n > 1) {
				var m = x + (n >> 1);
				if(UInt.gte(code,sortedCodewords[m])) {
					x = m;
					n -= n >> 1;
				} else {
					n >>= 1;
				}
			}
			if(!c.sparse) {
				x = c.sortedValues[x];
			}
			var len = codewordLengths[x];
			if(this.validBits >= len) {
				this.acc = this.acc >>> len;
				this.validBits -= len;
				return x;
			}
			this.validBits = 0;
			return -1;
		}
		if(c.sparse) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 830, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"}));
		}
		var _g = 0;
		var _g1 = c.entries;
		while(_g < _g1) {
			var i = _g++;
			var cl = codewordLengths[i];
			if(cl == 255) {
				continue;
			}
			if(codewords[i] == (this.acc & (1 << cl) - 1)) {
				if(this.validBits >= cl) {
					this.acc = this.acc >>> cl;
					this.validBits -= cl;
					return i;
				}
				this.validBits = 0;
				return -1;
			}
		}
		this.error = new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 847, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"});
		this.validBits = 0;
		return -1;
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecodeState
};
var kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult = $hxEnums["kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult"] = { __ename__ : true, __constructs__ : ["Found","NotFound"]
	,Found: ($_=function(end,last) { return {_hx_index:0,end:end,last:last,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}; },$_.__params__ = ["end","last"],$_)
	,NotFound: {_hx_index:1,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}
};
var kha_audio2_ogg_vorbis_VorbisDecoder = function(header,decodeState) {
	this.header = header;
	this.decodeState = decodeState;
	this.totalSample = null;
	this.currentSample = 0;
	this.previousLength = 0;
	var this1 = new Array(header.channel);
	this.channelBuffers = this1;
	var this1 = new Array(header.channel);
	this.previousWindow = this1;
	var this1 = new Array(header.channel);
	this.finalY = this1;
	var _g = 0;
	var _g1 = header.channel;
	while(_g < _g1) {
		var i = _g++;
		var this1 = this.channelBuffers;
		var this2 = new Array(header.blocksize1);
		var vec = this2;
		this1[i] = vec;
		var this3 = this.previousWindow;
		var this4 = new Array(header.blocksize1 / 2 | 0);
		var vec1 = this4;
		this3[i] = vec1;
		this.finalY[i] = [];
	}
	var this1 = new Array(2);
	this.a = this1;
	var this1 = new Array(2);
	this.b = this1;
	var this1 = new Array(2);
	this.c = this1;
	var this1 = new Array(2);
	this.window = this1;
	var this1 = new Array(2);
	this.bitReverseData = this1;
	this.initBlocksize(0,header.blocksize0);
	this.initBlocksize(1,header.blocksize1);
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecoder"] = kha_audio2_ogg_vorbis_VorbisDecoder;
kha_audio2_ogg_vorbis_VorbisDecoder.__name__ = true;
kha_audio2_ogg_vorbis_VorbisDecoder.start = function(input) {
	var decodeState = new kha_audio2_ogg_vorbis_VorbisDecodeState(input);
	var header = kha_audio2_ogg_vorbis_data_Header.read(decodeState);
	var decoder = new kha_audio2_ogg_vorbis_VorbisDecoder(header,decodeState);
	decodeState.startFirstDecode();
	decoder.pumpFirstFrame();
	return decoder;
};
kha_audio2_ogg_vorbis_VorbisDecoder.prototype = {
	previousWindow: null
	,previousLength: null
	,finalY: null
	,a: null
	,b: null
	,c: null
	,window: null
	,bitReverseData: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,header: null
	,currentSample: null
	,totalSample: null
	,decodeState: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		var b = this.header.sampleRate;
		if((UInt.toFloat(sampleRate) % UInt.toFloat(b) | 0) != 0) {
			throw haxe_Exception.thrown("Unsupported sampleRate : can't convert " + (this.header.sampleRate == null ? "null" : Std.string(UInt.toFloat(this.header.sampleRate))) + " to " + sampleRate);
		}
		if(channels % this.header.channel != 0) {
			throw haxe_Exception.thrown("Unsupported channels : can't convert " + this.header.channel + " to " + channels);
		}
		var b = this.header.sampleRate;
		var sampleRepeat = UInt.toFloat(sampleRate) / UInt.toFloat(b) | 0;
		var channelRepeat = channels / this.header.channel | 0;
		var n = 0;
		var len = Math.floor(samples / sampleRepeat);
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		var index = 0;
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			var _g = this.channelBufferStart;
			var _g1 = this.channelBufferStart + k;
			while(_g < _g1) {
				var j = _g++;
				var _g2 = 0;
				var _g3 = sampleRepeat;
				while(_g2 < _g3) {
					var sr = _g2++;
					var _g4 = 0;
					var _g5 = this.header.channel;
					while(_g4 < _g5) {
						var i = _g4++;
						var _g6 = 0;
						var _g7 = channelRepeat;
						while(_g6 < _g7) {
							var cr = _g6++;
							var value = this.channelBuffers[i][j];
							if(value > 1) {
								value = 1;
							} else if(value < -1) {
								value = -1;
							}
							if(useFloat) {
								output[index] = value;
								++index;
							}
						}
					}
				}
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		var _g = n;
		var _g1 = len;
		while(_g < _g1) {
			var j = _g++;
			var _g2 = 0;
			var _g3 = sampleRepeat;
			while(_g2 < _g3) {
				var sr = _g2++;
				var _g4 = 0;
				var _g5 = this.header.channel;
				while(_g4 < _g5) {
					var i = _g4++;
					var _g6 = 0;
					var _g7 = channelRepeat;
					while(_g6 < _g7) {
						var cr = _g6++;
						if(useFloat) {
							output[index] = 0;
							++index;
						}
					}
				}
			}
		}
		this.currentSample += len;
		return len * sampleRepeat;
	}
	,skipSamples: function(len) {
		var n = 0;
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		this.currentSample += len;
		return len;
	}
	,setupSampleNumber: function(seekFunc,inputLength) {
		if(this.totalSample == null) {
			this.totalSample = this.decodeState.getSampleNumber(seekFunc,inputLength);
		}
	}
	,seek: function(seekFunc,inputLength,sampleNumber) {
		if(this.currentSample == sampleNumber) {
			return;
		}
		if(this.totalSample == null) {
			this.setupSampleNumber(seekFunc,inputLength);
			if(this.totalSample == 0) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 187, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
		if(sampleNumber < 0) {
			sampleNumber = 0;
		}
		var p0 = this.decodeState.pFirst;
		var p1 = this.decodeState.pLast;
		if(sampleNumber >= p1.lastDecodedSample) {
			sampleNumber = p1.lastDecodedSample - 1;
		}
		if(sampleNumber < p0.lastDecodedSample) {
			this.seekFrameFromPage(seekFunc,p0.pageStart,0,sampleNumber);
		} else {
			var attempts = 0;
			while(p0.pageEnd < p1.pageStart) {
				var startOffset = p0.pageEnd;
				var endOffset = p1.afterPreviousPageStart;
				var startSample = p0.lastDecodedSample;
				var endSample = p1.lastDecodedSample;
				if(startSample == null || endSample == null) {
					throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 219, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				if(UInt.gt(endOffset,startOffset + 4000)) {
					endOffset = endOffset - 4000;
				}
				var probe = startOffset + Math.floor(UInt.toFloat(endOffset - startOffset) / UInt.toFloat(endSample - startSample) * (sampleNumber - startSample));
				if(attempts >= 4) {
					var probe2 = startOffset + (endOffset - startOffset >>> 1);
					probe = attempts >= 8 ? probe2 : UInt.gt(probe2,probe) ? probe + (probe2 - probe >>> 1) : probe2 + (probe - probe2 >>> 1);
				}
				++attempts;
				seekFunc(this.decodeState.inputPosition = probe);
				var _g = this.decodeState.findPage(seekFunc,inputLength);
				switch(_g._hx_index) {
				case 0:
					var _g1 = _g.last;
					var _g2 = _g.end;
					break;
				case 1:
					throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 249, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				var q = this.decodeState.analyzePage(seekFunc,this.header);
				if(q == null) {
					throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 255, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				q.afterPreviousPageStart = probe;
				if(q.pageStart == p1.pageStart) {
					p1 = q;
					continue;
				}
				if(sampleNumber < q.lastDecodedSample) {
					p1 = q;
				} else {
					p0 = q;
				}
			}
			if(p0.lastDecodedSample <= sampleNumber && sampleNumber < p1.lastDecodedSample) {
				this.seekFrameFromPage(seekFunc,p1.pageStart,p0.lastDecodedSample,sampleNumber);
			} else {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 275, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
	}
	,seekFrameFromPage: function(seekFunc,pageStart,firstSample,targetSample) {
		var frame = 0;
		var frameStart = firstSample;
		seekFunc(this.decodeState.inputPosition = pageStart);
		this.decodeState.nextSeg = -1;
		var leftEnd = 0;
		var leftStart = 0;
		var prevState = null;
		var lastState = null;
		while(true) {
			prevState = lastState;
			lastState = this.decodeState.clone(seekFunc);
			var initialResult = this.decodeInitial();
			if(initialResult == null) {
				lastState = prevState;
				break;
			}
			leftStart = initialResult.left.start;
			leftEnd = initialResult.left.end;
			var start = frame == 0 ? leftEnd : leftStart;
			if(targetSample < frameStart + initialResult.right.start - start) {
				break;
			}
			var _this = this.decodeState;
			while(_this.bytesInSeg != 0 || !_this.lastSeg && _this.next() != 0) {
				_this.bytesInSeg--;
				_this.inputPosition += 1;
				_this.input.readByte();
			}
			frameStart += initialResult.right.start - start;
			++frame;
		}
		this.decodeState = lastState;
		seekFunc(this.decodeState.inputPosition);
		this.previousLength = 0;
		this.pumpFirstFrame();
		this.currentSample = frameStart;
		this.skipSamples(targetSample - frameStart);
	}
	,clone: function(seekFunc) {
		var decoder = Object.create(kha_audio2_ogg_vorbis_VorbisDecoder.prototype);
		decoder.currentSample = this.currentSample;
		decoder.totalSample = this.totalSample;
		decoder.previousLength = this.previousLength;
		decoder.channelBufferStart = this.channelBufferStart;
		decoder.channelBufferEnd = this.channelBufferEnd;
		decoder.a = this.a;
		decoder.b = this.b;
		decoder.c = this.c;
		decoder.window = this.window;
		decoder.bitReverseData = this.bitReverseData;
		decoder.header = this.header;
		decoder.decodeState = this.decodeState.clone(seekFunc);
		var this1 = new Array(this.header.channel);
		decoder.channelBuffers = this1;
		var this1 = new Array(this.header.channel);
		decoder.previousWindow = this1;
		var this1 = new Array(this.header.channel);
		decoder.finalY = this1;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			decoder.channelBuffers[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.channelBuffers[i]);
			decoder.previousWindow[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.previousWindow[i]);
			decoder.finalY[i] = Lambda.array(this.finalY[i]);
		}
		return decoder;
	}
	,ensurePosition: function(seekFunc) {
		seekFunc(this.decodeState.inputPosition);
	}
	,getFrameFloat: function() {
		var result = this.decodePacket();
		if(result == null) {
			this.channelBufferStart = this.channelBufferEnd = 0;
			return 0;
		}
		var len = this.finishFrame(result);
		this.channelBufferStart = result.left;
		this.channelBufferEnd = result.left + len;
		return len;
	}
	,pumpFirstFrame: function() {
		this.finishFrame(this.decodePacket());
	}
	,finishFrame: function(r) {
		var len = r.len;
		var right = r.right;
		var left = r.left;
		if(this.previousLength != 0) {
			var n = this.previousLength;
			var w = this.getWindow(n);
			var _g = 0;
			var _g1 = this.header.channel;
			while(_g < _g1) {
				var i = _g++;
				var cb = this.channelBuffers[i];
				var pw = this.previousWindow[i];
				var _g2 = 0;
				var _g3 = n;
				while(_g2 < _g3) {
					var j = _g2++;
					cb[left + j] = cb[left + j] * w[j] + pw[j] * w[n - 1 - j];
				}
			}
		}
		var prev = this.previousLength;
		this.previousLength = len - right;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			var pw = this.previousWindow[i];
			var cb = this.channelBuffers[i];
			var _g2 = 0;
			var _g3 = len - right;
			while(_g2 < _g3) {
				var j = _g2++;
				pw[j] = cb[right + j];
			}
		}
		if(prev == 0) {
			return 0;
		}
		if(len < right) {
			right = len;
		}
		return right - left;
	}
	,getWindow: function(len) {
		len <<= 1;
		if(len == this.header.blocksize0) {
			return this.window[0];
		} else if(len == this.header.blocksize1) {
			return this.window[1];
		} else {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 466, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "getWindow"}));
		}
	}
	,initBlocksize: function(bs,n) {
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = this.a;
		var this2 = new Array(n2);
		this1[bs] = this2;
		var this1 = this.b;
		var this2 = new Array(n2);
		this1[bs] = this2;
		var this1 = this.c;
		var this2 = new Array(n4);
		this1[bs] = this2;
		var this1 = this.window;
		var this2 = new Array(n2);
		this1[bs] = this2;
		var this1 = this.bitReverseData;
		var this2 = new Array(n8);
		this1[bs] = this2;
		kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors(n,this.a[bs],this.b[bs],this.c[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeWindow(n,this.window[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse(n,this.bitReverseData[bs]);
	}
	,inverseMdct: function(buffer,n,blocktype) {
		var bt = blocktype ? 1 : 0;
		var a = this.a[bt];
		var b = this.b[bt];
		var c = this.c[bt];
		var bitReverse = this.bitReverseData[bt];
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = new Array(n2);
		var buf2 = this1;
		var dOffset = n2 - 2;
		var aaOffset = 0;
		var eOffset = 0;
		var eStopOffset = n2;
		while(eOffset != eStopOffset) {
			buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
			buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset += 4;
		}
		eOffset = n2 - 3;
		while(dOffset >= 0) {
			buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
			buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset -= 4;
		}
		var u = buffer;
		var v = buf2;
		var aaOffset = n2 - 8;
		var eOffset0 = n4;
		var eOffset1 = 0;
		var dOffset0 = n4;
		var dOffset1 = 0;
		while(aaOffset >= 0) {
			var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
			var v40_20 = v[eOffset0] - v[eOffset1];
			u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
			u[dOffset0] = v[eOffset0] + v[eOffset1];
			u[dOffset1 + 1] = v41_21 * a[aaOffset + 4] - v40_20 * a[aaOffset + 5];
			u[dOffset1] = v40_20 * a[aaOffset + 4] + v41_21 * a[aaOffset + 5];
			v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
			v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
			u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
			u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
			u[dOffset1 + 3] = v41_21 * a[aaOffset] - v40_20 * a[aaOffset + 1];
			u[dOffset1 + 2] = v40_20 * a[aaOffset] + v41_21 * a[aaOffset + 1];
			aaOffset -= 8;
			dOffset0 += 4;
			dOffset1 += 4;
			eOffset0 += 4;
			eOffset1 += 4;
		}
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
		var i_off = n2 - 1 - n4 * 0;
		var eeOffset0 = i_off;
		var eeOffset2 = i_off + -(n >> 3);
		var aOffset = 0;
		var i = (n >> 4 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eeOffset0] - u[eeOffset2];
			var k01_21 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
			u[eeOffset0] += u[eeOffset2];
			u[eeOffset0 + (-1)] += u[eeOffset2 + (-1)];
			u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
			k01_21 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
			u[eeOffset0 + (-2)] += u[eeOffset2 + (-2)];
			u[eeOffset0 + (-3)] += u[eeOffset2 + (-3)];
			u[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
			k01_21 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
			u[eeOffset0 + (-4)] += u[eeOffset2 + (-4)];
			u[eeOffset0 + (-5)] += u[eeOffset2 + (-5)];
			u[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
			k01_21 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
			u[eeOffset0 + (-6)] += u[eeOffset2 + (-6)];
			u[eeOffset0 + (-7)] += u[eeOffset2 + (-7)];
			u[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			eeOffset0 -= 8;
			eeOffset2 -= 8;
		}
		var i_off = n2 - 1 - n4;
		var eeOffset0 = i_off;
		var eeOffset2 = i_off + -(n >> 3);
		var aOffset = 0;
		var i = (n >> 4 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eeOffset0] - u[eeOffset2];
			var k01_21 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
			u[eeOffset0] += u[eeOffset2];
			u[eeOffset0 + (-1)] += u[eeOffset2 + (-1)];
			u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
			k01_21 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
			u[eeOffset0 + (-2)] += u[eeOffset2 + (-2)];
			u[eeOffset0 + (-3)] += u[eeOffset2 + (-3)];
			u[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
			k01_21 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
			u[eeOffset0 + (-4)] += u[eeOffset2 + (-4)];
			u[eeOffset0 + (-5)] += u[eeOffset2 + (-5)];
			u[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
			k01_21 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
			u[eeOffset0 + (-6)] += u[eeOffset2 + (-6)];
			u[eeOffset0 + (-7)] += u[eeOffset2 + (-7)];
			u[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			eeOffset0 -= 8;
			eeOffset2 -= 8;
		}
		var d0 = n2 - 1 - n8 * 0;
		var aOffset = 0;
		var eOffset0 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i = (n >> 5 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eOffset0] - u[eOffset2];
			var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
			u[eOffset0] += u[eOffset2];
			u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
			u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
			k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
			u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
			u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
			u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
			k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
			u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
			u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
			u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
			k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
			u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
			u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
			u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			eOffset0 -= 8;
			eOffset2 -= 8;
			aOffset += 16;
		}
		var d0 = n2 - 1 - n8;
		var aOffset = 0;
		var eOffset0 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i = (n >> 5 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eOffset0] - u[eOffset2];
			var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
			u[eOffset0] += u[eOffset2];
			u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
			u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
			k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
			u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
			u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
			u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
			k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
			u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
			u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
			u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
			k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
			u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
			u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
			u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			eOffset0 -= 8;
			eOffset2 -= 8;
			aOffset += 16;
		}
		var d0 = n2 - 1 - n8 * 2;
		var aOffset = 0;
		var eOffset0 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i = (n >> 5 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eOffset0] - u[eOffset2];
			var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
			u[eOffset0] += u[eOffset2];
			u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
			u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
			k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
			u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
			u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
			u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
			k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
			u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
			u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
			u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
			k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
			u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
			u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
			u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			eOffset0 -= 8;
			eOffset2 -= 8;
			aOffset += 16;
		}
		var d0 = n2 - 1 - n8 * 3;
		var aOffset = 0;
		var eOffset0 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i = (n >> 5 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eOffset0] - u[eOffset2];
			var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
			u[eOffset0] += u[eOffset2];
			u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
			u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
			k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
			u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
			u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
			u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
			k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
			u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
			u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
			u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 16;
			k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
			k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
			u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
			u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
			u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			eOffset0 -= 8;
			eOffset2 -= 8;
			aOffset += 16;
		}
		var _g = 2;
		var _g1 = ld - 3 >> 1;
		while(_g < _g1) {
			var l = _g++;
			var k0 = n >> l + 2;
			var k0_2 = k0 >> 1;
			var lim = 1 << l + 1;
			var _g2 = 0;
			var _g3 = lim;
			while(_g2 < _g3) {
				var i = _g2++;
				var d0 = n2 - 1 - k0 * i;
				var k1 = 1 << l + 3;
				var aOffset = 0;
				var eOffset0 = d0;
				var eOffset2 = d0 + -k0_2;
				var i1 = (n >> l + 4 >> 2) + 1;
				while(--i1 > 0) {
					var k00_20 = u[eOffset0] - u[eOffset2];
					var k01_21 = u[eOffset0 + (-1)] - u[eOffset2 + (-1)];
					u[eOffset0] += u[eOffset2];
					u[eOffset0 + (-1)] += u[eOffset2 + (-1)];
					u[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
					u[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
					aOffset += k1;
					k00_20 = u[eOffset0 + (-2)] - u[eOffset2 + (-2)];
					k01_21 = u[eOffset0 + (-3)] - u[eOffset2 + (-3)];
					u[eOffset0 + (-2)] += u[eOffset2 + (-2)];
					u[eOffset0 + (-3)] += u[eOffset2 + (-3)];
					u[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
					u[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
					aOffset += k1;
					k00_20 = u[eOffset0 + (-4)] - u[eOffset2 + (-4)];
					k01_21 = u[eOffset0 + (-5)] - u[eOffset2 + (-5)];
					u[eOffset0 + (-4)] += u[eOffset2 + (-4)];
					u[eOffset0 + (-5)] += u[eOffset2 + (-5)];
					u[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
					u[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
					aOffset += k1;
					k00_20 = u[eOffset0 + (-6)] - u[eOffset2 + (-6)];
					k01_21 = u[eOffset0 + (-7)] - u[eOffset2 + (-7)];
					u[eOffset0 + (-6)] += u[eOffset2 + (-6)];
					u[eOffset0 + (-7)] += u[eOffset2 + (-7)];
					u[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
					u[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
					eOffset0 -= 8;
					eOffset2 -= 8;
					aOffset += k1;
				}
			}
		}
		var _g = ld - 3 >> 1;
		var _g1 = ld - 6;
		while(_g < _g1) {
			var l = _g++;
			var k0 = n >> l + 2;
			var k1 = 1 << l + 3;
			var k0_2 = k0 >> 1;
			var rlim = n >> l + 6;
			var lim = 1 << l + 1;
			var aOffset = 0;
			var i_off = n2 - 1;
			var r = rlim + 1;
			while(--r > 0) {
				var A0 = a[aOffset];
				var A1 = a[aOffset + 1];
				var A2 = a[aOffset + k1];
				var A3 = a[aOffset + k1 + 1];
				var A4 = a[aOffset + k1 * 2];
				var A5 = a[aOffset + k1 * 2 + 1];
				var A6 = a[aOffset + k1 * 3];
				var A7 = a[aOffset + k1 * 3 + 1];
				var eeOffset0 = i_off;
				var eeOffset2 = i_off + -k0_2;
				var i = lim + 1;
				while(--i > 0) {
					var k00 = u[eeOffset0] - u[eeOffset2];
					var k11 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
					u[eeOffset0] += u[eeOffset2];
					u[eeOffset0 + (-1)] += u[eeOffset2 + (-1)];
					u[eeOffset2] = k00 * A0 - k11 * A1;
					u[eeOffset2 + (-1)] = k11 * A0 + k00 * A1;
					k00 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
					k11 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
					u[eeOffset0 + (-2)] += u[eeOffset2 + (-2)];
					u[eeOffset0 + (-3)] += u[eeOffset2 + (-3)];
					u[eeOffset2 + (-2)] = k00 * A2 - k11 * A3;
					u[eeOffset2 + (-3)] = k11 * A2 + k00 * A3;
					k00 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
					k11 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
					u[eeOffset0 + (-4)] += u[eeOffset2 + (-4)];
					u[eeOffset0 + (-5)] += u[eeOffset2 + (-5)];
					u[eeOffset2 + (-4)] = k00 * A4 - k11 * A5;
					u[eeOffset2 + (-5)] = k11 * A4 + k00 * A5;
					k00 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
					k11 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
					u[eeOffset0 + (-6)] += u[eeOffset2 + (-6)];
					u[eeOffset0 + (-7)] += u[eeOffset2 + (-7)];
					u[eeOffset2 + (-6)] = k00 * A6 - k11 * A7;
					u[eeOffset2 + (-7)] = k11 * A6 + k00 * A7;
					eeOffset0 -= k0;
					eeOffset2 -= k0;
				}
				aOffset += k1 * 4;
				i_off -= 8;
			}
		}
		var i_off = n2 - 1;
		var A2 = a[n >> 3];
		var zOffset = i_off;
		var baseOffset = i_off - 16 * (n >> 5);
		while(zOffset > baseOffset) {
			var t0 = u[zOffset];
			var t1 = u[zOffset + (-8)];
			u[zOffset + (-8)] = t0 - t1;
			u[zOffset] = t0 + t1;
			t0 = u[zOffset + (-1)];
			t1 = u[zOffset + (-9)];
			u[zOffset + (-9)] = t0 - t1;
			u[zOffset + (-1)] = t0 + t1;
			t0 = u[zOffset + (-2)];
			t1 = u[zOffset + (-10)];
			var k00 = t0 - t1;
			u[zOffset + (-2)] = t0 + t1;
			t0 = u[zOffset + (-3)];
			t1 = u[zOffset + (-11)];
			var k11 = t0 - t1;
			u[zOffset + (-3)] = t0 + t1;
			u[zOffset + (-10)] = (k00 + k11) * A2;
			u[zOffset + (-11)] = (k11 - k00) * A2;
			t0 = u[zOffset + (-4)];
			t1 = u[zOffset + (-12)];
			k00 = t1 - t0;
			u[zOffset + (-4)] = t0 + t1;
			t0 = u[zOffset + (-5)];
			t1 = u[zOffset + (-13)];
			k11 = t0 - t1;
			u[zOffset + (-5)] = t0 + t1;
			u[zOffset + (-12)] = k11;
			u[zOffset + (-13)] = k00;
			t0 = u[zOffset + (-6)];
			t1 = u[zOffset + (-14)];
			k00 = t1 - t0;
			u[zOffset + (-6)] = t0 + t1;
			t0 = u[zOffset + (-7)];
			t1 = u[zOffset + (-15)];
			k11 = t0 - t1;
			u[zOffset + (-7)] = t0 + t1;
			u[zOffset + (-14)] = (k00 + k11) * A2;
			u[zOffset + (-15)] = (k00 - k11) * A2;
			var t01 = u[zOffset];
			var t11 = u[zOffset + (-4)];
			var k001 = t01 - t11;
			var y0 = t01 + t11;
			t01 = u[zOffset + (-2)];
			t11 = u[zOffset + (-6)];
			var y2 = t01 + t11;
			var k22 = t01 - t11;
			u[zOffset] = y0 + y2;
			u[zOffset + (-2)] = y0 - y2;
			var k33 = u[zOffset + (-3)] - u[zOffset + (-7)];
			u[zOffset + (-4)] = k001 + k33;
			u[zOffset + (-6)] = k001 - k33;
			t01 = u[zOffset + (-1)];
			t11 = u[zOffset + (-5)];
			var k111 = t01 - t11;
			var y1 = t01 + t11;
			var y3 = u[zOffset + (-3)] + u[zOffset + (-7)];
			u[zOffset + (-1)] = y1 + y3;
			u[zOffset + (-3)] = y1 - y3;
			u[zOffset + (-5)] = k111 - k22;
			u[zOffset + (-7)] = k111 + k22;
			var zOffset1 = zOffset - 8;
			var t02 = u[zOffset1];
			var t12 = u[zOffset1 + (-4)];
			var k002 = t02 - t12;
			var y01 = t02 + t12;
			t02 = u[zOffset1 + (-2)];
			t12 = u[zOffset1 + (-6)];
			var y21 = t02 + t12;
			var k221 = t02 - t12;
			u[zOffset1] = y01 + y21;
			u[zOffset1 + (-2)] = y01 - y21;
			var k331 = u[zOffset1 + (-3)] - u[zOffset1 + (-7)];
			u[zOffset1 + (-4)] = k002 + k331;
			u[zOffset1 + (-6)] = k002 - k331;
			t02 = u[zOffset1 + (-1)];
			t12 = u[zOffset1 + (-5)];
			var k112 = t02 - t12;
			var y11 = t02 + t12;
			var y31 = u[zOffset1 + (-3)] + u[zOffset1 + (-7)];
			u[zOffset1 + (-1)] = y11 + y31;
			u[zOffset1 + (-3)] = y11 - y31;
			u[zOffset1 + (-5)] = k112 - k221;
			u[zOffset1 + (-7)] = k112 + k221;
			zOffset -= 16;
		}
		var brOffset = 0;
		var dOffset0 = n4 - 4;
		var dOffset1 = n2 - 4;
		while(dOffset0 >= 0) {
			var k4 = bitReverse[brOffset];
			v[dOffset1 + 3] = u[k4];
			v[dOffset1 + 2] = u[k4 + 1];
			v[dOffset0 + 3] = u[k4 + 2];
			v[dOffset0 + 2] = u[k4 + 3];
			k4 = bitReverse[brOffset + 1];
			v[dOffset1 + 1] = u[k4];
			v[dOffset1] = u[k4 + 1];
			v[dOffset0 + 1] = u[k4 + 2];
			v[dOffset0] = u[k4 + 3];
			dOffset0 -= 4;
			dOffset1 -= 4;
			brOffset += 2;
		}
		var cOffset = 0;
		var dOffset = 0;
		var eOffset = n2 - 4;
		while(dOffset < eOffset) {
			var a02 = v[dOffset] - v[eOffset + 2];
			var a11 = v[dOffset + 1] + v[eOffset + 3];
			var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
			var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
			var b2 = v[dOffset] + v[eOffset + 2];
			var b3 = v[dOffset + 1] - v[eOffset + 3];
			v[dOffset] = b2 + b0;
			v[dOffset + 1] = b3 + b1;
			v[eOffset + 2] = b2 - b0;
			v[eOffset + 3] = b1 - b3;
			a02 = v[dOffset + 2] - v[eOffset];
			a11 = v[dOffset + 3] + v[eOffset + 1];
			b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
			b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
			b2 = v[dOffset + 2] + v[eOffset];
			b3 = v[dOffset + 3] - v[eOffset + 1];
			v[dOffset + 2] = b2 + b0;
			v[dOffset + 3] = b3 + b1;
			v[eOffset] = b2 - b0;
			v[eOffset + 1] = b1 - b3;
			cOffset += 4;
			dOffset += 4;
			eOffset -= 4;
		}
		var bOffset = n2 - 8;
		var eOffset = n2 - 8;
		var dOffset0 = 0;
		var dOffset1 = n2 - 4;
		var dOffset2 = n2;
		var dOffset3 = n - 4;
		while(eOffset >= 0) {
			var p3 = buf2[eOffset + 6] * b[bOffset + 7] - buf2[eOffset + 7] * b[bOffset + 6];
			var p2 = -buf2[eOffset + 6] * b[bOffset + 6] - buf2[eOffset + 7] * b[bOffset + 7];
			buffer[dOffset0] = p3;
			buffer[dOffset1 + 3] = -p3;
			buffer[dOffset2] = p2;
			buffer[dOffset3 + 3] = p2;
			var p1 = buf2[eOffset + 4] * b[bOffset + 5] - buf2[eOffset + 5] * b[bOffset + 4];
			var p0 = -buf2[eOffset + 4] * b[bOffset + 4] - buf2[eOffset + 5] * b[bOffset + 5];
			buffer[dOffset0 + 1] = p1;
			buffer[dOffset1 + 2] = -p1;
			buffer[dOffset2 + 1] = p0;
			buffer[dOffset3 + 2] = p0;
			p3 = buf2[eOffset + 2] * b[bOffset + 3] - buf2[eOffset + 3] * b[bOffset + 2];
			p2 = -buf2[eOffset + 2] * b[bOffset + 2] - buf2[eOffset + 3] * b[bOffset + 3];
			buffer[dOffset0 + 2] = p3;
			buffer[dOffset1 + 1] = -p3;
			buffer[dOffset2 + 2] = p2;
			buffer[dOffset3 + 1] = p2;
			p1 = buf2[eOffset] * b[bOffset + 1] - buf2[eOffset + 1] * b[bOffset];
			p0 = -buf2[eOffset] * b[bOffset] - buf2[eOffset + 1] * b[bOffset + 1];
			buffer[dOffset0 + 3] = p1;
			buffer[dOffset1] = -p1;
			buffer[dOffset2 + 3] = p0;
			buffer[dOffset3] = p0;
			bOffset -= 8;
			eOffset -= 8;
			dOffset0 += 4;
			dOffset2 += 4;
			dOffset1 -= 4;
			dOffset3 -= 4;
		}
	}
	,decodePacket: function() {
		var result = this.decodeInitial();
		if(result == null) {
			return null;
		}
		var rest = this.decodePacketRest(result);
		return rest;
	}
	,decodeInitial: function() {
		this.channelBufferStart = this.channelBufferEnd = 0;
		while(true) {
			if(!this.decodeState.maybeStartPacket()) {
				return null;
			}
			if(this.decodeState.readBits(1) != 0) {
				while(true) {
					var _this = this.decodeState;
					var x;
					if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
						x = -1;
					} else {
						_this.bytesInSeg--;
						_this.inputPosition += 1;
						x = _this.input.readByte();
					}
					_this.validBits = 0;
					if(!(-1 != x)) {
						break;
					}
				}
				continue;
			}
			break;
		}
		var n = this.header.modes.length - 1;
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var i = this.decodeState.readBits(n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0);
		if(i == -1 || i >= this.header.modes.length) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodeInitial"}));
		}
		var m = this.header.modes[i];
		var n;
		var prev;
		var next;
		if(m.blockflag) {
			n = this.header.blocksize1;
			prev = this.decodeState.readBits(1);
			next = this.decodeState.readBits(1);
		} else {
			next = 0;
			prev = next;
			n = this.header.blocksize0;
		}
		var windowCenter = n >> 1;
		return { mode : i, left : m.blockflag && prev == 0 ? { start : n - this.header.blocksize0 >> 2, end : n + this.header.blocksize0 >> 2} : { start : 0, end : windowCenter}, right : m.blockflag && next == 0 ? { start : n * 3 - this.header.blocksize0 >> 2, end : n * 3 + this.header.blocksize0 >> 2} : { start : windowCenter, end : n}};
	}
	,decodePacketRest: function(r) {
		var len = 0;
		var m = this.header.modes[r.mode];
		var this1 = new Array(256);
		var zeroChannel = this1;
		var this1 = new Array(256);
		var reallyZeroChannel = this1;
		var n = m.blockflag ? this.header.blocksize1 : this.header.blocksize0;
		var map = this.header.mapping[m.mapping];
		var n2 = n >> 1;
		var rangeList = [256,128,86,64];
		var codebooks = this.header.codebooks;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			var s = map.chan[i].mux;
			zeroChannel[i] = false;
			var floor = this.header.floorConfig[map.submapFloor[s]];
			if(floor.type == 0) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 581, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodePacketRest"}));
			} else {
				var g = floor.floor1;
				if(this.decodeState.readBits(1) != 0) {
					var fy = [];
					var this1 = new Array(256);
					var step2Flag = this1;
					var range = rangeList[g.floor1Multiplier - 1];
					var offset = 2;
					fy = this.finalY[i];
					var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					fy[0] = this.decodeState.readBits((range < 16384 ? range < 16 ? log2_4[range] : range < 512 ? 5 + log2_4[range >> 5] : 10 + log2_4[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_4[range >> 15] : 20 + log2_4[range >> 20] : range < 536870912 ? 25 + log2_4[range >> 25] : range < -2147483648 ? 30 + log2_4[range >> 30] : 0) - 1);
					var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					fy[1] = this.decodeState.readBits((range < 16384 ? range < 16 ? log2_41[range] : range < 512 ? 5 + log2_41[range >> 5] : 10 + log2_41[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_41[range >> 15] : 20 + log2_41[range >> 20] : range < 536870912 ? 25 + log2_41[range >> 25] : range < -2147483648 ? 30 + log2_41[range >> 30] : 0) - 1);
					var _g2 = 0;
					var _g3 = g.partitions;
					while(_g2 < _g3) {
						var j = _g2++;
						var pclass = g.partitionClassList[j];
						var cdim = g.classDimensions[pclass];
						var cbits = g.classSubclasses[pclass];
						var csub = (1 << cbits) - 1;
						var cval = 0;
						if(cbits != 0) {
							var c = codebooks[g.classMasterbooks[pclass]];
							var _this = this.decodeState;
							if(_this.validBits < 10) {
								_this.prepHuffman();
							}
							var i1 = c.fastHuffman[_this.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								_this.acc = _this.acc >>> l;
								_this.validBits -= l;
								if(_this.validBits < 0) {
									_this.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = _this.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							cval = val;
						}
						var books = g.subclassBooks[pclass];
						var _g4 = 0;
						var _g5 = cdim;
						while(_g4 < _g5) {
							var k = _g4++;
							var book = books[cval & csub];
							cval >>= cbits;
							var tmp = offset++;
							var tmp1;
							if(book >= 0) {
								var _this1 = this.decodeState;
								var c1 = codebooks[book];
								if(_this1.validBits < 10) {
									_this1.prepHuffman();
								}
								var i2 = c1.fastHuffman[_this1.acc & 1023];
								var val1;
								if(i2 >= 0) {
									var l1 = c1.codewordLengths[i2];
									_this1.acc = _this1.acc >>> l1;
									_this1.validBits -= l1;
									if(_this1.validBits < 0) {
										_this1.validBits = 0;
										val1 = -1;
									} else {
										val1 = i2;
									}
								} else {
									val1 = _this1.decodeScalarRaw(c1);
								}
								if(c1.sparse) {
									val1 = c1.sortedValues[val1];
								}
								tmp1 = val1;
							} else {
								tmp1 = 0;
							}
							fy[tmp] = tmp1;
						}
					}
					if(this.decodeState.validBits == -1) {
						zeroChannel[i] = true;
						continue;
					}
					step2Flag[0] = step2Flag[1] = true;
					var naighbors = g.neighbors;
					var xlist = g.xlist;
					var _g6 = 2;
					var _g7 = g.values;
					while(_g6 < _g7) {
						var j1 = _g6++;
						var low = naighbors[j1][0];
						var high = naighbors[j1][1];
						var x0 = xlist[low];
						var y0 = fy[low];
						var dy = fy[high] - y0;
						var adx = xlist[high] - x0;
						var err = Math.abs(dy) * (xlist[j1] - x0);
						var off = err / adx | 0;
						var lowroom = dy < 0 ? y0 - off : y0 + off;
						var val2 = fy[j1];
						var highroom = range - lowroom;
						var room = highroom < lowroom ? highroom * 2 : lowroom * 2;
						if(val2 != 0) {
							step2Flag[low] = step2Flag[high] = true;
							step2Flag[j1] = true;
							if(val2 >= room) {
								if(highroom > lowroom) {
									fy[j1] = val2 - lowroom + lowroom;
								} else {
									fy[j1] = lowroom - val2 + highroom - 1;
								}
							} else if((val2 & 1) != 0) {
								fy[j1] = lowroom - (val2 + 1 >> 1);
							} else {
								fy[j1] = lowroom + (val2 >> 1);
							}
						} else {
							step2Flag[j1] = false;
							fy[j1] = lowroom;
						}
					}
					var _g8 = 0;
					var _g9 = g.values;
					while(_g8 < _g9) {
						var j2 = _g8++;
						if(!step2Flag[j2]) {
							fy[j2] = -1;
						}
					}
				} else {
					zeroChannel[i] = true;
				}
			}
		}
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			reallyZeroChannel[i] = zeroChannel[i];
		}
		var _g = 0;
		var _g1 = map.couplingSteps;
		while(_g < _g1) {
			var i = _g++;
			if(!zeroChannel[map.chan[i].magnitude] || !zeroChannel[map.chan[i].angle]) {
				zeroChannel[map.chan[i].magnitude] = zeroChannel[map.chan[i].angle] = false;
			}
		}
		var _g = 0;
		var _g1 = map.submaps;
		while(_g < _g1) {
			var i = _g++;
			var this1 = new Array(this.header.channel);
			var residueBuffers = this1;
			var this2 = new Array(256);
			var doNotDecode = this2;
			var ch = 0;
			var _g2 = 0;
			var _g3 = this.header.channel;
			while(_g2 < _g3) {
				var j = _g2++;
				if(map.chan[j].mux == i) {
					if(zeroChannel[j]) {
						doNotDecode[ch] = true;
						residueBuffers[ch] = null;
					} else {
						doNotDecode[ch] = false;
						residueBuffers[ch] = this.channelBuffers[j];
					}
					++ch;
				}
			}
			var r1 = map.submapResidue[i];
			var residue = this.header.residueConfig[r1];
			residue.decode(this.decodeState,this.header,residueBuffers,ch,n2,doNotDecode,this.channelBuffers);
		}
		var i = map.couplingSteps;
		var n2 = n >> 1;
		while(--i >= 0) {
			var m1 = this.channelBuffers[map.chan[i].magnitude];
			var a = this.channelBuffers[map.chan[i].angle];
			var _g = 0;
			var _g1 = n2;
			while(_g < _g1) {
				var j = _g++;
				var a2;
				var m2;
				if(m1[j] > 0) {
					if(a[j] > 0) {
						m2 = m1[j];
						a2 = m1[j] - a[j];
					} else {
						a2 = m1[j];
						m2 = m1[j] + a[j];
					}
				} else if(a[j] > 0) {
					m2 = m1[j];
					a2 = m1[j] + a[j];
				} else {
					a2 = m1[j];
					m2 = m1[j] - a[j];
				}
				m1[j] = m2;
				a[j] = a2;
			}
		}
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			if(reallyZeroChannel[i]) {
				var _g2 = 0;
				var _g3 = n2;
				while(_g2 < _g3) {
					var j = _g2++;
					this.channelBuffers[i][j] = 0;
				}
			} else {
				map.doFloor(this.header.floorConfig,i,n,this.channelBuffers[i],this.finalY[i],null);
			}
		}
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			this.inverseMdct(this.channelBuffers[i],n,m.blockflag);
		}
		var _this = this.decodeState;
		while(_this.bytesInSeg != 0 || !_this.lastSeg && _this.next() != 0) {
			_this.bytesInSeg--;
			_this.inputPosition += 1;
			_this.input.readByte();
		}
		return this.decodeState.finishDecodePacket(this.previousLength,n,r);
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecoder
};
var kha_audio2_ogg_vorbis_VorbisTools = function() { };
$hxClasses["kha.audio2.ogg.vorbis.VorbisTools"] = kha_audio2_ogg_vorbis_VorbisTools;
kha_audio2_ogg_vorbis_VorbisTools.__name__ = true;
kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable = null;
kha_audio2_ogg_vorbis_VorbisTools.assert = function(b,p) {
	if(!b) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",p));
	}
};
kha_audio2_ogg_vorbis_VorbisTools.neighbors = function(x,n) {
	var low = -1;
	var high = 65536;
	var plow = 0;
	var phigh = 0;
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		if(x[i] > low && x[i] < x[n]) {
			plow = i;
			low = x[i];
		}
		if(x[i] < high && x[i] > x[n]) {
			phigh = i;
			high = x[i];
		}
	}
	return { low : plow, high : phigh};
};
kha_audio2_ogg_vorbis_VorbisTools.floatUnpack = function(x) {
	var mantissa = UInt.toFloat(x & 2097151);
	var sign = x & -2147483648;
	var exp = (x & 2145386496) >>> 21;
	var res = sign != 0 ? -mantissa : mantissa;
	return res * Math.pow(2,exp - 788);
};
kha_audio2_ogg_vorbis_VorbisTools.bitReverse = function(n) {
	n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
	n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
	n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
	n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
	return n >>> 16 | n << 16;
};
kha_audio2_ogg_vorbis_VorbisTools.pointCompare = function(a,b) {
	if(a.x < b.x) {
		return -1;
	} else if(a.x > b.x) {
		return 1;
	} else {
		return 0;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.uintAsc = function(a,b) {
	if(UInt.gt(b,a)) {
		return -1;
	} else if(a == b) {
		return 0;
	} else {
		return 1;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.lookup1Values = function(entries,dim) {
	var r = Math.exp(Math.log(entries) / dim) | 0;
	if((Math.pow(r + 1,dim) | 0) <= entries) {
		++r;
	}
	if(!(Math.pow(r + 1,dim) > entries)) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisTools.hx", lineNumber : 155, className : "kha.audio2.ogg.vorbis.VorbisTools", methodName : "lookup1Values"}));
	}
	if((Math.pow(r,dim) | 0) > entries) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisTools.hx", lineNumber : 156, className : "kha.audio2.ogg.vorbis.VorbisTools", methodName : "lookup1Values"}));
	}
	return r;
};
kha_audio2_ogg_vorbis_VorbisTools.computeWindow = function(n,$window) {
	var n2 = n >> 1;
	var _g = 0;
	var _g1 = n2;
	while(_g < _g1) {
		var i = _g++;
		$window[i] = Math.sin(1.57079632679489656 * kha_audio2_ogg_vorbis_VorbisTools.square(Math.sin((i + 0.5) / n2 * 0.5 * 3.14159265358979323846264)));
	}
};
kha_audio2_ogg_vorbis_VorbisTools.square = function(f) {
	return f * f;
};
kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse = function(n,rev) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var n8 = n >> 3;
	var _g = 0;
	var _g1 = n8;
	while(_g < _g1) {
		var i = _g++;
		var n = i;
		n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
		n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
		n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
		n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
		rev[i] = (n >>> 16 | n << 16) >>> 32 - ld + 3 << 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors = function(n,af,bf,cf) {
	var n4 = n >> 2;
	var n8 = n >> 3;
	var k2 = 0;
	var _g = 0;
	var _g1 = n4;
	while(_g < _g1) {
		var k = _g++;
		af[k2] = Math.cos(4 * k * 3.14159265358979323846264 / n);
		af[k2 + 1] = -Math.sin(4 * k * 3.14159265358979323846264 / n);
		bf[k2] = Math.cos((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		bf[k2 + 1] = Math.sin((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		k2 += 2;
	}
	var k2 = 0;
	var _g = 0;
	var _g1 = n8;
	while(_g < _g1) {
		var k = _g++;
		cf[k2] = Math.cos(2 * (k2 + 1) * 3.14159265358979323846264 / n);
		cf[k2 + 1] = -Math.sin(2 * (k2 + 1) * 3.14159265358979323846264 / n);
		k2 += 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.drawLine = function(output,x0,y0,x1,y1,n) {
	if(kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable == null) {
		var this1 = new Array(32);
		kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable = this1;
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			var this1 = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable;
			var this2 = new Array(64);
			this1[i] = this2;
			var _g1 = 1;
			while(_g1 < 64) {
				var j = _g1++;
				kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[i][j] = i / j | 0;
			}
		}
	}
	var dy = y1 - y0;
	var adx = x1 - x0;
	var ady = dy < 0 ? -dy : dy;
	var base;
	var x = x0;
	var y = y0;
	var err = 0;
	var sy;
	if(adx < 64 && ady < 32) {
		if(dy < 0) {
			base = -kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base - 1;
		} else {
			base = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base + 1;
		}
	} else {
		base = dy / adx | 0;
		sy = dy < 0 ? base - 1 : base + 1;
	}
	ady -= (base < 0 ? -base : base) * adx;
	if(x1 > n) {
		x1 = n;
	}
	output[x] *= kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	var _g = x + 1;
	var _g1 = x1;
	while(_g < _g1) {
		var i = _g++;
		err += ady;
		if(err >= adx) {
			err -= adx;
			y += sy;
		} else {
			y += base;
		}
		output[i] *= kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	}
};
kha_audio2_ogg_vorbis_VorbisTools.predictPoint = function(x,x0,x1,y0,y1) {
	var dy = y1 - y0;
	var adx = x1 - x0;
	var err = Math.abs(dy) * (x - x0);
	var off = err / adx | 0;
	if(dy < 0) {
		return y0 - off;
	} else {
		return y0 + off;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.emptyFloatVector = function(len) {
	var this1 = new Array(len);
	var vec = this1;
	return vec;
};
kha_audio2_ogg_vorbis_VorbisTools.copyVector = function(source) {
	var this1 = new Array(source.length);
	var dest = this1;
	var _g = 0;
	var _g1 = source.length;
	while(_g < _g1) {
		var i = _g++;
		dest[i] = source[i];
	}
	return dest;
};
var kha_audio2_ogg_vorbis_data_Codebook = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Codebook"] = kha_audio2_ogg_vorbis_data_Codebook;
kha_audio2_ogg_vorbis_data_Codebook.__name__ = true;
kha_audio2_ogg_vorbis_data_Codebook.read = function(decodeState) {
	var c = new kha_audio2_ogg_vorbis_data_Codebook();
	if(decodeState.readBits(8) != 66 || decodeState.readBits(8) != 67 || decodeState.readBits(8) != 86) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 40, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	var x = decodeState.readBits(8);
	c.dimensions = (decodeState.readBits(8) << 8) + x;
	var x = decodeState.readBits(8);
	var y = decodeState.readBits(8);
	c.entries = (decodeState.readBits(8) << 16) + (y << 8) + x;
	var ordered = decodeState.readBits(1);
	c.sparse = ordered != 0 ? false : decodeState.readBits(1) != 0;
	var this1 = new Array(c.entries);
	var lengths = this1;
	if(!c.sparse) {
		c.codewordLengths = lengths;
	}
	var total = 0;
	if(ordered != 0) {
		var currentEntry = 0;
		var currentLength = decodeState.readBits(5) + 1;
		while(currentEntry < c.entries) {
			var limit = c.entries - currentEntry;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n = decodeState.readBits(limit < 16384 ? limit < 16 ? log2_4[limit] : limit < 512 ? 5 + log2_4[limit >> 5] : 10 + log2_4[limit >> 10] : limit < 16777216 ? limit < 524288 ? 15 + log2_4[limit >> 15] : 20 + log2_4[limit >> 20] : limit < 536870912 ? 25 + log2_4[limit >> 25] : limit < -2147483648 ? 30 + log2_4[limit >> 30] : 0);
			if(currentEntry + n > c.entries) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook entrys",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			var _g = 0;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				lengths[currentEntry + i] = currentLength;
			}
			currentEntry += n;
			++currentLength;
		}
	} else {
		var _g = 0;
		var _g1 = c.entries;
		while(_g < _g1) {
			var j = _g++;
			var present = c.sparse ? decodeState.readBits(1) : 1;
			if(present != 0) {
				lengths[j] = decodeState.readBits(5) + 1;
				++total;
			} else {
				lengths[j] = 255;
			}
		}
	}
	if(c.sparse && total >= c.entries >> 2) {
		c.codewordLengths = lengths;
		c.sparse = false;
	}
	var tmp;
	if(c.sparse) {
		tmp = total;
	} else {
		var sortedCount = 0;
		var _g = 0;
		var _g1 = c.entries;
		while(_g < _g1) {
			var j = _g++;
			var l = lengths[j];
			if(l > 10 && l != 255) {
				++sortedCount;
			}
		}
		tmp = sortedCount;
	}
	c.sortedEntries = tmp;
	var values = null;
	if(!c.sparse) {
		var this1 = new Array(c.entries);
		c.codewords = this1;
	} else {
		if(c.sortedEntries != 0) {
			var this1 = new Array(c.sortedEntries);
			c.codewordLengths = this1;
			var this1 = new Array(c.entries);
			c.codewords = this1;
			var this1 = new Array(c.entries);
			values = this1;
		}
		var size = c.entries + 64 * c.sortedEntries;
	}
	if(!c.computeCodewords(lengths,c.entries,values)) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"compute codewords",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 120, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.sortedEntries != 0) {
		c.sortedCodewords = [];
		var this1 = new Array(c.sortedEntries);
		c.sortedValues = this1;
		c.computeSortedHuffman(lengths,values);
	}
	if(c.sparse) {
		values = null;
		c.codewords = null;
		lengths = null;
	}
	c.computeAcceleratedHuffman();
	c.lookupType = decodeState.readBits(4);
	if(c.lookupType > 2) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook lookup type",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 143, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.lookupType > 0) {
		var x = decodeState.readBits(32);
		var mantissa = UInt.toFloat(x & 2097151);
		var sign = x & -2147483648;
		var exp = (x & 2145386496) >>> 21;
		var res = sign != 0 ? -mantissa : mantissa;
		c.minimumValue = res * Math.pow(2,exp - 788);
		var x = decodeState.readBits(32);
		var mantissa = UInt.toFloat(x & 2097151);
		var sign = x & -2147483648;
		var exp = (x & 2145386496) >>> 21;
		var res = sign != 0 ? -mantissa : mantissa;
		c.deltaValue = res * Math.pow(2,exp - 788);
		c.valueBits = decodeState.readBits(4) + 1;
		c.sequenceP = decodeState.readBits(1) != 0;
		if(c.lookupType == 1) {
			c.lookupValues = kha_audio2_ogg_vorbis_VorbisTools.lookup1Values(c.entries,c.dimensions);
		} else {
			c.lookupValues = c.entries * c.dimensions;
		}
		var this1 = new Array(c.lookupValues);
		var mults = this1;
		var _g = 0;
		var _g1 = c.lookupValues;
		while(_g < _g1) {
			var j = _g++;
			var q = decodeState.readBits(c.valueBits);
			if(q == -1) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"fail lookup",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 161, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			mults[j] = q;
		}
		var this1 = new Array(c.lookupValues);
		c.multiplicands = this1;
		var _g = 0;
		var _g1 = c.lookupValues;
		while(_g < _g1) {
			var j = _g++;
			c.multiplicands[j] = mults[j] * c.deltaValue + c.minimumValue;
		}
		if(c.lookupType == 2 && c.sequenceP) {
			var _g = 1;
			var _g1 = c.lookupValues;
			while(_g < _g1) {
				var j = _g++;
				c.multiplicands[j] = c.multiplicands[j - 1];
			}
			c.sequenceP = false;
		}
	}
	return c;
};
kha_audio2_ogg_vorbis_data_Codebook.prototype = {
	dimensions: null
	,entries: null
	,codewordLengths: null
	,minimumValue: null
	,deltaValue: null
	,valueBits: null
	,lookupType: null
	,sequenceP: null
	,sparse: null
	,lookupValues: null
	,multiplicands: null
	,codewords: null
	,fastHuffman: null
	,sortedCodewords: null
	,sortedValues: null
	,sortedEntries: null
	,addEntry: function(huffCode,symbol,count,len,values) {
		if(!this.sparse) {
			this.codewords[symbol] = huffCode;
		} else {
			this.codewords[count] = huffCode;
			this.codewordLengths[count] = len;
			values[count] = symbol;
		}
	}
	,includeInSort: function(len) {
		if(this.sparse) {
			if(len == 255) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 201, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "includeInSort"}));
			}
			return true;
		} else if(len == 255) {
			return false;
		} else if(len > 10) {
			return true;
		} else {
			return false;
		}
	}
	,computeCodewords: function(len,n,values) {
		var this1 = new Array(32);
		var available = this1;
		available[0] = 0;
		available[1] = 0;
		available[2] = 0;
		available[3] = 0;
		available[4] = 0;
		available[5] = 0;
		available[6] = 0;
		available[7] = 0;
		available[8] = 0;
		available[9] = 0;
		available[10] = 0;
		available[11] = 0;
		available[12] = 0;
		available[13] = 0;
		available[14] = 0;
		available[15] = 0;
		available[16] = 0;
		available[17] = 0;
		available[18] = 0;
		available[19] = 0;
		available[20] = 0;
		available[21] = 0;
		available[22] = 0;
		available[23] = 0;
		available[24] = 0;
		available[25] = 0;
		available[26] = 0;
		available[27] = 0;
		available[28] = 0;
		available[29] = 0;
		available[30] = 0;
		available[31] = 0;
		var k = 0;
		while(k < n) {
			if(len[k] < 255) {
				break;
			}
			++k;
		}
		if(k == n) {
			if(this.sortedEntries != 0) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 228, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "computeCodewords"}));
			}
			return true;
		}
		var m = 0;
		var count = m++;
		if(!this.sparse) {
			this.codewords[k] = 0;
		} else {
			this.codewords[count] = 0;
			this.codewordLengths[count] = len[k];
			values[count] = k;
		}
		var i = 0;
		while(++i <= len[k]) available[i] = 1 << 32 - i;
		i = k;
		while(++i < n) {
			var z = len[i];
			if(z == 255) {
				continue;
			}
			while(z > 0 && available[z] == 0) --z;
			if(z == 0) {
				return false;
			}
			var res = available[z];
			available[z] = 0;
			var n1 = res;
			n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
			n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
			n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
			n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
			var huffCode = n1 >>> 16 | n1 << 16;
			var count = m++;
			if(!this.sparse) {
				this.codewords[i] = huffCode;
			} else {
				this.codewords[count] = huffCode;
				this.codewordLengths[count] = len[i];
				values[count] = i;
			}
			if(z != len[i]) {
				var y = len[i];
				while(y > z) {
					if(available[y] != 0) {
						throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 272, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "computeCodewords"}));
					}
					available[y] = res + (1 << 32 - y);
					--y;
				}
			}
		}
		return true;
	}
	,computeSortedHuffman: function(lengths,values) {
		if(!this.sparse) {
			var k = 0;
			var _g = 0;
			var _g1 = this.entries;
			while(_g < _g1) {
				var i = _g++;
				var len = lengths[i];
				var tmp;
				if(this.sparse) {
					if(len == 255) {
						throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 201, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "includeInSort"}));
					}
					tmp = true;
				} else {
					tmp = len == 255 ? false : len > 10;
				}
				if(tmp) {
					var n = this.codewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					this.sortedCodewords[k++] = n >>> 16 | n << 16;
				}
			}
			if(k != this.sortedEntries) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 296, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "computeSortedHuffman"}));
			}
		} else {
			var _g = 0;
			var _g1 = this.sortedEntries;
			while(_g < _g1) {
				var i = _g++;
				var n = this.codewords[i];
				n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
				n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
				n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
				n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
				this.sortedCodewords[i] = n >>> 16 | n << 16;
			}
		}
		this.sortedCodewords[this.sortedEntries] = -1;
		this.sortedCodewords.sort(kha_audio2_ogg_vorbis_VorbisTools.uintAsc);
		var len = this.sparse ? this.sortedEntries : this.entries;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var huffLen = this.sparse ? lengths[values[i]] : lengths[i];
			var tmp;
			if(this.sparse) {
				if(huffLen == 255) {
					throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 201, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "includeInSort"}));
				}
				tmp = true;
			} else {
				tmp = huffLen == 255 ? false : huffLen > 10;
			}
			if(tmp) {
				var n = this.codewords[i];
				n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
				n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
				n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
				n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
				var code = n >>> 16 | n << 16;
				var x = 0;
				var n1 = this.sortedEntries;
				while(n1 > 1) {
					var m = x + (n1 >> 1);
					if(UInt.gte(code,this.sortedCodewords[m])) {
						x = m;
						n1 -= n1 >> 1;
					} else {
						n1 >>= 1;
					}
				}
				if(this.sparse) {
					this.sortedValues[x] = values[i];
					this.codewordLengths[x] = huffLen;
				} else {
					this.sortedValues[x] = i;
				}
			}
		}
	}
	,computeAcceleratedHuffman: function() {
		var this1 = new Array(1024);
		this.fastHuffman = this1;
		this.fastHuffman[0] = -1;
		var _g = 0;
		var _g1 = 1024;
		while(_g < _g1) {
			var i = _g++;
			this.fastHuffman[i] = -1;
		}
		var len = this.sparse ? this.sortedEntries : this.entries;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(this.codewordLengths[i] <= 10) {
				var z;
				if(this.sparse) {
					var n = this.sortedCodewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					z = n >>> 16 | n << 16;
				} else {
					z = this.codewords[i];
				}
				while(z < 1024) {
					this.fastHuffman[z] = i;
					z += 1 << this.codewordLengths[i];
				}
			}
		}
	}
	,codebookDecode: function(decodeState,output,offset,len) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		var minimumValue = this.minimumValue;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		if(this.lookupType == 1) {
			var div = 1;
			var last = 0.0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var off = UInt.toFloat(z / div | 0) % UInt.toFloat(lookupValues) | 0;
				var val = multiplicands[off] + last;
				output[offset + i] += val;
				if(sequenceP) {
					last = val + minimumValue;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		if(sequenceP) {
			var last = 0.0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var val = multiplicands[z + i] + last;
				output[offset + i] += val;
				last = val + minimumValue;
			}
		} else {
			var last = 0.0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				output[offset + i] += multiplicands[z + i] + last;
			}
		}
		return true;
	}
	,codebookDecodeStep: function(decodeState,output,offset,len,step) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var last = 0.0;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		if(this.lookupType == 1) {
			var div = 1;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var off = UInt.toFloat(z / div | 0) % UInt.toFloat(lookupValues) | 0;
				var val = multiplicands[off] + last;
				output[offset + i * step] += val;
				if(sequenceP) {
					last = val;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var val = multiplicands[z + i] + last;
			output[offset + i * step] += val;
			if(sequenceP) {
				last = val;
			}
		}
		return true;
	}
	,decodeStart: function(decodeState) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		return val;
	}
	,decodeDeinterleaveRepeat: function(decodeState,residueBuffers,ch,cInter,pInter,len,totalDecode) {
		var effective = this.dimensions;
		if(this.lookupType == 0) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 488, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
		}
		var multiplicands = this.multiplicands;
		var sequenceP = this.sequenceP;
		var lookupValues = this.lookupValues;
		while(totalDecode > 0) {
			var last = 0.0;
			if(decodeState.validBits < 10) {
				decodeState.prepHuffman();
			}
			var i = this.fastHuffman[decodeState.acc & 1023];
			var val;
			if(i >= 0) {
				var l = this.codewordLengths[i];
				decodeState.acc = decodeState.acc >>> l;
				decodeState.validBits -= l;
				if(decodeState.validBits < 0) {
					decodeState.validBits = 0;
					val = -1;
				} else {
					val = i;
				}
			} else {
				val = decodeState.decodeScalarRaw(this);
			}
			if(this.sparse) {
				val = this.sortedValues[val];
			}
			var z = val;
			if(z < 0) {
				if(decodeState.bytesInSeg == 0 && decodeState.lastSeg) {
					return null;
				}
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 503, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
			}
			if(cInter + pInter * ch + effective > len * ch) {
				effective = len * ch - (pInter * ch - cInter);
			}
			if(this.lookupType == 1) {
				var div = 1;
				if(sequenceP) {
					var _g = 0;
					var _g1 = effective;
					while(_g < _g1) {
						var i1 = _g++;
						var off = UInt.toFloat(z / div | 0) % UInt.toFloat(lookupValues) | 0;
						var val1 = multiplicands[off] + last;
						residueBuffers[cInter][pInter] += val1;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val1;
						div = div * lookupValues;
					}
				} else {
					var _g2 = 0;
					var _g3 = effective;
					while(_g2 < _g3) {
						var i2 = _g2++;
						var off1 = UInt.toFloat(z / div | 0) % UInt.toFloat(lookupValues) | 0;
						var val2 = multiplicands[off1] + last;
						residueBuffers[cInter][pInter] += val2;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						div = div * lookupValues;
					}
				}
			} else {
				z *= this.dimensions;
				if(sequenceP) {
					var _g4 = 0;
					var _g5 = effective;
					while(_g4 < _g5) {
						var i3 = _g4++;
						var val3 = multiplicands[z + i3] + last;
						residueBuffers[cInter][pInter] += val3;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val3;
					}
				} else {
					var _g6 = 0;
					var _g7 = effective;
					while(_g6 < _g7) {
						var i4 = _g6++;
						var val4 = multiplicands[z + i4] + last;
						residueBuffers[cInter][pInter] += val4;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
					}
				}
			}
			totalDecode -= effective;
		}
		return { cInter : cInter, pInter : pInter};
	}
	,residueDecode: function(decodeState,target,offset,n,rtype) {
		if(rtype == 0) {
			var step = n / this.dimensions | 0;
			var _g = 0;
			var _g1 = step;
			while(_g < _g1) {
				var k = _g++;
				if(!this.codebookDecodeStep(decodeState,target,offset + k,n - offset - k,step)) {
					return false;
				}
			}
		} else {
			var k = 0;
			while(k < n) {
				if(!this.codebookDecode(decodeState,target,offset,n - k)) {
					return false;
				}
				k += this.dimensions;
				offset += this.dimensions;
			}
		}
		return true;
	}
	,__class__: kha_audio2_ogg_vorbis_data_Codebook
};
var kha_audio2_ogg_vorbis_data_Comment = function() {
	this.data = new haxe_ds_StringMap();
};
$hxClasses["kha.audio2.ogg.vorbis.data.Comment"] = kha_audio2_ogg_vorbis_data_Comment;
kha_audio2_ogg_vorbis_data_Comment.__name__ = true;
kha_audio2_ogg_vorbis_data_Comment.prototype = {
	data: null
	,get_title: function() {
		return this.getString("title");
	}
	,get_loopStart: function() {
		return Std.parseInt(this.getString("loopstart"));
	}
	,get_loopLength: function() {
		return Std.parseInt(this.getString("looplength"));
	}
	,get_version: function() {
		return this.getString("version");
	}
	,get_album: function() {
		return this.getString("album");
	}
	,get_organization: function() {
		return this.getString("organization");
	}
	,get_tracknumber: function() {
		return this.getString("tracknumber");
	}
	,get_performer: function() {
		return this.getString("performer");
	}
	,get_copyright: function() {
		return this.getString("copyright");
	}
	,get_license: function() {
		return this.getString("license");
	}
	,get_artist: function() {
		return this.getString("artist");
	}
	,get_description: function() {
		return this.getString("description");
	}
	,get_genre: function() {
		return this.getString("genre");
	}
	,get_date: function() {
		return this.getString("date");
	}
	,get_location: function() {
		return this.getString("location");
	}
	,get_contact: function() {
		return this.getString("contact");
	}
	,get_isrc: function() {
		return this.getString("isrc");
	}
	,get_artists: function() {
		return this.getArray("artist");
	}
	,add: function(key,value) {
		key = key.toLowerCase();
		if(Object.prototype.hasOwnProperty.call(this.data.h,key)) {
			this.data.h[key].push(value);
		} else {
			var v = [value];
			this.data.h[key] = v;
		}
	}
	,getString: function(key) {
		key = key.toLowerCase();
		if(Object.prototype.hasOwnProperty.call(this.data.h,key)) {
			return this.data.h[key][0];
		} else {
			return null;
		}
	}
	,getArray: function(key) {
		key = key.toLowerCase();
		if(Object.prototype.hasOwnProperty.call(this.data.h,key)) {
			return this.data.h[key];
		} else {
			return null;
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Comment
	,__properties__: {get_artists:"get_artists",get_isrc:"get_isrc",get_contact:"get_contact",get_location:"get_location",get_date:"get_date",get_genre:"get_genre",get_description:"get_description",get_artist:"get_artist",get_license:"get_license",get_copyright:"get_copyright",get_performer:"get_performer",get_tracknumber:"get_tracknumber",get_organization:"get_organization",get_album:"get_album",get_version:"get_version",get_loopLength:"get_loopLength",get_loopStart:"get_loopStart",get_title:"get_title"}
};
var kha_audio2_ogg_vorbis_data_Floor = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor"] = kha_audio2_ogg_vorbis_data_Floor;
kha_audio2_ogg_vorbis_data_Floor.__name__ = true;
kha_audio2_ogg_vorbis_data_Floor.read = function(decodeState,codebooks) {
	var floor = new kha_audio2_ogg_vorbis_data_Floor();
	floor.type = decodeState.readBits(16);
	if(floor.type > 1) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 28, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	}
	if(floor.type == 0) {
		var g = floor.floor0 = new kha_audio2_ogg_vorbis_data_Floor0();
		g.order = decodeState.readBits(8);
		g.rate = decodeState.readBits(16);
		g.barkMapSize = decodeState.readBits(16);
		g.amplitudeBits = decodeState.readBits(6);
		g.amplitudeOffset = decodeState.readBits(8);
		g.numberOfBooks = decodeState.readBits(4) + 1;
		var _g = 0;
		var _g1 = g.numberOfBooks;
		while(_g < _g1) {
			var j = _g++;
			g.bookList[j] = decodeState.readBits(8);
		}
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 41, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	} else {
		var p = [];
		var g = floor.floor1 = new kha_audio2_ogg_vorbis_data_Floor1();
		var maxClass = -1;
		g.partitions = decodeState.readBits(5);
		var this1 = new Array(g.partitions);
		g.partitionClassList = this1;
		var _g = 0;
		var _g1 = g.partitions;
		while(_g < _g1) {
			var j = _g++;
			g.partitionClassList[j] = decodeState.readBits(4);
			if(g.partitionClassList[j] > maxClass) {
				maxClass = g.partitionClassList[j];
			}
		}
		var this1 = new Array(maxClass + 1);
		g.classDimensions = this1;
		var this1 = new Array(maxClass + 1);
		g.classMasterbooks = this1;
		var this1 = new Array(maxClass + 1);
		g.classSubclasses = this1;
		var this1 = new Array(maxClass + 1);
		g.subclassBooks = this1;
		var _g = 0;
		var _g1 = maxClass + 1;
		while(_g < _g1) {
			var j = _g++;
			g.classDimensions[j] = decodeState.readBits(3) + 1;
			g.classSubclasses[j] = decodeState.readBits(2);
			if(g.classSubclasses[j] != 0) {
				g.classMasterbooks[j] = decodeState.readBits(8);
				if(g.classMasterbooks[j] >= codebooks.length) {
					throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 64, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
			var kl = 1 << g.classSubclasses[j];
			var this1 = g.subclassBooks;
			var this2 = new Array(kl);
			this1[j] = this2;
			var _g2 = 0;
			var _g3 = kl;
			while(_g2 < _g3) {
				var k = _g2++;
				g.subclassBooks[j][k] = decodeState.readBits(8) - 1;
				if(g.subclassBooks[j][k] >= codebooks.length) {
					throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
		}
		g.floor1Multiplier = decodeState.readBits(2) + 1;
		g.rangebits = decodeState.readBits(4);
		var this1 = new Array(250);
		g.xlist = this1;
		g.xlist[0] = 0;
		g.xlist[1] = 1 << g.rangebits;
		g.values = 2;
		var _g = 0;
		var _g1 = g.partitions;
		while(_g < _g1) {
			var j = _g++;
			var c = g.partitionClassList[j];
			var _g2 = 0;
			var _g3 = g.classDimensions[c];
			while(_g2 < _g3) {
				var k = _g2++;
				g.xlist[g.values] = decodeState.readBits(g.rangebits);
				g.values++;
			}
		}
		var _g = 0;
		var _g1 = g.values;
		while(_g < _g1) {
			var j = _g++;
			p.push(new kha_audio2_ogg_vorbis_data_IntPoint());
			p[j].x = g.xlist[j];
			p[j].y = j;
		}
		p.sort(kha_audio2_ogg_vorbis_VorbisTools.pointCompare);
		var this1 = new Array(g.values);
		g.sortedOrder = this1;
		var _g = 0;
		var _g1 = g.values;
		while(_g < _g1) {
			var j = _g++;
			g.sortedOrder[j] = p[j].y;
		}
		var this1 = new Array(g.values);
		g.neighbors = this1;
		var _g = 2;
		var _g1 = g.values;
		while(_g < _g1) {
			var j = _g++;
			var x = g.xlist;
			var low = -1;
			var high = 65536;
			var plow = 0;
			var phigh = 0;
			var _g2 = 0;
			var _g3 = j;
			while(_g2 < _g3) {
				var i = _g2++;
				if(x[i] > low && x[i] < x[j]) {
					plow = i;
					low = x[i];
				}
				if(x[i] < high && x[i] > x[j]) {
					phigh = i;
					high = x[i];
				}
			}
			var ne_low = plow;
			var ne_high = phigh;
			var this1 = g.neighbors;
			var this2 = new Array(g.values);
			this1[j] = this2;
			g.neighbors[j][0] = ne_low;
			g.neighbors[j][1] = ne_high;
		}
	}
	return floor;
};
kha_audio2_ogg_vorbis_data_Floor.prototype = {
	floor0: null
	,floor1: null
	,type: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor
};
var kha_audio2_ogg_vorbis_data_Floor0 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor0"] = kha_audio2_ogg_vorbis_data_Floor0;
kha_audio2_ogg_vorbis_data_Floor0.__name__ = true;
kha_audio2_ogg_vorbis_data_Floor0.prototype = {
	order: null
	,rate: null
	,barkMapSize: null
	,amplitudeBits: null
	,amplitudeOffset: null
	,numberOfBooks: null
	,bookList: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor0
};
var kha_audio2_ogg_vorbis_data_Floor1 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor1"] = kha_audio2_ogg_vorbis_data_Floor1;
kha_audio2_ogg_vorbis_data_Floor1.__name__ = true;
kha_audio2_ogg_vorbis_data_Floor1.prototype = {
	partitions: null
	,partitionClassList: null
	,classDimensions: null
	,classSubclasses: null
	,classMasterbooks: null
	,subclassBooks: null
	,xlist: null
	,sortedOrder: null
	,neighbors: null
	,floor1Multiplier: null
	,rangebits: null
	,values: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor1
};
var kha_audio2_ogg_vorbis_data_Header = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Header"] = kha_audio2_ogg_vorbis_data_Header;
kha_audio2_ogg_vorbis_data_Header.__name__ = true;
kha_audio2_ogg_vorbis_data_Header.read = function(decodeState) {
	var page = decodeState.page;
	page.start(decodeState);
	if((page.flag & 2) == 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"not firstPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 4) != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"lastPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 1) != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"continuedPacket",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.firstPageValidate();
	decodeState.inputPosition += 1;
	if(decodeState.input.readByte() != 1) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 57, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header = new haxe_io_Bytes(new ArrayBuffer(6));
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[0] = x;
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[1] = x;
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[2] = x;
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[3] = x;
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[4] = x;
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[5] = x;
	if(header.toString() != "vorbis") {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	decodeState.inputPosition += 4;
	var version = decodeState.input.readInt32();
	if(version != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"vorbis version : " + version,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 66, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header = new kha_audio2_ogg_vorbis_data_Header();
	decodeState.inputPosition += 1;
	header.channel = decodeState.input.readByte();
	if(header.channel == 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no channel",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	} else if(header.channel > 16) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,"too many channels",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 75, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header.sampleRate = decodeState.input.readInt32();
	if(header.sampleRate == 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no sampling rate",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 80, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header.maximumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header.nominalBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header.minimumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 1;
	var x = decodeState.input.readByte();
	var log0 = x & 15;
	var log1 = x >> 4;
	header.blocksize0 = 1 << log0;
	header.blocksize1 = 1 << log1;
	if(log0 < 6 || log0 > 13) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 93, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log1 < 6 || log1 > 13) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 96, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log0 > log1) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 99, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 1;
	var x = decodeState.input.readByte();
	if((x & 1) == 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 105, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.page.start(decodeState);
	decodeState.startPacket();
	var len = 0;
	var output = new haxe_io_BytesOutput();
	while(true) {
		len = decodeState.next();
		if(!(len != 0)) {
			break;
		}
		decodeState.inputPosition += len;
		output.write(decodeState.input.read(len));
		decodeState.bytesInSeg = 0;
	}
	var packetInput = new haxe_io_BytesInput(output.getBytes());
	packetInput.readByte();
	packetInput.read(6);
	var vendorLength = packetInput.readInt32();
	header.vendor = packetInput.readString(vendorLength);
	header.comment = new kha_audio2_ogg_vorbis_data_Comment();
	var commentCount = packetInput.readInt32();
	var _g = 0;
	var _g1 = commentCount;
	while(_g < _g1) {
		var i = _g++;
		var n = packetInput.readInt32();
		var str = packetInput.readString(n);
		var splitter = str.indexOf("=");
		if(splitter != -1) {
			header.comment.add(str.substring(0,splitter),str.substring(splitter + 1));
		}
	}
	var x1 = packetInput.readByte();
	if((x1 & 1) == 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 141, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.startPacket();
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	if(x1 != 5) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"setup packet",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 149, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header1 = new haxe_io_Bytes(new ArrayBuffer(6));
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header1.b[0] = x1;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header1.b[1] = x1;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header1.b[2] = x1;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header1.b[3] = x1;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header1.b[4] = x1;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header1.b[5] = x1;
	if(header1.toString() != "vorbis") {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	var codebookCount = decodeState.readBits(8) + 1;
	var this1 = new Array(codebookCount);
	header.codebooks = this1;
	var _g = 0;
	var _g1 = codebookCount;
	while(_g < _g1) {
		var i = _g++;
		header.codebooks[i] = kha_audio2_ogg_vorbis_data_Codebook.read(decodeState);
	}
	x = decodeState.readBits(6) + 1;
	var _g = 0;
	var _g1 = x;
	while(_g < _g1) {
		var i = _g++;
		if(decodeState.readBits(16) != 0) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 165, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	var floorCount = decodeState.readBits(6) + 1;
	var this1 = new Array(floorCount);
	header.floorConfig = this1;
	var _g = 0;
	var _g1 = floorCount;
	while(_g < _g1) {
		var i = _g++;
		header.floorConfig[i] = kha_audio2_ogg_vorbis_data_Floor.read(decodeState,header.codebooks);
	}
	var residueCount = decodeState.readBits(6) + 1;
	var this1 = new Array(residueCount);
	header.residueConfig = this1;
	var _g = 0;
	var _g1 = residueCount;
	while(_g < _g1) {
		var i = _g++;
		header.residueConfig[i] = kha_audio2_ogg_vorbis_data_Residue.read(decodeState,header.codebooks);
	}
	var mappingCount = decodeState.readBits(6) + 1;
	var this1 = new Array(mappingCount);
	header.mapping = this1;
	var _g = 0;
	var _g1 = mappingCount;
	while(_g < _g1) {
		var i = _g++;
		var map = kha_audio2_ogg_vorbis_data_Mapping.read(decodeState,header.channel);
		header.mapping[i] = map;
		var _g2 = 0;
		var _g3 = map.submaps;
		while(_g2 < _g3) {
			var j = _g2++;
			if(map.submapFloor[j] >= header.floorConfig.length) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 191, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
			if(map.submapResidue[j] >= header.residueConfig.length) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 194, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
		}
	}
	var modeCount = decodeState.readBits(6) + 1;
	var this1 = new Array(modeCount);
	header.modes = this1;
	var _g = 0;
	var _g1 = modeCount;
	while(_g < _g1) {
		var i = _g++;
		var mode = kha_audio2_ogg_vorbis_data_Mode.read(decodeState);
		header.modes[i] = mode;
		if(mode.mapping >= header.mapping.length) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 205, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	while(decodeState.bytesInSeg != 0 || !decodeState.lastSeg && decodeState.next() != 0) {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		decodeState.input.readByte();
	}
	return header;
};
kha_audio2_ogg_vorbis_data_Header.prototype = {
	maximumBitRate: null
	,nominalBitRate: null
	,minimumBitRate: null
	,sampleRate: null
	,channel: null
	,blocksize0: null
	,blocksize1: null
	,codebooks: null
	,floorConfig: null
	,residueConfig: null
	,mapping: null
	,modes: null
	,comment: null
	,vendor: null
	,__class__: kha_audio2_ogg_vorbis_data_Header
};
var kha_audio2_ogg_vorbis_data_IntPoint = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.IntPoint"] = kha_audio2_ogg_vorbis_data_IntPoint;
kha_audio2_ogg_vorbis_data_IntPoint.__name__ = true;
kha_audio2_ogg_vorbis_data_IntPoint.prototype = {
	x: null
	,y: null
	,__class__: kha_audio2_ogg_vorbis_data_IntPoint
};
var kha_audio2_ogg_vorbis_data_Mapping = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mapping"] = kha_audio2_ogg_vorbis_data_Mapping;
kha_audio2_ogg_vorbis_data_Mapping.__name__ = true;
kha_audio2_ogg_vorbis_data_Mapping.read = function(decodeState,channels) {
	var m = new kha_audio2_ogg_vorbis_data_Mapping();
	var mappingType = decodeState.readBits(16);
	if(mappingType != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"mapping type " + mappingType,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	var this1 = new Array(channels);
	m.chan = this1;
	var _g = 0;
	var _g1 = channels;
	while(_g < _g1) {
		var j = _g++;
		m.chan[j] = new kha_audio2_ogg_vorbis_data_MappingChannel();
	}
	if(decodeState.readBits(1) != 0) {
		m.submaps = decodeState.readBits(4) + 1;
	} else {
		m.submaps = 1;
	}
	if(decodeState.readBits(1) != 0) {
		m.couplingSteps = decodeState.readBits(8) + 1;
		var _g = 0;
		var _g1 = m.couplingSteps;
		while(_g < _g1) {
			var k = _g++;
			var n = channels - 1;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			m.chan[k].magnitude = decodeState.readBits(n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0);
			var n1 = channels - 1;
			var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			m.chan[k].angle = decodeState.readBits(n1 < 16384 ? n1 < 16 ? log2_41[n1] : n1 < 512 ? 5 + log2_41[n1 >> 5] : 10 + log2_41[n1 >> 10] : n1 < 16777216 ? n1 < 524288 ? 15 + log2_41[n1 >> 15] : 20 + log2_41[n1 >> 20] : n1 < 536870912 ? 25 + log2_41[n1 >> 25] : n1 < -2147483648 ? 30 + log2_41[n1 >> 30] : 0);
			if(m.chan[k].magnitude >= channels) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].angle >= channels) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].magnitude == m.chan[k].angle) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		m.couplingSteps = 0;
	}
	if(decodeState.readBits(2) != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 61, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	if(m.submaps > 1) {
		var _g = 0;
		var _g1 = channels;
		while(_g < _g1) {
			var j = _g++;
			m.chan[j].mux = decodeState.readBits(4);
			if(m.chan[j].mux >= m.submaps) {
				throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		var _g = 0;
		var _g1 = channels;
		while(_g < _g1) {
			var j = _g++;
			m.chan[j].mux = 0;
		}
	}
	var this1 = new Array(m.submaps);
	m.submapFloor = this1;
	var this1 = new Array(m.submaps);
	m.submapResidue = this1;
	var _g = 0;
	var _g1 = m.submaps;
	while(_g < _g1) {
		var j = _g++;
		decodeState.readBits(8);
		m.submapFloor[j] = decodeState.readBits(8);
		m.submapResidue[j] = decodeState.readBits(8);
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mapping.prototype = {
	couplingSteps: null
	,chan: null
	,submaps: null
	,submapFloor: null
	,submapResidue: null
	,doFloor: function(floors,i,n,target,finalY,step2Flag) {
		var n2 = n >> 1;
		var s = this.chan[i].mux;
		var floor;
		var floor = floors[this.submapFloor[s]];
		if(floor.type == 0) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 94, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "doFloor"}));
		} else {
			var g = floor.floor1;
			var lx = 0;
			var ly = finalY[0] * g.floor1Multiplier;
			var _g = 1;
			var _g1 = g.values;
			while(_g < _g1) {
				var q = _g++;
				var j = g.sortedOrder[q];
				if(finalY[j] >= 0) {
					var hy = finalY[j] * g.floor1Multiplier;
					var hx = g.xlist[j];
					kha_audio2_ogg_vorbis_VorbisTools.drawLine(target,lx,ly,hx,hy,n2);
					lx = hx;
					ly = hy;
				}
			}
			if(lx < n2) {
				var _g = lx;
				var _g1 = n2;
				while(_g < _g1) {
					var j = _g++;
					target[j] *= kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[ly];
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Mapping
};
var kha_audio2_ogg_vorbis_data_MappingChannel = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.MappingChannel"] = kha_audio2_ogg_vorbis_data_MappingChannel;
kha_audio2_ogg_vorbis_data_MappingChannel.__name__ = true;
kha_audio2_ogg_vorbis_data_MappingChannel.prototype = {
	magnitude: null
	,angle: null
	,mux: null
	,__class__: kha_audio2_ogg_vorbis_data_MappingChannel
};
var kha_audio2_ogg_vorbis_data_Mode = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mode"] = kha_audio2_ogg_vorbis_data_Mode;
kha_audio2_ogg_vorbis_data_Mode.__name__ = true;
kha_audio2_ogg_vorbis_data_Mode.read = function(decodeState) {
	var m = new kha_audio2_ogg_vorbis_data_Mode();
	m.blockflag = decodeState.readBits(1) != 0;
	m.windowtype = decodeState.readBits(16);
	m.transformtype = decodeState.readBits(16);
	m.mapping = decodeState.readBits(8);
	if(m.windowtype != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	if(m.transformtype != 0) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 25, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mode.prototype = {
	blockflag: null
	,mapping: null
	,windowtype: null
	,transformtype: null
	,__class__: kha_audio2_ogg_vorbis_data_Mode
};
var kha_audio2_ogg_vorbis_data_Page = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Page"] = kha_audio2_ogg_vorbis_data_Page;
kha_audio2_ogg_vorbis_data_Page.__name__ = true;
kha_audio2_ogg_vorbis_data_Page.prototype = {
	flag: null
	,clone: function() {
		var page = new kha_audio2_ogg_vorbis_data_Page();
		page.flag = this.flag;
		return page;
	}
	,start: function(decodeState) {
		var tmp;
		var tmp1;
		var tmp2;
		decodeState.inputPosition += 1;
		if(decodeState.input.readByte() == 79) {
			decodeState.inputPosition += 1;
			tmp2 = decodeState.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			decodeState.inputPosition += 1;
			tmp1 = decodeState.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			decodeState.inputPosition += 1;
			tmp = decodeState.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 324, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
		this.startWithoutCapturePattern(decodeState);
	}
	,startWithoutCapturePattern: function(decodeState) {
		decodeState.inputPosition += 1;
		var version = decodeState.input.readByte();
		if(version != 0) {
			throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,"" + version,{ fileName : "kha/audio2/ogg/vorbis/data/Page.hx", lineNumber : 34, className : "kha.audio2.ogg.vorbis.data.Page", methodName : "startWithoutCapturePattern"}));
		}
		decodeState.inputPosition += 1;
		this.flag = decodeState.input.readByte();
		decodeState.inputPosition += 4;
		var loc0 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		var loc1 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.setup(loc0,loc1);
	}
	,__class__: kha_audio2_ogg_vorbis_data_Page
};
var kha_audio2_ogg_vorbis_data_PageFlag = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.PageFlag"] = kha_audio2_ogg_vorbis_data_PageFlag;
kha_audio2_ogg_vorbis_data_PageFlag.__name__ = true;
var kha_audio2_ogg_vorbis_data_ProbedPage = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.ProbedPage"] = kha_audio2_ogg_vorbis_data_ProbedPage;
kha_audio2_ogg_vorbis_data_ProbedPage.__name__ = true;
kha_audio2_ogg_vorbis_data_ProbedPage.prototype = {
	pageStart: null
	,pageEnd: null
	,afterPreviousPageStart: null
	,firstDecodedSample: null
	,lastDecodedSample: null
	,__class__: kha_audio2_ogg_vorbis_data_ProbedPage
};
var kha_audio2_ogg_vorbis_data_ReaderError = function(type,message,posInfos) {
	if(message == null) {
		message = "";
	}
	this.type = type;
	this.message = message;
	this.posInfos = posInfos;
};
$hxClasses["kha.audio2.ogg.vorbis.data.ReaderError"] = kha_audio2_ogg_vorbis_data_ReaderError;
kha_audio2_ogg_vorbis_data_ReaderError.__name__ = true;
kha_audio2_ogg_vorbis_data_ReaderError.prototype = {
	type: null
	,message: null
	,posInfos: null
	,__class__: kha_audio2_ogg_vorbis_data_ReaderError
};
var kha_audio2_ogg_vorbis_data_ReaderErrorType = $hxEnums["kha.audio2.ogg.vorbis.data.ReaderErrorType"] = { __ename__ : true, __constructs__ : ["NEED_MORE_DATA","INVALID_API_MIXING","OUTOFMEM","FEATURE_NOT_SUPPORTED","TOO_MANY_CHANNELS","FILE_OPEN_FAILURE","SEEK_WITHOUT_LENGTH","UNEXPECTED_EOF","SEEK_INVALID","INVALID_SETUP","INVALID_STREAM","MISSING_CAPTURE_PATTERN","INVALID_STREAM_STRUCTURE_VERSION","CONTINUED_PACKET_FLAG_INVALID","INCORRECT_STREAM_SERIAL_NUMBER","INVALID_FIRST_PAGE","BAD_PACKET_TYPE","CANT_FIND_LAST_PAGE","SEEK_FAILED","OTHER"]
	,NEED_MORE_DATA: {_hx_index:0,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_API_MIXING: {_hx_index:1,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OUTOFMEM: {_hx_index:2,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FEATURE_NOT_SUPPORTED: {_hx_index:3,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,TOO_MANY_CHANNELS: {_hx_index:4,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FILE_OPEN_FAILURE: {_hx_index:5,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_WITHOUT_LENGTH: {_hx_index:6,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,UNEXPECTED_EOF: {_hx_index:7,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_INVALID: {_hx_index:8,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_SETUP: {_hx_index:9,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM: {_hx_index:10,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,MISSING_CAPTURE_PATTERN: {_hx_index:11,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM_STRUCTURE_VERSION: {_hx_index:12,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CONTINUED_PACKET_FLAG_INVALID: {_hx_index:13,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INCORRECT_STREAM_SERIAL_NUMBER: {_hx_index:14,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_FIRST_PAGE: {_hx_index:15,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,BAD_PACKET_TYPE: {_hx_index:16,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CANT_FIND_LAST_PAGE: {_hx_index:17,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_FAILED: {_hx_index:18,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OTHER: {_hx_index:19,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
};
var kha_audio2_ogg_vorbis_data_Residue = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Residue"] = kha_audio2_ogg_vorbis_data_Residue;
kha_audio2_ogg_vorbis_data_Residue.__name__ = true;
kha_audio2_ogg_vorbis_data_Residue.read = function(decodeState,codebooks) {
	var r = new kha_audio2_ogg_vorbis_data_Residue();
	r.type = decodeState.readBits(16);
	if(r.type > 2) {
		throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 29, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
	}
	var this1 = new Array(64);
	var residueCascade = this1;
	r.begin = decodeState.readBits(24);
	r.end = decodeState.readBits(24);
	r.partSize = decodeState.readBits(24) + 1;
	var classifications = r.classifications = decodeState.readBits(6) + 1;
	r.classbook = decodeState.readBits(8);
	var _g = 0;
	var _g1 = r.classifications;
	while(_g < _g1) {
		var j = _g++;
		var highBits = 0;
		var lowBits = decodeState.readBits(3);
		if(decodeState.readBits(1) != 0) {
			highBits = decodeState.readBits(5);
		}
		residueCascade[j] = highBits * 8 + lowBits;
	}
	var this1 = new Array(r.classifications);
	r.residueBooks = this1;
	var _g = 0;
	var _g1 = r.classifications;
	while(_g < _g1) {
		var j = _g++;
		var this1 = r.residueBooks;
		var this2 = new Array(8);
		this1[j] = this2;
		var _g2 = 0;
		while(_g2 < 8) {
			var k = _g2++;
			if((residueCascade[j] & 1 << k) != 0) {
				r.residueBooks[j][k] = decodeState.readBits(8);
				if(r.residueBooks[j][k] >= codebooks.length) {
					throw haxe_Exception.thrown(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 55, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
				}
			} else {
				r.residueBooks[j][k] = -1;
			}
		}
	}
	var el = codebooks[r.classbook].entries;
	var classwords = codebooks[r.classbook].dimensions;
	var this1 = new Array(el);
	r.classdata = this1;
	var _g = 0;
	var _g1 = el;
	while(_g < _g1) {
		var j = _g++;
		var temp = j;
		var k = classwords;
		var this1 = r.classdata;
		var this2 = new Array(classwords);
		var cd = this1[j] = this2;
		while(--k >= 0) {
			cd[k] = temp % classifications;
			temp = temp / classifications | 0;
		}
	}
	return r;
};
kha_audio2_ogg_vorbis_data_Residue.prototype = {
	begin: null
	,end: null
	,partSize: null
	,classifications: null
	,classbook: null
	,classdata: null
	,residueBooks: null
	,type: null
	,decode: function(decodeState,header,residueBuffers,ch,n,doNotDecode,channelBuffers) {
		var codebooks = header.codebooks;
		var classwords = codebooks[this.classbook].dimensions;
		var nRead = this.end - this.begin;
		var partSize = this.partSize;
		var partRead = UInt.toFloat(nRead) / UInt.toFloat(partSize) | 0;
		var this1 = new Array(header.channel * partRead + 1);
		var classifications = this1;
		var _g = 0;
		var _g1 = ch;
		while(_g < _g1) {
			var i = _g++;
			if(!doNotDecode[i]) {
				var buffer = residueBuffers[i];
				var _g2 = 0;
				var _g3 = buffer.length;
				while(_g2 < _g3) {
					var j = _g2++;
					buffer[j] = 0;
				}
			}
		}
		if(this.type == 2 && ch != 1) {
			var _g = 0;
			var _g1 = ch;
			while(_g < _g1) {
				var j = _g++;
				if(!doNotDecode[j]) {
					break;
				} else if(j == ch - 1) {
					return;
				}
			}
			var _g = 0;
			while(_g < 8) {
				var pass = _g++;
				var pcount = 0;
				var classSet = 0;
				if(ch == 2) {
					while(pcount < partRead) {
						var z = this.begin + pcount * partSize;
						var cInter = z & 1;
						var pInter = z >>> 1;
						if(pass == 0) {
							var c = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i = c.fastHuffman[decodeState.acc & 1023];
							var val;
							if(i >= 0) {
								var l = c.codewordLengths[i];
								decodeState.acc = decodeState.acc >>> l;
								decodeState.validBits -= l;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val = -1;
								} else {
									val = i;
								}
							} else {
								val = decodeState.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							var q = val;
							if(q == -1) {
								return;
							}
							var i1 = classwords;
							while(--i1 >= 0) {
								classifications[i1 + pcount] = q % this.classifications;
								q = q / this.classifications | 0;
							}
						}
						var _g1 = 0;
						var _g2 = classwords;
						while(_g1 < _g2) {
							var i2 = _g1++;
							if(pcount >= partRead) {
								break;
							}
							var z1 = this.begin + pcount * partSize;
							var c1 = classifications[pcount];
							var b = this.residueBooks[c1][pass];
							if(b >= 0) {
								var book = codebooks[b];
								var result = book.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter,pInter,n,partSize);
								if(result == null) {
									return;
								} else {
									cInter = result.cInter;
									pInter = result.pInter;
								}
							} else {
								z1 = z1 + partSize;
								cInter = z1 & 1;
								pInter = z1 >>> 1;
							}
							++pcount;
						}
					}
				} else if(ch == 1) {
					while(pcount < partRead) {
						var z2 = this.begin + pcount * partSize;
						var cInter1 = 0;
						var pInter1 = z2;
						if(pass == 0) {
							var c2 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i3 = c2.fastHuffman[decodeState.acc & 1023];
							var val1;
							if(i3 >= 0) {
								var l1 = c2.codewordLengths[i3];
								decodeState.acc = decodeState.acc >>> l1;
								decodeState.validBits -= l1;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val1 = -1;
								} else {
									val1 = i3;
								}
							} else {
								val1 = decodeState.decodeScalarRaw(c2);
							}
							if(c2.sparse) {
								val1 = c2.sortedValues[val1];
							}
							var q1 = val1;
							if(q1 == -1) {
								return;
							}
							var i4 = classwords;
							while(--i4 >= 0) {
								classifications[i4 + pcount] = q1 % this.classifications;
								q1 = q1 / this.classifications | 0;
							}
						}
						var _g3 = 0;
						var _g4 = classwords;
						while(_g3 < _g4) {
							var i5 = _g3++;
							if(pcount >= partRead) {
								break;
							}
							var z3 = this.begin + pcount * partSize;
							var b1 = this.residueBooks[classifications[pcount]][pass];
							if(b1 >= 0) {
								var book1 = codebooks[b1];
								var result1 = book1.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter1,pInter1,n,partSize);
								if(result1 == null) {
									return;
								} else {
									cInter1 = result1.cInter;
									pInter1 = result1.pInter;
								}
							} else {
								z3 = z3 + partSize;
								cInter1 = 0;
								pInter1 = z3;
							}
							++pcount;
						}
					}
				} else {
					while(pcount < partRead) {
						var z4 = this.begin + pcount * partSize;
						var cInter2 = UInt.toFloat(z4) % UInt.toFloat(ch) | 0;
						var pInter2 = UInt.toFloat(z4) / UInt.toFloat(ch) | 0;
						if(pass == 0) {
							var c3 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i6 = c3.fastHuffman[decodeState.acc & 1023];
							var val2;
							if(i6 >= 0) {
								var l2 = c3.codewordLengths[i6];
								decodeState.acc = decodeState.acc >>> l2;
								decodeState.validBits -= l2;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val2 = -1;
								} else {
									val2 = i6;
								}
							} else {
								val2 = decodeState.decodeScalarRaw(c3);
							}
							if(c3.sparse) {
								val2 = c3.sortedValues[val2];
							}
							var q2 = val2;
							if(q2 == -1) {
								return;
							}
							var i7 = classwords;
							while(--i7 >= 0) {
								classifications[i7 + pcount] = q2 % this.classifications;
								q2 = q2 / this.classifications | 0;
							}
						}
						var _g5 = 0;
						var _g6 = classwords;
						while(_g5 < _g6) {
							var i8 = _g5++;
							if(pcount >= partRead) {
								break;
							}
							var z5 = this.begin + pcount * partSize;
							var b2 = this.residueBooks[classifications[pcount]][pass];
							if(b2 >= 0) {
								var book2 = codebooks[b2];
								var result2 = book2.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter2,pInter2,n,partSize);
								if(result2 == null) {
									return;
								} else {
									cInter2 = result2.cInter;
									pInter2 = result2.pInter;
								}
							} else {
								z5 = z5 + partSize;
								cInter2 = UInt.toFloat(z5) % UInt.toFloat(ch) | 0;
								pInter2 = UInt.toFloat(z5) / UInt.toFloat(ch) | 0;
							}
							++pcount;
						}
					}
				}
			}
			return;
		}
		var _g = 0;
		while(_g < 8) {
			var pass = _g++;
			var pcount = 0;
			var classSet = 0;
			while(pcount < partRead) {
				if(pass == 0) {
					var _g1 = 0;
					var _g2 = ch;
					while(_g1 < _g2) {
						var j = _g1++;
						if(!doNotDecode[j]) {
							var c = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i = c.fastHuffman[decodeState.acc & 1023];
							var val;
							if(i >= 0) {
								var l = c.codewordLengths[i];
								decodeState.acc = decodeState.acc >>> l;
								decodeState.validBits -= l;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val = -1;
								} else {
									val = i;
								}
							} else {
								val = decodeState.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							var temp = val;
							if(temp == -1) {
								return;
							}
							var i1 = classwords;
							while(--i1 >= 0) {
								classifications[j * partRead + i1 + pcount] = temp % this.classifications;
								temp = temp / this.classifications | 0;
							}
						}
					}
				}
				var _g3 = 0;
				var _g4 = classwords;
				while(_g3 < _g4) {
					var i2 = _g3++;
					if(pcount >= partRead) {
						break;
					}
					var _g5 = 0;
					var _g6 = ch;
					while(_g5 < _g6) {
						var j1 = _g5++;
						if(!doNotDecode[j1]) {
							var c1 = classifications[j1 * partRead + pcount];
							var b = this.residueBooks[c1][pass];
							if(b >= 0) {
								var target = residueBuffers[j1];
								var offset = this.begin + pcount * partSize;
								var n = partSize;
								var book = codebooks[b];
								if(!book.residueDecode(decodeState,target,offset,n,this.type)) {
									return;
								}
							}
						}
					}
					++pcount;
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Residue
};
var kha_audio2_ogg_vorbis_data_Setting = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.Setting"] = kha_audio2_ogg_vorbis_data_Setting;
kha_audio2_ogg_vorbis_data_Setting.__name__ = true;
var kha_graphics1_Graphics = function() { };
$hxClasses["kha.graphics1.Graphics"] = kha_graphics1_Graphics;
kha_graphics1_Graphics.__name__ = true;
kha_graphics1_Graphics.__isInterface__ = true;
kha_graphics1_Graphics.prototype = {
	begin: null
	,end: null
	,setPixel: null
	,__class__: kha_graphics1_Graphics
};
var kha_graphics2_Graphics = function() {
	this.transformations = [new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1)];
	this.transformationIndex = 0;
	this.opacities = [1];
	this.myFontSize = 12;
	this.pipe = null;
};
$hxClasses["kha.graphics2.Graphics"] = kha_graphics2_Graphics;
kha_graphics2_Graphics.__name__ = true;
kha_graphics2_Graphics.prototype = {
	begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
	}
	,end: function() {
	}
	,flush: function() {
	}
	,clear: function(color) {
	}
	,drawImage: function(img,x,y) {
		this.drawSubImage(img,x,y,0,0,img.get_width(),img.get_height());
	}
	,drawSubImage: function(img,x,y,sx,sy,sw,sh) {
		this.drawScaledSubImage(img,sx,sy,sw,sh,x,y,sw,sh);
	}
	,drawScaledImage: function(img,dx,dy,dw,dh) {
		this.drawScaledSubImage(img,0,0,img.get_width(),img.get_height(),dx,dy,dw,dh);
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,fillRect: function(x,y,width,height) {
	}
	,drawString: function(text,x,y) {
	}
	,drawCharacters: function(text,start,length,x,y) {
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,drawVideo: function(video,x,y,width,height) {
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
	}
	,get_imageScaleQuality: function() {
		return 0;
	}
	,set_imageScaleQuality: function(value) {
		return 1;
	}
	,get_mipmapScaleQuality: function() {
		return 0;
	}
	,set_mipmapScaleQuality: function(value) {
		return 1;
	}
	,get_color: function() {
		return -16777216;
	}
	,set_color: function(color) {
		return -16777216;
	}
	,get_font: function() {
		return null;
	}
	,set_font: function(font) {
		return null;
	}
	,get_fontSize: function() {
		return this.myFontSize;
	}
	,set_fontSize: function(value) {
		return this.myFontSize = value;
	}
	,get_transformation: function() {
		return this.transformations[this.transformationIndex];
	}
	,set_transformation: function(transformation) {
		this.setTransformation(transformation);
		var _this = this.transformations[this.transformationIndex];
		_this._00 = transformation._00;
		_this._10 = transformation._10;
		_this._20 = transformation._20;
		_this._01 = transformation._01;
		_this._11 = transformation._11;
		_this._21 = transformation._21;
		_this._02 = transformation._02;
		_this._12 = transformation._12;
		_this._22 = transformation._22;
		return transformation;
	}
	,pushTransformation: function(trans) {
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans._00;
		_this._10 = trans._10;
		_this._20 = trans._20;
		_this._01 = trans._01;
		_this._11 = trans._11;
		_this._21 = trans._21;
		_this._02 = trans._02;
		_this._12 = trans._12;
		_this._22 = trans._22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,popTransformation: function() {
		this.transformationIndex--;
		this.setTransformation(this.transformations[this.transformationIndex]);
		return this.transformations[this.transformationIndex + 1];
	}
	,scale: function(x,y) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = x;
		var _this__10 = 0;
		var _this__20 = 0;
		var _this__01 = 0;
		var _this__11 = y;
		var _this__21 = 0;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var m__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var m__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var m__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var m__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var m__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var m__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var m__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var m__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var m__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
	}
	,translation: function(tx,ty) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = tx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = ty;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		return new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22);
	}
	,translate: function(tx,ty) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = tx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = ty;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var m__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var m__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var m__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var m__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var m__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var m__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var m__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var m__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var m__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
	}
	,pushTranslation: function(tx,ty) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = tx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = ty;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var trans__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var trans__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var trans__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var trans__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var trans__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var trans__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var trans__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var trans__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var trans__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,rotation: function(angle,centerx,centery) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = centerx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = centery;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = Math.cos(angle);
		var m__10 = -Math.sin(angle);
		var m__20 = 0;
		var m__01 = Math.sin(angle);
		var m__11 = Math.cos(angle);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = -centerx;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = -centery;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__00 = _this__001 * m__00 + _this__101 * m__01 + _this__201 * m__02;
		var _this__10 = _this__001 * m__10 + _this__101 * m__11 + _this__201 * m__12;
		var _this__20 = _this__001 * m__20 + _this__101 * m__21 + _this__201 * m__22;
		var _this__01 = _this__011 * m__00 + _this__111 * m__01 + _this__211 * m__02;
		var _this__11 = _this__011 * m__10 + _this__111 * m__11 + _this__211 * m__12;
		var _this__21 = _this__011 * m__20 + _this__111 * m__21 + _this__211 * m__22;
		var _this__02 = _this__021 * m__00 + _this__121 * m__01 + _this__221 * m__02;
		var _this__12 = _this__021 * m__10 + _this__121 * m__11 + _this__221 * m__12;
		var _this__22 = _this__021 * m__20 + _this__121 * m__21 + _this__221 * m__22;
		var m = this.transformations[this.transformationIndex];
		return new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22);
	}
	,rotate: function(angle,centerx,centery) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = centerx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = centery;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = Math.cos(angle);
		var m__10 = -Math.sin(angle);
		var m__20 = 0;
		var m__01 = Math.sin(angle);
		var m__11 = Math.cos(angle);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = -centerx;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = -centery;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__00 = _this__001 * m__00 + _this__101 * m__01 + _this__201 * m__02;
		var _this__10 = _this__001 * m__10 + _this__101 * m__11 + _this__201 * m__12;
		var _this__20 = _this__001 * m__20 + _this__101 * m__21 + _this__201 * m__22;
		var _this__01 = _this__011 * m__00 + _this__111 * m__01 + _this__211 * m__02;
		var _this__11 = _this__011 * m__10 + _this__111 * m__11 + _this__211 * m__12;
		var _this__21 = _this__011 * m__20 + _this__111 * m__21 + _this__211 * m__22;
		var _this__02 = _this__021 * m__00 + _this__121 * m__01 + _this__221 * m__02;
		var _this__12 = _this__021 * m__10 + _this__121 * m__11 + _this__221 * m__12;
		var _this__22 = _this__021 * m__20 + _this__121 * m__21 + _this__221 * m__22;
		var m = this.transformations[this.transformationIndex];
		var m__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var m__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var m__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var m__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var m__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var m__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var m__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var m__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var m__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
	}
	,pushRotation: function(angle,centerx,centery) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = centerx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = centery;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = Math.cos(angle);
		var m__10 = -Math.sin(angle);
		var m__20 = 0;
		var m__01 = Math.sin(angle);
		var m__11 = Math.cos(angle);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = -centerx;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = -centery;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__00 = _this__001 * m__00 + _this__101 * m__01 + _this__201 * m__02;
		var _this__10 = _this__001 * m__10 + _this__101 * m__11 + _this__201 * m__12;
		var _this__20 = _this__001 * m__20 + _this__101 * m__21 + _this__201 * m__22;
		var _this__01 = _this__011 * m__00 + _this__111 * m__01 + _this__211 * m__02;
		var _this__11 = _this__011 * m__10 + _this__111 * m__11 + _this__211 * m__12;
		var _this__21 = _this__011 * m__20 + _this__111 * m__21 + _this__211 * m__22;
		var _this__02 = _this__021 * m__00 + _this__121 * m__01 + _this__221 * m__02;
		var _this__12 = _this__021 * m__10 + _this__121 * m__11 + _this__221 * m__12;
		var _this__22 = _this__021 * m__20 + _this__121 * m__21 + _this__221 * m__22;
		var m = this.transformations[this.transformationIndex];
		var trans__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var trans__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var trans__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var trans__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var trans__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var trans__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var trans__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var trans__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var trans__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,pushOpacity: function(opacity) {
		this.setOpacity(opacity);
		this.opacities.push(opacity);
	}
	,popOpacity: function() {
		var ret = this.opacities.pop();
		this.setOpacity(this.get_opacity());
		return ret;
	}
	,get_opacity: function() {
		return this.opacities[this.opacities.length - 1];
	}
	,set_opacity: function(opacity) {
		this.setOpacity(opacity);
		return this.opacities[this.opacities.length - 1] = opacity;
	}
	,scissor: function(x,y,width,height) {
	}
	,disableScissor: function() {
	}
	,pipe: null
	,get_pipeline: function() {
		return this.pipe;
	}
	,set_pipeline: function(pipeline) {
		this.setPipeline(pipeline);
		return this.pipe = pipeline;
	}
	,transformations: null
	,transformationIndex: null
	,opacities: null
	,myFontSize: null
	,setTransformation: function(transformation) {
	}
	,setOpacity: function(opacity) {
	}
	,setPipeline: function(pipeline) {
	}
	,__class__: kha_graphics2_Graphics
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline",set_opacity:"set_opacity",get_opacity:"get_opacity",set_transformation:"set_transformation",get_transformation:"get_transformation",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_font:"set_font",get_font:"get_font",set_color:"set_color",get_color:"get_color",set_mipmapScaleQuality:"set_mipmapScaleQuality",get_mipmapScaleQuality:"get_mipmapScaleQuality",set_imageScaleQuality:"set_imageScaleQuality",get_imageScaleQuality:"get_imageScaleQuality"}
};
var kha_graphics2_Graphics1 = function(canvas) {
	this.canvas = canvas;
};
$hxClasses["kha.graphics2.Graphics1"] = kha_graphics2_Graphics1;
kha_graphics2_Graphics1.__name__ = true;
kha_graphics2_Graphics1.__interfaces__ = [kha_graphics1_Graphics];
kha_graphics2_Graphics1.prototype = {
	canvas: null
	,texture: null
	,pixels: null
	,begin: function() {
		if(this.texture == null || (this.texture.get_realWidth() != this.canvas.get_width() || this.texture.get_realHeight() != this.canvas.get_height())) {
			this.texture = kha_Image.create(this.canvas.get_width(),this.canvas.get_height(),0,2);
		}
		this.pixels = this.texture.lock();
	}
	,end: function() {
		this.texture.unlock();
		this.canvas.get_g2().begin(false);
		this.canvas.get_g2().drawImage(this.texture,0,0);
		this.canvas.get_g2().end();
	}
	,setPixel: function(x,y,color) {
		this.pixels.setInt32(y * this.texture.get_stride() + x * 4,kha_Color.fromBytes(color & 255,(color & 65280) >>> 8,(color & 16711680) >>> 16,color >>> 24));
	}
	,__class__: kha_graphics2_Graphics1
};
var kha_graphics2_GraphicsExtension = function() { };
$hxClasses["kha.graphics2.GraphicsExtension"] = kha_graphics2_GraphicsExtension;
kha_graphics2_GraphicsExtension.__name__ = true;
kha_graphics2_GraphicsExtension.drawArc = function(g2,cx,cy,radius,sAngle,eAngle,strength,ccw,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(ccw == null) {
		ccw = false;
	}
	if(strength == null) {
		strength = 1;
	}
	if(kha_SystemImpl.gl == null) {
		var g = g2;
		radius -= strength / 2;
		g.drawArc(cx,cy,radius,sAngle,eAngle,strength,ccw);
		return;
	}
	sAngle %= Math.PI * 2;
	eAngle %= Math.PI * 2;
	if(ccw) {
		if(eAngle > sAngle) {
			eAngle -= Math.PI * 2;
		}
	} else if(eAngle < sAngle) {
		eAngle += Math.PI * 2;
	}
	radius += strength / 2;
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = (eAngle - sAngle) / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = Math.cos(sAngle) * radius;
	var y = Math.sin(sAngle) * radius;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		kha_graphics2_GraphicsExtension.drawInnerLine(g2,x + cx,y + cy,px,py,strength);
	}
};
kha_graphics2_GraphicsExtension.fillArc = function(g2,cx,cy,radius,sAngle,eAngle,ccw,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(ccw == null) {
		ccw = false;
	}
	if(kha_SystemImpl.gl == null) {
		var g = g2;
		g.fillArc(cx,cy,radius,sAngle,eAngle,ccw);
		return;
	}
	sAngle %= Math.PI * 2;
	eAngle %= Math.PI * 2;
	if(ccw) {
		if(eAngle > sAngle) {
			eAngle -= Math.PI * 2;
		}
	} else if(eAngle < sAngle) {
		eAngle += Math.PI * 2;
	}
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = (eAngle - sAngle) / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = Math.cos(sAngle) * radius;
	var y = Math.sin(sAngle) * radius;
	var sx = x + cx;
	var sy = y + cy;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		g2.fillTriangle(px,py,x + cx,y + cy,sx,sy);
	}
};
kha_graphics2_GraphicsExtension.drawCircle = function(g2,cx,cy,radius,strength,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(strength == null) {
		strength = 1;
	}
	if(kha_SystemImpl.gl == null) {
		var g = g2;
		radius -= strength / 2;
		g.drawCircle(cx,cy,radius,strength);
		return;
	}
	radius += strength / 2;
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = 2 * Math.PI / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = radius;
	var y = 0.0;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		kha_graphics2_GraphicsExtension.drawInnerLine(g2,x + cx,y + cy,px,py,strength);
	}
};
kha_graphics2_GraphicsExtension.drawInnerLine = function(g2,x1,y1,x2,y2,strength) {
	var side = y2 > y1 ? 1 : 0;
	if(y2 == y1) {
		side = x2 - x1 > 0 ? 1 : 0;
	}
	var vec_x = 0;
	var vec_y = 0;
	if(y2 == y1) {
		var x = 0;
		var y = -1;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var v_x = x;
		var v_y = y;
		vec_x = v_x;
		vec_y = v_y;
	} else {
		var x = 1;
		var y = -(x2 - x1) / (y2 - y1);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var v_x = x;
		var v_y = y;
		vec_x = v_x;
		vec_y = v_y;
	}
	var currentLength = Math.sqrt(vec_x * vec_x + vec_y * vec_y);
	if(currentLength != 0) {
		var mul = strength / currentLength;
		vec_x *= mul;
		vec_y *= mul;
	}
	var x = x1 + side * vec_x;
	var y = y1 + side * vec_y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p1_x = x;
	var p1_y = y;
	var x = x2 + side * vec_x;
	var y = y2 + side * vec_y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p2_x = x;
	var p2_y = y;
	var x = p1_x - vec_x;
	var y = p1_y - vec_y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p3_x = x;
	var p3_y = y;
	var x = p2_x - vec_x;
	var y = p2_y - vec_y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p4_x = x;
	var p4_y = y;
	g2.fillTriangle(p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
	g2.fillTriangle(p3_x,p3_y,p2_x,p2_y,p4_x,p4_y);
};
kha_graphics2_GraphicsExtension.fillCircle = function(g2,cx,cy,radius,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(kha_SystemImpl.gl == null) {
		var g = g2;
		g.fillCircle(cx,cy,radius);
		return;
	}
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = 2 * Math.PI / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = radius;
	var y = 0.0;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		g2.fillTriangle(px,py,x + cx,y + cy,cx,cy);
	}
};
kha_graphics2_GraphicsExtension.drawPolygon = function(g2,x,y,vertices,strength) {
	if(strength == null) {
		strength = 1;
	}
	var iterator_current = 0;
	var iterator_array = vertices;
	var v0 = iterator_array[iterator_current++];
	var v1 = v0;
	while(iterator_current < iterator_array.length) {
		var v2 = iterator_array[iterator_current++];
		g2.drawLine(v1.x + x,v1.y + y,v2.x + x,v2.y + y,strength);
		v1 = v2;
	}
	g2.drawLine(v1.x + x,v1.y + y,v0.x + x,v0.y + y,strength);
};
kha_graphics2_GraphicsExtension.fillPolygon = function(g2,x,y,vertices) {
	var iterator_current = 0;
	var iterator_array = vertices;
	if(iterator_current >= iterator_array.length) {
		return;
	}
	var v0 = iterator_array[iterator_current++];
	if(iterator_current >= iterator_array.length) {
		return;
	}
	var v1 = iterator_array[iterator_current++];
	while(iterator_current < iterator_array.length) {
		var v2 = iterator_array[iterator_current++];
		g2.fillTriangle(v0.x + x,v0.y + y,v1.x + x,v1.y + y,v2.x + x,v2.y + y);
		v1 = v2;
	}
};
kha_graphics2_GraphicsExtension.drawCubicBezier = function(g2,x,y,segments,strength) {
	if(strength == null) {
		strength = 1.0;
	}
	if(segments == null) {
		segments = 20;
	}
	var t;
	var q0 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(0,x,y);
	var q1;
	var _g = 1;
	var _g1 = segments + 1;
	while(_g < _g1) {
		var i = _g++;
		t = i / segments;
		q1 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(t,x,y);
		g2.drawLine(q0[0],q0[1],q1[0],q1[1],strength);
		q0 = q1;
	}
};
kha_graphics2_GraphicsExtension.drawCubicBezierPath = function(g2,x,y,segments,strength) {
	if(strength == null) {
		strength = 1.0;
	}
	if(segments == null) {
		segments = 20;
	}
	var i = 0;
	var t;
	var q0 = null;
	var q1 = null;
	while(i < x.length - 3) {
		if(i == 0) {
			q0 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(0,[x[i],x[i + 1],x[i + 2],x[i + 3]],[y[i],y[i + 1],y[i + 2],y[i + 3]]);
		}
		var _g = 1;
		var _g1 = segments + 1;
		while(_g < _g1) {
			var j = _g++;
			t = j / segments;
			q1 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(t,[x[i],x[i + 1],x[i + 2],x[i + 3]],[y[i],y[i + 1],y[i + 2],y[i + 3]]);
			g2.drawLine(q0[0],q0[1],q1[0],q1[1],strength);
			q0 = q1;
		}
		i += 3;
	}
};
kha_graphics2_GraphicsExtension.calculateCubicBezierPoint = function(t,x,y) {
	var u = 1 - t;
	var tt = t * t;
	var uu = u * u;
	var uuu = uu * u;
	var ttt = tt * t;
	var p = [uuu * x[0],uuu * y[0]];
	p[0] += 3 * uu * t * x[1];
	p[1] += 3 * uu * t * y[1];
	p[0] += 3 * u * tt * x[2];
	p[1] += 3 * u * tt * y[2];
	p[0] += ttt * x[3];
	p[1] += ttt * y[3];
	return p;
};
kha_graphics2_GraphicsExtension.drawAlignedString = function(g2,text,x,y,horAlign,verAlign) {
	var xoffset = 0.0;
	if(horAlign == 1 || horAlign == 2) {
		var width = g2.get_font().width(g2.get_fontSize(),text);
		if(horAlign == 1) {
			xoffset = -width * 0.5;
		} else {
			xoffset = -width;
		}
	}
	var yoffset = 0.0;
	if(verAlign == 1 || verAlign == 2) {
		var height = g2.get_font().height(g2.get_fontSize());
		if(verAlign == 1) {
			yoffset = -height * 0.5;
		} else {
			yoffset = -height;
		}
	}
	g2.drawString(text,x + xoffset,y + yoffset);
};
kha_graphics2_GraphicsExtension.drawAlignedCharacters = function(g2,text,start,length,x,y,horAlign,verAlign) {
	var xoffset = 0.0;
	if(horAlign == 1 || horAlign == 2) {
		var width = g2.get_font().widthOfCharacters(g2.get_fontSize(),text,start,length);
		if(horAlign == 1) {
			xoffset = -width * 0.5;
		} else {
			xoffset = -width;
		}
	}
	var yoffset = 0.0;
	if(verAlign == 1 || verAlign == 2) {
		var height = g2.get_font().height(g2.get_fontSize());
		if(verAlign == 1) {
			yoffset = -height * 0.5;
		} else {
			yoffset = -height;
		}
	}
	g2.drawCharacters(text,start,length,x + xoffset,y + yoffset);
};
var kha_graphics2_truetype_VectorOfIntPointer = function() {
};
$hxClasses["kha.graphics2.truetype.VectorOfIntPointer"] = kha_graphics2_truetype_VectorOfIntPointer;
kha_graphics2_truetype_VectorOfIntPointer.__name__ = true;
kha_graphics2_truetype_VectorOfIntPointer.prototype = {
	value: null
	,__class__: kha_graphics2_truetype_VectorOfIntPointer
};
var kha_graphics2_truetype_Stbtt_$temp_$rect = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_rect"] = kha_graphics2_truetype_Stbtt_$temp_$rect;
kha_graphics2_truetype_Stbtt_$temp_$rect.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$rect.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$rect
};
var kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.prototype = {
	advanceWidth: null
	,leftSideBearing: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_font_v_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.prototype = {
	ascent: null
	,descent: null
	,lineGap: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$region = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_region"] = kha_graphics2_truetype_Stbtt_$temp_$region;
kha_graphics2_truetype_Stbtt_$temp_$region.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$region.prototype = {
	width: null
	,height: null
	,xoff: null
	,yoff: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$region
};
var kha_graphics2_truetype_Stbtt_$_$buf = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__buf"] = kha_graphics2_truetype_Stbtt_$_$buf;
kha_graphics2_truetype_Stbtt_$_$buf.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$buf.prototype = {
	data: null
	,cursor: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$buf
};
var kha_graphics2_truetype_Stbtt_$bakedchar = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_bakedchar"] = kha_graphics2_truetype_Stbtt_$bakedchar;
kha_graphics2_truetype_Stbtt_$bakedchar.__name__ = true;
kha_graphics2_truetype_Stbtt_$bakedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,__class__: kha_graphics2_truetype_Stbtt_$bakedchar
};
var kha_graphics2_truetype_Stbtt_$aligned_$quad = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_aligned_quad"] = kha_graphics2_truetype_Stbtt_$aligned_$quad;
kha_graphics2_truetype_Stbtt_$aligned_$quad.__name__ = true;
kha_graphics2_truetype_Stbtt_$aligned_$quad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,__class__: kha_graphics2_truetype_Stbtt_$aligned_$quad
};
var kha_graphics2_truetype_Stbtt_$packedchar = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_packedchar"] = kha_graphics2_truetype_Stbtt_$packedchar;
kha_graphics2_truetype_Stbtt_$packedchar.__name__ = true;
kha_graphics2_truetype_Stbtt_$packedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,xoff2: null
	,yoff2: null
	,__class__: kha_graphics2_truetype_Stbtt_$packedchar
};
var kha_graphics2_truetype_Stbtt_$pack_$range = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_range"] = kha_graphics2_truetype_Stbtt_$pack_$range;
kha_graphics2_truetype_Stbtt_$pack_$range.__name__ = true;
kha_graphics2_truetype_Stbtt_$pack_$range.prototype = {
	font_size: null
	,first_unicode_codepoint_in_range: null
	,array_of_unicode_codepoints: null
	,num_chars: null
	,chardata_for_range: null
	,h_oversample: null
	,v_oversample: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$range
};
var kha_graphics2_truetype_Stbtt_$pack_$context = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_context"] = kha_graphics2_truetype_Stbtt_$pack_$context;
kha_graphics2_truetype_Stbtt_$pack_$context.__name__ = true;
kha_graphics2_truetype_Stbtt_$pack_$context.prototype = {
	width: null
	,height: null
	,stride_in_bytes: null
	,padding: null
	,h_oversample: null
	,v_oversample: null
	,pixels: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$context
};
var kha_graphics2_truetype_Stbtt_$fontinfo = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_fontinfo"] = kha_graphics2_truetype_Stbtt_$fontinfo;
kha_graphics2_truetype_Stbtt_$fontinfo.__name__ = true;
kha_graphics2_truetype_Stbtt_$fontinfo.prototype = {
	data: null
	,fontstart: null
	,numGlyphs: null
	,loca: null
	,head: null
	,glyf: null
	,hhea: null
	,hmtx: null
	,kern: null
	,gpos: null
	,index_map: null
	,indexToLocFormat: null
	,cff: null
	,charstrings: null
	,gsubrs: null
	,subrs: null
	,fontdicts: null
	,fdselect: null
	,__class__: kha_graphics2_truetype_Stbtt_$fontinfo
};
var kha_graphics2_truetype_Stbtt_$vertex = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_vertex"] = kha_graphics2_truetype_Stbtt_$vertex;
kha_graphics2_truetype_Stbtt_$vertex.__name__ = true;
kha_graphics2_truetype_Stbtt_$vertex.prototype = {
	x: null
	,y: null
	,cx: null
	,cy: null
	,cx1: null
	,cy1: null
	,type: null
	,padding: null
	,__class__: kha_graphics2_truetype_Stbtt_$vertex
};
var kha_graphics2_truetype_Stbtt_$_$bitmap = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__bitmap"] = kha_graphics2_truetype_Stbtt_$_$bitmap;
kha_graphics2_truetype_Stbtt_$_$bitmap.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$bitmap.prototype = {
	w: null
	,h: null
	,stride: null
	,pixels: null
	,pixels_offset: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$bitmap
};
var kha_graphics2_truetype_Stbtt_$_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__edge"] = kha_graphics2_truetype_Stbtt_$_$edge;
kha_graphics2_truetype_Stbtt_$_$edge.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$edge.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,invert: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$edge
};
var kha_graphics2_truetype_Stbtt_$_$active_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__active_edge"] = kha_graphics2_truetype_Stbtt_$_$active_$edge;
kha_graphics2_truetype_Stbtt_$_$active_$edge.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$active_$edge.prototype = {
	next: null
	,fx: null
	,fdx: null
	,fdy: null
	,direction: null
	,sy: null
	,ey: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$active_$edge
};
var kha_graphics2_truetype_Stbtt_$_$point = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__point"] = kha_graphics2_truetype_Stbtt_$_$point;
kha_graphics2_truetype_Stbtt_$_$point.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$point.prototype = {
	x: null
	,y: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$point
};
var kha_graphics2_truetype_Stbtt_$_$csctx = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__csctx"] = kha_graphics2_truetype_Stbtt_$_$csctx;
kha_graphics2_truetype_Stbtt_$_$csctx.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$csctx.prototype = {
	bounds: null
	,started: null
	,first_x: null
	,first_y: null
	,x: null
	,y: null
	,min_x: null
	,min_y: null
	,max_x: null
	,max_y: null
	,pvertices: null
	,num_vertices: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$csctx
};
var kha_graphics2_truetype_StbTruetype = function() { };
$hxClasses["kha.graphics2.truetype.StbTruetype"] = kha_graphics2_truetype_StbTruetype;
kha_graphics2_truetype_StbTruetype.__name__ = true;
kha_graphics2_truetype_StbTruetype.STBTT_assert = function(value) {
	if(!value) {
		throw haxe_Exception.thrown("Error");
	}
};
kha_graphics2_truetype_StbTruetype.STBTT_POINT_SIZE = function(x) {
	return -x;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_get8 = function(b) {
	if(b.cursor >= b.data.get_length()) {
		return 0;
	}
	var pos = b.cursor++;
	if(pos == null) {
		pos = 0;
	}
	return b.data.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_peek8 = function(b) {
	if(b.cursor >= b.data.get_length()) {
		return 0;
	}
	var pos = b.cursor;
	if(pos == null) {
		pos = 0;
	}
	return b.data.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_seek = function(b,o) {
	if(o > b.data.get_length() || o < 0) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_skip = function(b,o) {
	var o1 = b.cursor + o;
	if(o1 > b.data.get_length() || o1 < 0) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = o1 > b.data.get_length() || o1 < 0 ? b.data.get_length() : o1;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_get = function(b,n) {
	var v = 0;
	if(!(n >= 1 && n <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	return v;
};
kha_graphics2_truetype_StbTruetype.stbtt__new_buf = function(p,size) {
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	if(size >= 1073741824) {
		throw haxe_Exception.thrown("Error");
	}
	r.data = p;
	r.cursor = 0;
	return r;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_get16 = function(b) {
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	return v;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_get32 = function(b) {
	var v = 0;
	var _g = 0;
	var _g1 = 4;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	return v;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_range = function(b,o,s) {
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	var r1 = r;
	if(o < 0 || s < 0 || o > b.data.get_length() || s > b.data.get_length() - o) {
		return r1;
	}
	r1.data = b.data.sub(o,s);
	return r1;
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_get_index = function(b) {
	var start = b.cursor;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	if(count > 0) {
		var offsize;
		if(b.cursor >= b.data.get_length()) {
			offsize = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			offsize = b.data.readU8(pos);
		}
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var o = b.cursor + offsize * count;
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var v = 0;
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var _g = 0;
		var _g1 = offsize;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var o = b.cursor + (v - 1);
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var s = b.cursor - start;
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
			return r1;
		} else {
			r1.data = b.data.sub(start,s);
			return r1;
		}
	}
	return b;
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_int = function(b) {
	var b0;
	if(b.cursor >= b.data.get_length()) {
		b0 = 0;
	} else {
		var pos = b.cursor++;
		if(pos == null) {
			pos = 0;
		}
		b0 = b.data.readU8(pos);
	}
	if(b0 >= 32 && b0 <= 246) {
		return b0 - 139;
	} else if(b0 >= 247 && b0 <= 250) {
		var tmp;
		if(b.cursor >= b.data.get_length()) {
			tmp = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			tmp = b.data.readU8(pos);
		}
		return (b0 - 247) * 256 + tmp + 108;
	} else if(b0 >= 251 && b0 <= 254) {
		var tmp;
		if(b.cursor >= b.data.get_length()) {
			tmp = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			tmp = b.data.readU8(pos);
		}
		return -(b0 - 251) * 256 - tmp - 108;
	} else if(b0 == 28) {
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		return v;
	} else if(b0 == 29) {
		var v = 0;
		var _g = 0;
		var _g1 = 4;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		return v;
	} else {
		throw haxe_Exception.thrown("Error");
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_skip_operand = function(b) {
	var v;
	var b0;
	if(b.cursor >= b.data.get_length()) {
		b0 = 0;
	} else {
		var pos = b.cursor;
		if(pos == null) {
			pos = 0;
		}
		b0 = b.data.readU8(pos);
	}
	if(b0 < 28) {
		throw haxe_Exception.thrown("Error");
	}
	if(b0 == 30) {
		var o = b.cursor + 1;
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		while(b.cursor < b.data.get_length()) {
			if(b.cursor >= b.data.get_length()) {
				v = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v = b.data.readU8(pos);
			}
			if((v & 15) == 15 || v >> 4 == 15) {
				break;
			}
		}
	} else {
		var b0;
		if(b.cursor >= b.data.get_length()) {
			b0 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			b0 = b.data.readU8(pos);
		}
		if(!(b0 >= 32 && b0 <= 246)) {
			if(b0 >= 247 && b0 <= 250) {
				if(b.cursor < b.data.get_length()) {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					b.data.readU8(pos);
				}
			} else if(b0 >= 251 && b0 <= 254) {
				if(b.cursor < b.data.get_length()) {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					b.data.readU8(pos);
				}
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i = _g++;
					var v1;
					if(b.cursor >= b.data.get_length()) {
						v1 = 0;
					} else {
						var pos = b.cursor++;
						if(pos == null) {
							pos = 0;
						}
						v1 = b.data.readU8(pos);
					}
					v = v << 8 | v1;
				}
			} else if(b0 == 29) {
				var v = 0;
				var _g = 0;
				var _g1 = 4;
				while(_g < _g1) {
					var i = _g++;
					var v1;
					if(b.cursor >= b.data.get_length()) {
						v1 = 0;
					} else {
						var pos = b.cursor++;
						if(pos == null) {
							pos = 0;
						}
						v1 = b.data.readU8(pos);
					}
					v = v << 8 | v1;
				}
			} else {
				throw haxe_Exception.thrown("Error");
			}
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__dict_get = function(b,key) {
	if(0 > b.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var ret = null;
	while(b.cursor < b.data.get_length()) {
		var start = b.cursor;
		var op;
		while(true) {
			var tmp;
			if(b.cursor >= b.data.get_length()) {
				tmp = 0;
			} else {
				var pos = b.cursor;
				if(pos == null) {
					pos = 0;
				}
				tmp = b.data.readU8(pos);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v;
			var b0;
			if(b.cursor >= b.data.get_length()) {
				b0 = 0;
			} else {
				var pos1 = b.cursor;
				if(pos1 == null) {
					pos1 = 0;
				}
				b0 = b.data.readU8(pos1);
			}
			if(b0 < 28) {
				throw haxe_Exception.thrown("Error");
			}
			if(b0 == 30) {
				var o = b.cursor + 1;
				if(o > b.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				while(b.cursor < b.data.get_length()) {
					if(b.cursor >= b.data.get_length()) {
						v = 0;
					} else {
						var pos2 = b.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						v = b.data.readU8(pos2);
					}
					if((v & 15) == 15 || v >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(b.cursor >= b.data.get_length()) {
					b01 = 0;
				} else {
					var pos3 = b.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					b01 = b.data.readU8(pos3);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(b.cursor < b.data.get_length()) {
							var pos4 = b.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
							b.data.readU8(pos4);
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(b.cursor < b.data.get_length()) {
							var pos5 = b.cursor++;
							if(pos5 == null) {
								pos5 = 0;
							}
							b.data.readU8(pos5);
						}
					} else if(b01 == 28) {
						var v1 = 0;
						var _g = 0;
						var _g1 = 2;
						while(_g < _g1) {
							var i = _g++;
							var v2;
							if(b.cursor >= b.data.get_length()) {
								v2 = 0;
							} else {
								var pos6 = b.cursor++;
								if(pos6 == null) {
									pos6 = 0;
								}
								v2 = b.data.readU8(pos6);
							}
							v1 = v1 << 8 | v2;
						}
					} else if(b01 == 29) {
						var v3 = 0;
						var _g2 = 0;
						var _g3 = 4;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var v4;
							if(b.cursor >= b.data.get_length()) {
								v4 = 0;
							} else {
								var pos7 = b.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
								v4 = b.data.readU8(pos7);
							}
							v3 = v3 << 8 | v4;
						}
					} else {
						throw haxe_Exception.thrown("Error");
					}
				}
			}
		}
		var end = b.cursor;
		if(b.cursor >= b.data.get_length()) {
			op = 0;
		} else {
			var pos8 = b.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			op = b.data.readU8(pos8);
		}
		if(op == 12) {
			var op1;
			if(b.cursor >= b.data.get_length()) {
				op1 = 0;
			} else {
				var pos9 = b.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				op1 = b.data.readU8(pos9);
			}
			op = op1 | 256;
		}
		if(op == key) {
			var s = end - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				ret = r1;
			} else {
				r1.data = b.data.sub(start,s);
				ret = r1;
			}
			break;
		}
	}
	if(ret != null) {
		return ret;
	} else {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(0 > b.data.get_length() || 0 > b.data.get_length()) {
			return r1;
		} else {
			r1.data = b.data.sub(0,0);
			return r1;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__dict_get_ints = function(b,key,outcount,out) {
	var i = 0;
	if(0 > b.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var ret = null;
	while(b.cursor < b.data.get_length()) {
		var start = b.cursor;
		var op;
		while(true) {
			var tmp;
			if(b.cursor >= b.data.get_length()) {
				tmp = 0;
			} else {
				var pos = b.cursor;
				if(pos == null) {
					pos = 0;
				}
				tmp = b.data.readU8(pos);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v;
			var b0;
			if(b.cursor >= b.data.get_length()) {
				b0 = 0;
			} else {
				var pos1 = b.cursor;
				if(pos1 == null) {
					pos1 = 0;
				}
				b0 = b.data.readU8(pos1);
			}
			if(b0 < 28) {
				throw haxe_Exception.thrown("Error");
			}
			if(b0 == 30) {
				var o = b.cursor + 1;
				if(o > b.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				while(b.cursor < b.data.get_length()) {
					if(b.cursor >= b.data.get_length()) {
						v = 0;
					} else {
						var pos2 = b.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						v = b.data.readU8(pos2);
					}
					if((v & 15) == 15 || v >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(b.cursor >= b.data.get_length()) {
					b01 = 0;
				} else {
					var pos3 = b.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					b01 = b.data.readU8(pos3);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(b.cursor < b.data.get_length()) {
							var pos4 = b.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
							b.data.readU8(pos4);
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(b.cursor < b.data.get_length()) {
							var pos5 = b.cursor++;
							if(pos5 == null) {
								pos5 = 0;
							}
							b.data.readU8(pos5);
						}
					} else if(b01 == 28) {
						var v1 = 0;
						var _g = 0;
						var _g1 = 2;
						while(_g < _g1) {
							var i1 = _g++;
							var v2;
							if(b.cursor >= b.data.get_length()) {
								v2 = 0;
							} else {
								var pos6 = b.cursor++;
								if(pos6 == null) {
									pos6 = 0;
								}
								v2 = b.data.readU8(pos6);
							}
							v1 = v1 << 8 | v2;
						}
					} else if(b01 == 29) {
						var v3 = 0;
						var _g2 = 0;
						var _g3 = 4;
						while(_g2 < _g3) {
							var i2 = _g2++;
							var v4;
							if(b.cursor >= b.data.get_length()) {
								v4 = 0;
							} else {
								var pos7 = b.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
								v4 = b.data.readU8(pos7);
							}
							v3 = v3 << 8 | v4;
						}
					} else {
						throw haxe_Exception.thrown("Error");
					}
				}
			}
		}
		var end = b.cursor;
		if(b.cursor >= b.data.get_length()) {
			op = 0;
		} else {
			var pos8 = b.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			op = b.data.readU8(pos8);
		}
		if(op == 12) {
			var op1;
			if(b.cursor >= b.data.get_length()) {
				op1 = 0;
			} else {
				var pos9 = b.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				op1 = b.data.readU8(pos9);
			}
			op = op1 | 256;
		}
		if(op == key) {
			var s = end - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				ret = r1;
			} else {
				r1.data = b.data.sub(start,s);
				ret = r1;
			}
			break;
		}
	}
	var operands;
	if(ret != null) {
		operands = ret;
	} else {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(0 > b.data.get_length() || 0 > b.data.get_length()) {
			operands = r1;
		} else {
			r1.data = b.data.sub(0,0);
			operands = r1;
		}
	}
	while(i < outcount && operands.cursor < operands.data.get_length()) {
		var b0;
		if(operands.cursor >= operands.data.get_length()) {
			b0 = 0;
		} else {
			var pos = operands.cursor++;
			if(pos == null) {
				pos = 0;
			}
			b0 = operands.data.readU8(pos);
		}
		var tmp;
		if(b0 >= 32 && b0 <= 246) {
			tmp = b0 - 139;
		} else if(b0 >= 247 && b0 <= 250) {
			var tmp1;
			if(operands.cursor >= operands.data.get_length()) {
				tmp1 = 0;
			} else {
				var pos1 = operands.cursor++;
				if(pos1 == null) {
					pos1 = 0;
				}
				tmp1 = operands.data.readU8(pos1);
			}
			tmp = (b0 - 247) * 256 + tmp1 + 108;
		} else if(b0 >= 251 && b0 <= 254) {
			var tmp2;
			if(operands.cursor >= operands.data.get_length()) {
				tmp2 = 0;
			} else {
				var pos2 = operands.cursor++;
				if(pos2 == null) {
					pos2 = 0;
				}
				tmp2 = operands.data.readU8(pos2);
			}
			tmp = -(b0 - 251) * 256 - tmp2 - 108;
		} else if(b0 == 28) {
			var v = 0;
			var _g = 0;
			var _g1 = 2;
			while(_g < _g1) {
				var i1 = _g++;
				var v1;
				if(operands.cursor >= operands.data.get_length()) {
					v1 = 0;
				} else {
					var pos3 = operands.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					v1 = operands.data.readU8(pos3);
				}
				v = v << 8 | v1;
			}
			tmp = v;
		} else if(b0 == 29) {
			var v2 = 0;
			var _g2 = 0;
			var _g3 = 4;
			while(_g2 < _g3) {
				var i2 = _g2++;
				var v3;
				if(operands.cursor >= operands.data.get_length()) {
					v3 = 0;
				} else {
					var pos4 = operands.cursor++;
					if(pos4 == null) {
						pos4 = 0;
					}
					v3 = operands.data.readU8(pos4);
				}
				v2 = v2 << 8 | v3;
			}
			tmp = v2;
		} else {
			throw haxe_Exception.thrown("Error");
		}
		out[i] = tmp;
		++i;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_index_count = function(b) {
	if(0 > b.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	return v;
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_index_get = function(b,i) {
	if(0 > b.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i1 = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	var offsize;
	if(b.cursor >= b.data.get_length()) {
		offsize = 0;
	} else {
		var pos = b.cursor++;
		if(pos == null) {
			pos = 0;
		}
		offsize = b.data.readU8(pos);
	}
	if(!(i >= 0 && i < count)) {
		throw haxe_Exception.thrown("Error");
	}
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var o = b.cursor + i * offsize;
	if(o > b.data.get_length() || o < 0) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
	var v = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var start = v;
	var v = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var end = v;
	var o = 2 + (count + 1) * offsize + start;
	var s = end - start;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	var r1 = r;
	if(o < 0 || s < 0 || o > b.data.get_length() || s > b.data.get_length() - o) {
		return r1;
	} else {
		r1.data = b.data.sub(o,s);
		return r1;
	}
};
kha_graphics2_truetype_StbTruetype.ttBYTE = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	return p.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.ttCHAR = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos);
	if(n >= 128) {
		return n - 256;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttUSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	return ch2 | ch1 << 8;
};
kha_graphics2_truetype_StbTruetype.ttSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	if((n & 32768) != 0) {
		return n - 65536;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttULONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var pos1 = pos;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch1 = p.readU8(pos1);
	var ch2 = p.readU8(pos1 + 1);
	var ch3 = p.readU8(pos1 + 2);
	var ch4 = p.readU8(pos1 + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.ttLONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var ch3 = p.readU8(pos + 2);
	var ch4 = p.readU8(pos + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.to_stbtt_uint16 = function(value) {
	return value & 65535;
};
kha_graphics2_truetype_StbTruetype.ttFixed = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var pos1 = pos;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch1 = p.readU8(pos1);
	var ch2 = p.readU8(pos1 + 1);
	var ch3 = p.readU8(pos1 + 2);
	var ch4 = p.readU8(pos1 + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.stbtt_tag4 = function(p,pos,c0,c1,c2,c3) {
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_tag = function(p,pos,str) {
	var c0 = HxOverrides.cca(str,0);
	var c1 = HxOverrides.cca(str,1);
	var c2 = HxOverrides.cca(str,2);
	var c3 = HxOverrides.cca(str,3);
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__isfont = function(font) {
	var c0 = HxOverrides.cca("1",0);
	if(font.readU8(0) == c0 && font.readU8(1) == 0 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	var c0 = HxOverrides.cca("typ1",0);
	var c1 = HxOverrides.cca("typ1",1);
	var c2 = HxOverrides.cca("typ1",2);
	var c3 = HxOverrides.cca("typ1",3);
	if(font.readU8(0) == c0 && font.readU8(1) == c1 && font.readU8(2) == c2 && font.readU8(3) == c3) {
		return true;
	}
	var c0 = HxOverrides.cca("OTTO",0);
	var c1 = HxOverrides.cca("OTTO",1);
	var c2 = HxOverrides.cca("OTTO",2);
	var c3 = HxOverrides.cca("OTTO",3);
	if(font.readU8(0) == c0 && font.readU8(1) == c1 && font.readU8(2) == c2 && font.readU8(3) == c3) {
		return true;
	}
	if(font.readU8(0) == 0 && font.readU8(1) == 1 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	var c0 = HxOverrides.cca("true",0);
	var c1 = HxOverrides.cca("true",1);
	var c2 = HxOverrides.cca("true",2);
	var c3 = HxOverrides.cca("true",3);
	if(font.readU8(0) == c0 && font.readU8(1) == c1 && font.readU8(2) == c2 && font.readU8(3) == c3) {
		return true;
	}
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__find_table = function(data,fontstart,tag) {
	var pos = fontstart + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var num_tables = ch2 | ch1 << 8;
	var tabledir = fontstart + 12;
	var _g = 0;
	var _g1 = num_tables;
	while(_g < _g1) {
		var i = _g++;
		var loc = tabledir + 16 * i;
		var c0 = HxOverrides.cca(tag,0);
		var c1 = HxOverrides.cca(tag,1);
		var c2 = HxOverrides.cca(tag,2);
		var c3 = HxOverrides.cca(tag,3);
		if(data.readU8(loc) == c0 && data.readU8(loc + 1) == c1 && data.readU8(loc + 2) == c2 && data.readU8(loc + 3) == c3) {
			var pos = loc + 8;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch1 = data.readU8(pos1);
			var ch2 = data.readU8(pos1 + 1);
			var ch3 = data.readU8(pos1 + 2);
			var ch4 = data.readU8(pos1 + 3);
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex = function(font_collection,index) {
	if(kha_graphics2_truetype_StbTruetype.stbtt__isfont(font_collection)) {
		if(index == 0) {
			return 0;
		} else {
			return -1;
		}
	}
	var c0 = HxOverrides.cca("ttcf",0);
	var c1 = HxOverrides.cca("ttcf",1);
	var c2 = HxOverrides.cca("ttcf",2);
	var c3 = HxOverrides.cca("ttcf",3);
	if(font_collection.readU8(0) == c0 && font_collection.readU8(1) == c1 && font_collection.readU8(2) == c2 && font_collection.readU8(3) == c3) {
		var tmp;
		var pos = 4;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = font_collection.readU8(pos1);
		var ch2 = font_collection.readU8(pos1 + 1);
		var ch3 = font_collection.readU8(pos1 + 2);
		var ch4 = font_collection.readU8(pos1 + 3);
		if((ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24) != 65536) {
			var pos = 4;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch1 = font_collection.readU8(pos1);
			var ch2 = font_collection.readU8(pos1 + 1);
			var ch3 = font_collection.readU8(pos1 + 2);
			var ch4 = font_collection.readU8(pos1 + 3);
			tmp = (ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24) == 131072;
		} else {
			tmp = true;
		}
		if(tmp) {
			var pos = 8;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = font_collection.readU8(pos);
			var ch2 = font_collection.readU8(pos + 1);
			var ch3 = font_collection.readU8(pos + 2);
			var ch4 = font_collection.readU8(pos + 3);
			var n = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
			if(index >= n) {
				return -1;
			}
			var pos = 12 + index * 4;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch1 = font_collection.readU8(pos1);
			var ch2 = font_collection.readU8(pos1 + 1);
			var ch3 = font_collection.readU8(pos1 + 2);
			var ch4 = font_collection.readU8(pos1 + 3);
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		}
	}
	return -1;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetNumberOfFonts = function(font_collection) {
	if(kha_graphics2_truetype_StbTruetype.stbtt__isfont(font_collection)) {
		return 1;
	}
	var c0 = HxOverrides.cca("ttcf",0);
	var c1 = HxOverrides.cca("ttcf",1);
	var c2 = HxOverrides.cca("ttcf",2);
	var c3 = HxOverrides.cca("ttcf",3);
	if(font_collection.readU8(0) == c0 && font_collection.readU8(1) == c1 && font_collection.readU8(2) == c2 && font_collection.readU8(3) == c3) {
		var tmp;
		var pos = 4;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = font_collection.readU8(pos1);
		var ch2 = font_collection.readU8(pos1 + 1);
		var ch3 = font_collection.readU8(pos1 + 2);
		var ch4 = font_collection.readU8(pos1 + 3);
		if((ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24) != 65536) {
			var pos = 4;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch1 = font_collection.readU8(pos1);
			var ch2 = font_collection.readU8(pos1 + 1);
			var ch3 = font_collection.readU8(pos1 + 2);
			var ch4 = font_collection.readU8(pos1 + 3);
			tmp = (ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24) == 131072;
		} else {
			tmp = true;
		}
		if(tmp) {
			var pos = 8;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = font_collection.readU8(pos);
			var ch2 = font_collection.readU8(pos + 1);
			var ch3 = font_collection.readU8(pos + 2);
			var ch4 = font_collection.readU8(pos + 3);
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt__get_subrs = function(cff,fontdict) {
	var subrsoff = [0];
	var private_loc = [0,0];
	var i = 0;
	if(0 > fontdict.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	fontdict.cursor = 0 > fontdict.data.get_length() ? fontdict.data.get_length() : 0;
	var ret = null;
	while(fontdict.cursor < fontdict.data.get_length()) {
		var start = fontdict.cursor;
		var op;
		while(true) {
			var tmp;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				tmp = 0;
			} else {
				var pos = fontdict.cursor;
				if(pos == null) {
					pos = 0;
				}
				tmp = fontdict.data.readU8(pos);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v;
			var b0;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				b0 = 0;
			} else {
				var pos1 = fontdict.cursor;
				if(pos1 == null) {
					pos1 = 0;
				}
				b0 = fontdict.data.readU8(pos1);
			}
			if(b0 < 28) {
				throw haxe_Exception.thrown("Error");
			}
			if(b0 == 30) {
				var o = fontdict.cursor + 1;
				if(o > fontdict.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				fontdict.cursor = o > fontdict.data.get_length() || o < 0 ? fontdict.data.get_length() : o;
				while(fontdict.cursor < fontdict.data.get_length()) {
					if(fontdict.cursor >= fontdict.data.get_length()) {
						v = 0;
					} else {
						var pos2 = fontdict.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						v = fontdict.data.readU8(pos2);
					}
					if((v & 15) == 15 || v >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(fontdict.cursor >= fontdict.data.get_length()) {
					b01 = 0;
				} else {
					var pos3 = fontdict.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					b01 = fontdict.data.readU8(pos3);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(fontdict.cursor < fontdict.data.get_length()) {
							var pos4 = fontdict.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
							fontdict.data.readU8(pos4);
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(fontdict.cursor < fontdict.data.get_length()) {
							var pos5 = fontdict.cursor++;
							if(pos5 == null) {
								pos5 = 0;
							}
							fontdict.data.readU8(pos5);
						}
					} else if(b01 == 28) {
						var v1 = 0;
						var _g = 0;
						var _g1 = 2;
						while(_g < _g1) {
							var i1 = _g++;
							var v2;
							if(fontdict.cursor >= fontdict.data.get_length()) {
								v2 = 0;
							} else {
								var pos6 = fontdict.cursor++;
								if(pos6 == null) {
									pos6 = 0;
								}
								v2 = fontdict.data.readU8(pos6);
							}
							v1 = v1 << 8 | v2;
						}
					} else if(b01 == 29) {
						var v3 = 0;
						var _g2 = 0;
						var _g3 = 4;
						while(_g2 < _g3) {
							var i2 = _g2++;
							var v4;
							if(fontdict.cursor >= fontdict.data.get_length()) {
								v4 = 0;
							} else {
								var pos7 = fontdict.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
								v4 = fontdict.data.readU8(pos7);
							}
							v3 = v3 << 8 | v4;
						}
					} else {
						throw haxe_Exception.thrown("Error");
					}
				}
			}
		}
		var end = fontdict.cursor;
		if(fontdict.cursor >= fontdict.data.get_length()) {
			op = 0;
		} else {
			var pos8 = fontdict.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			op = fontdict.data.readU8(pos8);
		}
		if(op == 12) {
			var op1;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				op1 = 0;
			} else {
				var pos9 = fontdict.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				op1 = fontdict.data.readU8(pos9);
			}
			op = op1 | 256;
		}
		if(op == 18) {
			var s = end - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > fontdict.data.get_length() || s > fontdict.data.get_length() - start) {
				ret = r1;
			} else {
				r1.data = fontdict.data.sub(start,s);
				ret = r1;
			}
			break;
		}
	}
	var operands;
	if(ret != null) {
		operands = ret;
	} else {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(0 > fontdict.data.get_length() || 0 > fontdict.data.get_length()) {
			operands = r1;
		} else {
			r1.data = fontdict.data.sub(0,0);
			operands = r1;
		}
	}
	while(i < 2 && operands.cursor < operands.data.get_length()) {
		var b0;
		if(operands.cursor >= operands.data.get_length()) {
			b0 = 0;
		} else {
			var pos = operands.cursor++;
			if(pos == null) {
				pos = 0;
			}
			b0 = operands.data.readU8(pos);
		}
		var tmp;
		if(b0 >= 32 && b0 <= 246) {
			tmp = b0 - 139;
		} else if(b0 >= 247 && b0 <= 250) {
			var tmp1;
			if(operands.cursor >= operands.data.get_length()) {
				tmp1 = 0;
			} else {
				var pos1 = operands.cursor++;
				if(pos1 == null) {
					pos1 = 0;
				}
				tmp1 = operands.data.readU8(pos1);
			}
			tmp = (b0 - 247) * 256 + tmp1 + 108;
		} else if(b0 >= 251 && b0 <= 254) {
			var tmp2;
			if(operands.cursor >= operands.data.get_length()) {
				tmp2 = 0;
			} else {
				var pos2 = operands.cursor++;
				if(pos2 == null) {
					pos2 = 0;
				}
				tmp2 = operands.data.readU8(pos2);
			}
			tmp = -(b0 - 251) * 256 - tmp2 - 108;
		} else if(b0 == 28) {
			var v = 0;
			var _g = 0;
			var _g1 = 2;
			while(_g < _g1) {
				var i1 = _g++;
				var v1;
				if(operands.cursor >= operands.data.get_length()) {
					v1 = 0;
				} else {
					var pos3 = operands.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					v1 = operands.data.readU8(pos3);
				}
				v = v << 8 | v1;
			}
			tmp = v;
		} else if(b0 == 29) {
			var v2 = 0;
			var _g2 = 0;
			var _g3 = 4;
			while(_g2 < _g3) {
				var i2 = _g2++;
				var v3;
				if(operands.cursor >= operands.data.get_length()) {
					v3 = 0;
				} else {
					var pos4 = operands.cursor++;
					if(pos4 == null) {
						pos4 = 0;
					}
					v3 = operands.data.readU8(pos4);
				}
				v2 = v2 << 8 | v3;
			}
			tmp = v2;
		} else {
			throw haxe_Exception.thrown("Error");
		}
		private_loc[i] = tmp;
		++i;
	}
	if(private_loc[1] == 0 || private_loc[0] == 0) {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		return r;
	}
	var o = private_loc[1];
	var s = private_loc[0];
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	var r1 = r;
	var pdict;
	if(o < 0 || s < 0 || o > cff.data.get_length() || s > cff.data.get_length() - o) {
		pdict = r1;
	} else {
		r1.data = cff.data.sub(o,s);
		pdict = r1;
	}
	var i = 0;
	if(0 > pdict.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
	var ret = null;
	while(pdict.cursor < pdict.data.get_length()) {
		var start = pdict.cursor;
		var op;
		while(true) {
			var tmp;
			if(pdict.cursor >= pdict.data.get_length()) {
				tmp = 0;
			} else {
				var pos = pdict.cursor;
				if(pos == null) {
					pos = 0;
				}
				tmp = pdict.data.readU8(pos);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v;
			var b0;
			if(pdict.cursor >= pdict.data.get_length()) {
				b0 = 0;
			} else {
				var pos1 = pdict.cursor;
				if(pos1 == null) {
					pos1 = 0;
				}
				b0 = pdict.data.readU8(pos1);
			}
			if(b0 < 28) {
				throw haxe_Exception.thrown("Error");
			}
			if(b0 == 30) {
				var o = pdict.cursor + 1;
				if(o > pdict.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				pdict.cursor = o > pdict.data.get_length() || o < 0 ? pdict.data.get_length() : o;
				while(pdict.cursor < pdict.data.get_length()) {
					if(pdict.cursor >= pdict.data.get_length()) {
						v = 0;
					} else {
						var pos2 = pdict.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						v = pdict.data.readU8(pos2);
					}
					if((v & 15) == 15 || v >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(pdict.cursor >= pdict.data.get_length()) {
					b01 = 0;
				} else {
					var pos3 = pdict.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					b01 = pdict.data.readU8(pos3);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(pdict.cursor < pdict.data.get_length()) {
							var pos4 = pdict.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
							pdict.data.readU8(pos4);
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(pdict.cursor < pdict.data.get_length()) {
							var pos5 = pdict.cursor++;
							if(pos5 == null) {
								pos5 = 0;
							}
							pdict.data.readU8(pos5);
						}
					} else if(b01 == 28) {
						var v1 = 0;
						var _g = 0;
						var _g1 = 2;
						while(_g < _g1) {
							var i1 = _g++;
							var v2;
							if(pdict.cursor >= pdict.data.get_length()) {
								v2 = 0;
							} else {
								var pos6 = pdict.cursor++;
								if(pos6 == null) {
									pos6 = 0;
								}
								v2 = pdict.data.readU8(pos6);
							}
							v1 = v1 << 8 | v2;
						}
					} else if(b01 == 29) {
						var v3 = 0;
						var _g2 = 0;
						var _g3 = 4;
						while(_g2 < _g3) {
							var i2 = _g2++;
							var v4;
							if(pdict.cursor >= pdict.data.get_length()) {
								v4 = 0;
							} else {
								var pos7 = pdict.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
								v4 = pdict.data.readU8(pos7);
							}
							v3 = v3 << 8 | v4;
						}
					} else {
						throw haxe_Exception.thrown("Error");
					}
				}
			}
		}
		var end = pdict.cursor;
		if(pdict.cursor >= pdict.data.get_length()) {
			op = 0;
		} else {
			var pos8 = pdict.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			op = pdict.data.readU8(pos8);
		}
		if(op == 12) {
			var op1;
			if(pdict.cursor >= pdict.data.get_length()) {
				op1 = 0;
			} else {
				var pos9 = pdict.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				op1 = pdict.data.readU8(pos9);
			}
			op = op1 | 256;
		}
		if(op == 19) {
			var s = end - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > pdict.data.get_length() || s > pdict.data.get_length() - start) {
				ret = r1;
			} else {
				r1.data = pdict.data.sub(start,s);
				ret = r1;
			}
			break;
		}
	}
	var operands;
	if(ret != null) {
		operands = ret;
	} else {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
			operands = r1;
		} else {
			r1.data = pdict.data.sub(0,0);
			operands = r1;
		}
	}
	while(i < 1 && operands.cursor < operands.data.get_length()) {
		var b0;
		if(operands.cursor >= operands.data.get_length()) {
			b0 = 0;
		} else {
			var pos = operands.cursor++;
			if(pos == null) {
				pos = 0;
			}
			b0 = operands.data.readU8(pos);
		}
		var tmp;
		if(b0 >= 32 && b0 <= 246) {
			tmp = b0 - 139;
		} else if(b0 >= 247 && b0 <= 250) {
			var tmp1;
			if(operands.cursor >= operands.data.get_length()) {
				tmp1 = 0;
			} else {
				var pos1 = operands.cursor++;
				if(pos1 == null) {
					pos1 = 0;
				}
				tmp1 = operands.data.readU8(pos1);
			}
			tmp = (b0 - 247) * 256 + tmp1 + 108;
		} else if(b0 >= 251 && b0 <= 254) {
			var tmp2;
			if(operands.cursor >= operands.data.get_length()) {
				tmp2 = 0;
			} else {
				var pos2 = operands.cursor++;
				if(pos2 == null) {
					pos2 = 0;
				}
				tmp2 = operands.data.readU8(pos2);
			}
			tmp = -(b0 - 251) * 256 - tmp2 - 108;
		} else if(b0 == 28) {
			var v = 0;
			var _g = 0;
			var _g1 = 2;
			while(_g < _g1) {
				var i1 = _g++;
				var v1;
				if(operands.cursor >= operands.data.get_length()) {
					v1 = 0;
				} else {
					var pos3 = operands.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					v1 = operands.data.readU8(pos3);
				}
				v = v << 8 | v1;
			}
			tmp = v;
		} else if(b0 == 29) {
			var v2 = 0;
			var _g2 = 0;
			var _g3 = 4;
			while(_g2 < _g3) {
				var i2 = _g2++;
				var v3;
				if(operands.cursor >= operands.data.get_length()) {
					v3 = 0;
				} else {
					var pos4 = operands.cursor++;
					if(pos4 == null) {
						pos4 = 0;
					}
					v3 = operands.data.readU8(pos4);
				}
				v2 = v2 << 8 | v3;
			}
			tmp = v2;
		} else {
			throw haxe_Exception.thrown("Error");
		}
		subrsoff[i] = tmp;
		++i;
	}
	if(subrsoff[0] == 0) {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		return r;
	}
	var o = private_loc[1] + subrsoff[0];
	if(o > cff.data.get_length() || o < 0) {
		throw haxe_Exception.thrown("Error");
	}
	cff.cursor = o > cff.data.get_length() || o < 0 ? cff.data.get_length() : o;
	var start = cff.cursor;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(cff.cursor >= cff.data.get_length()) {
			v1 = 0;
		} else {
			var pos = cff.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = cff.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	if(count > 0) {
		var offsize;
		if(cff.cursor >= cff.data.get_length()) {
			offsize = 0;
		} else {
			var pos = cff.cursor++;
			if(pos == null) {
				pos = 0;
			}
			offsize = cff.data.readU8(pos);
		}
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var o = cff.cursor + offsize * count;
		if(o > cff.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		cff.cursor = o > cff.data.get_length() || o < 0 ? cff.data.get_length() : o;
		var v = 0;
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var _g = 0;
		var _g1 = offsize;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(cff.cursor >= cff.data.get_length()) {
				v1 = 0;
			} else {
				var pos = cff.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = cff.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var o = cff.cursor + (v - 1);
		if(o > cff.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		cff.cursor = o > cff.data.get_length() || o < 0 ? cff.data.get_length() : o;
		var s = cff.cursor - start;
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(start < 0 || s < 0 || start > cff.data.get_length() || s > cff.data.get_length() - start) {
			return r1;
		} else {
			r1.data = cff.data.sub(start,s);
			return r1;
		}
	} else {
		return cff;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_InitFont = function(info,data,fontstart) {
	info.data = data;
	info.fontstart = fontstart;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	info.cff = r;
	var cmap = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"cmap");
	info.loca = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"loca");
	info.head = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"head");
	info.glyf = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"glyf");
	info.hhea = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hhea");
	info.hmtx = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hmtx");
	info.kern = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"kern");
	info.gpos = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"GPOS");
	if(cmap == 0 || info.head == 0 || info.hhea == 0 || info.hmtx == 0) {
		return false;
	}
	if(info.glyf != 0) {
		if(info.loca == 0) {
			return false;
		}
	} else {
		var topdict;
		var topdictidx;
		var cstype = [2];
		var charstrings = [0];
		var fdarrayoff = [0];
		var fdselectoff = [0];
		var cff = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"CFF ");
		if(cff == 0) {
			return false;
		}
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		info.fontdicts = r;
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		info.fdselect = r;
		var cff_data = data.sub(cff,data.get_length() - cff);
		var size = cff_data.get_length();
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		if(size >= 1073741824) {
			throw haxe_Exception.thrown("Error");
		}
		r.data = cff_data;
		r.cursor = 0;
		info.cff = r;
		var b = info.cff;
		var o = b.cursor + 2;
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var o;
		if(b.cursor >= b.data.get_length()) {
			o = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			o = b.data.readU8(pos);
		}
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(!(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start)) {
				r1.data = b.data.sub(start,s);
			}
		}
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				topdictidx = r1;
			} else {
				r1.data = b.data.sub(start,s);
				topdictidx = r1;
			}
		} else {
			topdictidx = b;
		}
		if(0 > topdictidx.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdictidx.cursor = 0 > topdictidx.data.get_length() ? topdictidx.data.get_length() : 0;
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(topdictidx.cursor >= topdictidx.data.get_length()) {
				v1 = 0;
			} else {
				var pos = topdictidx.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = topdictidx.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		var offsize;
		if(topdictidx.cursor >= topdictidx.data.get_length()) {
			offsize = 0;
		} else {
			var pos = topdictidx.cursor++;
			if(pos == null) {
				pos = 0;
			}
			offsize = topdictidx.data.readU8(pos);
		}
		if(0 >= count) {
			throw haxe_Exception.thrown("Error");
		}
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var o = topdictidx.cursor + 0 * offsize;
		if(o > topdictidx.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		topdictidx.cursor = o > topdictidx.data.get_length() || o < 0 ? topdictidx.data.get_length() : o;
		var v = 0;
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var _g = 0;
		var _g1 = offsize;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(topdictidx.cursor >= topdictidx.data.get_length()) {
				v1 = 0;
			} else {
				var pos = topdictidx.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = topdictidx.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var start = v;
		var v = 0;
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var _g = 0;
		var _g1 = offsize;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(topdictidx.cursor >= topdictidx.data.get_length()) {
				v1 = 0;
			} else {
				var pos = topdictidx.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = topdictidx.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var end = v;
		var o = 2 + (count + 1) * offsize + start;
		var s = end - start;
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(o < 0 || s < 0 || o > topdictidx.data.get_length() || s > topdictidx.data.get_length() - o) {
			topdict = r1;
		} else {
			r1.data = topdictidx.data.sub(o,s);
			topdict = r1;
		}
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(!(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start)) {
				r1.data = b.data.sub(start,s);
			}
		}
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		var tmp;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				tmp = r1;
			} else {
				r1.data = b.data.sub(start,s);
				tmp = r1;
			}
		} else {
			tmp = b;
		}
		info.gsubrs = tmp;
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var v1 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i1 = _g++;
								var v2;
								if(topdict.cursor >= topdict.data.get_length()) {
									v2 = 0;
								} else {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v2 = topdict.data.readU8(pos6);
								}
								v1 = v1 << 8 | v2;
							}
						} else if(b01 == 29) {
							var v3 = 0;
							var _g2 = 0;
							var _g3 = 4;
							while(_g2 < _g3) {
								var i2 = _g2++;
								var v4;
								if(topdict.cursor >= topdict.data.get_length()) {
									v4 = 0;
								} else {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									v4 = topdict.data.readU8(pos7);
								}
								v3 = v3 << 8 | v4;
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 17) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r1;
				} else {
					r1.data = topdict.data.sub(start,s);
					ret = r1;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r1;
			} else {
				r1.data = topdict.data.sub(0,0);
				operands = r1;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i1 = _g++;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g2 = 0;
				var _g3 = 4;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			charstrings[i] = tmp;
			++i;
		}
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var v1 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i1 = _g++;
								var v2;
								if(topdict.cursor >= topdict.data.get_length()) {
									v2 = 0;
								} else {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v2 = topdict.data.readU8(pos6);
								}
								v1 = v1 << 8 | v2;
							}
						} else if(b01 == 29) {
							var v3 = 0;
							var _g2 = 0;
							var _g3 = 4;
							while(_g2 < _g3) {
								var i2 = _g2++;
								var v4;
								if(topdict.cursor >= topdict.data.get_length()) {
									v4 = 0;
								} else {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									v4 = topdict.data.readU8(pos7);
								}
								v3 = v3 << 8 | v4;
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 262) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r1;
				} else {
					r1.data = topdict.data.sub(start,s);
					ret = r1;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r1;
			} else {
				r1.data = topdict.data.sub(0,0);
				operands = r1;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i1 = _g++;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g2 = 0;
				var _g3 = 4;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			cstype[i] = tmp;
			++i;
		}
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var v1 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i1 = _g++;
								var v2;
								if(topdict.cursor >= topdict.data.get_length()) {
									v2 = 0;
								} else {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v2 = topdict.data.readU8(pos6);
								}
								v1 = v1 << 8 | v2;
							}
						} else if(b01 == 29) {
							var v3 = 0;
							var _g2 = 0;
							var _g3 = 4;
							while(_g2 < _g3) {
								var i2 = _g2++;
								var v4;
								if(topdict.cursor >= topdict.data.get_length()) {
									v4 = 0;
								} else {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									v4 = topdict.data.readU8(pos7);
								}
								v3 = v3 << 8 | v4;
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 292) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r1;
				} else {
					r1.data = topdict.data.sub(start,s);
					ret = r1;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r1;
			} else {
				r1.data = topdict.data.sub(0,0);
				operands = r1;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i1 = _g++;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g2 = 0;
				var _g3 = 4;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			fdarrayoff[i] = tmp;
			++i;
		}
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var v1 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i1 = _g++;
								var v2;
								if(topdict.cursor >= topdict.data.get_length()) {
									v2 = 0;
								} else {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v2 = topdict.data.readU8(pos6);
								}
								v1 = v1 << 8 | v2;
							}
						} else if(b01 == 29) {
							var v3 = 0;
							var _g2 = 0;
							var _g3 = 4;
							while(_g2 < _g3) {
								var i2 = _g2++;
								var v4;
								if(topdict.cursor >= topdict.data.get_length()) {
									v4 = 0;
								} else {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									v4 = topdict.data.readU8(pos7);
								}
								v3 = v3 << 8 | v4;
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 293) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r1;
				} else {
					r1.data = topdict.data.sub(start,s);
					ret = r1;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r1;
			} else {
				r1.data = topdict.data.sub(0,0);
				operands = r1;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i1 = _g++;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g2 = 0;
				var _g3 = 4;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			fdselectoff[i] = tmp;
			++i;
		}
		var subrsoff = [0];
		var private_loc = [0,0];
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var v1 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i1 = _g++;
								var v2;
								if(topdict.cursor >= topdict.data.get_length()) {
									v2 = 0;
								} else {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v2 = topdict.data.readU8(pos6);
								}
								v1 = v1 << 8 | v2;
							}
						} else if(b01 == 29) {
							var v3 = 0;
							var _g2 = 0;
							var _g3 = 4;
							while(_g2 < _g3) {
								var i2 = _g2++;
								var v4;
								if(topdict.cursor >= topdict.data.get_length()) {
									v4 = 0;
								} else {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									v4 = topdict.data.readU8(pos7);
								}
								v3 = v3 << 8 | v4;
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 18) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r1;
				} else {
					r1.data = topdict.data.sub(start,s);
					ret = r1;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r1;
			} else {
				r1.data = topdict.data.sub(0,0);
				operands = r1;
			}
		}
		while(i < 2 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i1 = _g++;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g2 = 0;
				var _g3 = 4;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			private_loc[i] = tmp;
			++i;
		}
		var tmp;
		if(private_loc[1] == 0 || private_loc[0] == 0) {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			tmp = r;
		} else {
			var o = private_loc[1];
			var s = private_loc[0];
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			var pdict;
			if(o < 0 || s < 0 || o > b.data.get_length() || s > b.data.get_length() - o) {
				pdict = r1;
			} else {
				r1.data = b.data.sub(o,s);
				pdict = r1;
			}
			var i = 0;
			if(0 > pdict.data.get_length()) {
				throw haxe_Exception.thrown("Error");
			}
			pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
			var ret = null;
			while(pdict.cursor < pdict.data.get_length()) {
				var start = pdict.cursor;
				var op;
				while(true) {
					var tmp1;
					if(pdict.cursor >= pdict.data.get_length()) {
						tmp1 = 0;
					} else {
						var pos = pdict.cursor;
						if(pos == null) {
							pos = 0;
						}
						tmp1 = pdict.data.readU8(pos);
					}
					if(!(tmp1 >= 28)) {
						break;
					}
					var v;
					var b0;
					if(pdict.cursor >= pdict.data.get_length()) {
						b0 = 0;
					} else {
						var pos1 = pdict.cursor;
						if(pos1 == null) {
							pos1 = 0;
						}
						b0 = pdict.data.readU8(pos1);
					}
					if(b0 < 28) {
						throw haxe_Exception.thrown("Error");
					}
					if(b0 == 30) {
						var o = pdict.cursor + 1;
						if(o > pdict.data.get_length() || o < 0) {
							throw haxe_Exception.thrown("Error");
						}
						pdict.cursor = o > pdict.data.get_length() || o < 0 ? pdict.data.get_length() : o;
						while(pdict.cursor < pdict.data.get_length()) {
							if(pdict.cursor >= pdict.data.get_length()) {
								v = 0;
							} else {
								var pos2 = pdict.cursor++;
								if(pos2 == null) {
									pos2 = 0;
								}
								v = pdict.data.readU8(pos2);
							}
							if((v & 15) == 15 || v >> 4 == 15) {
								break;
							}
						}
					} else {
						var b01;
						if(pdict.cursor >= pdict.data.get_length()) {
							b01 = 0;
						} else {
							var pos3 = pdict.cursor++;
							if(pos3 == null) {
								pos3 = 0;
							}
							b01 = pdict.data.readU8(pos3);
						}
						if(!(b01 >= 32 && b01 <= 246)) {
							if(b01 >= 247 && b01 <= 250) {
								if(pdict.cursor < pdict.data.get_length()) {
									var pos4 = pdict.cursor++;
									if(pos4 == null) {
										pos4 = 0;
									}
									pdict.data.readU8(pos4);
								}
							} else if(b01 >= 251 && b01 <= 254) {
								if(pdict.cursor < pdict.data.get_length()) {
									var pos5 = pdict.cursor++;
									if(pos5 == null) {
										pos5 = 0;
									}
									pdict.data.readU8(pos5);
								}
							} else if(b01 == 28) {
								var v1 = 0;
								var _g = 0;
								var _g1 = 2;
								while(_g < _g1) {
									var i1 = _g++;
									var v2;
									if(pdict.cursor >= pdict.data.get_length()) {
										v2 = 0;
									} else {
										var pos6 = pdict.cursor++;
										if(pos6 == null) {
											pos6 = 0;
										}
										v2 = pdict.data.readU8(pos6);
									}
									v1 = v1 << 8 | v2;
								}
							} else if(b01 == 29) {
								var v3 = 0;
								var _g2 = 0;
								var _g3 = 4;
								while(_g2 < _g3) {
									var i2 = _g2++;
									var v4;
									if(pdict.cursor >= pdict.data.get_length()) {
										v4 = 0;
									} else {
										var pos7 = pdict.cursor++;
										if(pos7 == null) {
											pos7 = 0;
										}
										v4 = pdict.data.readU8(pos7);
									}
									v3 = v3 << 8 | v4;
								}
							} else {
								throw haxe_Exception.thrown("Error");
							}
						}
					}
				}
				var end = pdict.cursor;
				if(pdict.cursor >= pdict.data.get_length()) {
					op = 0;
				} else {
					var pos8 = pdict.cursor++;
					if(pos8 == null) {
						pos8 = 0;
					}
					op = pdict.data.readU8(pos8);
				}
				if(op == 12) {
					var op1;
					if(pdict.cursor >= pdict.data.get_length()) {
						op1 = 0;
					} else {
						var pos9 = pdict.cursor++;
						if(pos9 == null) {
							pos9 = 0;
						}
						op1 = pdict.data.readU8(pos9);
					}
					op = op1 | 256;
				}
				if(op == 19) {
					var s = end - start;
					var r = new kha_graphics2_truetype_Stbtt_$_$buf();
					r.data = null;
					r.cursor = 0;
					var r1 = r;
					if(start < 0 || s < 0 || start > pdict.data.get_length() || s > pdict.data.get_length() - start) {
						ret = r1;
					} else {
						r1.data = pdict.data.sub(start,s);
						ret = r1;
					}
					break;
				}
			}
			var operands;
			if(ret != null) {
				operands = ret;
			} else {
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
					operands = r1;
				} else {
					r1.data = pdict.data.sub(0,0);
					operands = r1;
				}
			}
			while(i < 1 && operands.cursor < operands.data.get_length()) {
				var b0;
				if(operands.cursor >= operands.data.get_length()) {
					b0 = 0;
				} else {
					var pos = operands.cursor++;
					if(pos == null) {
						pos = 0;
					}
					b0 = operands.data.readU8(pos);
				}
				var tmp1;
				if(b0 >= 32 && b0 <= 246) {
					tmp1 = b0 - 139;
				} else if(b0 >= 247 && b0 <= 250) {
					var tmp2;
					if(operands.cursor >= operands.data.get_length()) {
						tmp2 = 0;
					} else {
						var pos1 = operands.cursor++;
						if(pos1 == null) {
							pos1 = 0;
						}
						tmp2 = operands.data.readU8(pos1);
					}
					tmp1 = (b0 - 247) * 256 + tmp2 + 108;
				} else if(b0 >= 251 && b0 <= 254) {
					var tmp3;
					if(operands.cursor >= operands.data.get_length()) {
						tmp3 = 0;
					} else {
						var pos2 = operands.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						tmp3 = operands.data.readU8(pos2);
					}
					tmp1 = -(b0 - 251) * 256 - tmp3 - 108;
				} else if(b0 == 28) {
					var v = 0;
					var _g = 0;
					var _g1 = 2;
					while(_g < _g1) {
						var i1 = _g++;
						var v1;
						if(operands.cursor >= operands.data.get_length()) {
							v1 = 0;
						} else {
							var pos3 = operands.cursor++;
							if(pos3 == null) {
								pos3 = 0;
							}
							v1 = operands.data.readU8(pos3);
						}
						v = v << 8 | v1;
					}
					tmp1 = v;
				} else if(b0 == 29) {
					var v2 = 0;
					var _g2 = 0;
					var _g3 = 4;
					while(_g2 < _g3) {
						var i2 = _g2++;
						var v3;
						if(operands.cursor >= operands.data.get_length()) {
							v3 = 0;
						} else {
							var pos4 = operands.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
							v3 = operands.data.readU8(pos4);
						}
						v2 = v2 << 8 | v3;
					}
					tmp1 = v2;
				} else {
					throw haxe_Exception.thrown("Error");
				}
				subrsoff[i] = tmp1;
				++i;
			}
			if(subrsoff[0] == 0) {
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				tmp = r;
			} else {
				var o = private_loc[1] + subrsoff[0];
				if(o > b.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				var start = b.cursor;
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i = _g++;
					var v1;
					if(b.cursor >= b.data.get_length()) {
						v1 = 0;
					} else {
						var pos = b.cursor++;
						if(pos == null) {
							pos = 0;
						}
						v1 = b.data.readU8(pos);
					}
					v = v << 8 | v1;
				}
				var count = v;
				if(count > 0) {
					var offsize;
					if(b.cursor >= b.data.get_length()) {
						offsize = 0;
					} else {
						var pos = b.cursor++;
						if(pos == null) {
							pos = 0;
						}
						offsize = b.data.readU8(pos);
					}
					if(!(offsize >= 1 && offsize <= 4)) {
						throw haxe_Exception.thrown("Error");
					}
					var o = b.cursor + offsize * count;
					if(o > b.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
					var v = 0;
					if(!(offsize >= 1 && offsize <= 4)) {
						throw haxe_Exception.thrown("Error");
					}
					var _g = 0;
					var _g1 = offsize;
					while(_g < _g1) {
						var i = _g++;
						var v1;
						if(b.cursor >= b.data.get_length()) {
							v1 = 0;
						} else {
							var pos = b.cursor++;
							if(pos == null) {
								pos = 0;
							}
							v1 = b.data.readU8(pos);
						}
						v = v << 8 | v1;
					}
					var o = b.cursor + (v - 1);
					if(o > b.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
					var s = b.cursor - start;
					var r = new kha_graphics2_truetype_Stbtt_$_$buf();
					r.data = null;
					r.cursor = 0;
					var r1 = r;
					if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
						tmp = r1;
					} else {
						r1.data = b.data.sub(start,s);
						tmp = r1;
					}
				} else {
					tmp = b;
				}
			}
		}
		info.subrs = tmp;
		if(cstype[0] != 2) {
			return false;
		}
		if(charstrings[0] == 0) {
			return false;
		}
		if(fdarrayoff[0] != 0) {
			if(fdselectoff[0] == 0) {
				return false;
			}
			var o = fdarrayoff[0];
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var start = b.cursor;
			var v = 0;
			var _g = 0;
			var _g1 = 2;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var count = v;
			var tmp;
			if(count > 0) {
				var offsize;
				if(b.cursor >= b.data.get_length()) {
					offsize = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					offsize = b.data.readU8(pos);
				}
				if(!(offsize >= 1 && offsize <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var o = b.cursor + offsize * count;
				if(o > b.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				var v = 0;
				if(!(offsize >= 1 && offsize <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var _g = 0;
				var _g1 = offsize;
				while(_g < _g1) {
					var i = _g++;
					var v1;
					if(b.cursor >= b.data.get_length()) {
						v1 = 0;
					} else {
						var pos = b.cursor++;
						if(pos == null) {
							pos = 0;
						}
						v1 = b.data.readU8(pos);
					}
					v = v << 8 | v1;
				}
				var o = b.cursor + (v - 1);
				if(o > b.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				var s = b.cursor - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
					tmp = r1;
				} else {
					r1.data = b.data.sub(start,s);
					tmp = r1;
				}
			} else {
				tmp = b;
			}
			info.fontdicts = tmp;
			var o = fdselectoff[0];
			var s = b.data.get_length() - fdselectoff[0];
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			var tmp;
			if(o < 0 || s < 0 || o > b.data.get_length() || s > b.data.get_length() - o) {
				tmp = r1;
			} else {
				r1.data = b.data.sub(o,s);
				tmp = r1;
			}
			info.fdselect = tmp;
		}
		var o = charstrings[0];
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		var tmp;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				tmp = r1;
			} else {
				r1.data = b.data.sub(start,s);
				tmp = r1;
			}
		} else {
			tmp = b;
		}
		info.charstrings = tmp;
	}
	var t = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"maxp");
	if(t != 0) {
		var pos = t + 4;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		info.numGlyphs = ch2 | ch1 << 8;
	} else {
		info.numGlyphs = 65535;
	}
	var pos = cmap + 2;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var numTables = ch2 | ch1 << 8;
	info.index_map = 0;
	var _g = 0;
	var _g1 = numTables;
	while(_g < _g1) {
		var i = _g++;
		var encoding_record = cmap + 4 + 8 * i;
		var pos = encoding_record;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		switch(ch2 | ch1 << 8) {
		case 0:
			var pos1 = encoding_record + 4;
			if(pos1 == null) {
				pos1 = 0;
			}
			var pos2 = pos1;
			if(pos2 == null) {
				pos2 = 0;
			}
			var ch11 = data.readU8(pos2);
			var ch21 = data.readU8(pos2 + 1);
			var ch3 = data.readU8(pos2 + 2);
			var ch4 = data.readU8(pos2 + 3);
			info.index_map = cmap + (ch4 | ch3 << 8 | ch21 << 16 | ch11 << 24);
			break;
		case 3:
			var pos3 = encoding_record + 2;
			if(pos3 == null) {
				pos3 = 0;
			}
			var ch12 = data.readU8(pos3);
			var ch22 = data.readU8(pos3 + 1);
			switch(ch22 | ch12 << 8) {
			case 1:case 10:
				var pos4 = encoding_record + 4;
				if(pos4 == null) {
					pos4 = 0;
				}
				var pos5 = pos4;
				if(pos5 == null) {
					pos5 = 0;
				}
				var ch13 = data.readU8(pos5);
				var ch23 = data.readU8(pos5 + 1);
				var ch31 = data.readU8(pos5 + 2);
				var ch41 = data.readU8(pos5 + 3);
				info.index_map = cmap + (ch41 | ch31 << 8 | ch23 << 16 | ch13 << 24);
				break;
			}
			break;
		}
	}
	if(info.index_map == 0) {
		return false;
	}
	var pos = info.head + 50;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	info.indexToLocFormat = ch2 | ch1 << 8;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex = function(info,unicode_codepoint) {
	var data = info.data;
	var index_map = info.index_map;
	var pos = index_map;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var format = ch2 | ch1 << 8;
	if(format == 0) {
		var pos = index_map + 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var bytes = ch2 | ch1 << 8;
		if(unicode_codepoint < bytes - 6) {
			var pos = index_map + 6 + unicode_codepoint;
			if(pos == null) {
				pos = 0;
			}
			return data.readU8(pos);
		}
		return 0;
	} else if(format == 6) {
		var pos = index_map + 6;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var first = ch2 | ch1 << 8;
		var pos = index_map + 8;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var count = ch2 | ch1 << 8;
		if(unicode_codepoint >= first && unicode_codepoint < first + count) {
			var pos = index_map + 10 + (unicode_codepoint - first) * 2;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = data.readU8(pos);
			var ch2 = data.readU8(pos + 1);
			return ch2 | ch1 << 8;
		}
		return 0;
	} else if(format == 2) {
		throw haxe_Exception.thrown("Error");
	} else if(format == 4) {
		var pos = index_map + 6;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var segcount = (ch2 | ch1 << 8) >> 1;
		var pos = index_map + 8;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var searchRange = (ch2 | ch1 << 8) >> 1;
		var pos = index_map + 10;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var entrySelector = ch2 | ch1 << 8;
		var pos = index_map + 12;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var rangeShift = (ch2 | ch1 << 8) >> 1;
		var endCount = index_map + 14;
		var search = endCount;
		if(unicode_codepoint > 65535) {
			return 0;
		}
		var pos = search + rangeShift * 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		if(unicode_codepoint >= (ch2 | ch1 << 8)) {
			search += rangeShift * 2;
		}
		search -= 2;
		while(entrySelector != 0) {
			searchRange >>= 1;
			var pos = search + searchRange * 2;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = data.readU8(pos);
			var ch2 = data.readU8(pos + 1);
			var end = ch2 | ch1 << 8;
			if(unicode_codepoint > end) {
				search += searchRange * 2;
			}
			--entrySelector;
		}
		search += 2;
		var item = search - endCount >> 1 & 65535;
		var pos = endCount + 2 * item;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		if(unicode_codepoint > (ch2 | ch1 << 8)) {
			throw haxe_Exception.thrown("Error");
		}
		var pos = index_map + 14 + segcount * 2 + 2 + 2 * item;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var start = ch2 | ch1 << 8;
		if(unicode_codepoint < start) {
			return 0;
		}
		var pos = index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var offset = ch2 | ch1 << 8;
		if(offset == 0) {
			var pos = index_map + 14 + segcount * 4 + 2 + 2 * item;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = data.readU8(pos);
			var ch2 = data.readU8(pos + 1);
			var n = ch2 | ch1 << 8;
			return unicode_codepoint + ((n & 32768) != 0 ? n - 65536 : n) & 65535;
		}
		var pos = offset + (unicode_codepoint - start) * 2 + index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		return ch2 | ch1 << 8;
	} else if(format == 12 || format == 13) {
		var pos = index_map + 12;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = data.readU8(pos1);
		var ch2 = data.readU8(pos1 + 1);
		var ch3 = data.readU8(pos1 + 2);
		var ch4 = data.readU8(pos1 + 3);
		var ngroups = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		var low = 0;
		var high = ngroups;
		while(low < high) {
			var mid = low + (high - low >> 1);
			var pos = index_map + 16 + mid * 12;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch1 = data.readU8(pos1);
			var ch2 = data.readU8(pos1 + 1);
			var ch3 = data.readU8(pos1 + 2);
			var ch4 = data.readU8(pos1 + 3);
			var start_char = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
			var pos2 = index_map + 16 + mid * 12 + 4;
			if(pos2 == null) {
				pos2 = 0;
			}
			var pos3 = pos2;
			if(pos3 == null) {
				pos3 = 0;
			}
			var ch11 = data.readU8(pos3);
			var ch21 = data.readU8(pos3 + 1);
			var ch31 = data.readU8(pos3 + 2);
			var ch41 = data.readU8(pos3 + 3);
			var end_char = ch41 | ch31 << 8 | ch21 << 16 | ch11 << 24;
			if(unicode_codepoint < start_char) {
				high = mid;
			} else if(unicode_codepoint > end_char) {
				low = mid + 1;
			} else {
				var pos4 = index_map + 16 + mid * 12 + 8;
				if(pos4 == null) {
					pos4 = 0;
				}
				var pos5 = pos4;
				if(pos5 == null) {
					pos5 = 0;
				}
				var ch12 = data.readU8(pos5);
				var ch22 = data.readU8(pos5 + 1);
				var ch32 = data.readU8(pos5 + 2);
				var ch42 = data.readU8(pos5 + 3);
				var start_glyph = ch42 | ch32 << 8 | ch22 << 16 | ch12 << 24;
				if(format == 12) {
					return start_glyph + unicode_codepoint - start_char;
				} else {
					return start_glyph;
				}
			}
		}
		return 0;
	}
	throw haxe_Exception.thrown("Error");
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointShape = function(info,unicode_codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,unicode_codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_setvertex = function(v,type,x,y,cx,cy) {
	v.type = type;
	v.x = x;
	v.y = y;
	v.cx = cx;
	v.cy = cy;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset = function(info,glyph_index) {
	var g1;
	var g2;
	if(!(info.cff.data == null || info.cff.data.get_length() == 0)) {
		throw haxe_Exception.thrown("Error");
	}
	if(glyph_index >= info.numGlyphs) {
		return -1;
	}
	if(info.indexToLocFormat >= 2) {
		return -1;
	}
	if(info.indexToLocFormat == 0) {
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		g1 = info1 + (ch2 | ch1 << 8) * 2;
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 2 + 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		g2 = info1 + (ch2 | ch1 << 8) * 2;
	} else {
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 4;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = p.readU8(pos1);
		var ch2 = p.readU8(pos1 + 1);
		var ch3 = p.readU8(pos1 + 2);
		var ch4 = p.readU8(pos1 + 3);
		g1 = info1 + (ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24);
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 4 + 4;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = p.readU8(pos1);
		var ch2 = p.readU8(pos1 + 1);
		var ch3 = p.readU8(pos1 + 2);
		var ch4 = p.readU8(pos1 + 3);
		g2 = info1 + (ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24);
	}
	if(g1 == g2) {
		return -1;
	} else {
		return g1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox = function(info,glyph_index,rect) {
	if(info.cff.data != null && info.cff.data.get_length() > 0) {
		kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphInfoT2(info,glyph_index,rect);
	} else {
		var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
		if(g < 0) {
			return false;
		}
		var p = info.data;
		var pos = g + 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = g + 4;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		rect.y0 = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = g + 6;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		rect.x1 = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = g + 8;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		rect.y1 = (n & 32768) != 0 ? n - 65536 : n;
	}
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBox = function(info,codepoint,rect) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),rect);
};
kha_graphics2_truetype_StbTruetype.stbtt_IsGlyphEmpty = function(info,glyph_index) {
	if(info.cff.data != null && info.cff.data.get_length() > 0) {
		return kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphInfoT2(info,glyph_index,null) == 0;
	}
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return true;
	}
	var p = info.data;
	var pos = g;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var numberOfContours = (n & 32768) != 0 ? n - 65536 : n;
	return numberOfContours == 0;
};
kha_graphics2_truetype_StbTruetype.stbtt__close_shape = function(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy) {
	if(start_off) {
		if(was_off) {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + scx >> 1,cy + scy >> 1,cx,cy);
		}
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,scx,scy);
	} else if(was_off) {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,cx,cy);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,sx,sy,0,0);
	}
	return num_vertices;
};
kha_graphics2_truetype_StbTruetype.copyVertices = function(from,to,offset,count) {
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		to[offset + i] = from[i];
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeTT = function(info,glyph_index) {
	var data = info.data;
	var vertices = null;
	var num_vertices = 0;
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return null;
	}
	var pos = g;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var numberOfContours = (n & 32768) != 0 ? n - 65536 : n;
	if(numberOfContours > 0) {
		var flags = 0;
		var j = 0;
		var next_move = 0;
		var off = 0;
		var was_off = false;
		var start_off = false;
		var endPtsOfContoursOffset = g + 10;
		var pos = endPtsOfContoursOffset + numberOfContours * 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var ins = ch2 | ch1 << 8;
		var pointsIndex = endPtsOfContoursOffset + numberOfContours * 2 + 2 + ins;
		var pos = endPtsOfContoursOffset + numberOfContours * 2 - 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		var n = 1 + (ch2 | ch1 << 8);
		var m = n + 2 * numberOfContours;
		var this1 = new Array(m);
		vertices = this1;
		if(vertices == null) {
			return null;
		} else {
			var _g = 0;
			var _g1 = vertices.length;
			while(_g < _g1) {
				var i = _g++;
				vertices[i] = new kha_graphics2_truetype_Stbtt_$vertex();
			}
		}
		next_move = 0;
		var flagcount = 0;
		off = m - n;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			if(flagcount == 0) {
				flags = data.readU8(pointsIndex++);
				if((flags & 8) != 0) {
					flagcount = data.readU8(pointsIndex++);
				}
			} else {
				--flagcount;
			}
			vertices[off + i].type = flags;
		}
		var x = 0;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			flags = vertices[off + i].type;
			if((flags & 2) != 0) {
				var dx = data.readU8(pointsIndex++);
				x += (flags & 16) != 0 ? dx : -dx;
			} else if((flags & 16) == 0) {
				var value;
				var ch1 = data.readU8(pointsIndex);
				var ch2 = data.readU8(pointsIndex + 1);
				var n1 = ch2 | ch1 << 8;
				if((n1 & 32768) != 0) {
					value = n1 - 65536;
				} else {
					value = n1;
				}
				x += value;
				pointsIndex += 2;
			}
			vertices[off + i].x = x;
		}
		var y = 0;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			flags = vertices[off + i].type;
			if((flags & 4) != 0) {
				var dy = data.readU8(pointsIndex++);
				y += (flags & 32) != 0 ? dy : -dy;
			} else if((flags & 32) == 0) {
				var value;
				var ch1 = data.readU8(pointsIndex);
				var ch2 = data.readU8(pointsIndex + 1);
				var n1 = ch2 | ch1 << 8;
				if((n1 & 32768) != 0) {
					value = n1 - 65536;
				} else {
					value = n1;
				}
				y += value;
				pointsIndex += 2;
			}
			vertices[off + i].y = y;
		}
		num_vertices = 0;
		var scy = 0;
		var scx = scy;
		var cy = scx;
		var cx = cy;
		var sy = cx;
		var sx = sy;
		var i = 0;
		while(i < n) {
			flags = vertices[off + i].type;
			x = vertices[off + i].x;
			y = vertices[off + i].y;
			if(next_move == i) {
				if(i != 0) {
					num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
				}
				start_off = (flags & 1) == 0;
				if(start_off) {
					scx = x;
					scy = y;
					if((vertices[off + i + 1].type & 1) == 0) {
						sx = x + vertices[off + i + 1].x >> 1;
						sy = y + vertices[off + i + 1].y >> 1;
					} else {
						sx = vertices[off + i + 1].x;
						sy = vertices[off + i + 1].y;
						++i;
					}
				} else {
					sx = x;
					sy = y;
				}
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],1,sx,sy,0,0);
				was_off = false;
				var pos = endPtsOfContoursOffset + j * 2;
				if(pos == null) {
					pos = 0;
				}
				var ch1 = data.readU8(pos);
				var ch2 = data.readU8(pos + 1);
				next_move = 1 + (ch2 | ch1 << 8);
				++j;
			} else if((flags & 1) == 0) {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + x >> 1,cy + y >> 1,cx,cy);
				}
				cx = x;
				cy = y;
				was_off = true;
			} else {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,x,y,cx,cy);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,x,y,0,0);
				}
				was_off = false;
			}
			++i;
		}
		num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
	} else if(numberOfContours < 0) {
		var more = 1;
		var compIndex = g + 10;
		num_vertices = 0;
		vertices = null;
		while(more != 0) {
			var comp_num_verts = 0;
			var i;
			var comp_verts = null;
			var tmp = null;
			var mtx0 = 1;
			var mtx1 = 0;
			var mtx2 = 0;
			var mtx3 = 1;
			var mtx4 = 0;
			var mtx5 = 0;
			var pos = compIndex;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = data.readU8(pos);
			var ch2 = data.readU8(pos + 1);
			var n = ch2 | ch1 << 8;
			var flags = (n & 32768) != 0 ? n - 65536 : n;
			var pos1 = compIndex += 2;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch11 = data.readU8(pos1);
			var ch21 = data.readU8(pos1 + 1);
			var n1 = ch21 | ch11 << 8;
			var gidx = (n1 & 32768) != 0 ? n1 - 65536 : n1;
			compIndex += 2;
			if((flags & 2) != 0) {
				if((flags & 1) != 0) {
					var pos2 = compIndex;
					if(pos2 == null) {
						pos2 = 0;
					}
					var ch12 = data.readU8(pos2);
					var ch22 = data.readU8(pos2 + 1);
					var n2 = ch22 | ch12 << 8;
					mtx4 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
					var pos3 = compIndex += 2;
					if(pos3 == null) {
						pos3 = 0;
					}
					var ch13 = data.readU8(pos3);
					var ch23 = data.readU8(pos3 + 1);
					var n3 = ch23 | ch13 << 8;
					mtx5 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
					compIndex += 2;
				} else {
					var pos4 = compIndex;
					if(pos4 == null) {
						pos4 = 0;
					}
					var n4 = data.readU8(pos4);
					mtx4 = n4 >= 128 ? n4 - 256 : n4;
					var pos5 = ++compIndex;
					if(pos5 == null) {
						pos5 = 0;
					}
					var n5 = data.readU8(pos5);
					mtx5 = n5 >= 128 ? n5 - 256 : n5;
					++compIndex;
				}
			} else {
				throw haxe_Exception.thrown("Error");
			}
			if((flags & 8) != 0) {
				var pos6 = compIndex;
				if(pos6 == null) {
					pos6 = 0;
				}
				var ch14 = data.readU8(pos6);
				var ch24 = data.readU8(pos6 + 1);
				var n6 = ch24 | ch14 << 8;
				mtx3 = ((n6 & 32768) != 0 ? n6 - 65536 : n6) / 16384.0;
				mtx0 = mtx3;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
			} else if((flags & 64) != 0) {
				var pos7 = compIndex;
				if(pos7 == null) {
					pos7 = 0;
				}
				var ch15 = data.readU8(pos7);
				var ch25 = data.readU8(pos7 + 1);
				var n7 = ch25 | ch15 << 8;
				mtx0 = ((n7 & 32768) != 0 ? n7 - 65536 : n7) / 16384.0;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
				var pos8 = compIndex;
				if(pos8 == null) {
					pos8 = 0;
				}
				var ch16 = data.readU8(pos8);
				var ch26 = data.readU8(pos8 + 1);
				var n8 = ch26 | ch16 << 8;
				mtx3 = ((n8 & 32768) != 0 ? n8 - 65536 : n8) / 16384.0;
				compIndex += 2;
			} else if((flags & 128) != 0) {
				var pos9 = compIndex;
				if(pos9 == null) {
					pos9 = 0;
				}
				var ch17 = data.readU8(pos9);
				var ch27 = data.readU8(pos9 + 1);
				var n9 = ch27 | ch17 << 8;
				mtx0 = ((n9 & 32768) != 0 ? n9 - 65536 : n9) / 16384.0;
				var pos10 = compIndex += 2;
				if(pos10 == null) {
					pos10 = 0;
				}
				var ch18 = data.readU8(pos10);
				var ch28 = data.readU8(pos10 + 1);
				var n10 = ch28 | ch18 << 8;
				mtx1 = ((n10 & 32768) != 0 ? n10 - 65536 : n10) / 16384.0;
				var pos11 = compIndex += 2;
				if(pos11 == null) {
					pos11 = 0;
				}
				var ch19 = data.readU8(pos11);
				var ch29 = data.readU8(pos11 + 1);
				var n11 = ch29 | ch19 << 8;
				mtx2 = ((n11 & 32768) != 0 ? n11 - 65536 : n11) / 16384.0;
				var pos12 = compIndex += 2;
				if(pos12 == null) {
					pos12 = 0;
				}
				var ch110 = data.readU8(pos12);
				var ch210 = data.readU8(pos12 + 1);
				var n12 = ch210 | ch110 << 8;
				mtx3 = ((n12 & 32768) != 0 ? n12 - 65536 : n12) / 16384.0;
				compIndex += 2;
			}
			var m = Math.sqrt(mtx0 * mtx0 + mtx1 * mtx1);
			var n13 = Math.sqrt(mtx2 * mtx2 + mtx3 * mtx3);
			comp_verts = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,gidx);
			comp_num_verts = comp_verts == null ? 0 : comp_verts.length;
			if(comp_num_verts > 0) {
				var _g = 0;
				var _g1 = comp_num_verts;
				while(_g < _g1) {
					var i1 = _g++;
					var v = comp_verts[i1];
					var x = v.x;
					var y = v.y;
					v.x = m * (mtx0 * x + mtx2 * y + mtx4) | 0;
					v.y = n13 * (mtx1 * x + mtx3 * y + mtx5) | 0;
					x = v.cx;
					y = v.cy;
					v.cx = m * (mtx0 * x + mtx2 * y + mtx4) | 0;
					v.cy = n13 * (mtx1 * x + mtx3 * y + mtx5) | 0;
				}
				var this1 = new Array(num_vertices + comp_num_verts);
				tmp = this1;
				if(tmp == null) {
					return null;
				}
				if(num_vertices > 0) {
					kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
				}
				kha_graphics2_truetype_StbTruetype.copyVertices(comp_verts,tmp,num_vertices,comp_num_verts);
				vertices = tmp;
				num_vertices += comp_num_verts;
			}
			more = flags & 32;
		}
	}
	if(vertices == null) {
		return null;
	}
	if(vertices.length < num_vertices) {
		throw haxe_Exception.thrown("Error");
	}
	if(num_vertices < vertices.length) {
		var this1 = new Array(num_vertices);
		var tmp = this1;
		kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
		return tmp;
	} else {
		return vertices;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__CSCTX_INIT = function(bounds) {
	var tmp = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp.bounds = bounds;
	tmp.started = false;
	tmp.first_x = 0;
	tmp.first_y = 0;
	tmp.x = 0;
	tmp.y = 0;
	tmp.min_x = 0;
	tmp.min_y = 0;
	tmp.max_x = 0;
	tmp.max_y = 0;
	tmp.pvertices = null;
	tmp.num_vertices = 0;
	return tmp;
};
kha_graphics2_truetype_StbTruetype.stbtt__track_vertex = function(c,x,y) {
	if(x > c.max_x || !c.started) {
		c.max_x = x;
	}
	if(y > c.max_y || !c.started) {
		c.max_y = y;
	}
	if(x < c.min_x || !c.started) {
		c.min_x = x;
	}
	if(y < c.min_y || !c.started) {
		c.min_y = y;
	}
	c.started = true;
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_v = function(c,type,x,y,cx,cy,cx1,cy1) {
	if(c.bounds) {
		if(x > c.max_x || !c.started) {
			c.max_x = x;
		}
		if(y > c.max_y || !c.started) {
			c.max_y = y;
		}
		if(x < c.min_x || !c.started) {
			c.min_x = x;
		}
		if(y < c.min_y || !c.started) {
			c.min_y = y;
		}
		c.started = true;
		if(type == 4) {
			if(cx > c.max_x || !c.started) {
				c.max_x = cx;
			}
			if(cy > c.max_y || !c.started) {
				c.max_y = cy;
			}
			if(cx < c.min_x || !c.started) {
				c.min_x = cx;
			}
			if(cy < c.min_y || !c.started) {
				c.min_y = cy;
			}
			c.started = true;
			if(cx1 > c.max_x || !c.started) {
				c.max_x = cx1;
			}
			if(cy1 > c.max_y || !c.started) {
				c.max_y = cy1;
			}
			if(cx1 < c.min_x || !c.started) {
				c.min_x = cx1;
			}
			if(cy1 < c.min_y || !c.started) {
				c.min_y = cy1;
			}
			c.started = true;
		}
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],type,x,y,cx,cy);
		c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx1 , Int);
		c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy1 , Int);
	}
	c.num_vertices++;
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_close_shape = function(ctx) {
	if(ctx.first_x != ctx.x || ctx.first_y != ctx.y) {
		var x = ctx.first_x | 0;
		var y = ctx.first_y | 0;
		if(ctx.bounds) {
			if(x > ctx.max_x || !ctx.started) {
				ctx.max_x = x;
			}
			if(y > ctx.max_y || !ctx.started) {
				ctx.max_y = y;
			}
			if(x < ctx.min_x || !ctx.started) {
				ctx.min_x = x;
			}
			if(y < ctx.min_y || !ctx.started) {
				ctx.min_y = y;
			}
			ctx.started = true;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],2,x,y,0,0);
			ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(0 , Int);
			ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(0 , Int);
		}
		ctx.num_vertices++;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_rmove_to = function(ctx,dx,dy) {
	if(ctx.first_x != ctx.x || ctx.first_y != ctx.y) {
		var x = ctx.first_x | 0;
		var y = ctx.first_y | 0;
		if(ctx.bounds) {
			if(x > ctx.max_x || !ctx.started) {
				ctx.max_x = x;
			}
			if(y > ctx.max_y || !ctx.started) {
				ctx.max_y = y;
			}
			if(x < ctx.min_x || !ctx.started) {
				ctx.min_x = x;
			}
			if(y < ctx.min_y || !ctx.started) {
				ctx.min_y = y;
			}
			ctx.started = true;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],2,x,y,0,0);
			ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(0 , Int);
			ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(0 , Int);
		}
		ctx.num_vertices++;
	}
	ctx.first_x = ctx.x = ctx.x + dx;
	ctx.first_y = ctx.y = ctx.y + dy;
	var x = ctx.x | 0;
	var y = ctx.y | 0;
	if(ctx.bounds) {
		if(x > ctx.max_x || !ctx.started) {
			ctx.max_x = x;
		}
		if(y > ctx.max_y || !ctx.started) {
			ctx.max_y = y;
		}
		if(x < ctx.min_x || !ctx.started) {
			ctx.min_x = x;
		}
		if(y < ctx.min_y || !ctx.started) {
			ctx.min_y = y;
		}
		ctx.started = true;
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],1,x,y,0,0);
		ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(0 , Int);
		ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(0 , Int);
	}
	ctx.num_vertices++;
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_rline_to = function(ctx,dx,dy) {
	ctx.x += dx;
	ctx.y += dy;
	var x = ctx.x | 0;
	var y = ctx.y | 0;
	if(ctx.bounds) {
		if(x > ctx.max_x || !ctx.started) {
			ctx.max_x = x;
		}
		if(y > ctx.max_y || !ctx.started) {
			ctx.max_y = y;
		}
		if(x < ctx.min_x || !ctx.started) {
			ctx.min_x = x;
		}
		if(y < ctx.min_y || !ctx.started) {
			ctx.min_y = y;
		}
		ctx.started = true;
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],2,x,y,0,0);
		ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(0 , Int);
		ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(0 , Int);
	}
	ctx.num_vertices++;
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_rccurve_to = function(ctx,dx1,dy1,dx2,dy2,dx3,dy3) {
	var cx1 = ctx.x + dx1;
	var cy1 = ctx.y + dy1;
	var cx2 = cx1 + dx2;
	var cy2 = cy1 + dy2;
	ctx.x = cx2 + dx3;
	ctx.y = cy2 + dy3;
	var x = ctx.x | 0;
	var y = ctx.y | 0;
	var cx = cx1 | 0;
	var cy = cy1 | 0;
	var cx1 = cx2 | 0;
	var cy1 = cy2 | 0;
	if(ctx.bounds) {
		if(x > ctx.max_x || !ctx.started) {
			ctx.max_x = x;
		}
		if(y > ctx.max_y || !ctx.started) {
			ctx.max_y = y;
		}
		if(x < ctx.min_x || !ctx.started) {
			ctx.min_x = x;
		}
		if(y < ctx.min_y || !ctx.started) {
			ctx.min_y = y;
		}
		ctx.started = true;
		if(cx > ctx.max_x || !ctx.started) {
			ctx.max_x = cx;
		}
		if(cy > ctx.max_y || !ctx.started) {
			ctx.max_y = cy;
		}
		if(cx < ctx.min_x || !ctx.started) {
			ctx.min_x = cx;
		}
		if(cy < ctx.min_y || !ctx.started) {
			ctx.min_y = cy;
		}
		ctx.started = true;
		if(cx1 > ctx.max_x || !ctx.started) {
			ctx.max_x = cx1;
		}
		if(cy1 > ctx.max_y || !ctx.started) {
			ctx.max_y = cy1;
		}
		if(cx1 < ctx.min_x || !ctx.started) {
			ctx.min_x = cx1;
		}
		if(cy1 < ctx.min_y || !ctx.started) {
			ctx.min_y = cy1;
		}
		ctx.started = true;
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],4,x,y,cx,cy);
		ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(cx1 , Int);
		ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(cy1 , Int);
	}
	ctx.num_vertices++;
};
kha_graphics2_truetype_StbTruetype.stbtt__get_subr = function(idx,n) {
	if(0 > idx.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(idx.cursor >= idx.data.get_length()) {
			v1 = 0;
		} else {
			var pos = idx.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = idx.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	var bias = 107;
	if(count >= 33900) {
		bias = 32768;
	} else if(count >= 1240) {
		bias = 1131;
	}
	n += bias;
	if(n < 0 || n >= count) {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		return r;
	}
	if(0 > idx.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(idx.cursor >= idx.data.get_length()) {
			v1 = 0;
		} else {
			var pos = idx.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = idx.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	var offsize;
	if(idx.cursor >= idx.data.get_length()) {
		offsize = 0;
	} else {
		var pos = idx.cursor++;
		if(pos == null) {
			pos = 0;
		}
		offsize = idx.data.readU8(pos);
	}
	if(!(n >= 0 && n < count)) {
		throw haxe_Exception.thrown("Error");
	}
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var o = idx.cursor + n * offsize;
	if(o > idx.data.get_length() || o < 0) {
		throw haxe_Exception.thrown("Error");
	}
	idx.cursor = o > idx.data.get_length() || o < 0 ? idx.data.get_length() : o;
	var v = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(idx.cursor >= idx.data.get_length()) {
			v1 = 0;
		} else {
			var pos = idx.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = idx.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var start = v;
	var v = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(idx.cursor >= idx.data.get_length()) {
			v1 = 0;
		} else {
			var pos = idx.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = idx.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var end = v;
	var o = 2 + (count + 1) * offsize + start;
	var s = end - start;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	var r1 = r;
	if(o < 0 || s < 0 || o > idx.data.get_length() || s > idx.data.get_length() - o) {
		return r1;
	} else {
		r1.data = idx.data.sub(o,s);
		return r1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__cid_get_glyph_subrs = function(info,glyph_index) {
	var fdselect = info.fdselect;
	var nranges;
	var start;
	var end;
	var v;
	var fmt;
	var fdselector = -1;
	var i;
	if(0 > fdselect.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	fdselect.cursor = 0 > fdselect.data.get_length() ? fdselect.data.get_length() : 0;
	if(fdselect.cursor >= fdselect.data.get_length()) {
		fmt = 0;
	} else {
		var pos = fdselect.cursor++;
		if(pos == null) {
			pos = 0;
		}
		fmt = fdselect.data.readU8(pos);
	}
	if(fmt == 0) {
		var o = fdselect.cursor + glyph_index;
		if(o > fdselect.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		fdselect.cursor = o > fdselect.data.get_length() || o < 0 ? fdselect.data.get_length() : o;
		if(fdselect.cursor >= fdselect.data.get_length()) {
			fdselector = 0;
		} else {
			var pos = fdselect.cursor++;
			if(pos == null) {
				pos = 0;
			}
			fdselector = fdselect.data.readU8(pos);
		}
	} else if(fmt == 3) {
		var v1 = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v2;
			if(fdselect.cursor >= fdselect.data.get_length()) {
				v2 = 0;
			} else {
				var pos = fdselect.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v2 = fdselect.data.readU8(pos);
			}
			v1 = v1 << 8 | v2;
		}
		nranges = v1;
		var v1 = 0;
		var _g = 0;
		var _g1 = 2;
		while(_g < _g1) {
			var i = _g++;
			var v2;
			if(fdselect.cursor >= fdselect.data.get_length()) {
				v2 = 0;
			} else {
				var pos = fdselect.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v2 = fdselect.data.readU8(pos);
			}
			v1 = v1 << 8 | v2;
		}
		start = v1;
		var _g = 0;
		var _g1 = nranges;
		while(_g < _g1) {
			var i = _g++;
			if(fdselect.cursor >= fdselect.data.get_length()) {
				v = 0;
			} else {
				var pos = fdselect.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v = fdselect.data.readU8(pos);
			}
			var v1 = 0;
			var _g2 = 0;
			var _g3 = 2;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var v2;
				if(fdselect.cursor >= fdselect.data.get_length()) {
					v2 = 0;
				} else {
					var pos1 = fdselect.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					v2 = fdselect.data.readU8(pos1);
				}
				v1 = v1 << 8 | v2;
			}
			end = v1;
			if(glyph_index >= start && glyph_index < end) {
				fdselector = v;
				break;
			}
			start = end;
		}
	}
	if(fdselector == -1) {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
	}
	var cff = info.cff;
	var b = info.fontdicts;
	if(0 > b.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var v = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	var offsize;
	if(b.cursor >= b.data.get_length()) {
		offsize = 0;
	} else {
		var pos = b.cursor++;
		if(pos == null) {
			pos = 0;
		}
		offsize = b.data.readU8(pos);
	}
	if(!(fdselector >= 0 && fdselector < count)) {
		throw haxe_Exception.thrown("Error");
	}
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var o = b.cursor + fdselector * offsize;
	if(o > b.data.get_length() || o < 0) {
		throw haxe_Exception.thrown("Error");
	}
	b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
	var v = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var start = v;
	var v = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i = _g++;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var end = v;
	var o = 2 + (count + 1) * offsize + start;
	var s = end - start;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	var r1 = r;
	var fontdict;
	if(o < 0 || s < 0 || o > b.data.get_length() || s > b.data.get_length() - o) {
		fontdict = r1;
	} else {
		r1.data = b.data.sub(o,s);
		fontdict = r1;
	}
	var subrsoff = [0];
	var private_loc = [0,0];
	var i = 0;
	if(0 > fontdict.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	fontdict.cursor = 0 > fontdict.data.get_length() ? fontdict.data.get_length() : 0;
	var ret = null;
	while(fontdict.cursor < fontdict.data.get_length()) {
		var start = fontdict.cursor;
		var op;
		while(true) {
			var tmp;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				tmp = 0;
			} else {
				var pos = fontdict.cursor;
				if(pos == null) {
					pos = 0;
				}
				tmp = fontdict.data.readU8(pos);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v;
			var b0;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				b0 = 0;
			} else {
				var pos1 = fontdict.cursor;
				if(pos1 == null) {
					pos1 = 0;
				}
				b0 = fontdict.data.readU8(pos1);
			}
			if(b0 < 28) {
				throw haxe_Exception.thrown("Error");
			}
			if(b0 == 30) {
				var o = fontdict.cursor + 1;
				if(o > fontdict.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				fontdict.cursor = o > fontdict.data.get_length() || o < 0 ? fontdict.data.get_length() : o;
				while(fontdict.cursor < fontdict.data.get_length()) {
					if(fontdict.cursor >= fontdict.data.get_length()) {
						v = 0;
					} else {
						var pos2 = fontdict.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						v = fontdict.data.readU8(pos2);
					}
					if((v & 15) == 15 || v >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(fontdict.cursor >= fontdict.data.get_length()) {
					b01 = 0;
				} else {
					var pos3 = fontdict.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					b01 = fontdict.data.readU8(pos3);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(fontdict.cursor < fontdict.data.get_length()) {
							var pos4 = fontdict.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
							fontdict.data.readU8(pos4);
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(fontdict.cursor < fontdict.data.get_length()) {
							var pos5 = fontdict.cursor++;
							if(pos5 == null) {
								pos5 = 0;
							}
							fontdict.data.readU8(pos5);
						}
					} else if(b01 == 28) {
						var v1 = 0;
						var _g = 0;
						var _g1 = 2;
						while(_g < _g1) {
							var i1 = _g++;
							var v2;
							if(fontdict.cursor >= fontdict.data.get_length()) {
								v2 = 0;
							} else {
								var pos6 = fontdict.cursor++;
								if(pos6 == null) {
									pos6 = 0;
								}
								v2 = fontdict.data.readU8(pos6);
							}
							v1 = v1 << 8 | v2;
						}
					} else if(b01 == 29) {
						var v3 = 0;
						var _g2 = 0;
						var _g3 = 4;
						while(_g2 < _g3) {
							var i2 = _g2++;
							var v4;
							if(fontdict.cursor >= fontdict.data.get_length()) {
								v4 = 0;
							} else {
								var pos7 = fontdict.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
								v4 = fontdict.data.readU8(pos7);
							}
							v3 = v3 << 8 | v4;
						}
					} else {
						throw haxe_Exception.thrown("Error");
					}
				}
			}
		}
		var end = fontdict.cursor;
		if(fontdict.cursor >= fontdict.data.get_length()) {
			op = 0;
		} else {
			var pos8 = fontdict.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			op = fontdict.data.readU8(pos8);
		}
		if(op == 12) {
			var op1;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				op1 = 0;
			} else {
				var pos9 = fontdict.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				op1 = fontdict.data.readU8(pos9);
			}
			op = op1 | 256;
		}
		if(op == 18) {
			var s = end - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(start < 0 || s < 0 || start > fontdict.data.get_length() || s > fontdict.data.get_length() - start) {
				ret = r1;
			} else {
				r1.data = fontdict.data.sub(start,s);
				ret = r1;
			}
			break;
		}
	}
	var operands;
	if(ret != null) {
		operands = ret;
	} else {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		if(0 > fontdict.data.get_length() || 0 > fontdict.data.get_length()) {
			operands = r1;
		} else {
			r1.data = fontdict.data.sub(0,0);
			operands = r1;
		}
	}
	while(i < 2 && operands.cursor < operands.data.get_length()) {
		var b0;
		if(operands.cursor >= operands.data.get_length()) {
			b0 = 0;
		} else {
			var pos = operands.cursor++;
			if(pos == null) {
				pos = 0;
			}
			b0 = operands.data.readU8(pos);
		}
		var tmp;
		if(b0 >= 32 && b0 <= 246) {
			tmp = b0 - 139;
		} else if(b0 >= 247 && b0 <= 250) {
			var tmp1;
			if(operands.cursor >= operands.data.get_length()) {
				tmp1 = 0;
			} else {
				var pos1 = operands.cursor++;
				if(pos1 == null) {
					pos1 = 0;
				}
				tmp1 = operands.data.readU8(pos1);
			}
			tmp = (b0 - 247) * 256 + tmp1 + 108;
		} else if(b0 >= 251 && b0 <= 254) {
			var tmp2;
			if(operands.cursor >= operands.data.get_length()) {
				tmp2 = 0;
			} else {
				var pos2 = operands.cursor++;
				if(pos2 == null) {
					pos2 = 0;
				}
				tmp2 = operands.data.readU8(pos2);
			}
			tmp = -(b0 - 251) * 256 - tmp2 - 108;
		} else if(b0 == 28) {
			var v = 0;
			var _g = 0;
			var _g1 = 2;
			while(_g < _g1) {
				var i1 = _g++;
				var v1;
				if(operands.cursor >= operands.data.get_length()) {
					v1 = 0;
				} else {
					var pos3 = operands.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					v1 = operands.data.readU8(pos3);
				}
				v = v << 8 | v1;
			}
			tmp = v;
		} else if(b0 == 29) {
			var v2 = 0;
			var _g2 = 0;
			var _g3 = 4;
			while(_g2 < _g3) {
				var i2 = _g2++;
				var v3;
				if(operands.cursor >= operands.data.get_length()) {
					v3 = 0;
				} else {
					var pos4 = operands.cursor++;
					if(pos4 == null) {
						pos4 = 0;
					}
					v3 = operands.data.readU8(pos4);
				}
				v2 = v2 << 8 | v3;
			}
			tmp = v2;
		} else {
			throw haxe_Exception.thrown("Error");
		}
		private_loc[i] = tmp;
		++i;
	}
	if(private_loc[1] == 0 || private_loc[0] == 0) {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		return r;
	} else {
		var o = private_loc[1];
		var s = private_loc[0];
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		var r1 = r;
		var pdict;
		if(o < 0 || s < 0 || o > cff.data.get_length() || s > cff.data.get_length() - o) {
			pdict = r1;
		} else {
			r1.data = cff.data.sub(o,s);
			pdict = r1;
		}
		var i = 0;
		if(0 > pdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
		var ret = null;
		while(pdict.cursor < pdict.data.get_length()) {
			var start = pdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(pdict.cursor >= pdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = pdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = pdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(pdict.cursor >= pdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = pdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = pdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = pdict.cursor + 1;
					if(o > pdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					pdict.cursor = o > pdict.data.get_length() || o < 0 ? pdict.data.get_length() : o;
					while(pdict.cursor < pdict.data.get_length()) {
						if(pdict.cursor >= pdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = pdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = pdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(pdict.cursor >= pdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = pdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = pdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(pdict.cursor < pdict.data.get_length()) {
								var pos4 = pdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								pdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(pdict.cursor < pdict.data.get_length()) {
								var pos5 = pdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								pdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var v1 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i1 = _g++;
								var v2;
								if(pdict.cursor >= pdict.data.get_length()) {
									v2 = 0;
								} else {
									var pos6 = pdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v2 = pdict.data.readU8(pos6);
								}
								v1 = v1 << 8 | v2;
							}
						} else if(b01 == 29) {
							var v3 = 0;
							var _g2 = 0;
							var _g3 = 4;
							while(_g2 < _g3) {
								var i2 = _g2++;
								var v4;
								if(pdict.cursor >= pdict.data.get_length()) {
									v4 = 0;
								} else {
									var pos7 = pdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									v4 = pdict.data.readU8(pos7);
								}
								v3 = v3 << 8 | v4;
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = pdict.cursor;
			if(pdict.cursor >= pdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = pdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = pdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(pdict.cursor >= pdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = pdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = pdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 19) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > pdict.data.get_length() || s > pdict.data.get_length() - start) {
					ret = r1;
				} else {
					r1.data = pdict.data.sub(start,s);
					ret = r1;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var r1 = r;
			if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
				operands = r1;
			} else {
				r1.data = pdict.data.sub(0,0);
				operands = r1;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				var _g1 = 2;
				while(_g < _g1) {
					var i1 = _g++;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g2 = 0;
				var _g3 = 4;
				while(_g2 < _g3) {
					var i2 = _g2++;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			subrsoff[i] = tmp;
			++i;
		}
		if(subrsoff[0] == 0) {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			return r;
		} else {
			var o = private_loc[1] + subrsoff[0];
			if(o > cff.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			cff.cursor = o > cff.data.get_length() || o < 0 ? cff.data.get_length() : o;
			var start = cff.cursor;
			var v = 0;
			var _g = 0;
			var _g1 = 2;
			while(_g < _g1) {
				var i = _g++;
				var v1;
				if(cff.cursor >= cff.data.get_length()) {
					v1 = 0;
				} else {
					var pos = cff.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = cff.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var count = v;
			if(count > 0) {
				var offsize;
				if(cff.cursor >= cff.data.get_length()) {
					offsize = 0;
				} else {
					var pos = cff.cursor++;
					if(pos == null) {
						pos = 0;
					}
					offsize = cff.data.readU8(pos);
				}
				if(!(offsize >= 1 && offsize <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var o = cff.cursor + offsize * count;
				if(o > cff.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				cff.cursor = o > cff.data.get_length() || o < 0 ? cff.data.get_length() : o;
				var v = 0;
				if(!(offsize >= 1 && offsize <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var _g = 0;
				var _g1 = offsize;
				while(_g < _g1) {
					var i = _g++;
					var v1;
					if(cff.cursor >= cff.data.get_length()) {
						v1 = 0;
					} else {
						var pos = cff.cursor++;
						if(pos == null) {
							pos = 0;
						}
						v1 = cff.data.readU8(pos);
					}
					v = v << 8 | v1;
				}
				var o = cff.cursor + (v - 1);
				if(o > cff.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				cff.cursor = o > cff.data.get_length() || o < 0 ? cff.data.get_length() : o;
				var s = cff.cursor - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				var r1 = r;
				if(start < 0 || s < 0 || start > cff.data.get_length() || s > cff.data.get_length() - start) {
					return r1;
				} else {
					r1.data = cff.data.sub(start,s);
					return r1;
				}
			} else {
				return cff;
			}
		}
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__CSERR = function(s) {
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__run_charstring = function(info,glyph_index,c) {
	var in_header = true;
	var maskbits = 0;
	var subr_stack_height = 0;
	var sp = 0;
	var v;
	var i;
	var b0;
	var has_subrs = false;
	var clear_stack;
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	var s = _g;
	var _g = [];
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	var subr_stack = _g;
	var subrs = info.subrs;
	var b;
	var f;
	var b1 = info.charstrings;
	if(0 > b1.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	b1.cursor = 0 > b1.data.get_length() ? b1.data.get_length() : 0;
	var v1 = 0;
	var _g = 0;
	var _g1 = 2;
	while(_g < _g1) {
		var i1 = _g++;
		var v2;
		if(b1.cursor >= b1.data.get_length()) {
			v2 = 0;
		} else {
			var pos = b1.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v2 = b1.data.readU8(pos);
		}
		v1 = v1 << 8 | v2;
	}
	var count = v1;
	var offsize;
	if(b1.cursor >= b1.data.get_length()) {
		offsize = 0;
	} else {
		var pos = b1.cursor++;
		if(pos == null) {
			pos = 0;
		}
		offsize = b1.data.readU8(pos);
	}
	if(!(glyph_index >= 0 && glyph_index < count)) {
		throw haxe_Exception.thrown("Error");
	}
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var o = b1.cursor + glyph_index * offsize;
	if(o > b1.data.get_length() || o < 0) {
		throw haxe_Exception.thrown("Error");
	}
	b1.cursor = o > b1.data.get_length() || o < 0 ? b1.data.get_length() : o;
	var v1 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i1 = _g++;
		var v2;
		if(b1.cursor >= b1.data.get_length()) {
			v2 = 0;
		} else {
			var pos = b1.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v2 = b1.data.readU8(pos);
		}
		v1 = v1 << 8 | v2;
	}
	var start = v1;
	var v1 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g = 0;
	var _g1 = offsize;
	while(_g < _g1) {
		var i1 = _g++;
		var v2;
		if(b1.cursor >= b1.data.get_length()) {
			v2 = 0;
		} else {
			var pos = b1.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v2 = b1.data.readU8(pos);
		}
		v1 = v1 << 8 | v2;
	}
	var end = v1;
	var o = 2 + (count + 1) * offsize + start;
	var s1 = end - start;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	var r1 = r;
	if(o < 0 || s1 < 0 || o > b1.data.get_length() || s1 > b1.data.get_length() - o) {
		b = r1;
	} else {
		r1.data = b1.data.sub(o,s1);
		b = r1;
	}
	while(b.cursor < b.data.get_length()) {
		i = 0;
		clear_stack = true;
		if(b.cursor >= b.data.get_length()) {
			b0 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			b0 = b.data.readU8(pos);
		}
		switch(b0) {
		case 1:case 3:case 18:case 23:
			maskbits += sp / 2 | 0;
			break;
		case 4:
			in_header = false;
			if(sp < 1) {
				return false;
			}
			if(c.first_x != c.x || c.first_y != c.y) {
				var x = c.first_x | 0;
				var y = c.first_y | 0;
				if(c.bounds) {
					if(x > c.max_x || !c.started) {
						c.max_x = x;
					}
					if(y > c.max_y || !c.started) {
						c.max_y = y;
					}
					if(x < c.min_x || !c.started) {
						c.min_x = x;
					}
					if(y < c.min_y || !c.started) {
						c.min_y = y;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x,y,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			c.first_x = c.x = c.x;
			c.first_y = c.y = c.y + s[sp - 1];
			var x1 = c.x | 0;
			var y1 = c.y | 0;
			if(c.bounds) {
				if(x1 > c.max_x || !c.started) {
					c.max_x = x1;
				}
				if(y1 > c.max_y || !c.started) {
					c.max_y = y1;
				}
				if(x1 < c.min_x || !c.started) {
					c.min_x = x1;
				}
				if(y1 < c.min_y || !c.started) {
					c.min_y = y1;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],1,x1,y1,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 5:
			if(sp < 2) {
				return false;
			}
			while(i + 1 < sp) {
				c.x += s[i];
				c.y += s[i + 1];
				var x2 = c.x | 0;
				var y2 = c.y | 0;
				if(c.bounds) {
					if(x2 > c.max_x || !c.started) {
						c.max_x = x2;
					}
					if(y2 > c.max_y || !c.started) {
						c.max_y = y2;
					}
					if(x2 < c.min_x || !c.started) {
						c.min_x = x2;
					}
					if(y2 < c.min_y || !c.started) {
						c.min_y = y2;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x2,y2,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				i += 2;
			}
			break;
		case 6:
			if(sp < 1) {
				return false;
			}
			while(i < sp) {
				c.x += s[i];
				c.y += 0;
				var x3 = c.x | 0;
				var y3 = c.y | 0;
				if(c.bounds) {
					if(x3 > c.max_x || !c.started) {
						c.max_x = x3;
					}
					if(y3 > c.max_y || !c.started) {
						c.max_y = y3;
					}
					if(x3 < c.min_x || !c.started) {
						c.min_x = x3;
					}
					if(y3 < c.min_y || !c.started) {
						c.min_y = y3;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x3,y3,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
				if(i >= sp) {
					break;
				}
				c.x += 0;
				c.y += s[i];
				var x4 = c.x | 0;
				var y4 = c.y | 0;
				if(c.bounds) {
					if(x4 > c.max_x || !c.started) {
						c.max_x = x4;
					}
					if(y4 > c.max_y || !c.started) {
						c.max_y = y4;
					}
					if(x4 < c.min_x || !c.started) {
						c.min_x = x4;
					}
					if(y4 < c.min_y || !c.started) {
						c.min_y = y4;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x4,y4,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
			}
			break;
		case 7:
			if(sp < 1) {
				return false;
			}
			while(i < sp) {
				c.x += 0;
				c.y += s[i];
				var x5 = c.x | 0;
				var y5 = c.y | 0;
				if(c.bounds) {
					if(x5 > c.max_x || !c.started) {
						c.max_x = x5;
					}
					if(y5 > c.max_y || !c.started) {
						c.max_y = y5;
					}
					if(x5 < c.min_x || !c.started) {
						c.min_x = x5;
					}
					if(y5 < c.min_y || !c.started) {
						c.min_y = y5;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x5,y5,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
				if(i >= sp) {
					break;
				}
				c.x += s[i];
				c.y += 0;
				var x6 = c.x | 0;
				var y6 = c.y | 0;
				if(c.bounds) {
					if(x6 > c.max_x || !c.started) {
						c.max_x = x6;
					}
					if(y6 > c.max_y || !c.started) {
						c.max_y = y6;
					}
					if(x6 < c.min_x || !c.started) {
						c.min_x = x6;
					}
					if(y6 < c.min_y || !c.started) {
						c.min_y = y6;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x6,y6,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
			}
			break;
		case 8:
			if(sp < 6) {
				return false;
			}
			while(i + 5 < sp) {
				var cx1 = c.x + s[i];
				var cy1 = c.y + s[i + 1];
				var cx2 = cx1 + s[i + 2];
				var cy2 = cy1 + s[i + 3];
				c.x = cx2 + s[i + 4];
				c.y = cy2 + s[i + 5];
				var x7 = c.x | 0;
				var y7 = c.y | 0;
				var cx = cx1 | 0;
				var cy = cy1 | 0;
				var cx11 = cx2 | 0;
				var cy11 = cy2 | 0;
				if(c.bounds) {
					if(x7 > c.max_x || !c.started) {
						c.max_x = x7;
					}
					if(y7 > c.max_y || !c.started) {
						c.max_y = y7;
					}
					if(x7 < c.min_x || !c.started) {
						c.min_x = x7;
					}
					if(y7 < c.min_y || !c.started) {
						c.min_y = y7;
					}
					c.started = true;
					if(cx > c.max_x || !c.started) {
						c.max_x = cx;
					}
					if(cy > c.max_y || !c.started) {
						c.max_y = cy;
					}
					if(cx < c.min_x || !c.started) {
						c.min_x = cx;
					}
					if(cy < c.min_y || !c.started) {
						c.min_y = cy;
					}
					c.started = true;
					if(cx11 > c.max_x || !c.started) {
						c.max_x = cx11;
					}
					if(cy11 > c.max_y || !c.started) {
						c.max_y = cy11;
					}
					if(cx11 < c.min_x || !c.started) {
						c.min_x = cx11;
					}
					if(cy11 < c.min_y || !c.started) {
						c.min_y = cy11;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x7,y7,cx,cy);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx11 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy11 , Int);
				}
				c.num_vertices++;
				i += 6;
			}
			break;
		case 11:
			if(subr_stack_height <= 0) {
				return false;
			}
			b = subr_stack[--subr_stack_height];
			clear_stack = false;
			break;
		case 12:
			var dx1;
			var dx2;
			var dx3;
			var dx4;
			var dx5;
			var dx6;
			var dy1;
			var dy2;
			var dy3;
			var dy4;
			var dy5;
			var dy6;
			var dx;
			var dy;
			var b1;
			if(b.cursor >= b.data.get_length()) {
				b1 = 0;
			} else {
				var pos1 = b.cursor++;
				if(pos1 == null) {
					pos1 = 0;
				}
				b1 = b.data.readU8(pos1);
			}
			switch(b1) {
			case 34:
				if(sp < 7) {
					return false;
				}
				dx1 = s[0];
				dx2 = s[1];
				dy2 = s[2];
				dx3 = s[3];
				dx4 = s[4];
				dx5 = s[5];
				dx6 = s[6];
				var cx12 = c.x + dx1;
				var cy12 = c.y;
				var cx21 = cx12 + dx2;
				var cy21 = cy12 + dy2;
				c.x = cx21 + dx3;
				c.y = cy21;
				var x8 = c.x | 0;
				var y8 = c.y | 0;
				var cx3 = cx12 | 0;
				var cy3 = cy12 | 0;
				var cx13 = cx21 | 0;
				var cy13 = cy21 | 0;
				if(c.bounds) {
					if(x8 > c.max_x || !c.started) {
						c.max_x = x8;
					}
					if(y8 > c.max_y || !c.started) {
						c.max_y = y8;
					}
					if(x8 < c.min_x || !c.started) {
						c.min_x = x8;
					}
					if(y8 < c.min_y || !c.started) {
						c.min_y = y8;
					}
					c.started = true;
					if(cx3 > c.max_x || !c.started) {
						c.max_x = cx3;
					}
					if(cy3 > c.max_y || !c.started) {
						c.max_y = cy3;
					}
					if(cx3 < c.min_x || !c.started) {
						c.min_x = cx3;
					}
					if(cy3 < c.min_y || !c.started) {
						c.min_y = cy3;
					}
					c.started = true;
					if(cx13 > c.max_x || !c.started) {
						c.max_x = cx13;
					}
					if(cy13 > c.max_y || !c.started) {
						c.max_y = cy13;
					}
					if(cx13 < c.min_x || !c.started) {
						c.min_x = cx13;
					}
					if(cy13 < c.min_y || !c.started) {
						c.min_y = cy13;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x8,y8,cx3,cy3);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx13 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy13 , Int);
				}
				c.num_vertices++;
				var cx14 = c.x + dx4;
				var cy14 = c.y;
				var cx22 = cx14 + dx5;
				var cy22 = cy14 + -dy2;
				c.x = cx22 + dx6;
				c.y = cy22;
				var x9 = c.x | 0;
				var y9 = c.y | 0;
				var cx4 = cx14 | 0;
				var cy4 = cy14 | 0;
				var cx15 = cx22 | 0;
				var cy15 = cy22 | 0;
				if(c.bounds) {
					if(x9 > c.max_x || !c.started) {
						c.max_x = x9;
					}
					if(y9 > c.max_y || !c.started) {
						c.max_y = y9;
					}
					if(x9 < c.min_x || !c.started) {
						c.min_x = x9;
					}
					if(y9 < c.min_y || !c.started) {
						c.min_y = y9;
					}
					c.started = true;
					if(cx4 > c.max_x || !c.started) {
						c.max_x = cx4;
					}
					if(cy4 > c.max_y || !c.started) {
						c.max_y = cy4;
					}
					if(cx4 < c.min_x || !c.started) {
						c.min_x = cx4;
					}
					if(cy4 < c.min_y || !c.started) {
						c.min_y = cy4;
					}
					c.started = true;
					if(cx15 > c.max_x || !c.started) {
						c.max_x = cx15;
					}
					if(cy15 > c.max_y || !c.started) {
						c.max_y = cy15;
					}
					if(cx15 < c.min_x || !c.started) {
						c.min_x = cx15;
					}
					if(cy15 < c.min_y || !c.started) {
						c.min_y = cy15;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x9,y9,cx4,cy4);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx15 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy15 , Int);
				}
				c.num_vertices++;
				break;
			case 35:
				if(sp < 13) {
					return false;
				}
				dx1 = s[0];
				dy1 = s[1];
				dx2 = s[2];
				dy2 = s[3];
				dx3 = s[4];
				dy3 = s[5];
				dx4 = s[6];
				dy4 = s[7];
				dx5 = s[8];
				dy5 = s[9];
				dx6 = s[10];
				dy6 = s[11];
				var cx16 = c.x + dx1;
				var cy16 = c.y + dy1;
				var cx23 = cx16 + dx2;
				var cy23 = cy16 + dy2;
				c.x = cx23 + dx3;
				c.y = cy23 + dy3;
				var x10 = c.x | 0;
				var y10 = c.y | 0;
				var cx5 = cx16 | 0;
				var cy5 = cy16 | 0;
				var cx17 = cx23 | 0;
				var cy17 = cy23 | 0;
				if(c.bounds) {
					if(x10 > c.max_x || !c.started) {
						c.max_x = x10;
					}
					if(y10 > c.max_y || !c.started) {
						c.max_y = y10;
					}
					if(x10 < c.min_x || !c.started) {
						c.min_x = x10;
					}
					if(y10 < c.min_y || !c.started) {
						c.min_y = y10;
					}
					c.started = true;
					if(cx5 > c.max_x || !c.started) {
						c.max_x = cx5;
					}
					if(cy5 > c.max_y || !c.started) {
						c.max_y = cy5;
					}
					if(cx5 < c.min_x || !c.started) {
						c.min_x = cx5;
					}
					if(cy5 < c.min_y || !c.started) {
						c.min_y = cy5;
					}
					c.started = true;
					if(cx17 > c.max_x || !c.started) {
						c.max_x = cx17;
					}
					if(cy17 > c.max_y || !c.started) {
						c.max_y = cy17;
					}
					if(cx17 < c.min_x || !c.started) {
						c.min_x = cx17;
					}
					if(cy17 < c.min_y || !c.started) {
						c.min_y = cy17;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x10,y10,cx5,cy5);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx17 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy17 , Int);
				}
				c.num_vertices++;
				var cx18 = c.x + dx4;
				var cy18 = c.y + dy4;
				var cx24 = cx18 + dx5;
				var cy24 = cy18 + dy5;
				c.x = cx24 + dx6;
				c.y = cy24 + dy6;
				var x11 = c.x | 0;
				var y11 = c.y | 0;
				var cx6 = cx18 | 0;
				var cy6 = cy18 | 0;
				var cx19 = cx24 | 0;
				var cy19 = cy24 | 0;
				if(c.bounds) {
					if(x11 > c.max_x || !c.started) {
						c.max_x = x11;
					}
					if(y11 > c.max_y || !c.started) {
						c.max_y = y11;
					}
					if(x11 < c.min_x || !c.started) {
						c.min_x = x11;
					}
					if(y11 < c.min_y || !c.started) {
						c.min_y = y11;
					}
					c.started = true;
					if(cx6 > c.max_x || !c.started) {
						c.max_x = cx6;
					}
					if(cy6 > c.max_y || !c.started) {
						c.max_y = cy6;
					}
					if(cx6 < c.min_x || !c.started) {
						c.min_x = cx6;
					}
					if(cy6 < c.min_y || !c.started) {
						c.min_y = cy6;
					}
					c.started = true;
					if(cx19 > c.max_x || !c.started) {
						c.max_x = cx19;
					}
					if(cy19 > c.max_y || !c.started) {
						c.max_y = cy19;
					}
					if(cx19 < c.min_x || !c.started) {
						c.min_x = cx19;
					}
					if(cy19 < c.min_y || !c.started) {
						c.min_y = cy19;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x11,y11,cx6,cy6);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx19 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy19 , Int);
				}
				c.num_vertices++;
				break;
			case 36:
				if(sp < 9) {
					return false;
				}
				dx1 = s[0];
				dy1 = s[1];
				dx2 = s[2];
				dy2 = s[3];
				dx3 = s[4];
				dx4 = s[5];
				dx5 = s[6];
				dy5 = s[7];
				dx6 = s[8];
				var cx110 = c.x + dx1;
				var cy110 = c.y + dy1;
				var cx25 = cx110 + dx2;
				var cy25 = cy110 + dy2;
				c.x = cx25 + dx3;
				c.y = cy25;
				var x12 = c.x | 0;
				var y12 = c.y | 0;
				var cx7 = cx110 | 0;
				var cy7 = cy110 | 0;
				var cx111 = cx25 | 0;
				var cy111 = cy25 | 0;
				if(c.bounds) {
					if(x12 > c.max_x || !c.started) {
						c.max_x = x12;
					}
					if(y12 > c.max_y || !c.started) {
						c.max_y = y12;
					}
					if(x12 < c.min_x || !c.started) {
						c.min_x = x12;
					}
					if(y12 < c.min_y || !c.started) {
						c.min_y = y12;
					}
					c.started = true;
					if(cx7 > c.max_x || !c.started) {
						c.max_x = cx7;
					}
					if(cy7 > c.max_y || !c.started) {
						c.max_y = cy7;
					}
					if(cx7 < c.min_x || !c.started) {
						c.min_x = cx7;
					}
					if(cy7 < c.min_y || !c.started) {
						c.min_y = cy7;
					}
					c.started = true;
					if(cx111 > c.max_x || !c.started) {
						c.max_x = cx111;
					}
					if(cy111 > c.max_y || !c.started) {
						c.max_y = cy111;
					}
					if(cx111 < c.min_x || !c.started) {
						c.min_x = cx111;
					}
					if(cy111 < c.min_y || !c.started) {
						c.min_y = cy111;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x12,y12,cx7,cy7);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx111 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy111 , Int);
				}
				c.num_vertices++;
				var cx112 = c.x + dx4;
				var cy112 = c.y;
				var cx26 = cx112 + dx5;
				var cy26 = cy112 + dy5;
				c.x = cx26 + dx6;
				c.y = cy26 + -(dy1 + dy2 + dy5);
				var x13 = c.x | 0;
				var y13 = c.y | 0;
				var cx8 = cx112 | 0;
				var cy8 = cy112 | 0;
				var cx113 = cx26 | 0;
				var cy113 = cy26 | 0;
				if(c.bounds) {
					if(x13 > c.max_x || !c.started) {
						c.max_x = x13;
					}
					if(y13 > c.max_y || !c.started) {
						c.max_y = y13;
					}
					if(x13 < c.min_x || !c.started) {
						c.min_x = x13;
					}
					if(y13 < c.min_y || !c.started) {
						c.min_y = y13;
					}
					c.started = true;
					if(cx8 > c.max_x || !c.started) {
						c.max_x = cx8;
					}
					if(cy8 > c.max_y || !c.started) {
						c.max_y = cy8;
					}
					if(cx8 < c.min_x || !c.started) {
						c.min_x = cx8;
					}
					if(cy8 < c.min_y || !c.started) {
						c.min_y = cy8;
					}
					c.started = true;
					if(cx113 > c.max_x || !c.started) {
						c.max_x = cx113;
					}
					if(cy113 > c.max_y || !c.started) {
						c.max_y = cy113;
					}
					if(cx113 < c.min_x || !c.started) {
						c.min_x = cx113;
					}
					if(cy113 < c.min_y || !c.started) {
						c.min_y = cy113;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x13,y13,cx8,cy8);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx113 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy113 , Int);
				}
				c.num_vertices++;
				break;
			case 37:
				if(sp < 11) {
					return false;
				}
				dx1 = s[0];
				dy1 = s[1];
				dx2 = s[2];
				dy2 = s[3];
				dx3 = s[4];
				dy3 = s[5];
				dx4 = s[6];
				dy4 = s[7];
				dx5 = s[8];
				dy5 = s[9];
				dy6 = s[10];
				dx6 = dy6;
				dx = dx1 + dx2 + dx3 + dx4 + dx5;
				dy = dy1 + dy2 + dy3 + dy4 + dy5;
				if(Math.abs(dx) > Math.abs(dy)) {
					dy6 = -dy;
				} else {
					dx6 = -dx;
				}
				var cx114 = c.x + dx1;
				var cy114 = c.y + dy1;
				var cx27 = cx114 + dx2;
				var cy27 = cy114 + dy2;
				c.x = cx27 + dx3;
				c.y = cy27 + dy3;
				var x14 = c.x | 0;
				var y14 = c.y | 0;
				var cx9 = cx114 | 0;
				var cy9 = cy114 | 0;
				var cx115 = cx27 | 0;
				var cy115 = cy27 | 0;
				if(c.bounds) {
					if(x14 > c.max_x || !c.started) {
						c.max_x = x14;
					}
					if(y14 > c.max_y || !c.started) {
						c.max_y = y14;
					}
					if(x14 < c.min_x || !c.started) {
						c.min_x = x14;
					}
					if(y14 < c.min_y || !c.started) {
						c.min_y = y14;
					}
					c.started = true;
					if(cx9 > c.max_x || !c.started) {
						c.max_x = cx9;
					}
					if(cy9 > c.max_y || !c.started) {
						c.max_y = cy9;
					}
					if(cx9 < c.min_x || !c.started) {
						c.min_x = cx9;
					}
					if(cy9 < c.min_y || !c.started) {
						c.min_y = cy9;
					}
					c.started = true;
					if(cx115 > c.max_x || !c.started) {
						c.max_x = cx115;
					}
					if(cy115 > c.max_y || !c.started) {
						c.max_y = cy115;
					}
					if(cx115 < c.min_x || !c.started) {
						c.min_x = cx115;
					}
					if(cy115 < c.min_y || !c.started) {
						c.min_y = cy115;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x14,y14,cx9,cy9);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx115 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy115 , Int);
				}
				c.num_vertices++;
				var cx116 = c.x + dx4;
				var cy116 = c.y + dy4;
				var cx28 = cx116 + dx5;
				var cy28 = cy116 + dy5;
				c.x = cx28 + dx6;
				c.y = cy28 + dy6;
				var x15 = c.x | 0;
				var y15 = c.y | 0;
				var cx10 = cx116 | 0;
				var cy10 = cy116 | 0;
				var cx117 = cx28 | 0;
				var cy117 = cy28 | 0;
				if(c.bounds) {
					if(x15 > c.max_x || !c.started) {
						c.max_x = x15;
					}
					if(y15 > c.max_y || !c.started) {
						c.max_y = y15;
					}
					if(x15 < c.min_x || !c.started) {
						c.min_x = x15;
					}
					if(y15 < c.min_y || !c.started) {
						c.min_y = y15;
					}
					c.started = true;
					if(cx10 > c.max_x || !c.started) {
						c.max_x = cx10;
					}
					if(cy10 > c.max_y || !c.started) {
						c.max_y = cy10;
					}
					if(cx10 < c.min_x || !c.started) {
						c.min_x = cx10;
					}
					if(cy10 < c.min_y || !c.started) {
						c.min_y = cy10;
					}
					c.started = true;
					if(cx117 > c.max_x || !c.started) {
						c.max_x = cx117;
					}
					if(cy117 > c.max_y || !c.started) {
						c.max_y = cy117;
					}
					if(cx117 < c.min_x || !c.started) {
						c.min_x = cx117;
					}
					if(cy117 < c.min_y || !c.started) {
						c.min_y = cy117;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x15,y15,cx10,cy10);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx117 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy117 , Int);
				}
				c.num_vertices++;
				break;
			default:
				return false;
			}
			break;
		case 14:
			if(c.first_x != c.x || c.first_y != c.y) {
				var x16 = c.first_x | 0;
				var y16 = c.first_y | 0;
				if(c.bounds) {
					if(x16 > c.max_x || !c.started) {
						c.max_x = x16;
					}
					if(y16 > c.max_y || !c.started) {
						c.max_y = y16;
					}
					if(x16 < c.min_x || !c.started) {
						c.min_x = x16;
					}
					if(y16 < c.min_y || !c.started) {
						c.min_y = y16;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x16,y16,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			return true;
		case 19:case 20:
			if(in_header) {
				maskbits += sp / 2 | 0;
			}
			in_header = false;
			var o = b.cursor + ((maskbits + 7) / 8 | 0);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			break;
		case 21:
			in_header = false;
			if(sp < 2) {
				return false;
			}
			if(c.first_x != c.x || c.first_y != c.y) {
				var x17 = c.first_x | 0;
				var y17 = c.first_y | 0;
				if(c.bounds) {
					if(x17 > c.max_x || !c.started) {
						c.max_x = x17;
					}
					if(y17 > c.max_y || !c.started) {
						c.max_y = y17;
					}
					if(x17 < c.min_x || !c.started) {
						c.min_x = x17;
					}
					if(y17 < c.min_y || !c.started) {
						c.min_y = y17;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x17,y17,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			c.first_x = c.x = c.x + s[sp - 2];
			c.first_y = c.y = c.y + s[sp - 1];
			var x18 = c.x | 0;
			var y18 = c.y | 0;
			if(c.bounds) {
				if(x18 > c.max_x || !c.started) {
					c.max_x = x18;
				}
				if(y18 > c.max_y || !c.started) {
					c.max_y = y18;
				}
				if(x18 < c.min_x || !c.started) {
					c.min_x = x18;
				}
				if(y18 < c.min_y || !c.started) {
					c.min_y = y18;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],1,x18,y18,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 22:
			in_header = false;
			if(sp < 1) {
				return false;
			}
			if(c.first_x != c.x || c.first_y != c.y) {
				var x19 = c.first_x | 0;
				var y19 = c.first_y | 0;
				if(c.bounds) {
					if(x19 > c.max_x || !c.started) {
						c.max_x = x19;
					}
					if(y19 > c.max_y || !c.started) {
						c.max_y = y19;
					}
					if(x19 < c.min_x || !c.started) {
						c.min_x = x19;
					}
					if(y19 < c.min_y || !c.started) {
						c.min_y = y19;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x19,y19,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			c.first_x = c.x = c.x + s[sp - 1];
			c.first_y = c.y = c.y;
			var x20 = c.x | 0;
			var y20 = c.y | 0;
			if(c.bounds) {
				if(x20 > c.max_x || !c.started) {
					c.max_x = x20;
				}
				if(y20 > c.max_y || !c.started) {
					c.max_y = y20;
				}
				if(x20 < c.min_x || !c.started) {
					c.min_x = x20;
				}
				if(y20 < c.min_y || !c.started) {
					c.min_y = y20;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],1,x20,y20,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 24:
			if(sp < 8) {
				return false;
			}
			while(i + 5 < sp - 2) {
				var cx118 = c.x + s[i];
				var cy118 = c.y + s[i + 1];
				var cx29 = cx118 + s[i + 2];
				var cy29 = cy118 + s[i + 3];
				c.x = cx29 + s[i + 4];
				c.y = cy29 + s[i + 5];
				var x21 = c.x | 0;
				var y21 = c.y | 0;
				var cx20 = cx118 | 0;
				var cy20 = cy118 | 0;
				var cx119 = cx29 | 0;
				var cy119 = cy29 | 0;
				if(c.bounds) {
					if(x21 > c.max_x || !c.started) {
						c.max_x = x21;
					}
					if(y21 > c.max_y || !c.started) {
						c.max_y = y21;
					}
					if(x21 < c.min_x || !c.started) {
						c.min_x = x21;
					}
					if(y21 < c.min_y || !c.started) {
						c.min_y = y21;
					}
					c.started = true;
					if(cx20 > c.max_x || !c.started) {
						c.max_x = cx20;
					}
					if(cy20 > c.max_y || !c.started) {
						c.max_y = cy20;
					}
					if(cx20 < c.min_x || !c.started) {
						c.min_x = cx20;
					}
					if(cy20 < c.min_y || !c.started) {
						c.min_y = cy20;
					}
					c.started = true;
					if(cx119 > c.max_x || !c.started) {
						c.max_x = cx119;
					}
					if(cy119 > c.max_y || !c.started) {
						c.max_y = cy119;
					}
					if(cx119 < c.min_x || !c.started) {
						c.min_x = cx119;
					}
					if(cy119 < c.min_y || !c.started) {
						c.min_y = cy119;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x21,y21,cx20,cy20);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx119 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy119 , Int);
				}
				c.num_vertices++;
				i += 6;
			}
			if(i + 1 >= sp) {
				return false;
			}
			c.x += s[i];
			c.y += s[i + 1];
			var x22 = c.x | 0;
			var y22 = c.y | 0;
			if(c.bounds) {
				if(x22 > c.max_x || !c.started) {
					c.max_x = x22;
				}
				if(y22 > c.max_y || !c.started) {
					c.max_y = y22;
				}
				if(x22 < c.min_x || !c.started) {
					c.min_x = x22;
				}
				if(y22 < c.min_y || !c.started) {
					c.min_y = y22;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x22,y22,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 25:
			if(sp < 8) {
				return false;
			}
			while(i + 1 < sp - 6) {
				c.x += s[i];
				c.y += s[i + 1];
				var x23 = c.x | 0;
				var y23 = c.y | 0;
				if(c.bounds) {
					if(x23 > c.max_x || !c.started) {
						c.max_x = x23;
					}
					if(y23 > c.max_y || !c.started) {
						c.max_y = y23;
					}
					if(x23 < c.min_x || !c.started) {
						c.min_x = x23;
					}
					if(y23 < c.min_y || !c.started) {
						c.min_y = y23;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x23,y23,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				i += 2;
			}
			if(i + 5 >= sp) {
				return false;
			}
			var cx120 = c.x + s[i];
			var cy120 = c.y + s[i + 1];
			var cx210 = cx120 + s[i + 2];
			var cy210 = cy120 + s[i + 3];
			c.x = cx210 + s[i + 4];
			c.y = cy210 + s[i + 5];
			var x24 = c.x | 0;
			var y24 = c.y | 0;
			var cx30 = cx120 | 0;
			var cy30 = cy120 | 0;
			var cx121 = cx210 | 0;
			var cy121 = cy210 | 0;
			if(c.bounds) {
				if(x24 > c.max_x || !c.started) {
					c.max_x = x24;
				}
				if(y24 > c.max_y || !c.started) {
					c.max_y = y24;
				}
				if(x24 < c.min_x || !c.started) {
					c.min_x = x24;
				}
				if(y24 < c.min_y || !c.started) {
					c.min_y = y24;
				}
				c.started = true;
				if(cx30 > c.max_x || !c.started) {
					c.max_x = cx30;
				}
				if(cy30 > c.max_y || !c.started) {
					c.max_y = cy30;
				}
				if(cx30 < c.min_x || !c.started) {
					c.min_x = cx30;
				}
				if(cy30 < c.min_y || !c.started) {
					c.min_y = cy30;
				}
				c.started = true;
				if(cx121 > c.max_x || !c.started) {
					c.max_x = cx121;
				}
				if(cy121 > c.max_y || !c.started) {
					c.max_y = cy121;
				}
				if(cx121 < c.min_x || !c.started) {
					c.min_x = cx121;
				}
				if(cy121 < c.min_y || !c.started) {
					c.min_y = cy121;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x24,y24,cx30,cy30);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx121 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy121 , Int);
			}
			c.num_vertices++;
			break;
		case 26:case 27:
			if(sp < 4) {
				return false;
			}
			f = 0.0;
			if((sp & 1) != 0) {
				f = s[i];
				++i;
			}
			while(i + 3 < sp) {
				if(b0 == 27) {
					var cx122 = c.x + s[i];
					var cy122 = c.y + f;
					var cx211 = cx122 + s[i + 1];
					var cy211 = cy122 + s[i + 2];
					c.x = cx211 + s[i + 3];
					c.y = cy211;
					var x25 = c.x | 0;
					var y25 = c.y | 0;
					var cx31 = cx122 | 0;
					var cy31 = cy122 | 0;
					var cx123 = cx211 | 0;
					var cy123 = cy211 | 0;
					if(c.bounds) {
						if(x25 > c.max_x || !c.started) {
							c.max_x = x25;
						}
						if(y25 > c.max_y || !c.started) {
							c.max_y = y25;
						}
						if(x25 < c.min_x || !c.started) {
							c.min_x = x25;
						}
						if(y25 < c.min_y || !c.started) {
							c.min_y = y25;
						}
						c.started = true;
						if(cx31 > c.max_x || !c.started) {
							c.max_x = cx31;
						}
						if(cy31 > c.max_y || !c.started) {
							c.max_y = cy31;
						}
						if(cx31 < c.min_x || !c.started) {
							c.min_x = cx31;
						}
						if(cy31 < c.min_y || !c.started) {
							c.min_y = cy31;
						}
						c.started = true;
						if(cx123 > c.max_x || !c.started) {
							c.max_x = cx123;
						}
						if(cy123 > c.max_y || !c.started) {
							c.max_y = cy123;
						}
						if(cx123 < c.min_x || !c.started) {
							c.min_x = cx123;
						}
						if(cy123 < c.min_y || !c.started) {
							c.min_y = cy123;
						}
						c.started = true;
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x25,y25,cx31,cy31);
						c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx123 , Int);
						c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy123 , Int);
					}
					c.num_vertices++;
				} else {
					var cx124 = c.x + f;
					var cy124 = c.y + s[i];
					var cx212 = cx124 + s[i + 1];
					var cy212 = cy124 + s[i + 2];
					c.x = cx212;
					c.y = cy212 + s[i + 3];
					var x26 = c.x | 0;
					var y26 = c.y | 0;
					var cx32 = cx124 | 0;
					var cy32 = cy124 | 0;
					var cx125 = cx212 | 0;
					var cy125 = cy212 | 0;
					if(c.bounds) {
						if(x26 > c.max_x || !c.started) {
							c.max_x = x26;
						}
						if(y26 > c.max_y || !c.started) {
							c.max_y = y26;
						}
						if(x26 < c.min_x || !c.started) {
							c.min_x = x26;
						}
						if(y26 < c.min_y || !c.started) {
							c.min_y = y26;
						}
						c.started = true;
						if(cx32 > c.max_x || !c.started) {
							c.max_x = cx32;
						}
						if(cy32 > c.max_y || !c.started) {
							c.max_y = cy32;
						}
						if(cx32 < c.min_x || !c.started) {
							c.min_x = cx32;
						}
						if(cy32 < c.min_y || !c.started) {
							c.min_y = cy32;
						}
						c.started = true;
						if(cx125 > c.max_x || !c.started) {
							c.max_x = cx125;
						}
						if(cy125 > c.max_y || !c.started) {
							c.max_y = cy125;
						}
						if(cx125 < c.min_x || !c.started) {
							c.min_x = cx125;
						}
						if(cy125 < c.min_y || !c.started) {
							c.min_y = cy125;
						}
						c.started = true;
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x26,y26,cx32,cy32);
						c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx125 , Int);
						c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy125 , Int);
					}
					c.num_vertices++;
				}
				f = 0.0;
				i += 4;
			}
			break;
		case 10:case 29:
			if(b0 == 10) {
				if(!has_subrs) {
					if(info.fdselect.data.get_length() != 0) {
						var fdselect = info.fdselect;
						var nranges;
						var start;
						var end;
						var v1;
						var fmt;
						var fdselector = -1;
						var i1;
						if(0 > fdselect.data.get_length()) {
							throw haxe_Exception.thrown("Error");
						}
						fdselect.cursor = 0 > fdselect.data.get_length() ? fdselect.data.get_length() : 0;
						if(fdselect.cursor >= fdselect.data.get_length()) {
							fmt = 0;
						} else {
							var pos2 = fdselect.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							fmt = fdselect.data.readU8(pos2);
						}
						if(fmt == 0) {
							var o1 = fdselect.cursor + glyph_index;
							if(o1 > fdselect.data.get_length() || o1 < 0) {
								throw haxe_Exception.thrown("Error");
							}
							fdselect.cursor = o1 > fdselect.data.get_length() || o1 < 0 ? fdselect.data.get_length() : o1;
							if(fdselect.cursor >= fdselect.data.get_length()) {
								fdselector = 0;
							} else {
								var pos3 = fdselect.cursor++;
								if(pos3 == null) {
									pos3 = 0;
								}
								fdselector = fdselect.data.readU8(pos3);
							}
						} else if(fmt == 3) {
							var v2 = 0;
							var _g = 0;
							var _g1 = 2;
							while(_g < _g1) {
								var i2 = _g++;
								var v3;
								if(fdselect.cursor >= fdselect.data.get_length()) {
									v3 = 0;
								} else {
									var pos4 = fdselect.cursor++;
									if(pos4 == null) {
										pos4 = 0;
									}
									v3 = fdselect.data.readU8(pos4);
								}
								v2 = v2 << 8 | v3;
							}
							nranges = v2;
							var v4 = 0;
							var _g2 = 0;
							var _g3 = 2;
							while(_g2 < _g3) {
								var i3 = _g2++;
								var v5;
								if(fdselect.cursor >= fdselect.data.get_length()) {
									v5 = 0;
								} else {
									var pos5 = fdselect.cursor++;
									if(pos5 == null) {
										pos5 = 0;
									}
									v5 = fdselect.data.readU8(pos5);
								}
								v4 = v4 << 8 | v5;
							}
							start = v4;
							var _g4 = 0;
							var _g5 = nranges;
							while(_g4 < _g5) {
								var i4 = _g4++;
								if(fdselect.cursor >= fdselect.data.get_length()) {
									v1 = 0;
								} else {
									var pos6 = fdselect.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v1 = fdselect.data.readU8(pos6);
								}
								var v6 = 0;
								var _g6 = 0;
								var _g7 = 2;
								while(_g6 < _g7) {
									var i5 = _g6++;
									var v7;
									if(fdselect.cursor >= fdselect.data.get_length()) {
										v7 = 0;
									} else {
										var pos7 = fdselect.cursor++;
										if(pos7 == null) {
											pos7 = 0;
										}
										v7 = fdselect.data.readU8(pos7);
									}
									v6 = v6 << 8 | v7;
								}
								end = v6;
								if(glyph_index >= start && glyph_index < end) {
									fdselector = v1;
									break;
								}
								start = end;
							}
						}
						if(fdselector == -1) {
							var r = new kha_graphics2_truetype_Stbtt_$_$buf();
							r.data = null;
							r.cursor = 0;
						}
						var cff = info.cff;
						var b2 = info.fontdicts;
						if(0 > b2.data.get_length()) {
							throw haxe_Exception.thrown("Error");
						}
						b2.cursor = 0 > b2.data.get_length() ? b2.data.get_length() : 0;
						var v8 = 0;
						var _g8 = 0;
						var _g9 = 2;
						while(_g8 < _g9) {
							var i6 = _g8++;
							var v9;
							if(b2.cursor >= b2.data.get_length()) {
								v9 = 0;
							} else {
								var pos8 = b2.cursor++;
								if(pos8 == null) {
									pos8 = 0;
								}
								v9 = b2.data.readU8(pos8);
							}
							v8 = v8 << 8 | v9;
						}
						var count = v8;
						var offsize;
						if(b2.cursor >= b2.data.get_length()) {
							offsize = 0;
						} else {
							var pos9 = b2.cursor++;
							if(pos9 == null) {
								pos9 = 0;
							}
							offsize = b2.data.readU8(pos9);
						}
						if(!(fdselector >= 0 && fdselector < count)) {
							throw haxe_Exception.thrown("Error");
						}
						if(!(offsize >= 1 && offsize <= 4)) {
							throw haxe_Exception.thrown("Error");
						}
						var o2 = b2.cursor + fdselector * offsize;
						if(o2 > b2.data.get_length() || o2 < 0) {
							throw haxe_Exception.thrown("Error");
						}
						b2.cursor = o2 > b2.data.get_length() || o2 < 0 ? b2.data.get_length() : o2;
						var v10 = 0;
						if(!(offsize >= 1 && offsize <= 4)) {
							throw haxe_Exception.thrown("Error");
						}
						var _g10 = 0;
						var _g11 = offsize;
						while(_g10 < _g11) {
							var i7 = _g10++;
							var v11;
							if(b2.cursor >= b2.data.get_length()) {
								v11 = 0;
							} else {
								var pos10 = b2.cursor++;
								if(pos10 == null) {
									pos10 = 0;
								}
								v11 = b2.data.readU8(pos10);
							}
							v10 = v10 << 8 | v11;
						}
						var start1 = v10;
						var v12 = 0;
						if(!(offsize >= 1 && offsize <= 4)) {
							throw haxe_Exception.thrown("Error");
						}
						var _g12 = 0;
						var _g13 = offsize;
						while(_g12 < _g13) {
							var i8 = _g12++;
							var v13;
							if(b2.cursor >= b2.data.get_length()) {
								v13 = 0;
							} else {
								var pos11 = b2.cursor++;
								if(pos11 == null) {
									pos11 = 0;
								}
								v13 = b2.data.readU8(pos11);
							}
							v12 = v12 << 8 | v13;
						}
						var end1 = v12;
						var o3 = 2 + (count + 1) * offsize + start1;
						var s1 = end1 - start1;
						var r1 = new kha_graphics2_truetype_Stbtt_$_$buf();
						r1.data = null;
						r1.cursor = 0;
						var r2 = r1;
						var fontdict;
						if(o3 < 0 || s1 < 0 || o3 > b2.data.get_length() || s1 > b2.data.get_length() - o3) {
							fontdict = r2;
						} else {
							r2.data = b2.data.sub(o3,s1);
							fontdict = r2;
						}
						var subrsoff = [0];
						var private_loc = [0,0];
						var i9 = 0;
						if(0 > fontdict.data.get_length()) {
							throw haxe_Exception.thrown("Error");
						}
						fontdict.cursor = 0 > fontdict.data.get_length() ? fontdict.data.get_length() : 0;
						var ret = null;
						while(fontdict.cursor < fontdict.data.get_length()) {
							var start2 = fontdict.cursor;
							var op;
							while(true) {
								var subrs1;
								if(fontdict.cursor >= fontdict.data.get_length()) {
									subrs1 = 0;
								} else {
									var pos12 = fontdict.cursor;
									if(pos12 == null) {
										pos12 = 0;
									}
									subrs1 = fontdict.data.readU8(pos12);
								}
								if(!(subrs1 >= 28)) {
									break;
								}
								var v14;
								var b01;
								if(fontdict.cursor >= fontdict.data.get_length()) {
									b01 = 0;
								} else {
									var pos13 = fontdict.cursor;
									if(pos13 == null) {
										pos13 = 0;
									}
									b01 = fontdict.data.readU8(pos13);
								}
								if(b01 < 28) {
									throw haxe_Exception.thrown("Error");
								}
								if(b01 == 30) {
									var o4 = fontdict.cursor + 1;
									if(o4 > fontdict.data.get_length() || o4 < 0) {
										throw haxe_Exception.thrown("Error");
									}
									fontdict.cursor = o4 > fontdict.data.get_length() || o4 < 0 ? fontdict.data.get_length() : o4;
									while(fontdict.cursor < fontdict.data.get_length()) {
										if(fontdict.cursor >= fontdict.data.get_length()) {
											v14 = 0;
										} else {
											var pos14 = fontdict.cursor++;
											if(pos14 == null) {
												pos14 = 0;
											}
											v14 = fontdict.data.readU8(pos14);
										}
										if((v14 & 15) == 15 || v14 >> 4 == 15) {
											break;
										}
									}
								} else {
									var b02;
									if(fontdict.cursor >= fontdict.data.get_length()) {
										b02 = 0;
									} else {
										var pos15 = fontdict.cursor++;
										if(pos15 == null) {
											pos15 = 0;
										}
										b02 = fontdict.data.readU8(pos15);
									}
									if(!(b02 >= 32 && b02 <= 246)) {
										if(b02 >= 247 && b02 <= 250) {
											if(fontdict.cursor < fontdict.data.get_length()) {
												var pos16 = fontdict.cursor++;
												if(pos16 == null) {
													pos16 = 0;
												}
												fontdict.data.readU8(pos16);
											}
										} else if(b02 >= 251 && b02 <= 254) {
											if(fontdict.cursor < fontdict.data.get_length()) {
												var pos17 = fontdict.cursor++;
												if(pos17 == null) {
													pos17 = 0;
												}
												fontdict.data.readU8(pos17);
											}
										} else if(b02 == 28) {
											var v15 = 0;
											var _g14 = 0;
											var _g15 = 2;
											while(_g14 < _g15) {
												var i10 = _g14++;
												var v16;
												if(fontdict.cursor >= fontdict.data.get_length()) {
													v16 = 0;
												} else {
													var pos18 = fontdict.cursor++;
													if(pos18 == null) {
														pos18 = 0;
													}
													v16 = fontdict.data.readU8(pos18);
												}
												v15 = v15 << 8 | v16;
											}
										} else if(b02 == 29) {
											var v17 = 0;
											var _g16 = 0;
											var _g17 = 4;
											while(_g16 < _g17) {
												var i11 = _g16++;
												var v18;
												if(fontdict.cursor >= fontdict.data.get_length()) {
													v18 = 0;
												} else {
													var pos19 = fontdict.cursor++;
													if(pos19 == null) {
														pos19 = 0;
													}
													v18 = fontdict.data.readU8(pos19);
												}
												v17 = v17 << 8 | v18;
											}
										} else {
											throw haxe_Exception.thrown("Error");
										}
									}
								}
							}
							var end2 = fontdict.cursor;
							if(fontdict.cursor >= fontdict.data.get_length()) {
								op = 0;
							} else {
								var pos20 = fontdict.cursor++;
								if(pos20 == null) {
									pos20 = 0;
								}
								op = fontdict.data.readU8(pos20);
							}
							if(op == 12) {
								var op1;
								if(fontdict.cursor >= fontdict.data.get_length()) {
									op1 = 0;
								} else {
									var pos21 = fontdict.cursor++;
									if(pos21 == null) {
										pos21 = 0;
									}
									op1 = fontdict.data.readU8(pos21);
								}
								op = op1 | 256;
							}
							if(op == 18) {
								var s2 = end2 - start2;
								var r3 = new kha_graphics2_truetype_Stbtt_$_$buf();
								r3.data = null;
								r3.cursor = 0;
								var r4 = r3;
								if(start2 < 0 || s2 < 0 || start2 > fontdict.data.get_length() || s2 > fontdict.data.get_length() - start2) {
									ret = r4;
								} else {
									r4.data = fontdict.data.sub(start2,s2);
									ret = r4;
								}
								break;
							}
						}
						var operands;
						if(ret != null) {
							operands = ret;
						} else {
							var r5 = new kha_graphics2_truetype_Stbtt_$_$buf();
							r5.data = null;
							r5.cursor = 0;
							var r6 = r5;
							if(0 > fontdict.data.get_length() || 0 > fontdict.data.get_length()) {
								operands = r6;
							} else {
								r6.data = fontdict.data.sub(0,0);
								operands = r6;
							}
						}
						while(i9 < 2 && operands.cursor < operands.data.get_length()) {
							var b03;
							if(operands.cursor >= operands.data.get_length()) {
								b03 = 0;
							} else {
								var pos22 = operands.cursor++;
								if(pos22 == null) {
									pos22 = 0;
								}
								b03 = operands.data.readU8(pos22);
							}
							var subrs2;
							if(b03 >= 32 && b03 <= 246) {
								subrs2 = b03 - 139;
							} else if(b03 >= 247 && b03 <= 250) {
								var subrs3;
								if(operands.cursor >= operands.data.get_length()) {
									subrs3 = 0;
								} else {
									var pos23 = operands.cursor++;
									if(pos23 == null) {
										pos23 = 0;
									}
									subrs3 = operands.data.readU8(pos23);
								}
								subrs2 = (b03 - 247) * 256 + subrs3 + 108;
							} else if(b03 >= 251 && b03 <= 254) {
								var subrs4;
								if(operands.cursor >= operands.data.get_length()) {
									subrs4 = 0;
								} else {
									var pos24 = operands.cursor++;
									if(pos24 == null) {
										pos24 = 0;
									}
									subrs4 = operands.data.readU8(pos24);
								}
								subrs2 = -(b03 - 251) * 256 - subrs4 - 108;
							} else if(b03 == 28) {
								var v19 = 0;
								var _g18 = 0;
								var _g19 = 2;
								while(_g18 < _g19) {
									var i12 = _g18++;
									var v20;
									if(operands.cursor >= operands.data.get_length()) {
										v20 = 0;
									} else {
										var pos25 = operands.cursor++;
										if(pos25 == null) {
											pos25 = 0;
										}
										v20 = operands.data.readU8(pos25);
									}
									v19 = v19 << 8 | v20;
								}
								subrs2 = v19;
							} else if(b03 == 29) {
								var v21 = 0;
								var _g20 = 0;
								var _g21 = 4;
								while(_g20 < _g21) {
									var i13 = _g20++;
									var v22;
									if(operands.cursor >= operands.data.get_length()) {
										v22 = 0;
									} else {
										var pos26 = operands.cursor++;
										if(pos26 == null) {
											pos26 = 0;
										}
										v22 = operands.data.readU8(pos26);
									}
									v21 = v21 << 8 | v22;
								}
								subrs2 = v21;
							} else {
								throw haxe_Exception.thrown("Error");
							}
							private_loc[i9] = subrs2;
							++i9;
						}
						if(private_loc[1] == 0 || private_loc[0] == 0) {
							var r7 = new kha_graphics2_truetype_Stbtt_$_$buf();
							r7.data = null;
							r7.cursor = 0;
							subrs = r7;
						} else {
							var o5 = private_loc[1];
							var s3 = private_loc[0];
							var r8 = new kha_graphics2_truetype_Stbtt_$_$buf();
							r8.data = null;
							r8.cursor = 0;
							var r9 = r8;
							var pdict;
							if(o5 < 0 || s3 < 0 || o5 > cff.data.get_length() || s3 > cff.data.get_length() - o5) {
								pdict = r9;
							} else {
								r9.data = cff.data.sub(o5,s3);
								pdict = r9;
							}
							var i14 = 0;
							if(0 > pdict.data.get_length()) {
								throw haxe_Exception.thrown("Error");
							}
							pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
							var ret1 = null;
							while(pdict.cursor < pdict.data.get_length()) {
								var start3 = pdict.cursor;
								var op2;
								while(true) {
									var subrs5;
									if(pdict.cursor >= pdict.data.get_length()) {
										subrs5 = 0;
									} else {
										var pos27 = pdict.cursor;
										if(pos27 == null) {
											pos27 = 0;
										}
										subrs5 = pdict.data.readU8(pos27);
									}
									if(!(subrs5 >= 28)) {
										break;
									}
									var v23;
									var b04;
									if(pdict.cursor >= pdict.data.get_length()) {
										b04 = 0;
									} else {
										var pos28 = pdict.cursor;
										if(pos28 == null) {
											pos28 = 0;
										}
										b04 = pdict.data.readU8(pos28);
									}
									if(b04 < 28) {
										throw haxe_Exception.thrown("Error");
									}
									if(b04 == 30) {
										var o6 = pdict.cursor + 1;
										if(o6 > pdict.data.get_length() || o6 < 0) {
											throw haxe_Exception.thrown("Error");
										}
										pdict.cursor = o6 > pdict.data.get_length() || o6 < 0 ? pdict.data.get_length() : o6;
										while(pdict.cursor < pdict.data.get_length()) {
											if(pdict.cursor >= pdict.data.get_length()) {
												v23 = 0;
											} else {
												var pos29 = pdict.cursor++;
												if(pos29 == null) {
													pos29 = 0;
												}
												v23 = pdict.data.readU8(pos29);
											}
											if((v23 & 15) == 15 || v23 >> 4 == 15) {
												break;
											}
										}
									} else {
										var b05;
										if(pdict.cursor >= pdict.data.get_length()) {
											b05 = 0;
										} else {
											var pos30 = pdict.cursor++;
											if(pos30 == null) {
												pos30 = 0;
											}
											b05 = pdict.data.readU8(pos30);
										}
										if(!(b05 >= 32 && b05 <= 246)) {
											if(b05 >= 247 && b05 <= 250) {
												if(pdict.cursor < pdict.data.get_length()) {
													var pos31 = pdict.cursor++;
													if(pos31 == null) {
														pos31 = 0;
													}
													pdict.data.readU8(pos31);
												}
											} else if(b05 >= 251 && b05 <= 254) {
												if(pdict.cursor < pdict.data.get_length()) {
													var pos32 = pdict.cursor++;
													if(pos32 == null) {
														pos32 = 0;
													}
													pdict.data.readU8(pos32);
												}
											} else if(b05 == 28) {
												var v24 = 0;
												var _g22 = 0;
												var _g23 = 2;
												while(_g22 < _g23) {
													var i15 = _g22++;
													var v25;
													if(pdict.cursor >= pdict.data.get_length()) {
														v25 = 0;
													} else {
														var pos33 = pdict.cursor++;
														if(pos33 == null) {
															pos33 = 0;
														}
														v25 = pdict.data.readU8(pos33);
													}
													v24 = v24 << 8 | v25;
												}
											} else if(b05 == 29) {
												var v26 = 0;
												var _g24 = 0;
												var _g25 = 4;
												while(_g24 < _g25) {
													var i16 = _g24++;
													var v27;
													if(pdict.cursor >= pdict.data.get_length()) {
														v27 = 0;
													} else {
														var pos34 = pdict.cursor++;
														if(pos34 == null) {
															pos34 = 0;
														}
														v27 = pdict.data.readU8(pos34);
													}
													v26 = v26 << 8 | v27;
												}
											} else {
												throw haxe_Exception.thrown("Error");
											}
										}
									}
								}
								var end3 = pdict.cursor;
								if(pdict.cursor >= pdict.data.get_length()) {
									op2 = 0;
								} else {
									var pos35 = pdict.cursor++;
									if(pos35 == null) {
										pos35 = 0;
									}
									op2 = pdict.data.readU8(pos35);
								}
								if(op2 == 12) {
									var op3;
									if(pdict.cursor >= pdict.data.get_length()) {
										op3 = 0;
									} else {
										var pos36 = pdict.cursor++;
										if(pos36 == null) {
											pos36 = 0;
										}
										op3 = pdict.data.readU8(pos36);
									}
									op2 = op3 | 256;
								}
								if(op2 == 19) {
									var s4 = end3 - start3;
									var r10 = new kha_graphics2_truetype_Stbtt_$_$buf();
									r10.data = null;
									r10.cursor = 0;
									var r11 = r10;
									if(start3 < 0 || s4 < 0 || start3 > pdict.data.get_length() || s4 > pdict.data.get_length() - start3) {
										ret1 = r11;
									} else {
										r11.data = pdict.data.sub(start3,s4);
										ret1 = r11;
									}
									break;
								}
							}
							var operands1;
							if(ret1 != null) {
								operands1 = ret1;
							} else {
								var r12 = new kha_graphics2_truetype_Stbtt_$_$buf();
								r12.data = null;
								r12.cursor = 0;
								var r13 = r12;
								if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
									operands1 = r13;
								} else {
									r13.data = pdict.data.sub(0,0);
									operands1 = r13;
								}
							}
							while(i14 < 1 && operands1.cursor < operands1.data.get_length()) {
								var b06;
								if(operands1.cursor >= operands1.data.get_length()) {
									b06 = 0;
								} else {
									var pos37 = operands1.cursor++;
									if(pos37 == null) {
										pos37 = 0;
									}
									b06 = operands1.data.readU8(pos37);
								}
								var subrs6;
								if(b06 >= 32 && b06 <= 246) {
									subrs6 = b06 - 139;
								} else if(b06 >= 247 && b06 <= 250) {
									var subrs7;
									if(operands1.cursor >= operands1.data.get_length()) {
										subrs7 = 0;
									} else {
										var pos38 = operands1.cursor++;
										if(pos38 == null) {
											pos38 = 0;
										}
										subrs7 = operands1.data.readU8(pos38);
									}
									subrs6 = (b06 - 247) * 256 + subrs7 + 108;
								} else if(b06 >= 251 && b06 <= 254) {
									var subrs8;
									if(operands1.cursor >= operands1.data.get_length()) {
										subrs8 = 0;
									} else {
										var pos39 = operands1.cursor++;
										if(pos39 == null) {
											pos39 = 0;
										}
										subrs8 = operands1.data.readU8(pos39);
									}
									subrs6 = -(b06 - 251) * 256 - subrs8 - 108;
								} else if(b06 == 28) {
									var v28 = 0;
									var _g26 = 0;
									var _g27 = 2;
									while(_g26 < _g27) {
										var i17 = _g26++;
										var v29;
										if(operands1.cursor >= operands1.data.get_length()) {
											v29 = 0;
										} else {
											var pos40 = operands1.cursor++;
											if(pos40 == null) {
												pos40 = 0;
											}
											v29 = operands1.data.readU8(pos40);
										}
										v28 = v28 << 8 | v29;
									}
									subrs6 = v28;
								} else if(b06 == 29) {
									var v30 = 0;
									var _g28 = 0;
									var _g29 = 4;
									while(_g28 < _g29) {
										var i18 = _g28++;
										var v31;
										if(operands1.cursor >= operands1.data.get_length()) {
											v31 = 0;
										} else {
											var pos41 = operands1.cursor++;
											if(pos41 == null) {
												pos41 = 0;
											}
											v31 = operands1.data.readU8(pos41);
										}
										v30 = v30 << 8 | v31;
									}
									subrs6 = v30;
								} else {
									throw haxe_Exception.thrown("Error");
								}
								subrsoff[i14] = subrs6;
								++i14;
							}
							if(subrsoff[0] == 0) {
								var r14 = new kha_graphics2_truetype_Stbtt_$_$buf();
								r14.data = null;
								r14.cursor = 0;
								subrs = r14;
							} else {
								var o7 = private_loc[1] + subrsoff[0];
								if(o7 > cff.data.get_length() || o7 < 0) {
									throw haxe_Exception.thrown("Error");
								}
								cff.cursor = o7 > cff.data.get_length() || o7 < 0 ? cff.data.get_length() : o7;
								var start4 = cff.cursor;
								var v32 = 0;
								var _g30 = 0;
								var _g31 = 2;
								while(_g30 < _g31) {
									var i19 = _g30++;
									var v33;
									if(cff.cursor >= cff.data.get_length()) {
										v33 = 0;
									} else {
										var pos42 = cff.cursor++;
										if(pos42 == null) {
											pos42 = 0;
										}
										v33 = cff.data.readU8(pos42);
									}
									v32 = v32 << 8 | v33;
								}
								var count1 = v32;
								if(count1 > 0) {
									var offsize1;
									if(cff.cursor >= cff.data.get_length()) {
										offsize1 = 0;
									} else {
										var pos43 = cff.cursor++;
										if(pos43 == null) {
											pos43 = 0;
										}
										offsize1 = cff.data.readU8(pos43);
									}
									if(!(offsize1 >= 1 && offsize1 <= 4)) {
										throw haxe_Exception.thrown("Error");
									}
									var o8 = cff.cursor + offsize1 * count1;
									if(o8 > cff.data.get_length() || o8 < 0) {
										throw haxe_Exception.thrown("Error");
									}
									cff.cursor = o8 > cff.data.get_length() || o8 < 0 ? cff.data.get_length() : o8;
									var v34 = 0;
									if(!(offsize1 >= 1 && offsize1 <= 4)) {
										throw haxe_Exception.thrown("Error");
									}
									var _g32 = 0;
									var _g33 = offsize1;
									while(_g32 < _g33) {
										var i20 = _g32++;
										var v35;
										if(cff.cursor >= cff.data.get_length()) {
											v35 = 0;
										} else {
											var pos44 = cff.cursor++;
											if(pos44 == null) {
												pos44 = 0;
											}
											v35 = cff.data.readU8(pos44);
										}
										v34 = v34 << 8 | v35;
									}
									var o9 = cff.cursor + (v34 - 1);
									if(o9 > cff.data.get_length() || o9 < 0) {
										throw haxe_Exception.thrown("Error");
									}
									cff.cursor = o9 > cff.data.get_length() || o9 < 0 ? cff.data.get_length() : o9;
									var s5 = cff.cursor - start4;
									var r15 = new kha_graphics2_truetype_Stbtt_$_$buf();
									r15.data = null;
									r15.cursor = 0;
									var r16 = r15;
									if(start4 < 0 || s5 < 0 || start4 > cff.data.get_length() || s5 > cff.data.get_length() - start4) {
										subrs = r16;
									} else {
										r16.data = cff.data.sub(start4,s5);
										subrs = r16;
									}
								} else {
									subrs = cff;
								}
							}
						}
					}
					has_subrs = true;
				}
			}
			if(sp < 1) {
				return false;
			}
			v = s[--sp] | 0;
			if(subr_stack_height >= 10) {
				return false;
			}
			subr_stack[subr_stack_height++] = b;
			var idx = b0 == 10 ? subrs : info.gsubrs;
			var n = v;
			if(0 > idx.data.get_length()) {
				throw haxe_Exception.thrown("Error");
			}
			idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
			var v36 = 0;
			var _g34 = 0;
			var _g35 = 2;
			while(_g34 < _g35) {
				var i21 = _g34++;
				var v37;
				if(idx.cursor >= idx.data.get_length()) {
					v37 = 0;
				} else {
					var pos45 = idx.cursor++;
					if(pos45 == null) {
						pos45 = 0;
					}
					v37 = idx.data.readU8(pos45);
				}
				v36 = v36 << 8 | v37;
			}
			var count2 = v36;
			var bias = 107;
			if(count2 >= 33900) {
				bias = 32768;
			} else if(count2 >= 1240) {
				bias = 1131;
			}
			n += bias;
			if(n < 0 || n >= count2) {
				var r17 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r17.data = null;
				r17.cursor = 0;
				b = r17;
			} else {
				if(0 > idx.data.get_length()) {
					throw haxe_Exception.thrown("Error");
				}
				idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
				var v38 = 0;
				var _g36 = 0;
				var _g37 = 2;
				while(_g36 < _g37) {
					var i22 = _g36++;
					var v39;
					if(idx.cursor >= idx.data.get_length()) {
						v39 = 0;
					} else {
						var pos46 = idx.cursor++;
						if(pos46 == null) {
							pos46 = 0;
						}
						v39 = idx.data.readU8(pos46);
					}
					v38 = v38 << 8 | v39;
				}
				var count3 = v38;
				var offsize2;
				if(idx.cursor >= idx.data.get_length()) {
					offsize2 = 0;
				} else {
					var pos47 = idx.cursor++;
					if(pos47 == null) {
						pos47 = 0;
					}
					offsize2 = idx.data.readU8(pos47);
				}
				if(!(n >= 0 && n < count3)) {
					throw haxe_Exception.thrown("Error");
				}
				if(!(offsize2 >= 1 && offsize2 <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var o10 = idx.cursor + n * offsize2;
				if(o10 > idx.data.get_length() || o10 < 0) {
					throw haxe_Exception.thrown("Error");
				}
				idx.cursor = o10 > idx.data.get_length() || o10 < 0 ? idx.data.get_length() : o10;
				var v40 = 0;
				if(!(offsize2 >= 1 && offsize2 <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var _g38 = 0;
				var _g39 = offsize2;
				while(_g38 < _g39) {
					var i23 = _g38++;
					var v41;
					if(idx.cursor >= idx.data.get_length()) {
						v41 = 0;
					} else {
						var pos48 = idx.cursor++;
						if(pos48 == null) {
							pos48 = 0;
						}
						v41 = idx.data.readU8(pos48);
					}
					v40 = v40 << 8 | v41;
				}
				var start5 = v40;
				var v42 = 0;
				if(!(offsize2 >= 1 && offsize2 <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var _g40 = 0;
				var _g41 = offsize2;
				while(_g40 < _g41) {
					var i24 = _g40++;
					var v43;
					if(idx.cursor >= idx.data.get_length()) {
						v43 = 0;
					} else {
						var pos49 = idx.cursor++;
						if(pos49 == null) {
							pos49 = 0;
						}
						v43 = idx.data.readU8(pos49);
					}
					v42 = v42 << 8 | v43;
				}
				var end4 = v42;
				var o11 = 2 + (count3 + 1) * offsize2 + start5;
				var s6 = end4 - start5;
				var r18 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r18.data = null;
				r18.cursor = 0;
				var r19 = r18;
				if(o11 < 0 || s6 < 0 || o11 > idx.data.get_length() || s6 > idx.data.get_length() - o11) {
					b = r19;
				} else {
					r19.data = idx.data.sub(o11,s6);
					b = r19;
				}
			}
			if(b.data.get_length() == 0) {
				return false;
			}
			b.cursor = 0;
			clear_stack = false;
			break;
		case 30:
			if(sp < 4) {
				return false;
			}
			while(i + 3 < sp) {
				var cx126 = c.x;
				var cy126 = c.y + s[i];
				var cx213 = cx126 + s[i + 1];
				var cy213 = cy126 + s[i + 2];
				c.x = cx213 + s[i + 3];
				c.y = cy213 + (sp - i == 5 ? s[i + 4] : 0);
				var x27 = c.x | 0;
				var y27 = c.y | 0;
				var cx33 = cx126 | 0;
				var cy33 = cy126 | 0;
				var cx127 = cx213 | 0;
				var cy127 = cy213 | 0;
				if(c.bounds) {
					if(x27 > c.max_x || !c.started) {
						c.max_x = x27;
					}
					if(y27 > c.max_y || !c.started) {
						c.max_y = y27;
					}
					if(x27 < c.min_x || !c.started) {
						c.min_x = x27;
					}
					if(y27 < c.min_y || !c.started) {
						c.min_y = y27;
					}
					c.started = true;
					if(cx33 > c.max_x || !c.started) {
						c.max_x = cx33;
					}
					if(cy33 > c.max_y || !c.started) {
						c.max_y = cy33;
					}
					if(cx33 < c.min_x || !c.started) {
						c.min_x = cx33;
					}
					if(cy33 < c.min_y || !c.started) {
						c.min_y = cy33;
					}
					c.started = true;
					if(cx127 > c.max_x || !c.started) {
						c.max_x = cx127;
					}
					if(cy127 > c.max_y || !c.started) {
						c.max_y = cy127;
					}
					if(cx127 < c.min_x || !c.started) {
						c.min_x = cx127;
					}
					if(cy127 < c.min_y || !c.started) {
						c.min_y = cy127;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x27,y27,cx33,cy33);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx127 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy127 , Int);
				}
				c.num_vertices++;
				i += 4;
				if(i + 3 >= sp) {
					break;
				}
				var cx128 = c.x + s[i];
				var cy128 = c.y;
				var cx214 = cx128 + s[i + 1];
				var cy214 = cy128 + s[i + 2];
				c.x = cx214 + (sp - i == 5 ? s[i + 4] : 0);
				c.y = cy214 + s[i + 3];
				var x28 = c.x | 0;
				var y28 = c.y | 0;
				var cx34 = cx128 | 0;
				var cy34 = cy128 | 0;
				var cx129 = cx214 | 0;
				var cy129 = cy214 | 0;
				if(c.bounds) {
					if(x28 > c.max_x || !c.started) {
						c.max_x = x28;
					}
					if(y28 > c.max_y || !c.started) {
						c.max_y = y28;
					}
					if(x28 < c.min_x || !c.started) {
						c.min_x = x28;
					}
					if(y28 < c.min_y || !c.started) {
						c.min_y = y28;
					}
					c.started = true;
					if(cx34 > c.max_x || !c.started) {
						c.max_x = cx34;
					}
					if(cy34 > c.max_y || !c.started) {
						c.max_y = cy34;
					}
					if(cx34 < c.min_x || !c.started) {
						c.min_x = cx34;
					}
					if(cy34 < c.min_y || !c.started) {
						c.min_y = cy34;
					}
					c.started = true;
					if(cx129 > c.max_x || !c.started) {
						c.max_x = cx129;
					}
					if(cy129 > c.max_y || !c.started) {
						c.max_y = cy129;
					}
					if(cx129 < c.min_x || !c.started) {
						c.min_x = cx129;
					}
					if(cy129 < c.min_y || !c.started) {
						c.min_y = cy129;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x28,y28,cx34,cy34);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx129 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy129 , Int);
				}
				c.num_vertices++;
				i += 4;
			}
			break;
		case 31:
			if(sp < 4) {
				return false;
			}
			while(i + 3 < sp) {
				var cx130 = c.x + s[i];
				var cy130 = c.y;
				var cx215 = cx130 + s[i + 1];
				var cy215 = cy130 + s[i + 2];
				c.x = cx215 + (sp - i == 5 ? s[i + 4] : 0);
				c.y = cy215 + s[i + 3];
				var x29 = c.x | 0;
				var y29 = c.y | 0;
				var cx35 = cx130 | 0;
				var cy35 = cy130 | 0;
				var cx131 = cx215 | 0;
				var cy131 = cy215 | 0;
				if(c.bounds) {
					if(x29 > c.max_x || !c.started) {
						c.max_x = x29;
					}
					if(y29 > c.max_y || !c.started) {
						c.max_y = y29;
					}
					if(x29 < c.min_x || !c.started) {
						c.min_x = x29;
					}
					if(y29 < c.min_y || !c.started) {
						c.min_y = y29;
					}
					c.started = true;
					if(cx35 > c.max_x || !c.started) {
						c.max_x = cx35;
					}
					if(cy35 > c.max_y || !c.started) {
						c.max_y = cy35;
					}
					if(cx35 < c.min_x || !c.started) {
						c.min_x = cx35;
					}
					if(cy35 < c.min_y || !c.started) {
						c.min_y = cy35;
					}
					c.started = true;
					if(cx131 > c.max_x || !c.started) {
						c.max_x = cx131;
					}
					if(cy131 > c.max_y || !c.started) {
						c.max_y = cy131;
					}
					if(cx131 < c.min_x || !c.started) {
						c.min_x = cx131;
					}
					if(cy131 < c.min_y || !c.started) {
						c.min_y = cy131;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x29,y29,cx35,cy35);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx131 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy131 , Int);
				}
				c.num_vertices++;
				i += 4;
				if(i + 3 >= sp) {
					break;
				}
				var cx132 = c.x;
				var cy132 = c.y + s[i];
				var cx216 = cx132 + s[i + 1];
				var cy216 = cy132 + s[i + 2];
				c.x = cx216 + s[i + 3];
				c.y = cy216 + (sp - i == 5 ? s[i + 4] : 0);
				var x30 = c.x | 0;
				var y30 = c.y | 0;
				var cx36 = cx132 | 0;
				var cy36 = cy132 | 0;
				var cx133 = cx216 | 0;
				var cy133 = cy216 | 0;
				if(c.bounds) {
					if(x30 > c.max_x || !c.started) {
						c.max_x = x30;
					}
					if(y30 > c.max_y || !c.started) {
						c.max_y = y30;
					}
					if(x30 < c.min_x || !c.started) {
						c.min_x = x30;
					}
					if(y30 < c.min_y || !c.started) {
						c.min_y = y30;
					}
					c.started = true;
					if(cx36 > c.max_x || !c.started) {
						c.max_x = cx36;
					}
					if(cy36 > c.max_y || !c.started) {
						c.max_y = cy36;
					}
					if(cx36 < c.min_x || !c.started) {
						c.min_x = cx36;
					}
					if(cy36 < c.min_y || !c.started) {
						c.min_y = cy36;
					}
					c.started = true;
					if(cx133 > c.max_x || !c.started) {
						c.max_x = cx133;
					}
					if(cy133 > c.max_y || !c.started) {
						c.max_y = cy133;
					}
					if(cx133 < c.min_x || !c.started) {
						c.min_x = cx133;
					}
					if(cy133 < c.min_y || !c.started) {
						c.min_y = cy133;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x30,y30,cx36,cy36);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx133 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy133 , Int);
				}
				c.num_vertices++;
				i += 4;
			}
			break;
		default:
			if(b0 != 255 && b0 != 28 && (b0 < 32 || b0 > 254)) {
				return false;
			}
			if(b0 == 255) {
				var v44 = 0;
				var _g42 = 0;
				var _g43 = 4;
				while(_g42 < _g43) {
					var i25 = _g42++;
					var v45;
					if(b.cursor >= b.data.get_length()) {
						v45 = 0;
					} else {
						var pos50 = b.cursor++;
						if(pos50 == null) {
							pos50 = 0;
						}
						v45 = b.data.readU8(pos50);
					}
					v44 = v44 << 8 | v45;
				}
				f = v44 / 65536;
			} else {
				var o12 = b.cursor + (-1);
				if(o12 > b.data.get_length() || o12 < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o12 > b.data.get_length() || o12 < 0 ? b.data.get_length() : o12;
				var b07;
				if(b.cursor >= b.data.get_length()) {
					b07 = 0;
				} else {
					var pos51 = b.cursor++;
					if(pos51 == null) {
						pos51 = 0;
					}
					b07 = b.data.readU8(pos51);
				}
				if(b07 >= 32 && b07 <= 246) {
					f = b07 - 139;
				} else if(b07 >= 247 && b07 <= 250) {
					var f1;
					if(b.cursor >= b.data.get_length()) {
						f1 = 0;
					} else {
						var pos52 = b.cursor++;
						if(pos52 == null) {
							pos52 = 0;
						}
						f1 = b.data.readU8(pos52);
					}
					f = (b07 - 247) * 256 + f1 + 108;
				} else if(b07 >= 251 && b07 <= 254) {
					var f2;
					if(b.cursor >= b.data.get_length()) {
						f2 = 0;
					} else {
						var pos53 = b.cursor++;
						if(pos53 == null) {
							pos53 = 0;
						}
						f2 = b.data.readU8(pos53);
					}
					f = -(b07 - 251) * 256 - f2 - 108;
				} else if(b07 == 28) {
					var v46 = 0;
					var _g44 = 0;
					var _g45 = 2;
					while(_g44 < _g45) {
						var i26 = _g44++;
						var v47;
						if(b.cursor >= b.data.get_length()) {
							v47 = 0;
						} else {
							var pos54 = b.cursor++;
							if(pos54 == null) {
								pos54 = 0;
							}
							v47 = b.data.readU8(pos54);
						}
						v46 = v46 << 8 | v47;
					}
					f = v46;
				} else if(b07 == 29) {
					var v48 = 0;
					var _g46 = 0;
					var _g47 = 4;
					while(_g46 < _g47) {
						var i27 = _g46++;
						var v49;
						if(b.cursor >= b.data.get_length()) {
							v49 = 0;
						} else {
							var pos55 = b.cursor++;
							if(pos55 == null) {
								pos55 = 0;
							}
							v49 = b.data.readU8(pos55);
						}
						v48 = v48 << 8 | v49;
					}
					f = v48;
				} else {
					throw haxe_Exception.thrown("Error");
				}
			}
			if(sp >= 48) {
				return false;
			}
			s[sp++] = f;
			clear_stack = false;
		}
		if(clear_stack) {
			sp = 0;
		}
	}
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeT2 = function(info,glyph_index) {
	var tmp = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp.bounds = true;
	tmp.started = false;
	tmp.first_x = 0;
	tmp.first_y = 0;
	tmp.x = 0;
	tmp.y = 0;
	tmp.min_x = 0;
	tmp.min_y = 0;
	tmp.max_x = 0;
	tmp.max_y = 0;
	tmp.pvertices = null;
	tmp.num_vertices = 0;
	var count_ctx = tmp;
	var tmp = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp.bounds = false;
	tmp.started = false;
	tmp.first_x = 0;
	tmp.first_y = 0;
	tmp.x = 0;
	tmp.y = 0;
	tmp.min_x = 0;
	tmp.min_y = 0;
	tmp.max_x = 0;
	tmp.max_y = 0;
	tmp.pvertices = null;
	tmp.num_vertices = 0;
	var output_ctx = tmp;
	if(kha_graphics2_truetype_StbTruetype.stbtt__run_charstring(info,glyph_index,count_ctx)) {
		var this1 = new Array(count_ctx.num_vertices);
		output_ctx.pvertices = this1;
		var _g = 0;
		var _g1 = count_ctx.num_vertices;
		while(_g < _g1) {
			var i = _g++;
			output_ctx.pvertices[i] = new kha_graphics2_truetype_Stbtt_$vertex();
		}
		if(kha_graphics2_truetype_StbTruetype.stbtt__run_charstring(info,glyph_index,output_ctx)) {
			if(output_ctx.num_vertices != count_ctx.num_vertices) {
				throw haxe_Exception.thrown("Error");
			}
			return output_ctx.pvertices;
		}
	}
	return null;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphInfoT2 = function(info,glyph_index,rect) {
	var tmp = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp.bounds = true;
	tmp.started = false;
	tmp.first_x = 0;
	tmp.first_y = 0;
	tmp.x = 0;
	tmp.y = 0;
	tmp.min_x = 0;
	tmp.min_y = 0;
	tmp.max_x = 0;
	tmp.max_y = 0;
	tmp.pvertices = null;
	tmp.num_vertices = 0;
	var c = tmp;
	var r = kha_graphics2_truetype_StbTruetype.stbtt__run_charstring(info,glyph_index,c);
	if(rect != null) {
		rect.x0 = r ? c.min_x : 0;
		rect.y0 = r ? c.min_y : 0;
		rect.x1 = r ? c.max_x : 0;
		rect.y1 = r ? c.max_y : 0;
	}
	if(r) {
		return c.num_vertices;
	} else {
		return 0;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape = function(info,glyph_index) {
	if(info.cff.data == null || info.cff.data.get_length() == 0) {
		return kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeTT(info,glyph_index);
	} else {
		return kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeT2(info,glyph_index);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics = function(info,glyph_index) {
	var p = info.data;
	var pos = info.hhea + 34;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var numOfLongHorMetrics = ch2 | ch1 << 8;
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics();
	if(glyph_index < numOfLongHorMetrics) {
		var p = info.data;
		var pos = info.hmtx + 4 * glyph_index;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		metrics.advanceWidth = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = info.hmtx + 4 * glyph_index + 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		metrics.leftSideBearing = (n & 32768) != 0 ? n - 65536 : n;
	} else {
		var p = info.data;
		var pos = info.hmtx + 4 * (numOfLongHorMetrics - 1);
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		metrics.advanceWidth = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = info.hmtx + 4 * numOfLongHorMetrics + 2 * (glyph_index - numOfLongHorMetrics);
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		var n = ch2 | ch1 << 8;
		metrics.leftSideBearing = (n & 32768) != 0 ? n - 65536 : n;
	}
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance = function(info,glyph1,glyph2) {
	var kern = info.kern;
	var data = info.data;
	var straw;
	var m;
	if(info.kern == 0) {
		return 0;
	}
	var pos = kern + 2;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	if((ch2 | ch1 << 8) < 1) {
		return 0;
	}
	var pos = kern + 8;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	if((ch2 | ch1 << 8) != 1) {
		return 0;
	}
	var l = 0;
	var pos = kern + 10;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var r = (ch2 | ch1 << 8) - 1;
	var needle = glyph1 << 16 | glyph2;
	while(l <= r) {
		m = l + r >> 1;
		var pos = kern + 18 + m * 6;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = data.readU8(pos1);
		var ch2 = data.readU8(pos1 + 1);
		var ch3 = data.readU8(pos1 + 2);
		var ch4 = data.readU8(pos1 + 3);
		straw = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		if(needle < straw) {
			r = m - 1;
		} else if(needle > straw) {
			l = m + 1;
		} else {
			var pos2 = kern + 22 + m * 6;
			if(pos2 == null) {
				pos2 = 0;
			}
			var ch11 = data.readU8(pos2);
			var ch21 = data.readU8(pos2 + 1);
			var n = ch21 | ch11 << 8;
			if((n & 32768) != 0) {
				return n - 65536;
			} else {
				return n;
			}
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointKernAdvance = function(info,ch1,ch2) {
	if(info.kern == 0) {
		return 0;
	}
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch1),kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch2));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointHMetrics = function(info,codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics = function(info) {
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics();
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	metrics.ascent = (n & 32768) != 0 ? n - 65536 : n;
	var p = info.data;
	var pos = info.hhea + 6;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	metrics.descent = (n & 32768) != 0 ? n - 65536 : n;
	var p = info.data;
	var pos = info.hhea + 8;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	metrics.lineGap = (n & 32768) != 0 ? n - 65536 : n;
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontBoundingBox = function(info) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	var p = info.data;
	var pos = info.head + 36;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
	var p = info.data;
	var pos = info.head + 38;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.y0 = (n & 32768) != 0 ? n - 65536 : n;
	var p = info.data;
	var pos = info.head + 40;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.x1 = (n & 32768) != 0 ? n - 65536 : n;
	var p = info.data;
	var pos = info.head + 42;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.y1 = (n & 32768) != 0 ? n - 65536 : n;
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight = function(info,height) {
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var p = info.data;
	var pos = info.hhea + 6;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n1 = ch2 | ch1 << 8;
	var fheight = ((n & 32768) != 0 ? n - 65536 : n) - ((n1 & 32768) != 0 ? n1 - 65536 : n1);
	return height / fheight;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForMappingEmToPixels = function(info,pixels) {
	var p = info.data;
	var pos = info.head + 18;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var unitsPerEm = ch2 | ch1 << 8;
	return pixels / unitsPerEm;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel = function(font,glyph,scale_x,scale_y,shift_x,shift_y) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(font,glyph,rect)) {
		rect.x0 = 0;
		rect.y0 = 0;
		rect.x1 = 0;
		rect.y1 = 0;
	} else {
		var x0 = rect.x0;
		var x1 = rect.x1;
		var y0 = rect.y0;
		var y1 = rect.y1;
		rect.x0 = Math.floor(x0 * scale_x + shift_x);
		rect.y0 = Math.floor(-y1 * scale_y + shift_y);
		rect.x1 = Math.ceil(x1 * scale_x + shift_x);
		rect.y1 = Math.ceil(-y0 * scale_y + shift_y);
	}
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox = function(font,glyph,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,glyph,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel = function(font,codepoint,scale_x,scale_y,shift_x,shift_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(font,codepoint),scale_x,scale_y,shift_x,shift_y);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBox = function(font,codepoint,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel(font,codepoint,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt__new_active = function(e,eIndex,off_x,start_point) {
	var z = new kha_graphics2_truetype_Stbtt_$_$active_$edge();
	var dxdy = (e[eIndex].x1 - e[eIndex].x0) / (e[eIndex].y1 - e[eIndex].y0);
	if(z == null) {
		throw haxe_Exception.thrown("Error");
	}
	if(z == null) {
		return z;
	}
	z.fdx = dxdy;
	z.fdy = dxdy != 0.0 ? 1.0 / dxdy : 0.0;
	z.fx = e[eIndex].x0 + dxdy * (start_point - e[eIndex].y0);
	z.fx -= off_x;
	z.direction = e[eIndex].invert ? 1.0 : -1.0;
	z.sy = e[eIndex].y0;
	z.ey = e[eIndex].y1;
	z.next = null;
	return z;
};
kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge = function(scanline,scanlineIndex,x,e,x0,y0,x1,y1) {
	if(y0 == y1) {
		return;
	}
	if(!(y0 < y1)) {
		throw haxe_Exception.thrown("Error");
	}
	if(!(e.sy <= e.ey)) {
		throw haxe_Exception.thrown("Error");
	}
	if(y0 > e.ey) {
		return;
	}
	if(y1 < e.sy) {
		return;
	}
	if(y0 < e.sy) {
		x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
		y0 = e.sy;
	}
	if(y1 > e.ey) {
		x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
		y1 = e.ey;
	}
	if(x0 == x) {
		if(!(x1 <= x + 1)) {
			throw haxe_Exception.thrown("Error");
		}
	} else if(x0 == x + 1) {
		if(!(x1 >= x)) {
			throw haxe_Exception.thrown("Error");
		}
	} else if(x0 <= x) {
		if(!(x1 <= x)) {
			throw haxe_Exception.thrown("Error");
		}
	} else if(x0 >= x + 1) {
		if(!(x1 >= x + 1)) {
			throw haxe_Exception.thrown("Error");
		}
	} else if(!(x1 >= x && x1 <= x + 1)) {
		throw haxe_Exception.thrown("Error");
	}
	if(x0 <= x && x1 <= x) {
		scanline[scanlineIndex + x] += e.direction * (y1 - y0);
	} else if(!(x0 >= x + 1 && x1 >= x + 1)) {
		if(!(x0 >= x && x0 <= x + 1 && x1 >= x && x1 <= x + 1)) {
			throw haxe_Exception.thrown("Error");
		}
		scanline[scanlineIndex + x] += e.direction * (y1 - y0) * (1 - (x0 - x + (x1 - x)) / 2);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new = function(scanline,scanline_fill,scanline_fillIndex,len,e,y_top) {
	var y_bottom = y_top + 1;
	while(e != null) {
		if(!(e.ey >= y_top)) {
			throw haxe_Exception.thrown("Error");
		}
		if(e.fdx == 0) {
			var x0 = e.fx;
			if(x0 < len) {
				if(x0 >= 0) {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x0 | 0,e,x0,y_top,x0,y_bottom);
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,x0 + 1 | 0,e,x0,y_top,x0,y_bottom);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,0,e,x0,y_top,x0,y_bottom);
				}
			}
		} else {
			var x01 = e.fx;
			var dx = e.fdx;
			var xb = x01 + dx;
			var x_top;
			var x_bottom;
			var sy0;
			var sy1;
			var dy = e.fdy;
			if(!(e.sy <= y_bottom && e.ey >= y_top)) {
				throw haxe_Exception.thrown("Error");
			}
			if(e.sy > y_top) {
				x_top = x01 + dx * (e.sy - y_top);
				sy0 = e.sy;
			} else {
				x_top = x01;
				sy0 = y_top;
			}
			if(e.ey < y_bottom) {
				x_bottom = x01 + dx * (e.ey - y_top);
				sy1 = e.ey;
			} else {
				x_bottom = xb;
				sy1 = y_bottom;
			}
			if(x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
				if((x_top | 0) == (x_bottom | 0)) {
					var x = x_top | 0;
					var height = sy1 - sy0;
					if(!(x >= 0 && x < len)) {
						throw haxe_Exception.thrown("Error");
					}
					scanline[x] += e.direction * (1 - (x_top - x + (x_bottom - x)) / 2) * height;
					scanline_fill[scanline_fillIndex + x] += e.direction * height;
				} else {
					var x1;
					if(x_top > x_bottom) {
						sy0 = y_bottom - (sy0 - y_top);
						sy1 = y_bottom - (sy1 - y_top);
						var t = sy0;
						sy0 = sy1;
						sy1 = t;
						t = x_bottom;
						x_bottom = x_top;
						x_top = t;
						dx = -dx;
						dy = -dy;
						t = x01;
						x01 = xb;
						xb = t;
					}
					var x11 = x_top | 0;
					var x2 = x_bottom | 0;
					var y_crossing = (x11 + 1 - x01) * dy + y_top;
					var sign = e.direction;
					var area = sign * (y_crossing - sy0);
					scanline[x11] += area * (1 - (x_top - x11 + (x11 + 1 - x11)) / 2);
					var step = sign * dy;
					var _g = x11 + 1;
					var _g1 = x2;
					while(_g < _g1) {
						var x3 = _g++;
						scanline[x3] += area + step / 2;
						area += step;
					}
					y_crossing += dy * (x2 - (x11 + 1));
					if(!(Math.abs(area) <= 1.01)) {
						throw haxe_Exception.thrown("Error");
					}
					scanline[x2] += area + sign * (1 - (x2 - x2 + (x_bottom - x2)) / 2) * (sy1 - y_crossing);
					scanline_fill[scanline_fillIndex + x2] += sign * (sy1 - sy0);
				}
			} else {
				var _g2 = 0;
				var _g3 = len;
				while(_g2 < _g3) {
					var x4 = _g2++;
					var y0 = y_top;
					var x12 = x4;
					var x21 = x4 + 1;
					var x31 = xb;
					var y3 = y_bottom;
					var y1 = (x4 - x01) / dx + y_top;
					var y2 = (x4 + 1 - x01) / dx + y_top;
					if(x01 < x12 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x12 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x12 && x31 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x31 < x12 && x01 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x21 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x21 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x31,y3);
					}
				}
			}
		}
		e = e.next;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges = function(result,e,n,vsubsample,off_x,off_y) {
	var active = null;
	var j = 0;
	var scanline;
	var scanline2Index = 0;
	var eIndex = 0;
	if(result.w > 64) {
		var this1 = new Array(result.w * 2 + 1);
		scanline = this1;
	} else {
		var this1 = new Array(129);
		scanline = this1;
	}
	var scanline2 = scanline;
	scanline2Index = result.w;
	var y = off_y;
	e[eIndex + n].y0 = off_y + result.h + 1;
	while(j < result.h) {
		var scan_y_top = y + 0.0;
		var scan_y_bottom = y + 1.0;
		var step_value = active;
		var step_parent = null;
		var _g = 0;
		var _g1 = result.w;
		while(_g < _g1) {
			var i = _g++;
			scanline[i] = 0;
		}
		var _g2 = 0;
		var _g3 = result.w + 1;
		while(_g2 < _g3) {
			var i1 = _g2++;
			scanline2[scanline2Index + i1] = 0;
		}
		while(step_value != null) {
			var z = step_value;
			if(z.ey <= scan_y_top) {
				if(step_parent == null) {
					active = z.next;
					step_value = z.next;
				} else {
					step_parent.next = z.next;
					step_value = z.next;
				}
				if(z.direction == 0) {
					throw haxe_Exception.thrown("Error");
				}
				z.direction = 0;
			} else {
				step_parent = step_value;
				step_value = step_value.next;
			}
		}
		while(e[eIndex].y0 <= scan_y_bottom) {
			if(e[eIndex].y0 != e[eIndex].y1) {
				var z1 = kha_graphics2_truetype_StbTruetype.stbtt__new_active(e,eIndex,off_x,scan_y_top);
				if(!(z1.ey >= scan_y_top)) {
					throw haxe_Exception.thrown("Error");
				}
				if(z1 != null) {
					if(j == 0 && off_y != 0) {
						if(z1.ey < scan_y_top) {
							z1.ey = scan_y_top;
						}
					}
					if(!(z1.ey >= scan_y_top)) {
						throw haxe_Exception.thrown("Error");
					}
				}
				z1.next = active;
				active = z1;
			}
			++eIndex;
		}
		if(active != null) {
			kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new(scanline,scanline2,scanline2Index + 1,result.w,active,scan_y_top);
		}
		var sum = 0;
		var _g4 = 0;
		var _g5 = result.w;
		while(_g4 < _g5) {
			var i2 = _g4++;
			sum += scanline2[scanline2Index + i2];
			var k = scanline[i2] + sum;
			k = Math.abs(k) * 255.0 + 0.5;
			var m = k | 0;
			if(m > 255) {
				m = 255;
			}
			result.pixels.writeU8(result.pixels_offset + j * result.stride + i2,m);
		}
		step_parent = null;
		step_value = active;
		while(step_value != null) {
			var z2 = step_value;
			z2.fx += z2.fdx;
			step_parent = step_value;
			step_value = step_value.next;
		}
		++y;
		++j;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__COMPARE = function(a,b) {
	return a.y0 < b.y0;
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort = function(p,n) {
	var i;
	var j;
	var _g = 1;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		var t = p[i];
		var a = t;
		j = i;
		while(j > 0) {
			var b = p[j - 1];
			var c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(a,b);
			if(!c) {
				break;
			}
			p[j] = p[j - 1];
			--j;
		}
		if(i != j) {
			p[j] = t;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort = function(p,pIndex,n) {
	while(n > 12) {
		var t;
		var c;
		var m = n >> 1;
		var c01 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + m]);
		var c12 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + m],p[pIndex + n - 1]);
		if(c01 != c12) {
			c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + n - 1]);
			var z = c == c12 ? 0 : n - 1;
			t = p[pIndex + z];
			p[pIndex + z] = p[pIndex + m];
			p[pIndex + m] = t;
		}
		t = p[pIndex];
		p[pIndex] = p[pIndex + m];
		p[pIndex + m] = t;
		var i = 1;
		var j = n - 1;
		while(true) {
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + i],p[pIndex])) ++i;
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + j])) --j;
			if(i >= j) {
				break;
			}
			t = p[pIndex + i];
			p[pIndex + i] = p[pIndex + j];
			p[pIndex + j] = t;
			++i;
			--j;
		}
		if(j < n - i) {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex,j);
			pIndex += i;
			n -= i;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex + i,n - i);
			n = j;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges = function(p,n) {
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,0,n);
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort(p,n);
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize = function(result,pts,wcount,windings,scale_x,scale_y,shift_x,shift_y,off_x,off_y,invert) {
	var y_scale_inv = invert ? -scale_y : scale_y;
	var i;
	var j;
	var k;
	var vsubsample = 1;
	var ptsIndex = 0;
	var n = 0;
	var _g = 0;
	var _g1 = windings;
	while(_g < _g1) {
		var i = _g++;
		n += wcount[i];
	}
	var this1 = new Array(n + 1);
	var e = this1;
	if(e == null) {
		return;
	} else {
		var _g = 0;
		var _g1 = e.length;
		while(_g < _g1) {
			var i = _g++;
			e[i] = new kha_graphics2_truetype_Stbtt_$_$edge();
		}
	}
	n = 0;
	var m = 0;
	var _g = 0;
	var _g1 = windings;
	while(_g < _g1) {
		var i = _g++;
		var p = pts;
		var pIndex = ptsIndex + m;
		m += wcount[i];
		j = wcount[i] - 1;
		var _g2 = 0;
		var _g3 = wcount[i];
		while(_g2 < _g3) {
			var k = _g2++;
			var a = k;
			var b = j;
			if(p[pIndex + j].y == p[pIndex + k].y) {
				j = k;
				continue;
			}
			e[n].invert = false;
			if(invert ? p[pIndex + j].y > p[pIndex + k].y : p[pIndex + j].y < p[pIndex + k].y) {
				e[n].invert = true;
				a = j;
				b = k;
			}
			e[n].x0 = p[pIndex + a].x * scale_x + shift_x;
			e[n].y0 = (p[pIndex + a].y * y_scale_inv + shift_y) * vsubsample;
			e[n].x1 = p[pIndex + b].x * scale_x + shift_x;
			e[n].y1 = (p[pIndex + b].y * y_scale_inv + shift_y) * vsubsample;
			++n;
			j = k;
		}
	}
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges(e,n);
	kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges(result,e,n,vsubsample,off_x,off_y);
};
kha_graphics2_truetype_StbTruetype.stbtt__add_point = function(points,n,x,y) {
	if(points == null) {
		return;
	}
	points[n].x = x;
	points[n].y = y;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve = function(points,num_points,x0,y0,x1,y1,x2,y2,objspace_flatness_squared,n) {
	var mx = (x0 + 2 * x1 + x2) / 4;
	var my = (y0 + 2 * y1 + y2) / 4;
	var dx = (x0 + x2) / 2 - mx;
	var dy = (y0 + y2) / 2 - my;
	if(n > 16) {
		return 1;
	}
	if(dx * dx + dy * dy > objspace_flatness_squared) {
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,x0,y0,(x0 + x1) / 2.0,(y0 + y1) / 2.0,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,mx,my,(x1 + x2) / 2.0,(y1 + y2) / 2.0,x2,y2,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x2,y2);
		num_points.value += 1;
	}
	return 1;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic = function(points,num_points,x0,y0,x1,y1,x2,y2,x3,y3,objspace_flatness_squared,n) {
	var dx0 = x1 - x0;
	var dy0 = y1 - y0;
	var dx1 = x2 - x1;
	var dy1 = y2 - y1;
	var dx2 = x3 - x2;
	var dy2 = y3 - y2;
	var dx = x3 - x0;
	var dy = y3 - y0;
	var longlen = Math.sqrt(dx0 * dx0 + dy0 * dy0) + Math.sqrt(dx1 * dx1 + dy1 * dy1) + Math.sqrt(dx2 * dx2 + dy2 * dy2);
	var shortlen = Math.sqrt(dx * dx + dy * dy);
	var flatness_squared = longlen * longlen - shortlen * shortlen;
	if(n > 16) {
		return;
	}
	if(flatness_squared > objspace_flatness_squared) {
		var x01 = (x0 + x1) / 2;
		var y01 = (y0 + y1) / 2;
		var x12 = (x1 + x2) / 2;
		var y12 = (y1 + y2) / 2;
		var x23 = (x2 + x3) / 2;
		var y23 = (y2 + y3) / 2;
		var xa = (x01 + x12) / 2;
		var ya = (y01 + y12) / 2;
		var xb = (x12 + x23) / 2;
		var yb = (y12 + y23) / 2;
		var mx = (xa + xb) / 2;
		var my = (ya + yb) / 2;
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic(points,num_points,x0,y0,x01,y01,xa,ya,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic(points,num_points,mx,my,xb,yb,x23,y23,x3,y3,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x3,y3);
		num_points.value += 1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves = function(vertices,num_verts,objspace_flatness,contour_lengths,num_contours) {
	var points = null;
	var num_points = 0;
	var objspace_flatness_squared = objspace_flatness * objspace_flatness;
	var i;
	var n = 0;
	var start = 0;
	var pass;
	var _g = 0;
	var _g1 = num_verts;
	while(_g < _g1) {
		var i = _g++;
		if(vertices[i].type == 1) {
			++n;
		}
	}
	num_contours.value = n;
	if(n == 0) {
		return null;
	}
	var this1 = new Array(n);
	contour_lengths.value = this1;
	if(contour_lengths.value == null) {
		num_contours.value = 0;
		return null;
	}
	var _g = 0;
	while(_g < 2) {
		var pass = _g++;
		var x = 0;
		var y = 0;
		if(pass == 1) {
			var this1 = new Array(num_points);
			points = this1;
			if(points == null) {
				contour_lengths.value = null;
				num_contours.value = 0;
				return null;
			} else {
				var _g1 = 0;
				var _g2 = points.length;
				while(_g1 < _g2) {
					var i = _g1++;
					points[i] = new kha_graphics2_truetype_Stbtt_$_$point();
				}
			}
		}
		num_points = 0;
		n = -1;
		var _g3 = 0;
		var _g4 = num_verts;
		while(_g3 < _g4) {
			var i1 = _g3++;
			switch(vertices[i1].type) {
			case 1:
				if(n >= 0) {
					contour_lengths.value[n] = num_points - start;
				}
				++n;
				start = num_points;
				x = vertices[i1].x;
				y = vertices[i1].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 2:
				x = vertices[i1].x;
				y = vertices[i1].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 3:
				var num_points_reference = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points_reference,x,y,vertices[i1].cx,vertices[i1].cy,vertices[i1].x,vertices[i1].y,objspace_flatness_squared,0);
				num_points = num_points_reference.value;
				x = vertices[i1].x;
				y = vertices[i1].y;
				break;
			case 4:
				var num_points_reference1 = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic(points,num_points_reference1,x,y,vertices[i1].cx,vertices[i1].cy,vertices[i1].cx1,vertices[i1].cy1,vertices[i1].x,vertices[i1].y,objspace_flatness_squared,0);
				num_points = num_points_reference1.value;
				x = vertices[i1].x;
				y = vertices[i1].y;
				break;
			}
		}
		contour_lengths.value[n] = num_points - start;
	}
	return points;
};
kha_graphics2_truetype_StbTruetype.stbtt_Rasterize = function(result,flatness_in_pixels,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert) {
	var scale = scale_x > scale_y ? scale_y : scale_x;
	var winding_count = 0;
	var winding_lengths = null;
	var winding_count_reference = { value : winding_count};
	var winding_lengths_reference = new kha_graphics2_truetype_VectorOfIntPointer();
	var windings = kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves(vertices,num_verts,flatness_in_pixels / scale,winding_lengths_reference,winding_count_reference);
	winding_count = winding_count_reference.value;
	winding_lengths = winding_lengths_reference.value;
	if(windings != null) {
		kha_graphics2_truetype_StbTruetype.stbtt__rasterize(result,windings,winding_lengths,winding_count,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,glyph,region) {
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices.length;
	if(scale_x == 0) {
		scale_x = scale_y;
	}
	if(scale_y == 0) {
		if(scale_x == 0) {
			return null;
		}
		scale_y = scale_x;
	}
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	var ix0 = rect.x0;
	var iy0 = rect.y0;
	var ix1 = rect.x1;
	var iy1 = rect.y1;
	gbm.w = ix1 - ix0;
	gbm.h = iy1 - iy0;
	gbm.pixels = null;
	region.width = gbm.w;
	region.height = gbm.h;
	region.xoff = ix0;
	region.yoff = iy0;
	if(gbm.w != 0 && gbm.h != 0) {
		gbm.pixels = kha_internal_BytesBlob.alloc(gbm.w * gbm.h);
		if(gbm.pixels != null) {
			gbm.stride = gbm.w;
			kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
		}
	}
	return gbm.pixels;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmap = function(info,scale_x,scale_y,glyph,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,glyph,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,glyph) {
	var ix0 = 0;
	var iy0 = 0;
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices == null ? 0 : vertices.length;
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	ix0 = rect.x0;
	iy0 = rect.y0;
	gbm.pixels = output;
	gbm.pixels_offset = output_offset;
	gbm.w = out_w;
	gbm.h = out_h;
	gbm.stride = out_stride;
	if(gbm.w != 0 && gbm.h != 0) {
		kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,glyph) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,glyph);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmap = function(info,scale_x,scale_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,codepoint,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,codepoint);
};
kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap = function(data,offset,pixel_height,pixels,pw,ph,chars,chardata) {
	var f = new kha_graphics2_truetype_Stbtt_$fontinfo();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_InitFont(f,data,offset)) {
		return -1;
	}
	var y = 1;
	var x = y;
	var bottom_y = 1;
	var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(f,pixel_height);
	var i = 0;
	var _g = 0;
	while(_g < chars.length) {
		var index = chars[_g];
		++_g;
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index);
		var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(f,g);
		var advance = metrics.advanceWidth;
		var lsb = metrics.leftSideBearing;
		var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox(f,g,scale,scale);
		var x0 = rect.x0;
		var y0 = rect.y0;
		var x1 = rect.x1;
		var y1 = rect.y1;
		var gw = x1 - x0;
		var gh = y1 - y0;
		if(x + gw + 1 >= pw) {
			y = bottom_y;
			x = 1;
		}
		if(y + gh + 1 >= ph) {
			return -i;
		}
		if(x + gw >= pw) {
			throw haxe_Exception.thrown("Error");
		}
		if(y + gh >= ph) {
			throw haxe_Exception.thrown("Error");
		}
		chardata[i].x0 = x;
		chardata[i].y0 = y;
		chardata[i].x1 = x + gw;
		chardata[i].y1 = y + gh;
		chardata[i].xadvance = scale * advance;
		chardata[i].xoff = x0;
		chardata[i].yoff = y0;
		x = x + gw + 1;
		if(y + gh + 1 > bottom_y) {
			bottom_y = y + gh + 1;
		}
		++i;
	}
	var _g = 0;
	var _g1 = pw * ph;
	while(_g < _g1) {
		var i1 = _g++;
		pixels.writeU8(i1,0);
	}
	i = 0;
	var ch;
	var _g = 0;
	while(_g < chars.length) {
		var index = chars[_g];
		++_g;
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index);
		ch = chardata[i];
		kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap(f,pixels,ch.x0 + ch.y0 * pw,ch.x1 - ch.x0,ch.y1 - ch.y0,pw,scale,scale,g);
		++i;
	}
	return bottom_y;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetBakedQuad = function(chardata,pw,ph,char_index,xpos,ypos,q,opengl_fillrule) {
	var d3d_bias = opengl_fillrule ? 0 : -0.5;
	var ipw = 1.0 / pw;
	var iph = 1.0 / ph;
	var b = chardata[char_index];
	var round_x = Math.floor(xpos.value + b.xoff + 0.5);
	var round_y = Math.floor(ypos.value + b.yoff + 0.5);
	q.x0 = round_x + d3d_bias;
	q.y0 = round_y + d3d_bias;
	q.x1 = round_x + b.x1 - b.x0 + d3d_bias;
	q.y1 = round_y + b.y1 - b.y0 + d3d_bias;
	q.s0 = b.x0 * ipw;
	q.t0 = b.y0 * iph;
	q.s1 = b.x1 * ipw;
	q.t1 = b.y1 * iph;
	xpos.value += b.xadvance;
};
var kha_graphics4_ConstantLocation = function() { };
$hxClasses["kha.graphics4.ConstantLocation"] = kha_graphics4_ConstantLocation;
kha_graphics4_ConstantLocation.__name__ = true;
kha_graphics4_ConstantLocation.__isInterface__ = true;
var kha_graphics4_CubeMap = function(size,format,renderTarget,depthStencilFormat) {
	this.isDepthAttachment = false;
	this.depthTexture = null;
	this.texture = null;
	this.frameBuffer = null;
	this.myWidth = size;
	this.myHeight = size;
	this.format = format;
	this.renderTarget = renderTarget;
	this.depthStencilFormat = depthStencilFormat;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.graphics4.CubeMap"] = kha_graphics4_CubeMap;
kha_graphics4_CubeMap.__name__ = true;
kha_graphics4_CubeMap.__interfaces__ = [kha_Resource,kha_Canvas];
kha_graphics4_CubeMap.createRenderTarget = function(size,format,depthStencil,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(format == null) {
		format = 0;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	return new kha_graphics4_CubeMap(size,format,true,depthStencil);
};
kha_graphics4_CubeMap.prototype = {
	myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,depthStencilFormat: null
	,graphics4: null
	,frameBuffer: null
	,texture: null
	,depthTexture: null
	,isDepthAttachment: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
		kha_SystemImpl.gl.texParameteri(34067,10240,9729);
		kha_SystemImpl.gl.texParameteri(34067,10241,9729);
		kha_SystemImpl.gl.texParameteri(34067,10242,33071);
		kha_SystemImpl.gl.texParameteri(34067,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
			}
			if(this.format == 3) {
				kha_SystemImpl.gl.texParameteri(34067,10240,9728);
				kha_SystemImpl.gl.texParameteri(34067,10241,9728);
				this.isDepthAttachment = true;
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(34067,colortex);
					kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34069,colortex,0);
					kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34070,colortex,0);
					kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34071,colortex,0);
					kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34072,colortex,0);
					kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34073,colortex,0);
					kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34074,colortex,0);
					kha_SystemImpl.gl.bindTexture(34067,this.texture);
				}
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		}
		kha_SystemImpl.gl.bindTexture(34067,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			if(depthStencilFormat == 1) {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.myWidth,this.myHeight,0,6402,5125,null);
			} else {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
			}
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36096,34067,this.depthTexture,0);
			break;
		case 2:case 3:case 4:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.myWidth,this.myHeight,0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,33306,34067,this.depthTexture,0);
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
	}
	,setDepth: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
	}
	,unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_g1: function() {
		return null;
	}
	,get_g2: function() {
		return null;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_graphics4_CubeMap
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha_graphics4_FragmentShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) {
		var source = sources[_g];
		++_g;
		this.sources.push(source.toString());
	}
	this.type = 35632;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.FragmentShader"] = kha_graphics4_FragmentShader;
kha_graphics4_FragmentShader.__name__ = true;
kha_graphics4_FragmentShader.fromSource = function(source) {
	var shader = new kha_graphics4_FragmentShader([],["runtime-string"]);
	shader.sources.push(source);
	return shader;
};
kha_graphics4_FragmentShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,'delete': function() {
		kha_SystemImpl.gl.deleteShader(this.shader);
		this.shader = null;
		this.sources = null;
	}
	,__class__: kha_graphics4_FragmentShader
};
var kha_graphics4_GeometryShader = function(sources) {
};
$hxClasses["kha.graphics4.GeometryShader"] = kha_graphics4_GeometryShader;
kha_graphics4_GeometryShader.__name__ = true;
kha_graphics4_GeometryShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_GeometryShader
};
var kha_graphics4_Graphics = function() { };
$hxClasses["kha.graphics4.Graphics"] = kha_graphics4_Graphics;
kha_graphics4_Graphics.__name__ = true;
kha_graphics4_Graphics.__isInterface__ = true;
kha_graphics4_Graphics.prototype = {
	begin: null
	,beginFace: null
	,beginEye: null
	,end: null
	,vsynced: null
	,refreshRate: null
	,clear: null
	,viewport: null
	,scissor: null
	,disableScissor: null
	,setVertexBuffer: null
	,setVertexBuffers: null
	,setIndexBuffer: null
	,setTexture: null
	,setTextureDepth: null
	,setTextureArray: null
	,setVideoTexture: null
	,setImageTexture: null
	,setTextureParameters: null
	,setTexture3DParameters: null
	,setTextureCompareMode: null
	,setCubeMapCompareMode: null
	,setCubeMap: null
	,setCubeMapDepth: null
	,maxBoundTextures: null
	,setStencilReferenceValue: null
	,instancedRenderingAvailable: null
	,setPipeline: null
	,setBool: null
	,setInt: null
	,setInt2: null
	,setInt3: null
	,setInt4: null
	,setInts: null
	,setFloat: null
	,setFloat2: null
	,setFloat3: null
	,setFloat4: null
	,setFloats: null
	,setVector2: null
	,setVector3: null
	,setVector4: null
	,setMatrix: null
	,setMatrix3: null
	,drawIndexedVertices: null
	,drawIndexedVerticesInstanced: null
	,flush: null
	,__class__: kha_graphics4_Graphics
};
var kha_graphics4_InternalPipeline = function(pipeline,projectionLocation,textureLocation) {
	this.pipeline = pipeline;
	this.projectionLocation = projectionLocation;
	this.textureLocation = textureLocation;
};
$hxClasses["kha.graphics4.InternalPipeline"] = kha_graphics4_InternalPipeline;
kha_graphics4_InternalPipeline.__name__ = true;
kha_graphics4_InternalPipeline.prototype = {
	pipeline: null
	,projectionLocation: null
	,textureLocation: null
	,__class__: kha_graphics4_InternalPipeline
};
var kha_graphics4_PipelineCache = function() { };
$hxClasses["kha.graphics4.PipelineCache"] = kha_graphics4_PipelineCache;
kha_graphics4_PipelineCache.__name__ = true;
kha_graphics4_PipelineCache.__isInterface__ = true;
kha_graphics4_PipelineCache.prototype = {
	get: null
	,__class__: kha_graphics4_PipelineCache
};
var kha_graphics4_SimplePipelineCache = function(pipeline,texture) {
	var projectionLocation = null;
	try {
		projectionLocation = pipeline.getConstantLocation("projectionMatrix");
	} catch( _g ) {
		var x = haxe_Exception.caught(_g).unwrap();
		haxe_Log.trace(x,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 57, className : "kha.graphics4.SimplePipelineCache", methodName : "new"});
	}
	var textureLocation = null;
	if(texture) {
		try {
			textureLocation = pipeline.getTextureUnit("tex");
		} catch( _g ) {
			var x = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(x,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 66, className : "kha.graphics4.SimplePipelineCache", methodName : "new"});
		}
	}
	this.pipeline = new kha_graphics4_InternalPipeline(pipeline,projectionLocation,textureLocation);
};
$hxClasses["kha.graphics4.SimplePipelineCache"] = kha_graphics4_SimplePipelineCache;
kha_graphics4_SimplePipelineCache.__name__ = true;
kha_graphics4_SimplePipelineCache.__interfaces__ = [kha_graphics4_PipelineCache];
kha_graphics4_SimplePipelineCache.prototype = {
	pipeline: null
	,get: function(colorFormats,depthStencilFormat) {
		return this.pipeline;
	}
	,__class__: kha_graphics4_SimplePipelineCache
};
var kha_graphics4_PerFramebufferPipelineCache = function(pipeline,texture) {
	this.pipelines = [];
	pipeline.compile();
	var projectionLocation = null;
	try {
		projectionLocation = pipeline.getConstantLocation("projectionMatrix");
	} catch( _g ) {
		var x = haxe_Exception.caught(_g).unwrap();
		haxe_Log.trace(x,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 89, className : "kha.graphics4.PerFramebufferPipelineCache", methodName : "new"});
	}
	var textureLocation = null;
	if(texture) {
		try {
			textureLocation = pipeline.getTextureUnit("tex");
		} catch( _g ) {
			var x = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(x,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 98, className : "kha.graphics4.PerFramebufferPipelineCache", methodName : "new"});
		}
	}
	this.pipelines.push(new kha_graphics4_InternalPipeline(pipeline,projectionLocation,textureLocation));
};
$hxClasses["kha.graphics4.PerFramebufferPipelineCache"] = kha_graphics4_PerFramebufferPipelineCache;
kha_graphics4_PerFramebufferPipelineCache.__name__ = true;
kha_graphics4_PerFramebufferPipelineCache.__interfaces__ = [kha_graphics4_PipelineCache];
kha_graphics4_PerFramebufferPipelineCache.prototype = {
	pipelines: null
	,get: function(colorFormats,depthStencilFormat) {
		return this.pipelines[this.hash(colorFormats,depthStencilFormat)];
	}
	,hash: function(colorFormats,depthStencilFormat) {
		return 0;
	}
	,__class__: kha_graphics4_PerFramebufferPipelineCache
};
var kha_graphics4_ImageShaderPainter = function(g4) {
	this.myPipeline = null;
	this.bilinearMipmaps = false;
	this.bilinear = false;
	this.g = g4;
	kha_graphics4_ImageShaderPainter.bufferStart = 0;
	kha_graphics4_ImageShaderPainter.bufferIndex = 0;
	kha_graphics4_ImageShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ImageShaderPainter.standardImagePipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ImageShaderPainter"] = kha_graphics4_ImageShaderPainter;
kha_graphics4_ImageShaderPainter.__name__ = true;
kha_graphics4_ImageShaderPainter.bufferStart = null;
kha_graphics4_ImageShaderPainter.bufferIndex = null;
kha_graphics4_ImageShaderPainter.rectVertexBuffer = null;
kha_graphics4_ImageShaderPainter.rectVertices = null;
kha_graphics4_ImageShaderPainter.indexBuffer = null;
kha_graphics4_ImageShaderPainter.lastTexture = null;
kha_graphics4_ImageShaderPainter.initShaders = function() {
	if(kha_graphics4_ImageShaderPainter.structure == null) {
		kha_graphics4_ImageShaderPainter.structure = kha_graphics4_Graphics2.createImageVertexStructure();
	}
	if(kha_graphics4_ImageShaderPainter.standardImagePipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_ImageShaderPainter.structure);
		kha_graphics4_ImageShaderPainter.standardImagePipeline = new kha_graphics4_PerFramebufferPipelineCache(pipeline,true);
	}
};
kha_graphics4_ImageShaderPainter.prototype = {
	projectionMatrix: null
	,bilinear: null
	,bilinearMipmaps: null
	,g: null
	,myPipeline: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ImageShaderPainter.standardImagePipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ImageShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ImageShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(6000,kha_graphics4_ImageShaderPainter.structure,1);
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ImageShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(9000,0);
			var indices = kha_graphics4_ImageShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1500) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ImageShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColor: function(r,g,b,a) {
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function(end) {
		if(kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart == 0) {
			return;
		}
		kha_graphics4_ImageShaderPainter.rectVertexBuffer.unlock((kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 4);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ImageShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ImageShaderPainter.indexBuffer);
		this.g.setTexture(pipeline.textureLocation,kha_graphics4_ImageShaderPainter.lastTexture);
		this.g.setTextureParameters(pipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,this.bilinearMipmaps ? 2 : 0);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(kha_graphics4_ImageShaderPainter.bufferStart * 2 * 3,(kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 2 * 3);
		this.g.setTexture(pipeline.textureLocation,null);
		if(end || (kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1) * 4 >= 1500) {
			kha_graphics4_ImageShaderPainter.bufferStart = 0;
			kha_graphics4_ImageShaderPainter.bufferIndex = 0;
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock(0);
		} else {
			kha_graphics4_ImageShaderPainter.bufferStart = kha_graphics4_ImageShaderPainter.bufferIndex;
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock(kha_graphics4_ImageShaderPainter.bufferStart * 4);
		}
	}
	,setBilinearFilter: function(bilinear) {
		this.drawBuffer(false);
		kha_graphics4_ImageShaderPainter.lastTexture = null;
		this.bilinear = bilinear;
	}
	,setBilinearMipmapFilter: function(bilinear) {
		this.drawBuffer(false);
		kha_graphics4_ImageShaderPainter.lastTexture = null;
		this.bilinearMipmaps = bilinear;
	}
	,drawImage: function(img,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer(false);
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var right = tex.get_width() / tex.get_realWidth();
		var bottom = tex.get_height() / tex.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawImage2: function(img,sx,sy,sw,sh,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer(false);
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawImageScale: function(img,sx,sy,sw,sh,left,top,right,bottom,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer(false);
		}
		var left1 = sx / tex.get_realWidth();
		var top1 = sy / tex.get_realHeight();
		var right1 = (sx + sw) / tex.get_realWidth();
		var bottom1 = (sy + sh) / tex.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom1;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = opacity;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 1] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 9] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 10] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 18] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 19] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 27] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 28] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,end: function() {
		if(kha_graphics4_ImageShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		kha_graphics4_ImageShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_ImageShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_ColoredShaderPainter = function(g4) {
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ColoredShaderPainter.standardColorPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ColoredShaderPainter"] = kha_graphics4_ColoredShaderPainter;
kha_graphics4_ColoredShaderPainter.__name__ = true;
kha_graphics4_ColoredShaderPainter.bufferIndex = null;
kha_graphics4_ColoredShaderPainter.rectVertexBuffer = null;
kha_graphics4_ColoredShaderPainter.rectVertices = null;
kha_graphics4_ColoredShaderPainter.indexBuffer = null;
kha_graphics4_ColoredShaderPainter.triangleBufferIndex = null;
kha_graphics4_ColoredShaderPainter.triangleVertexBuffer = null;
kha_graphics4_ColoredShaderPainter.triangleVertices = null;
kha_graphics4_ColoredShaderPainter.triangleIndexBuffer = null;
kha_graphics4_ColoredShaderPainter.initShaders = function() {
	if(kha_graphics4_ColoredShaderPainter.structure == null) {
		kha_graphics4_ColoredShaderPainter.structure = kha_graphics4_Graphics2.createColoredVertexStructure();
	}
	if(kha_graphics4_ColoredShaderPainter.standardColorPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createColoredPipeline(kha_graphics4_ColoredShaderPainter.structure);
		kha_graphics4_ColoredShaderPainter.standardColorPipeline = new kha_graphics4_PerFramebufferPipelineCache(pipeline,false);
	}
};
kha_graphics4_ColoredShaderPainter.prototype = {
	projectionMatrix: null
	,g: null
	,myPipeline: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ColoredShaderPainter.standardColorPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ColoredShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ColoredShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_ColoredShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ColoredShaderPainter.indexBuffer.unlock();
			kha_graphics4_ColoredShaderPainter.triangleVertexBuffer = new kha_graphics4_VertexBuffer(3000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer = new kha_graphics4_IndexBuffer(3000,0);
			var triIndices = kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				triIndices[i * 3] = i * 3;
				triIndices[i * 3 + 1] = i * 3 + 1;
				triIndices[i * 3 + 2] = i * 3 + 2;
			}
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 7] = topleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 8] = toplefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 14] = toprightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 15] = toprighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 16] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 21] = bottomrightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 22] = bottomrighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 23] = -5.0;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 20] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 24] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 25] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 26] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 27] = a;
	}
	,setTriVertices: function(x1,y1,x2,y2,x3,y3) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex] = x1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 1] = y1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 7] = x2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 8] = y2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 14] = x3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 15] = y3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 16] = -5.0;
	}
	,setTriColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 20] = a;
	}
	,drawBuffer: function(trisDone) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex == 0) {
			return;
		}
		if(!trisDone) {
			if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
				this.drawTriBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.bufferIndex * 4);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.indexBuffer);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.bufferIndex * 2 * 3);
		kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
	}
	,drawTriBuffer: function(rectsDone) {
		if(!rectsDone) {
			if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
				this.drawBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.triangleVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.triangleIndexBuffer);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
	}
	,fillRect: function(opacity,color,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex + 1 >= 1000) {
			this.drawBuffer(false);
		}
		this.setRectColors(opacity,color);
		this.setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
		++kha_graphics4_ColoredShaderPainter.bufferIndex;
	}
	,fillTriangle: function(opacity,color,x1,y1,x2,y2,x3,y3) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex + 1 >= 1000) {
			this.drawTriBuffer(false);
		}
		this.setTriColors(opacity,color);
		this.setTriVertices(x1,y1,x2,y2,x3,y3);
		++kha_graphics4_ColoredShaderPainter.triangleBufferIndex;
	}
	,endTris: function(rectsDone) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(rectsDone);
		}
	}
	,endRects: function(trisDone) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(trisDone);
		}
	}
	,end: function() {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(false);
		}
	}
	,__class__: kha_graphics4_ColoredShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_TextShaderPainter = function(g4) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.bilinear = false;
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_TextShaderPainter.bufferIndex = 0;
	kha_graphics4_TextShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_TextShaderPainter.standardTextPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.TextShaderPainter"] = kha_graphics4_TextShaderPainter;
kha_graphics4_TextShaderPainter.__name__ = true;
kha_graphics4_TextShaderPainter.bufferIndex = null;
kha_graphics4_TextShaderPainter.rectVertexBuffer = null;
kha_graphics4_TextShaderPainter.rectVertices = null;
kha_graphics4_TextShaderPainter.indexBuffer = null;
kha_graphics4_TextShaderPainter.lastTexture = null;
kha_graphics4_TextShaderPainter.initShaders = function() {
	if(kha_graphics4_TextShaderPainter.structure == null) {
		kha_graphics4_TextShaderPainter.structure = kha_graphics4_Graphics2.createTextVertexStructure();
	}
	if(kha_graphics4_TextShaderPainter.standardTextPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createTextPipeline(kha_graphics4_TextShaderPainter.structure);
		kha_graphics4_TextShaderPainter.standardTextPipeline = new kha_graphics4_PerFramebufferPipelineCache(pipeline,true);
	}
};
kha_graphics4_TextShaderPainter.findIndex = function(charCode) {
	var glyphs = kha_graphics2_Graphics.fontGlyphs;
	var blocks = kha_KravurImage.charBlocks;
	var offset = 0;
	var _g = 0;
	var _g1 = blocks.length / 2 | 0;
	while(_g < _g1) {
		var i = _g++;
		var start = blocks[i * 2];
		var end = blocks[i * 2 + 1];
		if(charCode >= start && charCode <= end) {
			return offset + charCode - start;
		}
		offset += end - start + 1;
	}
	return 0;
};
kha_graphics4_TextShaderPainter.prototype = {
	projectionMatrix: null
	,font: null
	,g: null
	,myPipeline: null
	,fontSize: null
	,bilinear: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_TextShaderPainter.standardTextPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_TextShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_TextShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_TextShaderPainter.structure,1);
			kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_TextShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_TextShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_TextShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 5] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 6] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 7] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 14] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 15] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 16] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 23] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 24] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 25] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 32] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 33] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 34] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex == 0) {
			return;
		}
		kha_graphics4_TextShaderPainter.rectVertexBuffer.unlock(kha_graphics4_TextShaderPainter.bufferIndex * 4);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_TextShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_TextShaderPainter.indexBuffer);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.setTexture(pipeline.textureLocation,kha_graphics4_TextShaderPainter.lastTexture);
		this.g.setTextureParameters(pipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,0);
		this.g.drawIndexedVertices(0,kha_graphics4_TextShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(pipeline.textureLocation,null);
		kha_graphics4_TextShaderPainter.bufferIndex = 0;
		kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setFont: function(font) {
		this.font = js_Boot.__cast(font , kha_Kravur);
	}
	,bakedQuadCache: null
	,drawString: function(text,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var charCode = text.charCodeAt(i);
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(charCode),xpos,ypos);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var x = q.x0;
				var y = q.y1;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var value_x = x;
				var value_y = y;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x1 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y1 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				var x2 = x1;
				var y2 = y1;
				if(y2 == null) {
					y2 = 0;
				}
				if(x2 == null) {
					x2 = 0;
				}
				var p0_x = x2;
				var p0_y = y2;
				var x3 = q.x0;
				var y3 = q.y0;
				if(y3 == null) {
					y3 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var value_x1 = x3;
				var value_y1 = y3;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x4 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y4 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				var x5 = x4;
				var y5 = y4;
				if(y5 == null) {
					y5 = 0;
				}
				if(x5 == null) {
					x5 = 0;
				}
				var p1_x = x5;
				var p1_y = y5;
				var x6 = q.x1;
				var y6 = q.y0;
				if(y6 == null) {
					y6 = 0;
				}
				if(x6 == null) {
					x6 = 0;
				}
				var value_x2 = x6;
				var value_y2 = y6;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x7 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y7 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				var x8 = x7;
				var y8 = y7;
				if(y8 == null) {
					y8 = 0;
				}
				if(x8 == null) {
					x8 = 0;
				}
				var p2_x = x8;
				var p2_y = y8;
				var x9 = q.x1;
				var y9 = q.y1;
				if(y9 == null) {
					y9 = 0;
				}
				if(x9 == null) {
					x9 = 0;
				}
				var value_x3 = x9;
				var value_y3 = y9;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x10 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y10 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				var x11 = x10;
				var y11 = y10;
				if(y11 == null) {
					y11 = 0;
				}
				if(x11 == null) {
					x11 = 0;
				}
				var p3_x = x11;
				var p3_y = y11;
				this.setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,drawCharacters: function(text,start,length,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		var _g = start;
		var _g1 = start + length;
		while(_g < _g1) {
			var i = _g++;
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(text[i]),xpos,ypos);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var x = q.x0;
				var y = q.y1;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var value_x = x;
				var value_y = y;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x1 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y1 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				var x2 = x1;
				var y2 = y1;
				if(y2 == null) {
					y2 = 0;
				}
				if(x2 == null) {
					x2 = 0;
				}
				var p0_x = x2;
				var p0_y = y2;
				var x3 = q.x0;
				var y3 = q.y0;
				if(y3 == null) {
					y3 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var value_x1 = x3;
				var value_y1 = y3;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x4 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y4 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				var x5 = x4;
				var y5 = y4;
				if(y5 == null) {
					y5 = 0;
				}
				if(x5 == null) {
					x5 = 0;
				}
				var p1_x = x5;
				var p1_y = y5;
				var x6 = q.x1;
				var y6 = q.y0;
				if(y6 == null) {
					y6 = 0;
				}
				if(x6 == null) {
					x6 = 0;
				}
				var value_x2 = x6;
				var value_y2 = y6;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x7 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y7 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				var x8 = x7;
				var y8 = y7;
				if(y8 == null) {
					y8 = 0;
				}
				if(x8 == null) {
					x8 = 0;
				}
				var p2_x = x8;
				var p2_y = y8;
				var x9 = q.x1;
				var y9 = q.y1;
				if(y9 == null) {
					y9 = 0;
				}
				if(x9 == null) {
					x9 = 0;
				}
				var value_x3 = x9;
				var value_y3 = y9;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x10 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y10 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				var x11 = x10;
				var y11 = y10;
				if(y11 == null) {
					y11 = 0;
				}
				if(x11 == null) {
					x11 = 0;
				}
				var p3_x = x11;
				var p3_y = y11;
				this.setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,end: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_TextShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_Graphics2 = function(canvas) {
	this.scissorH = -1;
	this.scissorW = -1;
	this.scissorY = -1;
	this.scissorX = -1;
	this.scissorEnabled = false;
	this.lastPipeline = null;
	this.pipelineCache = new haxe_ds_ObjectMap();
	this.myMipmapScaleQuality = 0;
	this.myImageScaleQuality = 0;
	kha_graphics2_Graphics.call(this);
	this.set_color(-1);
	this.canvas = canvas;
	this.g = canvas.get_g4();
	this.imagePainter = new kha_graphics4_ImageShaderPainter(this.g);
	this.coloredPainter = new kha_graphics4_ColoredShaderPainter(this.g);
	this.textPainter = new kha_graphics4_TextShaderPainter(this.g);
	this.textPainter.fontSize = this.get_fontSize();
	this.projectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.setProjection();
	if(kha_graphics4_Graphics2.videoPipeline == null) {
		kha_graphics4_Graphics2.videoPipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_Graphics2.createImageVertexStructure());
		kha_graphics4_Graphics2.videoPipeline.fragmentShader = kha_Shaders.painter_video_frag;
		kha_graphics4_Graphics2.videoPipeline.vertexShader = kha_Shaders.painter_video_vert;
		kha_graphics4_Graphics2.videoPipeline.compile();
	}
};
$hxClasses["kha.graphics4.Graphics2"] = kha_graphics4_Graphics2;
kha_graphics4_Graphics2.__name__ = true;
kha_graphics4_Graphics2.videoPipeline = null;
kha_graphics4_Graphics2.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_graphics4_Graphics2.createImageVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createImagePipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_image_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_image_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createColoredVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createColoredPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_colored_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_colored_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createTextVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createTextPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_text_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_text_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 3;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 3;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.__super__ = kha_graphics2_Graphics;
kha_graphics4_Graphics2.prototype = $extend(kha_graphics2_Graphics.prototype,{
	myColor: null
	,myFont: null
	,projectionMatrix: null
	,imagePainter: null
	,coloredPainter: null
	,textPainter: null
	,canvas: null
	,g: null
	,setProjection: function() {
		var width = this.canvas.get_width();
		var height = this.canvas.get_height();
		if(((this.canvas) instanceof kha_Framebuffer)) {
			var _this = this.projectionMatrix;
			var tx = -width / width;
			var ty = -height / (0 - height);
			var tz = -1.00020002000200026;
			var m__00 = 2 / width;
			var m__10 = 0;
			var m__20 = 0;
			var m__30 = tx;
			var m__01 = 0;
			var m__11 = 2.0 / (0 - height);
			var m__21 = 0;
			var m__31 = ty;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = -0.002000200020002;
			var m__32 = tz;
			var m__03 = 0;
			var m__13 = 0;
			var m__23 = 0;
			var m__33 = 1;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		} else {
			if(!kha_Image.get_nonPow2Supported()) {
				width = kha_graphics4_Graphics2.upperPowerOfTwo(width);
				height = kha_graphics4_Graphics2.upperPowerOfTwo(height);
			}
			if(kha_Image.renderTargetsInvertedY()) {
				var _this = this.projectionMatrix;
				var tx = -width / width;
				var ty = -height / height;
				var tz = -1.00020002000200026;
				var m__00 = 2 / width;
				var m__10 = 0;
				var m__20 = 0;
				var m__30 = tx;
				var m__01 = 0;
				var m__11 = 2.0 / height;
				var m__21 = 0;
				var m__31 = ty;
				var m__02 = 0;
				var m__12 = 0;
				var m__22 = -0.002000200020002;
				var m__32 = tz;
				var m__03 = 0;
				var m__13 = 0;
				var m__23 = 0;
				var m__33 = 1;
				_this._00 = m__00;
				_this._10 = m__10;
				_this._20 = m__20;
				_this._30 = m__30;
				_this._01 = m__01;
				_this._11 = m__11;
				_this._21 = m__21;
				_this._31 = m__31;
				_this._02 = m__02;
				_this._12 = m__12;
				_this._22 = m__22;
				_this._32 = m__32;
				_this._03 = m__03;
				_this._13 = m__13;
				_this._23 = m__23;
				_this._33 = m__33;
			} else {
				var _this = this.projectionMatrix;
				var tx = -width / width;
				var ty = -height / (0 - height);
				var tz = -1.00020002000200026;
				var m__00 = 2 / width;
				var m__10 = 0;
				var m__20 = 0;
				var m__30 = tx;
				var m__01 = 0;
				var m__11 = 2.0 / (0 - height);
				var m__21 = 0;
				var m__31 = ty;
				var m__02 = 0;
				var m__12 = 0;
				var m__22 = -0.002000200020002;
				var m__32 = tz;
				var m__03 = 0;
				var m__13 = 0;
				var m__23 = 0;
				var m__33 = 1;
				_this._00 = m__00;
				_this._10 = m__10;
				_this._20 = m__20;
				_this._30 = m__30;
				_this._01 = m__01;
				_this._11 = m__11;
				_this._21 = m__21;
				_this._31 = m__31;
				_this._02 = m__02;
				_this._12 = m__12;
				_this._22 = m__22;
				_this._32 = m__32;
				_this._03 = m__03;
				_this._13 = m__13;
				_this._23 = m__23;
				_this._33 = m__33;
			}
		}
		this.imagePainter.setProjection(this.projectionMatrix);
		this.coloredPainter.setProjection(this.projectionMatrix);
		this.textPainter.setProjection(this.projectionMatrix);
	}
	,drawImage: function(img,x,y) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var xw = x + img.get_width();
		var yh = y + img.get_height();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = yh;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p1_x = x2;
		var p1_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p2_x = x1;
		var p2_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x = xw;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p3_x = x1;
		var p3_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var x = xw;
		var y = yh;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p4_x = x1;
		var p4_y = y1;
		var _this = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this.drawBuffer(false);
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var right = tex.get_width() / tex.get_realWidth();
		var bottom = tex.get_height() / tex.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex] = p1_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 1] = p1_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 9] = p2_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 10] = p2_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 18] = p3_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 19] = p3_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 27] = p4_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 28] = p4_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x = dx;
		var y = dy + dh;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p1_x = x1;
		var p1_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var x = dx;
		var y = dy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p2_x = x1;
		var p2_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var x = dx + dw;
		var y = dy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p3_x = x1;
		var p3_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var x = dx + dw;
		var y = dy + dh;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p4_x = x1;
		var p4_y = y1;
		var _this = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this.drawBuffer(false);
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex] = p1_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 1] = p1_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 9] = p2_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 10] = p2_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 18] = p3_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 19] = p3_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 27] = p4_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 28] = p4_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,get_color: function() {
		return this.myColor;
	}
	,set_color: function(color) {
		return this.myColor = color;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p1_x = x2;
		var p1_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p2_x = x2;
		var p2_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width + strength / 2;
		var y1 = y - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p3_x = x2;
		var p3_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width + strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p4_x = x2;
		var p4_y = y2;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + height - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p1_x = v_x;
		p1_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p2_x = v_x;
		p2_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p3_x = v_x;
		p3_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + strength / 2;
		var y1 = y + height - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p4_x = v_x;
		p4_y = v_y;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + height + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p1_x = v_x;
		p1_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + height - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p2_x = v_x;
		p2_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width + strength / 2;
		var y1 = y + height - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p3_x = v_x;
		p3_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width + strength / 2;
		var y1 = y + height + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p4_x = v_x;
		p4_y = v_y;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width - strength / 2;
		var y1 = y + height - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p1_x = v_x;
		p1_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width - strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p2_x = v_x;
		p2_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width + strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var v_x = x2;
		var v_y = y2;
		p3_x = v_x;
		p3_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width + strength / 2;
		var y1 = y + height - strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var v_x = x1;
		var v_y = y1;
		p4_x = v_x;
		p4_y = v_y;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,fillRect: function(x,y,width,height) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = y + height;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p1_x = x2;
		var p1_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p2_x = x2;
		var p2_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p3_x = x2;
		var p3_y = y2;
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width;
		var y1 = y + height;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p4_x = x1;
		var p4_y = y1;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,drawString: function(text,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawString(text,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformationIndex]);
	}
	,drawCharacters: function(text,start,length,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawCharacters(text,start,length,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformationIndex]);
	}
	,get_font: function() {
		return this.myFont;
	}
	,set_font: function(font) {
		this.textPainter.setFont(font);
		return this.myFont = font;
	}
	,set_fontSize: function(value) {
		return kha_graphics2_Graphics.prototype.set_fontSize.call(this,this.textPainter.fontSize = value);
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var vec_x = 0;
		var vec_y = 0;
		if(y2 == y1) {
			var x = 0;
			var y = -1;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var v_x = x;
			var v_y = y;
			vec_x = v_x;
			vec_y = v_y;
		} else {
			var x = 1;
			var y = -(x2 - x1) / (y2 - y1);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var v_x = x;
			var v_y = y;
			vec_x = v_x;
			vec_y = v_y;
		}
		var currentLength = Math.sqrt(vec_x * vec_x + vec_y * vec_y);
		if(currentLength != 0) {
			var mul = strength / currentLength;
			vec_x *= mul;
			vec_y *= mul;
		}
		var x = x1 + 0.5 * vec_x;
		var y = y1 + 0.5 * vec_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p1_x = x;
		var p1_y = y;
		var x = x2 + 0.5 * vec_x;
		var y = y2 + 0.5 * vec_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p2_x = x;
		var p2_y = y;
		var x = p1_x - vec_x;
		var y = p1_y - vec_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p3_x = x;
		var p3_y = y;
		var x = p2_x - vec_x;
		var y = p2_y - vec_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p4_x = x;
		var p4_y = y;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p1_x + _this._12 * p1_y + _this._22;
		var x = (_this._00 * p1_x + _this._10 * p1_y + _this._20) / w;
		var y = (_this._01 * p1_x + _this._11 * p1_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var v_x = x1;
		var v_y = y1;
		p1_x = v_x;
		p1_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p2_x + _this._12 * p2_y + _this._22;
		var x = (_this._00 * p2_x + _this._10 * p2_y + _this._20) / w;
		var y = (_this._01 * p2_x + _this._11 * p2_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var v_x = x1;
		var v_y = y1;
		p2_x = v_x;
		p2_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p3_x + _this._12 * p3_y + _this._22;
		var x = (_this._00 * p3_x + _this._10 * p3_y + _this._20) / w;
		var y = (_this._01 * p3_x + _this._11 * p3_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var v_x = x1;
		var v_y = y1;
		p3_x = v_x;
		p3_y = v_y;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p4_x + _this._12 * p4_y + _this._22;
		var x = (_this._00 * p4_x + _this._10 * p4_y + _this._20) / w;
		var y = (_this._01 * p4_x + _this._11 * p4_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var v_x = x1;
		var v_y = y1;
		p4_x = v_x;
		p4_y = v_y;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p3_x,p3_y,p2_x,p2_y,p4_x,p4_y);
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x = x1;
		var y = y1;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p1_x = x1;
		var p1_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var x = x2;
		var y = y2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p2_x = x1;
		var p2_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var x = x3;
		var y = y3;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p3_x = x1;
		var p3_y = y1;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
	}
	,myImageScaleQuality: null
	,get_imageScaleQuality: function() {
		return this.myImageScaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		if(value == this.myImageScaleQuality) {
			return value;
		}
		this.imagePainter.setBilinearFilter(value == 1);
		this.textPainter.setBilinearFilter(value == 1);
		return this.myImageScaleQuality = value;
	}
	,myMipmapScaleQuality: null
	,get_mipmapScaleQuality: function() {
		return this.myMipmapScaleQuality;
	}
	,set_mipmapScaleQuality: function(value) {
		this.imagePainter.setBilinearMipmapFilter(value == 1);
		return this.myMipmapScaleQuality = value;
	}
	,pipelineCache: null
	,lastPipeline: null
	,setPipeline: function(pipeline) {
		if(pipeline == this.lastPipeline) {
			return;
		}
		this.lastPipeline = pipeline;
		this.flush();
		if(pipeline == null) {
			this.imagePainter.set_pipeline(null);
			this.coloredPainter.set_pipeline(null);
			this.textPainter.set_pipeline(null);
		} else {
			var cache = this.pipelineCache.h[pipeline.__id__];
			if(cache == null) {
				cache = new kha_graphics4_SimplePipelineCache(pipeline,true);
				this.pipelineCache.set(pipeline,cache);
			}
			this.imagePainter.set_pipeline(cache);
			this.coloredPainter.set_pipeline(cache);
			this.textPainter.set_pipeline(cache);
		}
	}
	,scissorEnabled: null
	,scissorX: null
	,scissorY: null
	,scissorW: null
	,scissorH: null
	,scissor: function(x,y,width,height) {
		this.scissorEnabled = true;
		this.scissorX = x;
		this.scissorY = y;
		this.scissorW = width;
		this.scissorH = height;
		this.flush();
		this.g.scissor(x,y,width,height);
	}
	,disableScissor: function() {
		this.scissorEnabled = false;
		this.flush();
		this.g.disableScissor();
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(kha_graphics4_Graphics2.current == null) {
			kha_graphics4_Graphics2.current = this;
		} else {
			throw haxe_Exception.thrown("End before you begin");
		}
		this.g.begin();
		if(clear) {
			this.clear(clearColor);
		}
		this.setProjection();
	}
	,clear: function(color) {
		this.flush();
		this.g.clear(color == null ? -16777216 : color);
	}
	,flush: function() {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
	}
	,end: function() {
		this.flush();
		this.g.end();
		if(kha_graphics4_Graphics2.current == this) {
			kha_graphics4_Graphics2.current = null;
		} else {
			throw haxe_Exception.thrown("Begin before you end");
		}
	}
	,drawVideoInternal: function(video,x,y,width,height) {
	}
	,drawVideo: function(video,x,y,width,height) {
		this.setPipeline(kha_graphics4_Graphics2.videoPipeline);
		this.drawVideoInternal(video,x,y,width,height);
		this.setPipeline(null);
	}
	,__class__: kha_graphics4_Graphics2
});
var kha_graphics4_IndexBuffer = function(indexCount,usage,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	this.lockEnd = 0;
	this.lockStart = 0;
	this.usage = usage;
	this.mySize = indexCount;
	this.buffer = kha_SystemImpl.gl.createBuffer();
	var this1 = new Uint32Array(indexCount);
	this._data = this1;
};
$hxClasses["kha.graphics4.IndexBuffer"] = kha_graphics4_IndexBuffer;
kha_graphics4_IndexBuffer.__name__ = true;
kha_graphics4_IndexBuffer.prototype = {
	buffer: null
	,_data: null
	,mySize: null
	,usage: null
	,lockStart: null
	,lockEnd: null
	,'delete': function() {
		this._data = null;
		kha_SystemImpl.gl.deleteBuffer(this.buffer);
	}
	,lock: function(start,count) {
		this.lockStart = start != null ? start : 0;
		this.lockEnd = count != null ? start + count : this.mySize;
		return this._data.subarray(this.lockStart,this.lockEnd);
	}
	,unlock: function(count) {
		if(count != null) {
			this.lockEnd = this.lockStart + count;
		}
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
		var data = this._data.subarray(this.lockStart,this.lockEnd);
		var glData = kha_SystemImpl.elementIndexUint == null ? new Uint16Array(data) : data;
		kha_SystemImpl.gl.bufferData(34963,glData,this.usage == 1 ? 35048 : 35044);
	}
	,set: function() {
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
	}
	,count: function() {
		return this.mySize;
	}
	,__class__: kha_graphics4_IndexBuffer
};
var kha_graphics4_PipelineStateBase = function() {
	this.inputLayout = null;
	this.vertexShader = null;
	this.fragmentShader = null;
	this.geometryShader = null;
	this.tessellationControlShader = null;
	this.tessellationEvaluationShader = null;
	this.cullMode = 2;
	this.depthWrite = false;
	this.depthMode = 0;
	this.stencilMode = 0;
	this.stencilBothPass = 0;
	this.stencilDepthFail = 0;
	this.stencilFail = 0;
	this.stencilReferenceValue = kha_graphics4_StencilValue.Static(0);
	this.stencilReadMask = 255;
	this.stencilWriteMask = 255;
	this.blendSource = 1;
	this.blendDestination = 2;
	this.blendOperation = 0;
	this.alphaBlendSource = 1;
	this.alphaBlendDestination = 2;
	this.alphaBlendOperation = 0;
	this.colorWriteMasksRed = [];
	this.colorWriteMasksGreen = [];
	this.colorWriteMasksBlue = [];
	this.colorWriteMasksAlpha = [];
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorAttachmentCount = 1;
	this.colorAttachments = [];
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.depthStencilAttachment = 0;
	this.conservativeRasterization = false;
};
$hxClasses["kha.graphics4.PipelineStateBase"] = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineStateBase.__name__ = true;
kha_graphics4_PipelineStateBase.prototype = {
	inputLayout: null
	,vertexShader: null
	,fragmentShader: null
	,geometryShader: null
	,tessellationControlShader: null
	,tessellationEvaluationShader: null
	,cullMode: null
	,depthWrite: null
	,depthMode: null
	,stencilMode: null
	,stencilBothPass: null
	,stencilDepthFail: null
	,stencilFail: null
	,stencilReferenceValue: null
	,stencilReadMask: null
	,stencilWriteMask: null
	,blendSource: null
	,blendDestination: null
	,blendOperation: null
	,alphaBlendSource: null
	,alphaBlendDestination: null
	,alphaBlendOperation: null
	,colorWriteMasksRed: null
	,colorWriteMasksGreen: null
	,colorWriteMasksBlue: null
	,colorWriteMasksAlpha: null
	,colorAttachmentCount: null
	,colorAttachments: null
	,depthStencilAttachment: null
	,set_colorWriteMask: function(value) {
		var value1 = this.colorWriteMasksAlpha[0] = value;
		var value = this.colorWriteMasksGreen[0] = value1;
		var value1 = this.colorWriteMasksBlue[0] = value;
		return this.colorWriteMasksRed[0] = value1;
	}
	,get_colorWriteMaskRed: function() {
		return this.colorWriteMasksRed[0];
	}
	,set_colorWriteMaskRed: function(value) {
		return this.colorWriteMasksRed[0] = value;
	}
	,get_colorWriteMaskGreen: function() {
		return this.colorWriteMasksGreen[0];
	}
	,set_colorWriteMaskGreen: function(value) {
		return this.colorWriteMasksGreen[0] = value;
	}
	,get_colorWriteMaskBlue: function() {
		return this.colorWriteMasksBlue[0];
	}
	,set_colorWriteMaskBlue: function(value) {
		return this.colorWriteMasksBlue[0] = value;
	}
	,get_colorWriteMaskAlpha: function() {
		return this.colorWriteMasksAlpha[0];
	}
	,set_colorWriteMaskAlpha: function(value) {
		return this.colorWriteMasksAlpha[0] = value;
	}
	,conservativeRasterization: null
	,__class__: kha_graphics4_PipelineStateBase
	,__properties__: {set_colorWriteMaskAlpha:"set_colorWriteMaskAlpha",get_colorWriteMaskAlpha:"get_colorWriteMaskAlpha",set_colorWriteMaskBlue:"set_colorWriteMaskBlue",get_colorWriteMaskBlue:"get_colorWriteMaskBlue",set_colorWriteMaskGreen:"set_colorWriteMaskGreen",get_colorWriteMaskGreen:"get_colorWriteMaskGreen",set_colorWriteMaskRed:"set_colorWriteMaskRed",get_colorWriteMaskRed:"get_colorWriteMaskRed",set_colorWriteMask:"set_colorWriteMask"}
};
var kha_graphics4_PipelineState = function() {
	this.program = null;
	kha_graphics4_PipelineStateBase.call(this);
	this.textures = [];
	this.textureValues = [];
};
$hxClasses["kha.graphics4.PipelineState"] = kha_graphics4_PipelineState;
kha_graphics4_PipelineState.__name__ = true;
kha_graphics4_PipelineState.__super__ = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineState.prototype = $extend(kha_graphics4_PipelineStateBase.prototype,{
	program: null
	,textures: null
	,textureValues: null
	,'delete': function() {
		if(this.program != null) {
			kha_SystemImpl.gl.deleteProgram(this.program);
		}
	}
	,compile: function() {
		if(this.program != null) {
			kha_SystemImpl.gl.deleteProgram(this.program);
		}
		this.program = kha_SystemImpl.gl.createProgram();
		this.compileShader(this.vertexShader);
		this.compileShader(this.fragmentShader);
		kha_SystemImpl.gl.attachShader(this.program,this.vertexShader.shader);
		kha_SystemImpl.gl.attachShader(this.program,this.fragmentShader.shader);
		var index = 0;
		var _g = 0;
		var _g1 = this.inputLayout;
		while(_g < _g1.length) {
			var structure = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = structure.elements;
			while(_g2 < _g3.length) {
				var element = _g3[_g2];
				++_g2;
				kha_SystemImpl.gl.bindAttribLocation(this.program,index,element.name);
				if(element.data == 4) {
					index += 4;
				} else {
					++index;
				}
			}
		}
		kha_SystemImpl.gl.linkProgram(this.program);
		if(!kha_SystemImpl.gl.getProgramParameter(this.program,35714)) {
			var message = "Could not link the shader program:\n" + kha_SystemImpl.gl.getProgramInfoLog(this.program);
			haxe_Log.trace("Error: " + message,{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 49, className : "kha.graphics4.PipelineState", methodName : "compile"});
			throw haxe_Exception.thrown(message);
		}
	}
	,set: function() {
		kha_SystemImpl.gl.useProgram(this.program);
		var _g = 0;
		var _g1 = this.textureValues.length;
		while(_g < _g1) {
			var index = _g++;
			kha_SystemImpl.gl.uniform1i(this.textureValues[index],index);
		}
		kha_SystemImpl.gl.colorMask(this.colorWriteMasksRed[0],this.colorWriteMasksGreen[0],this.colorWriteMasksBlue[0],this.colorWriteMasksAlpha[0]);
	}
	,compileShader: function(shader) {
		if(shader.shader != null) {
			return;
		}
		var s = kha_SystemImpl.gl.createShader(shader.type);
		var highp = kha_SystemImpl.gl.getShaderPrecisionFormat(35632,36338);
		var highpSupported = highp.precision != 0;
		var files = shader.files;
		var _g = 0;
		var _g1 = files.length;
		while(_g < _g1) {
			var i = _g++;
			if(kha_SystemImpl.gl2) {
				if(files[i].indexOf("-webgl2") >= 0 || files[i].indexOf("runtime-string") >= 0) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			} else {
				if(!highpSupported && (files[i].indexOf("-relaxed") >= 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
				if(highpSupported && (files[i].indexOf("-relaxed") < 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			}
		}
		kha_SystemImpl.gl.compileShader(s);
		if(!kha_SystemImpl.gl.getShaderParameter(s,35713)) {
			var message = "Could not compile shader:\n" + kha_SystemImpl.gl.getShaderInfoLog(s);
			haxe_Log.trace("Error: " + message,{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 87, className : "kha.graphics4.PipelineState", methodName : "compileShader"});
			throw haxe_Exception.thrown(message);
		}
		shader.shader = s;
	}
	,getConstantLocation: function(name) {
		var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
		if(location == null) {
			haxe_Log.trace("Warning: Uniform " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 96, className : "kha.graphics4.PipelineState", methodName : "getConstantLocation"});
		}
		var type = 5126;
		var count = kha_SystemImpl.gl.getProgramParameter(this.program,35718);
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var info = kha_SystemImpl.gl.getActiveUniform(this.program,i);
			if(info.name == name || info.name == name + "[0]") {
				type = info.type;
				break;
			}
		}
		return new kha_js_graphics4_ConstantLocation(location,type);
	}
	,getTextureUnit: function(name) {
		var index = this.findTexture(name);
		if(index < 0) {
			var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
			if(location == null) {
				haxe_Log.trace("Warning: Sampler " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 115, className : "kha.graphics4.PipelineState", methodName : "getTextureUnit"});
			}
			index = this.textures.length;
			this.textureValues.push(location);
			this.textures.push(name);
		}
		return new kha_js_graphics4_TextureUnit(index);
	}
	,findTexture: function(name) {
		var _g = 0;
		var _g1 = this.textures.length;
		while(_g < _g1) {
			var index = _g++;
			if(this.textures[index] == name) {
				return index;
			}
		}
		return -1;
	}
	,__class__: kha_graphics4_PipelineState
});
var kha_graphics4_StencilValue = $hxEnums["kha.graphics4.StencilValue"] = { __ename__ : true, __constructs__ : ["Dynamic","Static"]
	,Dynamic: {_hx_index:0,__enum__:"kha.graphics4.StencilValue",toString:$estr}
	,Static: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"kha.graphics4.StencilValue",toString:$estr}; },$_.__params__ = ["value"],$_)
};
var kha_graphics4_TessellationControlShader = function(sources,files) {
};
$hxClasses["kha.graphics4.TessellationControlShader"] = kha_graphics4_TessellationControlShader;
kha_graphics4_TessellationControlShader.__name__ = true;
kha_graphics4_TessellationControlShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_TessellationControlShader
};
var kha_graphics4_TessellationEvaluationShader = function(sources,files) {
};
$hxClasses["kha.graphics4.TessellationEvaluationShader"] = kha_graphics4_TessellationEvaluationShader;
kha_graphics4_TessellationEvaluationShader.__name__ = true;
kha_graphics4_TessellationEvaluationShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_TessellationEvaluationShader
};
var kha_graphics4_TextureUnit = function() { };
$hxClasses["kha.graphics4.TextureUnit"] = kha_graphics4_TextureUnit;
kha_graphics4_TextureUnit.__name__ = true;
kha_graphics4_TextureUnit.__isInterface__ = true;
var kha_graphics4_VertexBuffer = function(vertexCount,structure,usage,instanceDataStepRate,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	if(instanceDataStepRate == null) {
		instanceDataStepRate = 0;
	}
	this.lockEnd = 0;
	this.lockStart = 0;
	this.instanceDataStepRate = instanceDataStepRate;
	this.mySize = vertexCount;
	this.myStride = 0;
	var _g = 0;
	var _g1 = structure.elements;
	while(_g < _g1.length) {
		var element = _g1[_g];
		++_g;
		switch(element.data) {
		case 0:
			this.myStride += 4;
			break;
		case 1:
			this.myStride += 8;
			break;
		case 2:
			this.myStride += 12;
			break;
		case 3:
			this.myStride += 16;
			break;
		case 4:
			this.myStride += 64;
			break;
		case 5:
			this.myStride += 4;
			break;
		case 6:
			this.myStride += 8;
			break;
		}
	}
	this.buffer = kha_SystemImpl.gl.createBuffer();
	var this1 = new Float32Array(vertexCount * this.myStride / 4 | 0);
	this._data = this1;
	this.sizes = [];
	this.offsets = [];
	this.types = [];
	this.sizes[structure.elements.length - 1] = 0;
	this.offsets[structure.elements.length - 1] = 0;
	this.types[structure.elements.length - 1] = 0;
	var offset = 0;
	var index = 0;
	var _g = 0;
	var _g1 = structure.elements;
	while(_g < _g1.length) {
		var element = _g1[_g];
		++_g;
		var size;
		var type;
		switch(element.data) {
		case 0:
			size = 1;
			type = 5126;
			break;
		case 1:
			size = 2;
			type = 5126;
			break;
		case 2:
			size = 3;
			type = 5126;
			break;
		case 3:
			size = 4;
			type = 5126;
			break;
		case 4:
			size = 16;
			type = 5126;
			break;
		case 5:
			size = 2;
			type = 5122;
			break;
		case 6:
			size = 4;
			type = 5122;
			break;
		}
		this.sizes[index] = size;
		this.offsets[index] = offset;
		this.types[index] = type;
		switch(element.data) {
		case 0:
			offset += 4;
			break;
		case 1:
			offset += 8;
			break;
		case 2:
			offset += 12;
			break;
		case 3:
			offset += 16;
			break;
		case 4:
			offset += 64;
			break;
		case 5:
			offset += 4;
			break;
		case 6:
			offset += 8;
			break;
		}
		++index;
	}
	kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
	kha_SystemImpl.gl.bufferData(34962,this._data.subarray(0 * this.stride(),this.mySize * this.stride()),usage == 1 ? 35048 : 35044);
};
$hxClasses["kha.graphics4.VertexBuffer"] = kha_graphics4_VertexBuffer;
kha_graphics4_VertexBuffer.__name__ = true;
kha_graphics4_VertexBuffer.prototype = {
	buffer: null
	,_data: null
	,mySize: null
	,myStride: null
	,sizes: null
	,offsets: null
	,types: null
	,instanceDataStepRate: null
	,lockStart: null
	,lockEnd: null
	,'delete': function() {
		this._data = null;
		kha_SystemImpl.gl.deleteBuffer(this.buffer);
	}
	,lock: function(start,count) {
		this.lockStart = start != null ? start : 0;
		this.lockEnd = count != null ? start + count : this.mySize;
		return this._data.subarray(this.lockStart * this.stride(),this.lockEnd * this.stride());
	}
	,lockInt16: function(start,count) {
		var this1 = new Int16Array(this.lock(start,count).buffer);
		return this1;
	}
	,unlock: function(count) {
		if(count != null) {
			this.lockEnd = this.lockStart + count;
		}
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		kha_SystemImpl.gl.bufferSubData(34962,this.lockStart * this.stride(),this._data.subarray(this.lockStart * this.stride(),this.lockEnd * this.stride()));
	}
	,stride: function() {
		return this.myStride;
	}
	,count: function() {
		return this.mySize;
	}
	,set: function(offset) {
		var ext = kha_SystemImpl.gl2 ? true : kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		var attributesOffset = 0;
		var _g = 0;
		var _g1 = this.sizes.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.sizes[i] > 4) {
				var size = this.sizes[i];
				var addonOffset = 0;
				while(size > 0) {
					kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
					kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,4,5126,false,this.myStride,this.offsets[i] + addonOffset);
					if(ext) {
						if(kha_SystemImpl.gl2) {
							kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
						} else {
							ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
						}
					}
					size -= 4;
					addonOffset += 16;
					++attributesOffset;
				}
			} else {
				var normalized = this.types[i] == 5126 ? false : true;
				kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
				kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,this.sizes[i],this.types[i],normalized,this.myStride,this.offsets[i]);
				if(ext) {
					if(kha_SystemImpl.gl2) {
						kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
					} else {
						ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
					}
				}
				++attributesOffset;
			}
		}
		return attributesOffset;
	}
	,__class__: kha_graphics4_VertexBuffer
};
var kha_graphics4_VertexElement = function(name,data) {
	this.name = name;
	this.data = data;
};
$hxClasses["kha.graphics4.VertexElement"] = kha_graphics4_VertexElement;
kha_graphics4_VertexElement.__name__ = true;
kha_graphics4_VertexElement.prototype = {
	name: null
	,data: null
	,__class__: kha_graphics4_VertexElement
};
var kha_graphics4_VertexShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) {
		var source = sources[_g];
		++_g;
		this.sources.push(source.toString());
	}
	this.type = 35633;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.VertexShader"] = kha_graphics4_VertexShader;
kha_graphics4_VertexShader.__name__ = true;
kha_graphics4_VertexShader.fromSource = function(source) {
	var shader = new kha_graphics4_VertexShader([],["runtime-string"]);
	shader.sources.push(source);
	return shader;
};
kha_graphics4_VertexShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,'delete': function() {
		kha_SystemImpl.gl.deleteShader(this.shader);
		this.shader = null;
		this.sources = null;
	}
	,__class__: kha_graphics4_VertexShader
};
var kha_graphics4_VertexStructure = function() {
	this.elements = [];
	this.instanced = false;
};
$hxClasses["kha.graphics4.VertexStructure"] = kha_graphics4_VertexStructure;
kha_graphics4_VertexStructure.__name__ = true;
kha_graphics4_VertexStructure.prototype = {
	elements: null
	,instanced: null
	,add: function(name,data) {
		this.elements.push(new kha_graphics4_VertexElement(name,data));
	}
	,size: function() {
		return this.elements.length;
	}
	,byteSize: function() {
		var byteSize = 0;
		var _g = 0;
		var _g1 = this.elements.length;
		while(_g < _g1) {
			var i = _g++;
			byteSize += this.dataByteSize(this.elements[i].data);
		}
		return byteSize;
	}
	,dataByteSize: function(data) {
		switch(data) {
		case 0:
			return 4;
		case 1:
			return 8;
		case 2:
			return 12;
		case 3:
			return 16;
		case 4:
			return 64;
		case 5:
			return 4;
		case 6:
			return 8;
		}
	}
	,get: function(index) {
		return this.elements[index];
	}
	,__class__: kha_graphics4_VertexStructure
};
var kha_input_Gamepad = $hx_exports["kha"]["input"]["Gamepad"] = function(index,id) {
	if(id == null) {
		id = "unknown";
	}
	if(index == null) {
		index = 0;
	}
	this.index = index;
	this.axisListeners = [];
	this.buttonListeners = [];
	kha_input_Gamepad.instances[index] = this;
};
$hxClasses["kha.input.Gamepad"] = kha_input_Gamepad;
kha_input_Gamepad.__name__ = true;
kha_input_Gamepad.get = function(index) {
	if(index == null) {
		index = 0;
	}
	if(index >= kha_input_Gamepad.instances.length) {
		return null;
	}
	return kha_input_Gamepad.instances[index];
};
kha_input_Gamepad.notifyOnConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		kha_input_Gamepad.connectListeners.push(connectListener);
	}
	if(disconnectListener != null) {
		kha_input_Gamepad.disconnectListeners.push(disconnectListener);
	}
};
kha_input_Gamepad.removeConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.connectListeners,connectListener);
	}
	if(disconnectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.disconnectListeners,disconnectListener);
	}
};
kha_input_Gamepad.sendConnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = true;
	var _g = 0;
	var _g1 = kha_input_Gamepad.connectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.sendDisconnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = false;
	var _g = 0;
	var _g1 = kha_input_Gamepad.disconnectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.prototype = {
	index: null
	,notify: function(axisListener,buttonListener) {
		if(axisListener != null) {
			this.axisListeners.push(axisListener);
		}
		if(buttonListener != null) {
			this.buttonListeners.push(buttonListener);
		}
	}
	,remove: function(axisListener,buttonListener) {
		if(axisListener != null) {
			HxOverrides.remove(this.axisListeners,axisListener);
		}
		if(buttonListener != null) {
			HxOverrides.remove(this.buttonListeners,buttonListener);
		}
	}
	,axisListeners: null
	,buttonListeners: null
	,id: null
	,vendor: null
	,connected: null
	,get_id: function() {
		return kha_SystemImpl.getGamepadId(this.index);
	}
	,get_vendor: function() {
		return kha_SystemImpl.getGamepadVendor(this.index);
	}
	,sendAxisEvent: function(axis,value) {
		var _g = 0;
		var _g1 = this.axisListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(axis,value);
		}
	}
	,sendButtonEvent: function(button,value) {
		var _g = 0;
		var _g1 = this.buttonListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(button,value);
		}
	}
	,__class__: kha_input_Gamepad
	,__properties__: {get_vendor:"get_vendor",get_id:"get_id"}
};
var kha_input_BlockInterventions = $hxEnums["kha.input.BlockInterventions"] = { __ename__ : true, __constructs__ : ["Default","Full","None","Custom"]
	,Default: {_hx_index:0,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Full: {_hx_index:1,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,None: {_hx_index:2,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:3,func:func,__enum__:"kha.input.BlockInterventions",toString:$estr}; },$_.__params__ = ["func"],$_)
};
var kha_netsync_Controller = function() {
	this.__id = kha_netsync_ControllerBuilder.nextId++;
	this._inputBuffer = new haxe_io_Bytes(new ArrayBuffer(1));
};
$hxClasses["kha.netsync.Controller"] = kha_netsync_Controller;
kha_netsync_Controller.__name__ = true;
kha_netsync_Controller.prototype = {
	__id: null
	,_inputBufferIndex: null
	,_inputBuffer: null
	,_id: function() {
		return this.__id;
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_netsync_Controller
};
var kha_input_Keyboard = $hx_exports["kha"]["input"]["Keyboard"] = function() {
	kha_netsync_Controller.call(this);
	this.downListeners = [];
	this.upListeners = [];
	this.pressListeners = [];
	kha_input_Keyboard.instance = this;
};
$hxClasses["kha.input.Keyboard"] = kha_input_Keyboard;
kha_input_Keyboard.__name__ = true;
kha_input_Keyboard.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getKeyboard(num);
};
kha_input_Keyboard.disableSystemInterventions = function(behavior) {
	kha_input_Keyboard.keyBehavior = behavior;
};
kha_input_Keyboard.instance = null;
kha_input_Keyboard.__super__ = kha_netsync_Controller;
kha_input_Keyboard.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			this.downListeners.push(downListener);
		}
		if(upListener != null) {
			this.upListeners.push(upListener);
		}
		if(pressListener != null) {
			this.pressListeners.push(pressListener);
		}
	}
	,remove: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			HxOverrides.remove(this.downListeners,downListener);
		}
		if(upListener != null) {
			HxOverrides.remove(this.upListeners,upListener);
		}
		if(pressListener != null) {
			HxOverrides.remove(this.pressListeners,pressListener);
		}
	}
	,show: function() {
	}
	,hide: function() {
	}
	,downListeners: null
	,upListeners: null
	,pressListeners: null
	,sendDownEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,0);
			bytes.b[4] = code;
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.downListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendUpEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,1);
			bytes.b[4] = code;
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.upListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendPressEvent: function(char) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,2);
			bytes.b[4] = HxOverrides.cca(char,0);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.pressListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(char);
		}
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			var input0 = bytes.b[4];
			this.sendDownEvent(input0);
			return;
		}
		if(funcindex == 1) {
			var input0 = bytes.b[4];
			this.sendUpEvent(input0);
			return;
		}
		if(funcindex == 2) {
			var code = bytes.b[4];
			var input0 = String.fromCodePoint(code);
			this.sendPressEvent(input0);
			return;
		}
	}
	,__class__: kha_input_Keyboard
});
var kha_input_MouseEventBlockBehavior = $hxEnums["kha.input.MouseEventBlockBehavior"] = { __ename__ : true, __constructs__ : ["Full","None","Custom"]
	,Full: {_hx_index:0,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}
	,None: {_hx_index:1,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:2,func:func,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}; },$_.__params__ = ["func"],$_)
};
var kha_input_MouseCursor = $hxEnums["kha.input.MouseCursor"] = { __ename__ : true, __constructs__ : ["Default","Pointer","Text","EastWestResize","NorthSouthResize","NorthEastResize","SouthEastResize","NorthWestResize","SouthWestResize","Grab","Grabbing","NotAllowed","Wait","Crosshair"]
	,Default: {_hx_index:0,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Pointer: {_hx_index:1,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Text: {_hx_index:2,__enum__:"kha.input.MouseCursor",toString:$estr}
	,EastWestResize: {_hx_index:3,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NorthSouthResize: {_hx_index:4,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NorthEastResize: {_hx_index:5,__enum__:"kha.input.MouseCursor",toString:$estr}
	,SouthEastResize: {_hx_index:6,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NorthWestResize: {_hx_index:7,__enum__:"kha.input.MouseCursor",toString:$estr}
	,SouthWestResize: {_hx_index:8,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Grab: {_hx_index:9,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Grabbing: {_hx_index:10,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NotAllowed: {_hx_index:11,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Wait: {_hx_index:12,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Crosshair: {_hx_index:13,__enum__:"kha.input.MouseCursor",toString:$estr}
};
var kha_input_Mouse = $hx_exports["kha"]["input"]["Mouse"] = function() {
	kha_netsync_Controller.call(this);
	kha_input_Mouse.instance = this;
};
$hxClasses["kha.input.Mouse"] = kha_input_Mouse;
kha_input_Mouse.__name__ = true;
kha_input_Mouse.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getMouse(num);
};
kha_input_Mouse.setWheelEventBlockBehavior = function(behavior) {
	kha_input_Mouse.wheelEventBlockBehavior = behavior;
};
kha_input_Mouse.instance = null;
kha_input_Mouse.__super__ = kha_netsync_Controller;
kha_input_Mouse.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,remove: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners == null) {
				this.windowWheelListeners = [];
			}
			while(this.windowWheelListeners.length <= windowId) this.windowWheelListeners.push([]);
			this.windowWheelListeners[windowId].push(wheelListener);
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners == null) {
				this.windowLeaveListeners = [];
			}
			while(this.windowLeaveListeners.length <= windowId) this.windowLeaveListeners.push([]);
			this.windowLeaveListeners[windowId].push(leaveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners != null) {
				if(windowId < this.windowDownListeners.length) {
					HxOverrides.remove(this.windowDownListeners[windowId],downListener);
				} else {
					haxe_Log.trace("no downListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 147, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no downListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 151, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(upListener != null) {
			if(this.windowUpListeners != null) {
				if(windowId < this.windowUpListeners.length) {
					HxOverrides.remove(this.windowUpListeners[windowId],upListener);
				} else {
					haxe_Log.trace("no upListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 161, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no upListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 165, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(moveListener != null) {
			if(this.windowMoveListeners != null) {
				if(windowId < this.windowMoveListeners.length) {
					HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
				} else {
					haxe_Log.trace("no moveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 175, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no moveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 179, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners != null) {
				if(windowId < this.windowWheelListeners.length) {
					HxOverrides.remove(this.windowWheelListeners[windowId],wheelListener);
				} else {
					haxe_Log.trace("no wheelListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 189, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no wheelListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 193, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners != null) {
				if(windowId < this.windowLeaveListeners.length) {
					HxOverrides.remove(this.windowLeaveListeners[windowId],leaveListener);
				} else {
					haxe_Log.trace("no leaveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 203, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no leaveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 207, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
	}
	,lock: function() {
	}
	,unlock: function() {
	}
	,canLock: function() {
		return false;
	}
	,isLocked: function() {
		return false;
	}
	,notifyOnLockChange: function(change,error) {
	}
	,removeFromLockChange: function(change,error) {
	}
	,hideSystemCursor: function() {
	}
	,showSystemCursor: function() {
	}
	,setSystemCursor: function(cursor) {
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,windowWheelListeners: null
	,windowLeaveListeners: null
	,sendLeaveEvent: function(windowId) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(8));
			bytes.setInt32(0,0);
			bytes.setInt32(4,windowId);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowLeaveListeners != null) {
			var _g = 0;
			var _g1 = this.windowLeaveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener();
			}
		}
	}
	,sendDownEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,1);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendUpEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,2);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,movementX,movementY) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(24));
			bytes.setInt32(0,3);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,x);
			bytes.setInt32(12,y);
			bytes.setInt32(16,movementX);
			bytes.setInt32(20,movementY);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,movementX,movementY);
			}
		}
	}
	,sendWheelEvent: function(windowId,delta) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(12));
			bytes.setInt32(0,4);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,delta);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowWheelListeners != null) {
			var _g = 0;
			var _g1 = this.windowWheelListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(delta);
			}
		}
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			var input0 = bytes.getInt32(4);
			this.sendLeaveEvent(input0);
			return;
		}
		if(funcindex == 1) {
			var input0 = bytes.getInt32(4);
			var input1 = bytes.getInt32(8);
			var input2 = bytes.getInt32(12);
			var input3 = bytes.getInt32(16);
			this.sendDownEvent(input0,input1,input2,input3);
			return;
		}
		if(funcindex == 2) {
			var input0 = bytes.getInt32(4);
			var input1 = bytes.getInt32(8);
			var input2 = bytes.getInt32(12);
			var input3 = bytes.getInt32(16);
			this.sendUpEvent(input0,input1,input2,input3);
			return;
		}
		if(funcindex == 3) {
			var input0 = bytes.getInt32(4);
			var input1 = bytes.getInt32(8);
			var input2 = bytes.getInt32(12);
			var input3 = bytes.getInt32(16);
			var input4 = bytes.getInt32(20);
			this.sendMoveEvent(input0,input1,input2,input3,input4);
			return;
		}
		if(funcindex == 4) {
			var input0 = bytes.getInt32(4);
			var input1 = bytes.getInt32(8);
			this.sendWheelEvent(input0,input1);
			return;
		}
	}
	,__class__: kha_input_Mouse
});
var kha_input_MouseImpl = function() {
	kha_input_Mouse.call(this);
};
$hxClasses["kha.input.MouseImpl"] = kha_input_MouseImpl;
kha_input_MouseImpl.__name__ = true;
kha_input_MouseImpl.__super__ = kha_input_Mouse;
kha_input_MouseImpl.prototype = $extend(kha_input_Mouse.prototype,{
	lock: function() {
		kha_SystemImpl.lockMouse();
	}
	,unlock: function() {
		kha_SystemImpl.unlockMouse();
	}
	,canLock: function() {
		return kha_SystemImpl.canLockMouse();
	}
	,isLocked: function() {
		return kha_SystemImpl.isMouseLocked();
	}
	,notifyOnLockChange: function(func,error) {
		kha_SystemImpl.notifyOfMouseLockChange(func,error);
	}
	,removeFromLockChange: function(func,error) {
		kha_SystemImpl.removeFromMouseLockChange(func,error);
	}
	,hideSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "none";
	}
	,showSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "default";
	}
	,setSystemCursor: function(cursor) {
		var tmp;
		switch(cursor._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "text";
			break;
		case 3:
			tmp = "ew-resize";
			break;
		case 4:
			tmp = "ns-resize";
			break;
		case 5:
			tmp = "ne-resize";
			break;
		case 6:
			tmp = "se-resize";
			break;
		case 7:
			tmp = "nw-resize";
			break;
		case 8:
			tmp = "sw-resize";
			break;
		case 9:
			tmp = "grab";
			break;
		case 10:
			tmp = "grabbing";
			break;
		case 11:
			tmp = "not-allowed";
			break;
		case 12:
			tmp = "wait";
			break;
		case 13:
			tmp = "crosshair";
			break;
		}
		kha_SystemImpl.khanvas.style.cursor = tmp;
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
	}
	,__class__: kha_input_MouseImpl
});
var kha_input_Pen = function() {
	kha_input_Pen.instance = this;
};
$hxClasses["kha.input.Pen"] = kha_input_Pen;
kha_input_Pen.__name__ = true;
kha_input_Pen.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getPen(num);
};
kha_input_Pen.instance = null;
kha_input_Pen.prototype = {
	notify: function(downListener,upListener,moveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener);
	}
	,remove: function(downListener,upListener,moveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener) {
		if(downListener != null && this.windowDownListeners != null) {
			if(windowId < this.windowDownListeners.length) {
				HxOverrides.remove(this.windowDownListeners[windowId],downListener);
			}
		}
		if(upListener != null && this.windowUpListeners != null) {
			if(windowId < this.windowUpListeners.length) {
				HxOverrides.remove(this.windowUpListeners[windowId],upListener);
			}
		}
		if(moveListener != null && this.windowMoveListeners != null) {
			if(windowId < this.windowMoveListeners.length) {
				HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
			}
		}
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,sendDownEvent: function(windowId,x,y,pressure) {
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendUpEvent: function(windowId,x,y,pressure) {
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,pressure) {
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,__class__: kha_input_Pen
};
var kha_input_Sensor = function() {
	this.listeners = [];
};
$hxClasses["kha.input.Sensor"] = kha_input_Sensor;
kha_input_Sensor.__name__ = true;
kha_input_Sensor.get = function(type) {
	switch(type) {
	case 0:
		return kha_input_Sensor.accelerometer;
	case 1:
		return kha_input_Sensor.gyroscope;
	}
};
kha_input_Sensor._changed = function(type,x,y,z) {
	var sensor = kha_input_Sensor.get(type == 0 ? 0 : 1);
	var _g = 0;
	var _g1 = sensor.listeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(x,y,z);
	}
};
kha_input_Sensor.prototype = {
	listeners: null
	,notify: function(listener) {
		if(!kha_input_Sensor.isInited) {
			kha_SystemImpl.initSensor();
			kha_input_Sensor.isInited = true;
		}
		this.listeners.push(listener);
	}
	,__class__: kha_input_Sensor
};
var kha_input_TouchDownEventBlockBehavior = $hxEnums["kha.input.TouchDownEventBlockBehavior"] = { __ename__ : true, __constructs__ : ["Full","None","Custom"]
	,Full: {_hx_index:0,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}
	,None: {_hx_index:1,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:2,func:func,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}; },$_.__params__ = ["func"],$_)
};
var kha_input_Surface = $hx_exports["kha"]["input"]["Surface"] = function() {
	this.touchStartListeners = [];
	this.touchEndListeners = [];
	this.moveListeners = [];
	kha_input_Surface.instance = this;
};
$hxClasses["kha.input.Surface"] = kha_input_Surface;
kha_input_Surface.__name__ = true;
kha_input_Surface.get = function(num) {
	if(num == null) {
		num = 0;
	}
	if(num != 0) {
		return null;
	}
	return kha_input_Surface.instance;
};
kha_input_Surface.setTouchDownEventBlockBehavior = function(behavior) {
	kha_input_Surface.touchDownEventBlockBehavior = behavior;
};
kha_input_Surface.instance = null;
kha_input_Surface.prototype = {
	notify: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			this.touchStartListeners.push(touchStartListener);
		}
		if(touchEndListener != null) {
			this.touchEndListeners.push(touchEndListener);
		}
		if(moveListener != null) {
			this.moveListeners.push(moveListener);
		}
	}
	,remove: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			HxOverrides.remove(this.touchStartListeners,touchStartListener);
		}
		if(touchEndListener != null) {
			HxOverrides.remove(this.touchEndListeners,touchEndListener);
		}
		if(moveListener != null) {
			HxOverrides.remove(this.moveListeners,moveListener);
		}
	}
	,touchStartListeners: null
	,touchEndListeners: null
	,moveListeners: null
	,sendTouchStartEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchStartListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendTouchEndEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchEndListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendMoveEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.moveListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,__class__: kha_input_Surface
};
var kha_internal_HdrFormat = function() {
};
$hxClasses["kha.internal.HdrFormat"] = kha_internal_HdrFormat;
kha_internal_HdrFormat.__name__ = true;
kha_internal_HdrFormat.buffer = null;
kha_internal_HdrFormat.bufferLength = null;
kha_internal_HdrFormat.fileOffset = null;
kha_internal_HdrFormat.readBuf = function(buf) {
	var bytesRead = 0;
	while(true) {
		buf[bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < buf.length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readBufOffset = function(buf,offset,length) {
	var bytesRead = 0;
	while(true) {
		buf[offset + bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readPixelsRaw = function(buffer,data,offset,numpixels) {
	var numExpected = 4 * numpixels;
	var numRead = kha_internal_HdrFormat.readBufOffset(data,offset,numExpected);
	if(numRead < numExpected) {
		haxe_Log.trace("Error reading raw pixels: got " + numRead + " bytes, expected " + numExpected,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 43, className : "kha.internal.HdrFormat", methodName : "readPixelsRaw"});
		return;
	}
};
kha_internal_HdrFormat.readPixelsRawRLE = function(buffer,data,offset,scanline_width,num_scanlines) {
	var this1 = new Uint8Array(4);
	var rgbe = this1;
	var scanline_buffer = null;
	var ptr;
	var ptr_end;
	var count;
	var this1 = new Uint8Array(2);
	var buf = this1;
	var bufferLength = buffer.length;
	while(num_scanlines > 0) {
		if(kha_internal_HdrFormat.readBuf(rgbe) < rgbe.length) {
			haxe_Log.trace("Error reading bytes: expected " + rgbe.length,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 59, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(rgbe[0] != 2 || rgbe[1] != 2 || (rgbe[2] & 128) != 0) {
			data[offset++] = rgbe[0];
			data[offset++] = rgbe[1];
			data[offset++] = rgbe[2];
			data[offset++] = rgbe[3];
			kha_internal_HdrFormat.readPixelsRaw(buffer,data,offset,scanline_width * num_scanlines - 1);
			return;
		}
		if(((rgbe[2] & 255) << 8 | rgbe[3] & 255) != scanline_width) {
			haxe_Log.trace("Wrong scanline width " + ((rgbe[2] & 255) << 8 | rgbe[3] & 255) + ", expected " + scanline_width,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 74, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(scanline_buffer == null) {
			var this1 = new Uint8Array(4 * scanline_width);
			scanline_buffer = this1;
		}
		ptr = 0;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			ptr_end = (i + 1) * scanline_width;
			while(ptr < ptr_end) {
				if(kha_internal_HdrFormat.readBuf(buf) < buf.length) {
					haxe_Log.trace("Error reading 2-byte buffer",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 88, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
					return;
				}
				if((buf[0] & 255) > 128) {
					count = (buf[0] & 255) - 128;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 95, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					while(count-- > 0) scanline_buffer[ptr++] = buf[1];
				} else {
					count = buf[0] & 255;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 106, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					scanline_buffer[ptr++] = buf[1];
					if(--count > 0) {
						if(kha_internal_HdrFormat.readBufOffset(scanline_buffer,ptr,count) < count) {
							haxe_Log.trace("Error reading non-run data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 112, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
							return;
						}
						ptr += count;
					}
				}
			}
		}
		var _g1 = 0;
		var _g2 = scanline_width;
		while(_g1 < _g2) {
			var i1 = _g1++;
			data[offset] = scanline_buffer[i1];
			data[offset + 1] = scanline_buffer[i1 + scanline_width];
			data[offset + 2] = scanline_buffer[i1 + 2 * scanline_width];
			data[offset + 3] = scanline_buffer[i1 + 3 * scanline_width];
			offset += 4;
		}
		--num_scanlines;
	}
};
kha_internal_HdrFormat.readLine = function() {
	var buf = "";
	while(true) {
		var b = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(b == 10) {
			++kha_internal_HdrFormat.fileOffset;
			break;
		}
		buf += String.fromCodePoint(b);
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength)) {
			break;
		}
	}
	return buf;
};
kha_internal_HdrFormat.parse = function(bytes) {
	kha_internal_HdrFormat.buffer = haxe_io_UInt8Array.fromBytes(bytes);
	kha_internal_HdrFormat.bufferLength = kha_internal_HdrFormat.buffer.length;
	kha_internal_HdrFormat.fileOffset = 0;
	var width = 0;
	var height = 0;
	var exposure = 1.0;
	var gamma = 1.0;
	var rle = false;
	var _g = 0;
	while(_g < 20) {
		var i = _g++;
		var line = kha_internal_HdrFormat.readLine();
		if(kha_internal_HdrFormat.formatPattern.match(line)) {
			rle = true;
		} else if(kha_internal_HdrFormat.exposurePattern.match(line)) {
			exposure = parseFloat(kha_internal_HdrFormat.exposurePattern.matched(1));
		} else if(kha_internal_HdrFormat.widthHeightPattern.match(line)) {
			height = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(1));
			width = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(2));
			break;
		}
	}
	if(!rle) {
		haxe_Log.trace("File is not run length encoded!",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 175, className : "kha.internal.HdrFormat", methodName : "parse"});
		return null;
	}
	var this1 = new Uint8Array(width * height * 4);
	var data = this1;
	var scanline_width = width;
	var num_scanlines = height;
	kha_internal_HdrFormat.readPixelsRawRLE(kha_internal_HdrFormat.buffer,data,0,scanline_width,num_scanlines);
	var this1 = new Float32Array(width * height * 4);
	var floatData = this1;
	var offset = 0;
	while(offset < data.length) {
		var r = data[offset] / 255;
		var g = data[offset + 1] / 255;
		var b = data[offset + 2] / 255;
		var e = data[offset + 3];
		var f = Math.pow(2.0,e - 128.0);
		r *= f;
		g *= f;
		b *= f;
		floatData[offset] = r;
		floatData[offset + 1] = g;
		floatData[offset + 2] = b;
		floatData[offset + 3] = 1.0;
		offset += 4;
	}
	return { width : width, height : height, data : floatData};
};
kha_internal_HdrFormat.prototype = {
	__class__: kha_internal_HdrFormat
};
var kha_js_AEAudioChannel = function(element,looping) {
	this.stopped = false;
	this.element = element;
	this.looping = looping;
};
$hxClasses["kha.js.AEAudioChannel"] = kha_js_AEAudioChannel;
kha_js_AEAudioChannel.__name__ = true;
kha_js_AEAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_AEAudioChannel.prototype = {
	element: null
	,stopped: null
	,looping: null
	,play: function() {
		this.stopped = false;
		this.element.play();
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(e,{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 26, className : "kha.js.AEAudioChannel", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
			this.stopped = true;
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(e,{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 37, className : "kha.js.AEAudioChannel", methodName : "stop"});
		}
	}
	,get_length: function() {
		var f = this.element.duration;
		if(isFinite(f)) {
			return this.element.duration;
		} else {
			return Infinity;
		}
	}
	,get_position: function() {
		return this.element.currentTime;
	}
	,set_position: function(value) {
		return this.element.currentTime = value;
	}
	,get_volume: function() {
		return this.element.volume;
	}
	,set_volume: function(value) {
		return this.element.volume = value;
	}
	,get_finished: function() {
		if(!this.stopped) {
			if(!this.looping) {
				return this.get_position() >= this.get_length();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: kha_js_AEAudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_js_AudioElementAudio = function() { };
$hxClasses["kha.js.AudioElementAudio"] = kha_js_AudioElementAudio;
kha_js_AudioElementAudio.__name__ = true;
kha_js_AudioElementAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_AudioElementAudio.stream(sound,loop);
};
kha_js_AudioElementAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	sound.element.loop = loop;
	var channel = new kha_js_AEAudioChannel(sound.element,loop);
	channel.play();
	return channel;
};
var kha_js_CanvasGraphics = function(canvas) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.clipping = false;
	kha_graphics2_Graphics.call(this);
	this.canvas = canvas;
	kha_js_CanvasGraphics.instance = this;
	this.myColor = kha_Color.fromBytes(0,0,0);
};
$hxClasses["kha.js.CanvasGraphics"] = kha_js_CanvasGraphics;
kha_js_CanvasGraphics.__name__ = true;
kha_js_CanvasGraphics.instance = null;
kha_js_CanvasGraphics.stringWidth = function(font,text) {
	if(kha_js_CanvasGraphics.instance == null) {
		return 5 * text.length;
	} else {
		kha_js_CanvasGraphics.instance.set_font(font);
		return kha_js_CanvasGraphics.instance.canvas.measureText(text).width;
	}
};
kha_js_CanvasGraphics.__super__ = kha_graphics2_Graphics;
kha_js_CanvasGraphics.prototype = $extend(kha_graphics2_Graphics.prototype,{
	canvas: null
	,webfont: null
	,myColor: null
	,scaleQuality: null
	,clipping: null
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(clear) {
			this.clear(clearColor);
		}
	}
	,clear: function(color) {
		if(color == null) {
			color = 0;
		}
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		if((color >>> 24) * 0.00392156862745098 == 0) {
			this.canvas.clearRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		} else {
			this.canvas.fillRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		}
		this.set_color(this.myColor);
	}
	,end: function() {
	}
	,drawImage: function(img,x,y) {
		this.canvas.globalAlpha = this.get_opacity();
		this.canvas.drawImage((js_Boot.__cast(img , kha_CanvasImage)).image,x,y);
		this.canvas.globalAlpha = 1;
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.canvas.globalAlpha = this.get_opacity();
		try {
			if(dw < 0 || dh < 0) {
				this.canvas.save();
				this.canvas.translate(dx,dy);
				var x = 0.0;
				var y = 0.0;
				if(dw < 0) {
					this.canvas.scale(-1,1);
					x = -dw;
				}
				if(dh < 0) {
					this.canvas.scale(1,-1);
					y = -dh;
				}
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,x,y,dw,dh);
				this.canvas.restore();
			} else {
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,dx,dy,dw,dh);
			}
		} catch( _g ) {
		}
		this.canvas.globalAlpha = 1;
	}
	,set_color: function(color) {
		this.myColor = color;
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		return color;
	}
	,get_color: function() {
		return this.myColor;
	}
	,get_imageScaleQuality: function() {
		return this.scaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		if(value == 0) {
			this.canvas.mozImageSmoothingEnabled = false;
			this.canvas.webkitImageSmoothingEnabled = false;
			this.canvas.msImageSmoothingEnabled = false;
			this.canvas.imageSmoothingEnabled = false;
		} else {
			this.canvas.mozImageSmoothingEnabled = true;
			this.canvas.webkitImageSmoothingEnabled = true;
			this.canvas.msImageSmoothingEnabled = true;
			this.canvas.imageSmoothingEnabled = true;
		}
		return this.scaleQuality = value;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.rect(x,y,width,height);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,fillRect: function(x,y,width,height) {
		var tmp = this.get_opacity();
		this.canvas.globalAlpha = tmp * ((this.myColor >>> 24) * 0.00392156862745098);
		this.canvas.fillRect(x,y,width,height);
		this.canvas.globalAlpha = this.get_opacity();
	}
	,drawArc: function(cx,cy,radius,sAngle,eAngle,strength,ccw) {
		if(ccw == null) {
			ccw = false;
		}
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,drawCircle: function(cx,cy,radius,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		var eAngle = 2 * Math.PI;
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,0,eAngle,false);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,_drawArc: function(cx,cy,radius,sAngle,eAngle,strength,ccw) {
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,fillArc: function(cx,cy,radius,sAngle,eAngle,ccw) {
		if(ccw == null) {
			ccw = false;
		}
		this.canvas.beginPath();
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.fill();
	}
	,fillCircle: function(cx,cy,radius) {
		this.canvas.beginPath();
		this.canvas.arc(cx,cy,radius,0,2 * Math.PI,false);
		this.canvas.fill();
	}
	,bakedQuadCache: null
	,drawString: function(text,x,y) {
		var image = this.webfont.getImage(this.get_fontSize(),this.myColor);
		if(image.width > 0) {
			var xpos = x;
			var ypos = y;
			var _g = 0;
			var _g1 = text.length;
			while(_g < _g1) {
				var i = _g++;
				var q = this.webfont.kravur._get(this.get_fontSize()).getBakedQuad(this.bakedQuadCache,kha_graphics2_Graphics.fontGlyphs.indexOf(HxOverrides.cca(text,i)),xpos,ypos);
				if(q != null) {
					if(q.s1 - q.s0 > 0 && q.t1 - q.t0 > 0 && q.x1 - q.x0 > 0 && q.y1 - q.y0 > 0) {
						this.canvas.drawImage(image,q.s0 * image.width,q.t0 * image.height,(q.s1 - q.s0) * image.width,(q.t1 - q.t0) * image.height,q.x0,q.y0,q.x1 - q.x0,q.y1 - q.y0);
					}
					xpos += q.xadvance;
				}
			}
		}
	}
	,drawCharacters: function(text,start,length,x,y) {
		var image = this.webfont.getImage(this.get_fontSize(),this.myColor);
		if(image.width > 0) {
			var xpos = x;
			var ypos = y;
			var _g = start;
			var _g1 = start + length;
			while(_g < _g1) {
				var i = _g++;
				var q = this.webfont.kravur._get(this.get_fontSize()).getBakedQuad(this.bakedQuadCache,kha_graphics2_Graphics.fontGlyphs.indexOf(text[i]),xpos,ypos);
				if(q != null) {
					if(q.s1 - q.s0 > 0 && q.t1 - q.t0 > 0 && q.x1 - q.x0 > 0 && q.y1 - q.y0 > 0) {
						this.canvas.drawImage(image,q.s0 * image.width,q.t0 * image.height,(q.s1 - q.s0) * image.width,(q.t1 - q.t0) * image.height,q.x0,q.y0,q.x1 - q.x0,q.y1 - q.y0);
					}
					xpos += q.xadvance;
				}
			}
		}
	}
	,set_font: function(font) {
		this.webfont = js_Boot.__cast(font , kha_js_Font);
		return this.webfont;
	}
	,get_font: function() {
		return this.webfont;
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldWith = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.moveTo(0,0);
		this.canvas.stroke();
		this.canvas.lineWidth = oldWith;
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.canvas.beginPath();
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.lineTo(x3,y3);
		this.canvas.closePath();
		this.canvas.fill();
	}
	,scissor: function(x,y,width,height) {
		if(!this.clipping) {
			this.canvas.save();
			this.clipping = true;
		}
		this.canvas.beginPath();
		this.canvas.rect(x,y,width,height);
		this.canvas.clip();
	}
	,disableScissor: function() {
		if(this.clipping) {
			this.canvas.restore();
			this.clipping = false;
		}
	}
	,drawVideo: function(video,x,y,width,height) {
		this.canvas.drawImage((js_Boot.__cast(video , kha_js_Video)).element,x,y,width,height);
	}
	,setTransformation: function(transformation) {
		this.canvas.setTransform(transformation._00,transformation._01,transformation._10,transformation._11,transformation._20,transformation._21);
	}
	,__class__: kha_js_CanvasGraphics
});
var kha_js_Font = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.kravur = new kha_js_Font.Kravur(blob);
};
$hxClasses["kha.js.Font"] = kha_js_Font;
kha_js_Font.__name__ = true;
kha_js_Font.__interfaces__ = [kha_Resource];
kha_js_Font.fromBytes = function(bytes) {
	return new kha_js_Font(kha_internal_BytesBlob.fromBytes(bytes));
};
kha_js_Font.prototype = {
	kravur: null
	,images: null
	,height: function(fontSize) {
		return this.kravur._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this.kravur._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this.kravur._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this.kravur._get(fontSize).getBaselinePosition();
	}
	,getImage: function(fontSize,color) {
		var glyphs = kha_graphics2_Graphics.fontGlyphs;
		var imageIndex = fontSize * 10000 + glyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			var this1 = this.images;
			var v = new haxe_ds_IntMap();
			this1.h[imageIndex] = v;
		}
		if(!this.images.h[imageIndex].h.hasOwnProperty(color)) {
			var kravur = this.kravur._get(fontSize);
			var canvas = window.document.createElement("canvas");
			canvas.width = kravur.width;
			canvas.height = kravur.height;
			var ctx = canvas.getContext("2d");
			ctx.fillStyle = "black";
			ctx.fillRect(0,0,kravur.width,kravur.height);
			var imageData = ctx.getImageData(0,0,kravur.width,kravur.height);
			var bytes = (js_Boot.__cast(kravur.getTexture() , kha_CanvasImage)).bytes;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				imageData.data[i * 4] = (color & 16711680) >>> 16;
				imageData.data[i * 4 + 1] = (color & 65280) >>> 8;
				imageData.data[i * 4 + 2] = color & 255;
				imageData.data[i * 4 + 3] = bytes.b[i];
			}
			ctx.putImageData(imageData,0,0);
			var img = window.document.createElement("img");
			img.src = canvas.toDataURL("image/png");
			this.images.h[imageIndex].h[color] = img;
			return img;
		}
		return this.images.h[imageIndex].h[color];
	}
	,unload: function() {
		this.kravur = null;
		this.images = null;
	}
	,__class__: kha_js_Font
};
var kha_js_MobileWebAudio = function() { };
$hxClasses["kha.js.MobileWebAudio"] = kha_js_MobileWebAudio;
kha_js_MobileWebAudio.__name__ = true;
kha_js_MobileWebAudio._context = null;
kha_js_MobileWebAudio._init = function() {
	try {
		kha_js_MobileWebAudio._context = new AudioContext();
		return;
	} catch( _g ) {
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( _g ) {
	}
};
kha_js_MobileWebAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = new kha_js_MobileWebAudioChannel(sound,loop);
	channel.play();
	return channel;
};
kha_js_MobileWebAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_MobileWebAudio.play(sound,loop);
};
var kha_js_MobileWebAudioChannel = function(sound,loop) {
	this.stopped = false;
	this.paused = false;
	this.buffer = sound._buffer;
	this.loop = loop;
	this.createSource();
};
$hxClasses["kha.js.MobileWebAudioChannel"] = kha_js_MobileWebAudioChannel;
kha_js_MobileWebAudioChannel.__name__ = true;
kha_js_MobileWebAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_MobileWebAudioChannel.prototype = {
	buffer: null
	,loop: null
	,source: null
	,gain: null
	,startTime: null
	,pauseTime: null
	,paused: null
	,stopped: null
	,createSource: function() {
		var _gthis = this;
		this.source = kha_js_MobileWebAudio._context.createBufferSource();
		this.source.loop = this.loop;
		this.source.buffer = this.buffer;
		this.source.onended = function() {
			_gthis.stopped = true;
		};
		this.gain = kha_js_MobileWebAudio._context.createGain();
		this.source.connect(this.gain);
		this.gain.connect(kha_js_MobileWebAudio._context.destination);
	}
	,play: function() {
		if(this.paused || this.stopped) {
			this.createSource();
		}
		this.stopped = false;
		if(this.paused) {
			this.paused = false;
			this.startTime = kha_js_MobileWebAudio._context.currentTime - this.pauseTime;
			this.source.start(0,this.pauseTime);
		} else {
			this.startTime = kha_js_MobileWebAudio._context.currentTime;
			this.source.start();
		}
	}
	,pause: function() {
		var wasStopped = this.paused || this.stopped;
		this.pauseTime = kha_js_MobileWebAudio._context.currentTime - this.startTime;
		this.paused = true;
		if(wasStopped) {
			return;
		}
		this.source.stop();
	}
	,stop: function() {
		var wasStopped = this.paused || this.stopped;
		this.paused = false;
		this.stopped = true;
		if(wasStopped) {
			return;
		}
		this.source.stop();
	}
	,get_length: function() {
		return this.source.buffer.duration;
	}
	,get_position: function() {
		if(this.stopped) {
			return this.get_length();
		}
		if(this.paused) {
			return this.pauseTime;
		} else {
			return kha_js_MobileWebAudio._context.currentTime - this.startTime;
		}
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.gain.gain.value;
	}
	,set_volume: function(value) {
		return this.gain.gain.value = value;
	}
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_js_MobileWebAudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_js_MobileWebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		kha_js_MobileWebAudio._context.decodeAudioData(_gthis.compressedData.b.bufferValue,function(buffer) {
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis._buffer = buffer;
			done(_gthis);
		},function() {
			failed({ url : filename, error : "Audio format not supported"});
		});
	};
	request.send(null);
};
$hxClasses["kha.js.MobileWebAudioSound"] = kha_js_MobileWebAudioSound;
kha_js_MobileWebAudioSound.__name__ = true;
kha_js_MobileWebAudioSound.__super__ = kha_Sound;
kha_js_MobileWebAudioSound.prototype = $extend(kha_Sound.prototype,{
	_buffer: null
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_MobileWebAudioSound
});
var kha_js_Sound = function(filenames,done,failed) {
	kha_Sound.call(this);
	this.done = done;
	this.failed = failed;
	kha_js_Sound.loading.push(this);
	this.element = window.document.createElement("audio");
	this.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(this.element.canPlayType("audio/ogg") != "" && StringTools.endsWith(filename,".ogg")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/wav") != "" && StringTools.endsWith(filename,".wav")) {
			this.filenames.push(filename);
		}
	}
	this.element.addEventListener("error",$bind(this,this.errorListener),false);
	this.element.addEventListener("canplay",$bind(this,this.canPlayThroughListener),false);
	this.element.src = this.filenames[0];
	this.element.preload = "auto";
	this.element.load();
};
$hxClasses["kha.js.Sound"] = kha_js_Sound;
kha_js_Sound.__name__ = true;
kha_js_Sound.__super__ = kha_Sound;
kha_js_Sound.prototype = $extend(kha_Sound.prototype,{
	filenames: null
	,done: null
	,failed: null
	,element: null
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		this.failed({ url : this.element.src});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		this.done(this);
		HxOverrides.remove(kha_js_Sound.loading,this);
	}
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_Sound
});
var kha_js_Video = function() {
	kha_Video.call(this);
};
$hxClasses["kha.js.Video"] = kha_js_Video;
kha_js_Video.__name__ = true;
kha_js_Video.fromElement = function(element) {
	var video = new kha_js_Video();
	video.element = element;
	if(kha_SystemImpl.gl != null) {
		video.texture = kha_Image.fromVideo(video);
	}
	return video;
};
kha_js_Video.fromFile = function(filenames,done) {
	var video = new kha_js_Video();
	video.done = done;
	video.element = window.document.createElement("video");
	video.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(video.element.canPlayType("video/webm") != "" && StringTools.endsWith(filename,".webm")) {
			video.filenames.push(filename);
		}
		if(video.element.canPlayType("video/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			video.filenames.push(filename);
		}
	}
	video.element.addEventListener("error",$bind(video,video.errorListener),false);
	video.element.addEventListener("canplaythrough",$bind(video,video.canPlayThroughListener),false);
	video.element.preload = "auto";
	video.element.src = video.filenames[0];
};
kha_js_Video.__super__ = kha_Video;
kha_js_Video.prototype = $extend(kha_Video.prototype,{
	filenames: null
	,element: null
	,done: null
	,texture: null
	,width: function() {
		return this.element.videoWidth;
	}
	,height: function() {
		return this.element.videoHeight;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
		try {
			this.element.loop = loop;
			this.element.play();
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(e,{ fileName : "kha/js/Video.hx", lineNumber : 64, className : "kha.js.Video", methodName : "play"});
		}
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(e,{ fileName : "kha/js/Video.hx", lineNumber : 73, className : "kha.js.Video", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace(e,{ fileName : "kha/js/Video.hx", lineNumber : 83, className : "kha.js.Video", methodName : "stop"});
		}
	}
	,getCurrentPos: function() {
		return Math.ceil(this.element.currentTime * 1000);
	}
	,get_position: function() {
		return Math.ceil(this.element.currentTime * 1000);
	}
	,set_position: function(value) {
		this.element.currentTime = value / 1000;
		return value;
	}
	,getVolume: function() {
		return this.element.volume;
	}
	,setVolume: function(volume) {
		this.element.volume = volume;
	}
	,getLength: function() {
		var f = this.element.duration;
		if(isFinite(f)) {
			return Math.floor(this.element.duration * 1000);
		} else {
			return -1;
		}
	}
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		haxe_Log.trace("Error loading " + this.element.src,{ fileName : "kha/js/Video.hx", lineNumber : 128, className : "kha.js.Video", methodName : "errorListener"});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_Image.fromVideo(this);
		}
		this.done(this);
	}
	,__class__: kha_js_Video
});
var kha_js_WebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		done(_gthis);
	};
	request.send(null);
};
$hxClasses["kha.js.WebAudioSound"] = kha_js_WebAudioSound;
kha_js_WebAudioSound.__name__ = true;
kha_js_WebAudioSound.__super__ = kha_Sound;
kha_js_WebAudioSound.prototype = $extend(kha_Sound.prototype,{
	superUncompress: function(done) {
		kha_Sound.prototype.uncompress.call(this,done);
	}
	,uncompress: function(done) {
		var _gthis = this;
		kha_audio2_Audio._context.decodeAudioData(this.compressedData.b.bufferValue,function(buffer) {
			var ch0 = buffer.getChannelData(0);
			var ch1 = buffer.numberOfChannels == 1 ? ch0 : buffer.getChannelData(1);
			var len = ch0.length;
			var this1 = new Float32Array(len * 2);
			_gthis.uncompressedData = this1;
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis.sampleRate = Math.round(buffer.sampleRate);
			var idx = 0;
			var i = 0;
			var lidx = len * 2;
			var uncompressInner = null;
			uncompressInner = function() {
				var chk_len = idx + 11025;
				var next_chk = chk_len > lidx ? lidx : chk_len;
				while(idx < next_chk) {
					_gthis.uncompressedData[idx] = ch0[i];
					_gthis.uncompressedData[idx + 1] = ch1[i];
					idx += 2;
					i += 1;
				}
				if(idx < lidx) {
					window.setTimeout(uncompressInner,0);
				} else {
					_gthis.compressedData = null;
					done();
				}
			};
			uncompressInner();
		},function() {
			_gthis.superUncompress(done);
		});
	}
	,__class__: kha_js_WebAudioSound
});
var kha_js_graphics4_ConstantLocation = function(value,type) {
	this.value = value;
	this.type = type;
};
$hxClasses["kha.js.graphics4.ConstantLocation"] = kha_js_graphics4_ConstantLocation;
kha_js_graphics4_ConstantLocation.__name__ = true;
kha_js_graphics4_ConstantLocation.__interfaces__ = [kha_graphics4_ConstantLocation];
kha_js_graphics4_ConstantLocation.prototype = {
	value: null
	,type: null
	,__class__: kha_js_graphics4_ConstantLocation
};
var kha_js_graphics4_Graphics = function(renderTarget) {
	var this1 = new Float32Array(9);
	this.matrix3Cache = this1;
	var this1 = new Float32Array(16);
	this.matrixCache = this1;
	this.useVertexAttributes = 0;
	this.isDepthAttachment = false;
	this.isCubeMap = false;
	this.colorMaskAlpha = true;
	this.colorMaskBlue = true;
	this.colorMaskGreen = true;
	this.colorMaskRed = true;
	this.depthMask = false;
	this.depthTest = false;
	this.currentPipeline = null;
	this.renderTarget = renderTarget;
	this.init();
	if(kha_SystemImpl.gl2) {
		this.instancedExtension = true;
	} else {
		this.instancedExtension = kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		this.blendMinMaxExtension = kha_SystemImpl.gl.getExtension("EXT_blend_minmax");
	}
};
$hxClasses["kha.js.graphics4.Graphics"] = kha_js_graphics4_Graphics;
kha_js_graphics4_Graphics.__name__ = true;
kha_js_graphics4_Graphics.__interfaces__ = [kha_graphics4_Graphics];
kha_js_graphics4_Graphics.getBlendFunc = function(factor) {
	switch(factor) {
	case 1:
		return 1;
	case 0:case 2:
		return 0;
	case 3:
		return 770;
	case 4:
		return 772;
	case 5:
		return 771;
	case 6:
		return 773;
	case 7:
		return 768;
	case 8:
		return 774;
	case 9:
		return 769;
	case 10:
		return 775;
	}
};
kha_js_graphics4_Graphics.getBlendOp = function(op) {
	switch(op) {
	case 0:
		return 32774;
	case 1:
		return 32778;
	case 2:
		return 32779;
	case 3:
		return 32775;
	case 4:
		return 32776;
	}
};
kha_js_graphics4_Graphics.prototype = {
	currentPipeline: null
	,depthTest: null
	,depthMask: null
	,colorMaskRed: null
	,colorMaskGreen: null
	,colorMaskBlue: null
	,colorMaskAlpha: null
	,indicesCount: null
	,renderTarget: null
	,renderTargetFrameBuffer: null
	,renderTargetMSAA: null
	,renderTargetTexture: null
	,isCubeMap: null
	,isDepthAttachment: null
	,instancedExtension: null
	,blendMinMaxExtension: null
	,useVertexAttributes: null
	,init: function() {
		if(this.renderTarget == null) {
			return;
		}
		this.isCubeMap = ((this.renderTarget) instanceof kha_graphics4_CubeMap);
		if(this.isCubeMap) {
			var cubeMap = js_Boot.__cast(this.renderTarget , kha_graphics4_CubeMap);
			this.renderTargetFrameBuffer = cubeMap.frameBuffer;
			this.renderTargetTexture = cubeMap.texture;
			this.isDepthAttachment = cubeMap.isDepthAttachment;
		} else {
			var image = js_Boot.__cast(this.renderTarget , kha_WebGLImage);
			this.renderTargetFrameBuffer = image.frameBuffer;
			this.renderTargetMSAA = image.MSAAFrameBuffer;
			this.renderTargetTexture = image.texture;
		}
	}
	,begin: function(additionalRenderTargets) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
			kha_SystemImpl.gl.viewport(0,0,kha_System.windowWidth(),kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
			if(additionalRenderTargets != null) {
				kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL,3553,this.renderTargetTexture,0);
				var _g = 0;
				var _g1 = additionalRenderTargets.length;
				while(_g < _g1) {
					var i = _g++;
					kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i + 1,3553,(js_Boot.__cast(additionalRenderTargets[i] , kha_WebGLImage)).texture,0);
				}
				var attachments = [kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL];
				var _g = 0;
				var _g1 = additionalRenderTargets.length;
				while(_g < _g1) {
					var i = _g++;
					attachments.push(kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i + 1);
				}
				if(kha_SystemImpl.gl2) {
					kha_SystemImpl.gl.drawBuffers(attachments);
				} else {
					kha_SystemImpl.drawBuffers.drawBuffersWEBGL(attachments);
				}
			}
		}
	}
	,beginFace: function(face) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
		kha_SystemImpl.gl.framebufferTexture2D(36160,this.isDepthAttachment ? 36096 : 36064,34069 + face,this.renderTargetTexture,0);
		kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
	}
	,beginEye: function(eye) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		kha_SystemImpl.gl.bindFramebuffer(36160,null);
		if(eye == 0) {
			kha_SystemImpl.gl.viewport(0,0,kha_System.windowWidth() * 0.5 | 0,kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.viewport(kha_System.windowWidth() * 0.5 | 0,0,kha_System.windowWidth() * 0.5 | 0,kha_System.windowHeight());
		}
	}
	,end: function() {
		if(this.renderTargetMSAA != null) {
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.READ_FRAMEBUFFER,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.DRAW_FRAMEBUFFER,this.renderTargetMSAA);
			kha_SystemImpl.gl.blitFramebuffer(0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),16384,9728);
		}
		var error = kha_SystemImpl.gl.getError();
		switch(error) {
		case 0:
			break;
		case 1280:
			haxe_Log.trace("WebGL error: Invalid enum",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 142, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 1281:
			haxe_Log.trace("WebGL error: Invalid value",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 144, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 1282:
			haxe_Log.trace("WebGL error: Invalid operation",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 146, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 1285:
			haxe_Log.trace("WebGL error: Out of memory",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 150, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 1286:
			haxe_Log.trace("WebGL error: Invalid framebuffer operation",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 148, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 37442:
			haxe_Log.trace("WebGL error: Context lost",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 152, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		default:
			haxe_Log.trace("Unknown WebGL error",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 154, className : "kha.js.graphics4.Graphics", methodName : "end"});
		}
	}
	,flush: function() {
	}
	,vsynced: function() {
		return true;
	}
	,refreshRate: function() {
		return 60;
	}
	,clear: function(color,depth,stencil) {
		var clearMask = 0;
		if(color != null) {
			clearMask |= 16384;
			kha_SystemImpl.gl.colorMask(true,true,true,true);
			kha_SystemImpl.gl.clearColor(((color & 16711680) >>> 16) * 0.00392156862745098,((color & 65280) >>> 8) * 0.00392156862745098,(color & 255) * 0.00392156862745098,(color >>> 24) * 0.00392156862745098);
		}
		if(depth != null) {
			clearMask |= 256;
			kha_SystemImpl.gl.enable(2929);
			kha_SystemImpl.gl.depthMask(true);
			kha_SystemImpl.gl.clearDepth(depth);
		}
		if(stencil != null) {
			clearMask |= 1024;
			kha_SystemImpl.gl.enable(2960);
			kha_SystemImpl.gl.stencilMask(255);
			kha_SystemImpl.gl.clearStencil(stencil);
		}
		kha_SystemImpl.gl.clear(clearMask);
		kha_SystemImpl.gl.colorMask(this.colorMaskRed,this.colorMaskGreen,this.colorMaskBlue,this.colorMaskAlpha);
		if(this.depthTest) {
			kha_SystemImpl.gl.enable(2929);
		} else {
			kha_SystemImpl.gl.disable(2929);
		}
		kha_SystemImpl.gl.depthMask(this.depthMask);
	}
	,viewport: function(x,y,width,height) {
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.viewport(x,kha_System.windowHeight(0) - y - height,width,height);
		} else {
			kha_SystemImpl.gl.viewport(x,y,width,height);
		}
	}
	,scissor: function(x,y,width,height) {
		kha_SystemImpl.gl.enable(3089);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.scissor(x,kha_System.windowHeight(0) - y - height,width,height);
		} else {
			kha_SystemImpl.gl.scissor(x,y,width,height);
		}
	}
	,disableScissor: function() {
		kha_SystemImpl.gl.disable(3089);
	}
	,setDepthMode: function(write,mode) {
		switch(mode) {
		case 0:
			if(write) {
				kha_SystemImpl.gl.enable(2929);
			} else {
				kha_SystemImpl.gl.disable(2929);
			}
			this.depthTest = write;
			kha_SystemImpl.gl.depthFunc(519);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(512);
			break;
		case 2:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(514);
			break;
		case 3:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(517);
			break;
		case 4:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(513);
			break;
		case 5:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(515);
			break;
		case 6:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(516);
			break;
		case 7:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(518);
			break;
		}
		kha_SystemImpl.gl.depthMask(write);
		this.depthMask = write;
	}
	,setBlendingMode: function(source,destination,operation,alphaSource,alphaDestination,alphaOperation) {
		if(source == 1 && destination == 2) {
			kha_SystemImpl.gl.disable(3042);
		} else {
			kha_SystemImpl.gl.enable(3042);
			kha_SystemImpl.gl.blendFuncSeparate(kha_js_graphics4_Graphics.getBlendFunc(source),kha_js_graphics4_Graphics.getBlendFunc(destination),kha_js_graphics4_Graphics.getBlendFunc(alphaSource),kha_js_graphics4_Graphics.getBlendFunc(alphaDestination));
			kha_SystemImpl.gl.blendEquationSeparate(kha_js_graphics4_Graphics.getBlendOp(operation),kha_js_graphics4_Graphics.getBlendOp(alphaOperation));
		}
	}
	,createVertexBuffer: function(vertexCount,structure,usage,canRead) {
		if(canRead == null) {
			canRead = false;
		}
		return new kha_graphics4_VertexBuffer(vertexCount,structure,usage);
	}
	,setVertexBuffer: function(vertexBuffer) {
		var _g = 0;
		var _g1 = this.useVertexAttributes;
		while(_g < _g1) {
			var i = _g++;
			kha_SystemImpl.gl.disableVertexAttribArray(i);
		}
		this.useVertexAttributes = (js_Boot.__cast(vertexBuffer , kha_graphics4_VertexBuffer)).set(0);
	}
	,setVertexBuffers: function(vertexBuffers) {
		var _g = 0;
		var _g1 = this.useVertexAttributes;
		while(_g < _g1) {
			var i = _g++;
			kha_SystemImpl.gl.disableVertexAttribArray(i);
		}
		var offset = 0;
		var _g = 0;
		while(_g < vertexBuffers.length) {
			var vertexBuffer = vertexBuffers[_g];
			++_g;
			offset += (js_Boot.__cast(vertexBuffer , kha_graphics4_VertexBuffer)).set(offset);
		}
		this.useVertexAttributes = offset;
	}
	,createIndexBuffer: function(indexCount,usage,canRead) {
		if(canRead == null) {
			canRead = false;
		}
		return new kha_graphics4_IndexBuffer(indexCount,usage);
	}
	,setIndexBuffer: function(indexBuffer) {
		this.indicesCount = indexBuffer.count();
		(js_Boot.__cast(indexBuffer , kha_graphics4_IndexBuffer)).set();
	}
	,setTexture: function(stage,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast(texture , kha_WebGLImage)).set((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setTextureDepth: function(stage,texture) {
		(js_Boot.__cast(texture , kha_WebGLImage)).setDepth((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
	}
	,setTextureArray: function(unit,texture) {
	}
	,setVideoTexture: function(unit,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(unit , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast((js_Boot.__cast(texture , kha_js_Video)).texture , kha_WebGLImage)).set((js_Boot.__cast(unit , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setImageTexture: function(unit,texture) {
	}
	,setTextureParameters: function(texunit,uAddressing,vAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(texunit , kha_js_graphics4_TextureUnit)).value);
		switch(uAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10242,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10242,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			break;
		}
		switch(vAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10243,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10243,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			break;
		}
		switch(minificationFilter) {
		case 0:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9984);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9986);
				break;
			}
			break;
		case 1:case 2:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9729);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9985);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9987);
				break;
			}
			if(minificationFilter == 2) {
				kha_SystemImpl.gl.texParameteri(3553,kha_SystemImpl.anisotropicFilter.TEXTURE_MAX_ANISOTROPY_EXT,4);
			}
			break;
		}
		switch(magnificationFilter) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10240,9728);
			break;
		case 1:case 2:
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			break;
		}
	}
	,setTexture3DParameters: function(texunit,uAddressing,vAddressing,wAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
	}
	,setTextureCompareMode: function(texunit,enabled) {
		if(enabled) {
			kha_SystemImpl.gl.texParameteri(3553,34892,34894);
			kha_SystemImpl.gl.texParameteri(3553,34893,515);
		} else {
			kha_SystemImpl.gl.texParameteri(3553,34892,0);
		}
	}
	,setCubeMapCompareMode: function(texunit,enabled) {
		if(enabled) {
			kha_SystemImpl.gl.texParameteri(34067,34892,34894);
			kha_SystemImpl.gl.texParameteri(34067,34893,515);
		} else {
			kha_SystemImpl.gl.texParameteri(34067,34892,0);
		}
	}
	,setCubeMap: function(stage,cubeMap) {
		if(cubeMap == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(34067,null);
		} else {
			cubeMap.set((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setCubeMapDepth: function(stage,cubeMap) {
		cubeMap.setDepth((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
	}
	,maxBoundTextures: function() {
		return kha_SystemImpl.gl.getParameter(34930);
	}
	,setCullMode: function(mode) {
		switch(mode) {
		case 0:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1029);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1028);
			break;
		case 2:
			kha_SystemImpl.gl.disable(2884);
			break;
		}
	}
	,setPipeline: function(pipe) {
		this.setCullMode(pipe.cullMode);
		this.setDepthMode(pipe.depthWrite,pipe.depthMode);
		this.setStencilParameters(pipe.stencilMode,pipe.stencilBothPass,pipe.stencilDepthFail,pipe.stencilFail,pipe.stencilReferenceValue,pipe.stencilReadMask,pipe.stencilWriteMask);
		this.setBlendingMode(pipe.blendSource,pipe.blendDestination,pipe.blendOperation,pipe.alphaBlendSource,pipe.alphaBlendDestination,pipe.alphaBlendOperation);
		this.currentPipeline = pipe;
		pipe.set();
		this.colorMaskRed = pipe.colorWriteMasksRed[0];
		this.colorMaskGreen = pipe.colorWriteMasksGreen[0];
		this.colorMaskBlue = pipe.colorWriteMasksBlue[0];
		this.colorMaskAlpha = pipe.colorWriteMasksAlpha[0];
	}
	,setStencilReferenceValue: function(value) {
		kha_SystemImpl.gl.stencilFunc(this.convertCompareMode(this.currentPipeline.stencilMode),value,this.currentPipeline.stencilReadMask);
	}
	,setBool: function(location,value) {
		kha_SystemImpl.gl.uniform1i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value ? 1 : 0);
	}
	,setInt: function(location,value) {
		kha_SystemImpl.gl.uniform1i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value);
	}
	,setInt2: function(location,value1,value2) {
		kha_SystemImpl.gl.uniform2i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2);
	}
	,setInt3: function(location,value1,value2,value3) {
		kha_SystemImpl.gl.uniform3i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3);
	}
	,setInt4: function(location,value1,value2,value3,value4) {
		kha_SystemImpl.gl.uniform4i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3,value4);
	}
	,setInts: function(location,values) {
		var webglLocation = js_Boot.__cast(location , kha_js_graphics4_ConstantLocation);
		switch(webglLocation.type) {
		case 35667:
			kha_SystemImpl.gl.uniform2iv(webglLocation.value,values);
			break;
		case 35668:
			kha_SystemImpl.gl.uniform3iv(webglLocation.value,values);
			break;
		case 35669:
			kha_SystemImpl.gl.uniform4iv(webglLocation.value,values);
			break;
		default:
			kha_SystemImpl.gl.uniform1iv(webglLocation.value,values);
		}
	}
	,setFloat: function(location,value) {
		kha_SystemImpl.gl.uniform1f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value);
	}
	,setFloat2: function(location,value1,value2) {
		kha_SystemImpl.gl.uniform2f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2);
	}
	,setFloat3: function(location,value1,value2,value3) {
		kha_SystemImpl.gl.uniform3f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3);
	}
	,setFloat4: function(location,value1,value2,value3,value4) {
		kha_SystemImpl.gl.uniform4f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3,value4);
	}
	,setFloats: function(location,values) {
		var webglLocation = js_Boot.__cast(location , kha_js_graphics4_ConstantLocation);
		switch(webglLocation.type) {
		case 35664:
			kha_SystemImpl.gl.uniform2fv(webglLocation.value,values);
			break;
		case 35665:
			kha_SystemImpl.gl.uniform3fv(webglLocation.value,values);
			break;
		case 35666:
			kha_SystemImpl.gl.uniform4fv(webglLocation.value,values);
			break;
		case 35676:
			kha_SystemImpl.gl.uniformMatrix4fv(webglLocation.value,false,values);
			break;
		default:
			kha_SystemImpl.gl.uniform1fv(webglLocation.value,values);
		}
	}
	,setVector2: function(location,value) {
		kha_SystemImpl.gl.uniform2f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y);
	}
	,setVector3: function(location,value) {
		kha_SystemImpl.gl.uniform3f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y,value.z);
	}
	,setVector4: function(location,value) {
		kha_SystemImpl.gl.uniform4f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y,value.z,value.w);
	}
	,matrixCache: null
	,setMatrix: function(location,matrix) {
		this.matrixCache[0] = matrix._00;
		this.matrixCache[1] = matrix._01;
		this.matrixCache[2] = matrix._02;
		this.matrixCache[3] = matrix._03;
		this.matrixCache[4] = matrix._10;
		this.matrixCache[5] = matrix._11;
		this.matrixCache[6] = matrix._12;
		this.matrixCache[7] = matrix._13;
		this.matrixCache[8] = matrix._20;
		this.matrixCache[9] = matrix._21;
		this.matrixCache[10] = matrix._22;
		this.matrixCache[11] = matrix._23;
		this.matrixCache[12] = matrix._30;
		this.matrixCache[13] = matrix._31;
		this.matrixCache[14] = matrix._32;
		this.matrixCache[15] = matrix._33;
		kha_SystemImpl.gl.uniformMatrix4fv((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,false,this.matrixCache);
	}
	,matrix3Cache: null
	,setMatrix3: function(location,matrix) {
		this.matrix3Cache[0] = matrix._00;
		this.matrix3Cache[1] = matrix._01;
		this.matrix3Cache[2] = matrix._02;
		this.matrix3Cache[3] = matrix._10;
		this.matrix3Cache[4] = matrix._11;
		this.matrix3Cache[5] = matrix._12;
		this.matrix3Cache[6] = matrix._20;
		this.matrix3Cache[7] = matrix._21;
		this.matrix3Cache[8] = matrix._22;
		kha_SystemImpl.gl.uniformMatrix3fv((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,false,this.matrix3Cache);
	}
	,drawIndexedVertices: function(start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
		var size = type == 5123 ? 2 : 4;
		kha_SystemImpl.gl.drawElements(4,count == -1 ? this.indicesCount : count,type,start * size);
	}
	,convertStencilAction: function(action) {
		switch(action) {
		case 0:
			return 7680;
		case 1:
			return 0;
		case 2:
			return 7681;
		case 3:
			return 7682;
		case 4:
			return 34055;
		case 5:
			return 7683;
		case 6:
			return 34056;
		case 7:
			return 5386;
		}
	}
	,convertCompareMode: function(compareMode) {
		switch(compareMode) {
		case 0:
			return 519;
		case 1:
			return 512;
		case 2:
			return 514;
		case 3:
			return 517;
		case 4:
			return 513;
		case 5:
			return 515;
		case 6:
			return 516;
		case 7:
			return 518;
		}
	}
	,setStencilParameters: function(compareMode,bothPass,depthFail,stencilFail,referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(compareMode == 0 && bothPass == 0 && depthFail == 0 && stencilFail == 0) {
			kha_SystemImpl.gl.disable(2960);
		} else {
			kha_SystemImpl.gl.enable(2960);
			var stencilFunc = this.convertCompareMode(compareMode);
			kha_SystemImpl.gl.stencilMask(writeMask);
			kha_SystemImpl.gl.stencilOp(this.convertStencilAction(stencilFail),this.convertStencilAction(depthFail),this.convertStencilAction(bothPass));
			switch(referenceValue._hx_index) {
			case 0:
				kha_SystemImpl.gl.stencilFunc(stencilFunc,0,readMask);
				break;
			case 1:
				var value = referenceValue.value;
				kha_SystemImpl.gl.stencilFunc(stencilFunc,value,readMask);
				break;
			}
		}
	}
	,drawIndexedVerticesInstanced: function(instanceCount,start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		if(this.instancedRenderingAvailable()) {
			var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
			var typeSize = kha_SystemImpl.elementIndexUint == null ? 2 : 4;
			if(kha_SystemImpl.gl2) {
				kha_SystemImpl.gl.drawElementsInstanced(4,count == -1 ? this.indicesCount : count,type,start * typeSize,instanceCount);
			} else {
				this.instancedExtension.drawElementsInstancedANGLE(4,count == -1 ? this.indicesCount : count,type,start * typeSize,instanceCount);
			}
		}
	}
	,instancedRenderingAvailable: function() {
		return this.instancedExtension;
	}
	,__class__: kha_js_graphics4_Graphics
};
var kha_js_graphics4_Graphics2 = function(canvas) {
	kha_graphics4_Graphics2.call(this,canvas);
};
$hxClasses["kha.js.graphics4.Graphics2"] = kha_js_graphics4_Graphics2;
kha_js_graphics4_Graphics2.__name__ = true;
kha_js_graphics4_Graphics2.__super__ = kha_graphics4_Graphics2;
kha_js_graphics4_Graphics2.prototype = $extend(kha_graphics4_Graphics2.prototype,{
	drawVideoInternal: function(video,x,y,width,height) {
		var v = js_Boot.__cast(video , kha_js_Video);
		this.drawScaledSubImage(v.texture,0,0,v.texture.get_width(),v.texture.get_height(),x,y,width,height);
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		kha_SystemImpl.gl.colorMask(true,true,true,true);
		kha_SystemImpl.gl.disable(2929);
		kha_SystemImpl.gl.depthFunc(519);
		kha_graphics4_Graphics2.prototype.begin.call(this,clear,clearColor);
	}
	,__class__: kha_js_graphics4_Graphics2
});
var kha_js_graphics4_TextureUnit = function(value) {
	this.value = value;
};
$hxClasses["kha.js.graphics4.TextureUnit"] = kha_js_graphics4_TextureUnit;
kha_js_graphics4_TextureUnit.__name__ = true;
kha_js_graphics4_TextureUnit.__interfaces__ = [kha_graphics4_TextureUnit];
kha_js_graphics4_TextureUnit.prototype = {
	value: null
	,__class__: kha_js_graphics4_TextureUnit
};
var kha_vr_VrInterface = function() {
};
$hxClasses["kha.vr.VrInterface"] = kha_vr_VrInterface;
kha_vr_VrInterface.__name__ = true;
kha_vr_VrInterface.instance = null;
kha_vr_VrInterface.prototype = {
	GetSensorState: function() {
		return null;
	}
	,GetPredictedSensorState: function(time) {
		return null;
	}
	,WarpSwapBlack: function() {
	}
	,WarpSwapLoadingIcon: function() {
	}
	,WarpSwap: function(parms) {
	}
	,IsPresenting: function() {
		return false;
	}
	,IsVrEnabled: function() {
		return false;
	}
	,GetTimeInSeconds: function() {
		return 0.0;
	}
	,GetProjectionMatrix: function(eye) {
		return null;
	}
	,GetViewMatrix: function(eye) {
		return null;
	}
	,onVRRequestPresent: function() {
	}
	,onVRExitPresent: function() {
	}
	,onResetPose: function() {
	}
	,__class__: kha_vr_VrInterface
};
var kha_js_vr_VrInterface = function() {
	this.vrHeight = 0;
	this.vrWidth = 0;
	this.height = 0;
	this.width = 0;
	this.rightViewMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.leftViewMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.rightProjectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.leftProjectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.vrEnabled = false;
	kha_vr_VrInterface.call(this);
	var displayEnabled = false;
	if(displayEnabled) {
		this.vrEnabled = true;
		this.getVRDisplays();
		haxe_Log.trace("Display enabled.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 40, className : "kha.js.vr.VrInterface", methodName : "new"});
	}
};
$hxClasses["kha.js.vr.VrInterface"] = kha_js_vr_VrInterface;
kha_js_vr_VrInterface.__name__ = true;
kha_js_vr_VrInterface.__super__ = kha_vr_VrInterface;
kha_js_vr_VrInterface.prototype = $extend(kha_vr_VrInterface.prototype,{
	vrEnabled: null
	,vrDisplay: null
	,frameData: null
	,leftProjectionMatrix: null
	,rightProjectionMatrix: null
	,leftViewMatrix: null
	,rightViewMatrix: null
	,width: null
	,height: null
	,vrWidth: null
	,vrHeight: null
	,getVRDisplays: function() {
		var _gthis = this;
		var vrDisplayInstance = navigator.getVRDisplays();
		vrDisplayInstance.then(function(displays) {
			if(displays.length > 0) {
				_gthis.frameData = new VRFrameData();
				_gthis.vrDisplay = displays[0];
				_gthis.vrDisplay.depthNear = 0.1;
				_gthis.vrDisplay.depthFar = 1024.0;
				var leftEye = _gthis.vrDisplay.getEyeParameters("left");
				var rightEye = _gthis.vrDisplay.getEyeParameters("right");
				_gthis.width = kha_SystemImpl.khanvas.width;
				_gthis.height = kha_SystemImpl.khanvas.height;
				_gthis.vrWidth = Math.max(leftEye.renderWidth,rightEye.renderWidth) * 2 | 0;
				_gthis.vrHeight = Math.max(leftEye.renderHeight,rightEye.renderHeight) | 0;
			} else {
				haxe_Log.trace("There are no VR displays connected.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 60, className : "kha.js.vr.VrInterface", methodName : "getVRDisplays"});
			}
		});
	}
	,onVRRequestPresent: function() {
		var _gthis = this;
		try {
			this.vrDisplay.requestPresent([{ source : kha_SystemImpl.khanvas}]).then(function() {
				_gthis.onResize();
				_gthis.vrDisplay.requestAnimationFrame($bind(_gthis,_gthis.onAnimationFrame));
			});
		} catch( _g ) {
			var err = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace("Failed to requestPresent.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 72, className : "kha.js.vr.VrInterface", methodName : "onVRRequestPresent"});
			haxe_Log.trace(err,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 73, className : "kha.js.vr.VrInterface", methodName : "onVRRequestPresent"});
		}
	}
	,onVRExitPresent: function() {
		var _gthis = this;
		try {
			this.vrDisplay.exitPresent([{ source : kha_SystemImpl.khanvas}]).then(function() {
				_gthis.onResize();
			});
		} catch( _g ) {
			var err = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace("Failed to exitPresent.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 83, className : "kha.js.vr.VrInterface", methodName : "onVRExitPresent"});
			haxe_Log.trace(err,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 84, className : "kha.js.vr.VrInterface", methodName : "onVRExitPresent"});
		}
	}
	,onResetPose: function() {
		try {
			this.vrDisplay.resetPose();
		} catch( _g ) {
			var err = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace("Failed to resetPose",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 92, className : "kha.js.vr.VrInterface", methodName : "onResetPose"});
			haxe_Log.trace(err,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 93, className : "kha.js.vr.VrInterface", methodName : "onResetPose"});
		}
	}
	,onAnimationFrame: function(timestamp) {
		if(this.vrDisplay != null && this.vrDisplay.isPresenting) {
			this.vrDisplay.requestAnimationFrame($bind(this,this.onAnimationFrame));
			this.vrDisplay.getFrameData(this.frameData);
			this.leftProjectionMatrix = this.createMatrixFromArray(this.frameData.leftProjectionMatrix);
			this.leftViewMatrix = this.createMatrixFromArray(this.frameData.leftViewMatrix);
			this.rightProjectionMatrix = this.createMatrixFromArray(this.frameData.rightProjectionMatrix);
			this.rightViewMatrix = this.createMatrixFromArray(this.frameData.rightViewMatrix);
			this.vrDisplay.submitFrame();
		}
	}
	,onResize: function() {
		if(this.vrDisplay != null && this.vrDisplay.isPresenting) {
			kha_SystemImpl.khanvas.width = this.vrWidth;
			kha_SystemImpl.khanvas.height = this.vrHeight;
		} else {
			kha_SystemImpl.khanvas.width = this.width;
			kha_SystemImpl.khanvas.height = this.height;
		}
	}
	,GetSensorState: function() {
		return this.GetPredictedSensorState(0.0);
	}
	,GetPredictedSensorState: function(time) {
		var result = new kha_vr_SensorState();
		result.Predicted = new kha_vr_PoseState();
		result.Recorded = result.Predicted;
		result.Predicted.AngularAcceleration = new kha_math_Vector3();
		result.Predicted.AngularVelocity = new kha_math_Vector3();
		result.Predicted.LinearAcceleration = new kha_math_Vector3();
		result.Predicted.LinearVelocity = new kha_math_Vector3();
		result.Predicted.TimeInSeconds = time;
		result.Predicted.Pose = new kha_vr_Pose();
		result.Predicted.Pose.Orientation = new kha_math_Quaternion();
		result.Predicted.Pose.Position = new kha_math_Vector3();
		var mPose = this.frameData.pose;
		if(mPose != null) {
			result.Predicted.AngularVelocity = this.createVectorFromArray(mPose.angularVelocity);
			result.Predicted.AngularAcceleration = this.createVectorFromArray(mPose.angularAcceleration);
			result.Predicted.LinearVelocity = this.createVectorFromArray(mPose.linearVelocity);
			result.Predicted.LinearAcceleration = this.createVectorFromArray(mPose.linearAcceleration);
			result.Predicted.Pose.Orientation = this.createQuaternion(mPose.orientation);
			result.Predicted.Pose.Position = this.createVectorFromArray(mPose.position);
		}
		return result;
	}
	,WarpSwapBlack: function() {
	}
	,WarpSwapLoadingIcon: function() {
	}
	,WarpSwap: function(parms) {
	}
	,IsPresenting: function() {
		if(this.vrDisplay != null) {
			return this.vrDisplay.isPresenting;
		}
		return false;
	}
	,IsVrEnabled: function() {
		return this.vrEnabled;
	}
	,GetTimeInSeconds: function() {
		return kha_Scheduler.time();
	}
	,GetProjectionMatrix: function(eye) {
		if(eye == 0) {
			return this.leftProjectionMatrix;
		} else {
			return this.rightProjectionMatrix;
		}
	}
	,GetViewMatrix: function(eye) {
		if(eye == 0) {
			return this.leftViewMatrix;
		} else {
			return this.rightViewMatrix;
		}
	}
	,createMatrixFromArray: function(array) {
		var matrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
		matrix._00 = array[0];
		matrix._01 = array[1];
		matrix._02 = array[2];
		matrix._03 = array[3];
		matrix._10 = array[4];
		matrix._11 = array[5];
		matrix._12 = array[6];
		matrix._13 = array[7];
		matrix._20 = array[8];
		matrix._21 = array[9];
		matrix._22 = array[10];
		matrix._23 = array[11];
		matrix._30 = array[12];
		matrix._31 = array[13];
		matrix._32 = array[14];
		matrix._33 = array[15];
		return matrix;
	}
	,createVectorFromArray: function(array) {
		var vector = new kha_math_Vector3(0,0,0);
		if(array != null) {
			vector.x = array[0];
			vector.y = array[1];
			vector.z = array[2];
		}
		return vector;
	}
	,createQuaternion: function(array) {
		var quaternion = new kha_math_Quaternion(0,0,0,0);
		if(array != null) {
			quaternion.set_x(array[0]);
			quaternion.set_y(array[1]);
			quaternion.set_z(array[2]);
			quaternion.set_w(array[3]);
		}
		return quaternion;
	}
	,__class__: kha_js_vr_VrInterface
});
var kha_math_FastMatrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.FastMatrix3"] = kha_math_FastMatrix3;
kha_math_FastMatrix3.__name__ = true;
kha_math_FastMatrix3.fromMatrix3 = function(m) {
	return new kha_math_FastMatrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_FastMatrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_FastMatrix3
};
var kha_math_FastMatrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.FastMatrix4"] = kha_math_FastMatrix4;
kha_math_FastMatrix4.__name__ = true;
kha_math_FastMatrix4.fromMatrix4 = function(m) {
	return new kha_math_FastMatrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_FastMatrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_FastMatrix4(2 / (right - left),0,0,tx,0,2.0 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_FastMatrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_FastMatrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_FastMatrix4.lookAt = function(eye,at,up) {
	var x = at.x - eye.x;
	var y = at.y - eye.y;
	var z = at.z - eye.z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var _this_x = x;
	var _this_y = y;
	var _this_z = z;
	var x = _this_x;
	var y = _this_y;
	var z = _this_z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var zaxis_x = x;
	var zaxis_y = y;
	var zaxis_z = z;
	var currentLength = Math.sqrt(zaxis_x * zaxis_x + zaxis_y * zaxis_y + zaxis_z * zaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		zaxis_x *= mul;
		zaxis_y *= mul;
		zaxis_z *= mul;
	}
	var _x = zaxis_y * up.z - zaxis_z * up.y;
	var _y = zaxis_z * up.x - zaxis_x * up.z;
	var _z = zaxis_x * up.y - zaxis_y * up.x;
	var x = _x;
	var y = _y;
	var z = _z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var _this_x = x;
	var _this_y = y;
	var _this_z = z;
	var x = _this_x;
	var y = _this_y;
	var z = _this_z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var xaxis_x = x;
	var xaxis_y = y;
	var xaxis_z = z;
	var currentLength = Math.sqrt(xaxis_x * xaxis_x + xaxis_y * xaxis_y + xaxis_z * xaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		xaxis_x *= mul;
		xaxis_y *= mul;
		xaxis_z *= mul;
	}
	var _x = xaxis_y * zaxis_z - xaxis_z * zaxis_y;
	var _y = xaxis_z * zaxis_x - xaxis_x * zaxis_z;
	var _z = xaxis_x * zaxis_y - xaxis_y * zaxis_x;
	var x = _x;
	var y = _y;
	var z = _z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var yaxis_x = x;
	var yaxis_y = y;
	var yaxis_z = z;
	return new kha_math_FastMatrix4(xaxis_x,xaxis_y,xaxis_z,-(xaxis_x * eye.x + xaxis_y * eye.y + xaxis_z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis_x,-zaxis_y,-zaxis_z,zaxis_x * eye.x + zaxis_y * eye.y + zaxis_z * eye.z,0,0,0,1);
};
kha_math_FastMatrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_FastMatrix4
};
var kha_math_FastVector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.FastVector3"] = kha_math_FastVector3;
kha_math_FastVector3.__name__ = true;
kha_math_FastVector3.fromVector3 = function(v) {
	return new kha_math_FastVector3(v.x,v.y,v.z);
};
kha_math_FastVector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector3(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: kha_math_FastVector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_FastVector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.FastVector4"] = kha_math_FastVector4;
kha_math_FastVector4.__name__ = true;
kha_math_FastVector4.fromVector4 = function(v) {
	return new kha_math_FastVector4(v.x,v.y,v.z,v.w);
};
kha_math_FastVector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector4(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: kha_math_FastVector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Matrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.Matrix3"] = kha_math_Matrix3;
kha_math_Matrix3.__name__ = true;
kha_math_Matrix3.fromFastMatrix3 = function(m) {
	return new kha_math_Matrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_Matrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_Matrix3
};
var kha_math_Matrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.Matrix4"] = kha_math_Matrix4;
kha_math_Matrix4.__name__ = true;
kha_math_Matrix4.fromFastMatrix4 = function(m) {
	return new kha_math_Matrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_Matrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_Matrix4(2 / (right - left),0,0,tx,0,2 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_Matrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_Matrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_Matrix4.lookAt = function(eye,at,up) {
	var x = at.x - eye.x;
	var y = at.y - eye.y;
	var z = at.z - eye.z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var _this_x = x;
	var _this_y = y;
	var _this_z = z;
	var x = _this_x;
	var y = _this_y;
	var z = _this_z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var zaxis_x = x;
	var zaxis_y = y;
	var zaxis_z = z;
	var currentLength = Math.sqrt(zaxis_x * zaxis_x + zaxis_y * zaxis_y + zaxis_z * zaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		zaxis_x *= mul;
		zaxis_y *= mul;
		zaxis_z *= mul;
	}
	var _x = zaxis_y * up.z - zaxis_z * up.y;
	var _y = zaxis_z * up.x - zaxis_x * up.z;
	var _z = zaxis_x * up.y - zaxis_y * up.x;
	var x = _x;
	var y = _y;
	var z = _z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var _this_x = x;
	var _this_y = y;
	var _this_z = z;
	var x = _this_x;
	var y = _this_y;
	var z = _this_z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var xaxis_x = x;
	var xaxis_y = y;
	var xaxis_z = z;
	var currentLength = Math.sqrt(xaxis_x * xaxis_x + xaxis_y * xaxis_y + xaxis_z * xaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		xaxis_x *= mul;
		xaxis_y *= mul;
		xaxis_z *= mul;
	}
	var _x = xaxis_y * zaxis_z - xaxis_z * zaxis_y;
	var _y = xaxis_z * zaxis_x - xaxis_x * zaxis_z;
	var _z = xaxis_x * zaxis_y - xaxis_y * zaxis_x;
	var x = _x;
	var y = _y;
	var z = _z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var yaxis_x = x;
	var yaxis_y = y;
	var yaxis_z = z;
	return new kha_math_Matrix4(xaxis_x,xaxis_y,xaxis_z,-(xaxis_x * eye.x + xaxis_y * eye.y + xaxis_z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis_x,-zaxis_y,-zaxis_z,zaxis_x * eye.x + zaxis_y * eye.y + zaxis_z * eye.z,0,0,0,1);
};
kha_math_Matrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_Matrix4
};
var kha_math_Quaternion = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.values = [];
	this.values.push(x);
	this.values.push(y);
	this.values.push(z);
	this.values.push(w);
};
$hxClasses["kha.math.Quaternion"] = kha_math_Quaternion;
kha_math_Quaternion.__name__ = true;
kha_math_Quaternion.fromAxisAngle = function(axis,radians) {
	var q = new kha_math_Quaternion();
	q.set_w(Math.cos(radians / 2.0));
	q.set_x(q.set_y(q.set_z(Math.sin(radians / 2.0))));
	var _g = q;
	_g.set_x(_g.get_x() * axis.x);
	var _g = q;
	_g.set_y(_g.get_y() * axis.y);
	var _g = q;
	_g.set_z(_g.get_z() * axis.z);
	return q;
};
kha_math_Quaternion.prototype = {
	values: null
	,slerp: function(t,q) {
		var epsilon = 0.0005;
		var dot = this.get_x() * q.get_x() + this.get_y() * q.get_y() + this.get_z() * q.get_z() + this.get_w() * q.get_w();
		if(dot > 1 - epsilon) {
			var _this = new kha_math_Quaternion(this.get_x() - q.get_x(),this.get_y() - q.get_y(),this.get_z() - q.get_z(),this.get_w() - q.get_w());
			var q1 = new kha_math_Quaternion(_this.get_x() * t,_this.get_y() * t,_this.get_z() * t,_this.get_w() * t);
			var result = new kha_math_Quaternion(q.get_x() + q1.get_x(),q.get_y() + q1.get_y(),q.get_z() + q1.get_z(),q.get_w() + q1.get_w());
			var scale = 1.0 / result.get_length();
			result.set_x(result.get_x() * scale);
			result.set_y(result.get_y() * scale);
			result.set_z(result.get_z() * scale);
			result.set_w(result.get_w() * scale);
			return result;
		}
		if(dot < 0) {
			dot = 0;
		}
		if(dot > 1) {
			dot = 1;
		}
		var theta0 = Math.acos(dot);
		var theta = theta0 * t;
		var q1 = new kha_math_Quaternion(this.get_x() * dot,this.get_y() * dot,this.get_z() * dot,this.get_w() * dot);
		var q2 = new kha_math_Quaternion(q.get_x() - q1.get_x(),q.get_y() - q1.get_y(),q.get_z() - q1.get_z(),q.get_w() - q1.get_w());
		var scale = 1.0 / q2.get_length();
		q2.set_x(q2.get_x() * scale);
		q2.set_y(q2.get_y() * scale);
		q2.set_z(q2.get_z() * scale);
		q2.set_w(q2.get_w() * scale);
		var scale = Math.cos(theta);
		var _this = new kha_math_Quaternion(this.get_x() * scale,this.get_y() * scale,this.get_z() * scale,this.get_w() * scale);
		var scale = Math.sin(theta);
		var q = new kha_math_Quaternion(q2.get_x() * scale,q2.get_y() * scale,q2.get_z() * scale,q2.get_w() * scale);
		var result = new kha_math_Quaternion(_this.get_x() + q.get_x(),_this.get_y() + q.get_y(),_this.get_z() + q.get_z(),_this.get_w() + q.get_w());
		var scale = 1.0 / result.get_length();
		result.set_x(result.get_x() * scale);
		result.set_y(result.get_y() * scale);
		result.set_z(result.get_z() * scale);
		result.set_w(result.get_w() * scale);
		return result;
	}
	,rotated: function(b) {
		var q = new kha_math_Quaternion();
		q.set_w(this.get_w() * b.get_w() - this.get_x() * b.get_x() - this.get_y() * b.get_y() - this.get_z() * b.get_z());
		q.set_x(this.get_w() * b.get_x() + this.get_x() * b.get_w() + this.get_y() * b.get_z() - this.get_z() * b.get_y());
		q.set_y(this.get_w() * b.get_y() + this.get_y() * b.get_w() + this.get_z() * b.get_x() - this.get_x() * b.get_z());
		q.set_z(this.get_w() * b.get_z() + this.get_z() * b.get_w() + this.get_x() * b.get_y() - this.get_y() * b.get_x());
		var scale = 1.0 / q.get_length();
		q.set_x(q.get_x() * scale);
		q.set_y(q.get_y() * scale);
		q.set_z(q.get_z() * scale);
		q.set_w(q.get_w() * scale);
		return q;
	}
	,scaled: function(scale) {
		return new kha_math_Quaternion(this.get_x() * scale,this.get_y() * scale,this.get_z() * scale,this.get_w() * scale);
	}
	,scale: function(scale) {
		this.set_x(this.get_x() * scale);
		this.set_y(this.get_y() * scale);
		this.set_z(this.get_z() * scale);
		this.set_w(this.get_w() * scale);
	}
	,matrix: function() {
		var s = 2.0;
		var xs = this.get_x() * s;
		var ys = this.get_y() * s;
		var zs = this.get_z() * s;
		var wx = this.get_w() * xs;
		var wy = this.get_w() * ys;
		var wz = this.get_w() * zs;
		var xx = this.get_x() * xs;
		var xy = this.get_x() * ys;
		var xz = this.get_x() * zs;
		var yy = this.get_y() * ys;
		var yz = this.get_y() * zs;
		var zz = this.get_z() * zs;
		return new kha_math_Matrix4(1 - (yy + zz),xy - wz,xz + wy,0,xy + wz,1 - (xx + zz),yz - wx,0,xz - wy,yz + wx,1 - (xx + yy),0,0,0,0,1);
	}
	,get: function(index) {
		return this.values[index];
	}
	,set: function(index,value) {
		this.values[index] = value;
	}
	,get_x: function() {
		return this.values[0];
	}
	,set_x: function(value) {
		return this.values[0] = value;
	}
	,get_y: function() {
		return this.values[1];
	}
	,set_y: function(value) {
		return this.values[1] = value;
	}
	,get_z: function() {
		return this.values[2];
	}
	,set_z: function(value) {
		return this.values[2] = value;
	}
	,get_w: function() {
		return this.values[3];
	}
	,set_w: function(value) {
		return this.values[3] = value;
	}
	,get_length: function() {
		return Math.sqrt(this.get_x() * this.get_x() + this.get_y() * this.get_y() + this.get_z() * this.get_z() + this.get_w() * this.get_w());
	}
	,set_length: function(length) {
		if(this.get_length() == 0) {
			return 0;
		}
		var mul = length / this.get_length();
		var _g = this;
		_g.set_x(_g.get_x() * mul);
		var _g = this;
		_g.set_y(_g.get_y() * mul);
		var _g = this;
		_g.set_z(_g.get_z() * mul);
		return length;
	}
	,addVector: function(vec) {
		var result = new kha_math_Quaternion(this.get_x(),this.get_y(),this.get_z(),this.get_w());
		var q1 = new kha_math_Quaternion(0,vec.x,vec.y,vec.z);
		var q = new kha_math_Quaternion();
		q.set_x(q1.get_w() * result.get_x() + q1.get_x() * result.get_w() + q1.get_y() * result.get_z() - q1.get_z() * result.get_y());
		q.set_y(q1.get_w() * result.get_y() - q1.get_x() * result.get_z() + q1.get_y() * result.get_w() + q1.get_z() * result.get_x());
		q.set_z(q1.get_w() * result.get_z() + q1.get_x() * result.get_y() - q1.get_y() * result.get_x() + q1.get_z() * result.get_w());
		q.set_w(q1.get_w() * result.get_w() - q1.get_x() * result.get_x() - q1.get_y() * result.get_y() - q1.get_z() * result.get_z());
		q1 = q;
		var _g = result;
		_g.set_x(_g.get_x() + q1.get_x() * 0.5);
		var _g = result;
		_g.set_y(_g.get_y() + q1.get_y() * 0.5);
		var _g = result;
		_g.set_z(_g.get_z() + q1.get_z() * 0.5);
		var _g = result;
		_g.set_w(_g.get_w() + q1.get_w() * 0.5);
		return result;
	}
	,add: function(q) {
		return new kha_math_Quaternion(this.get_x() + q.get_x(),this.get_y() + q.get_y(),this.get_z() + q.get_z(),this.get_w() + q.get_w());
	}
	,sub: function(q) {
		return new kha_math_Quaternion(this.get_x() - q.get_x(),this.get_y() - q.get_y(),this.get_z() - q.get_z(),this.get_w() - q.get_w());
	}
	,mult: function(r) {
		var q = new kha_math_Quaternion();
		q.set_x(this.get_w() * r.get_x() + this.get_x() * r.get_w() + this.get_y() * r.get_z() - this.get_z() * r.get_y());
		q.set_y(this.get_w() * r.get_y() - this.get_x() * r.get_z() + this.get_y() * r.get_w() + this.get_z() * r.get_x());
		q.set_z(this.get_w() * r.get_z() + this.get_x() * r.get_y() - this.get_y() * r.get_x() + this.get_z() * r.get_w());
		q.set_w(this.get_w() * r.get_w() - this.get_x() * r.get_x() - this.get_y() * r.get_y() - this.get_z() * r.get_z());
		return q;
	}
	,normalize: function() {
		var scale = 1.0 / this.get_length();
		this.set_x(this.get_x() * scale);
		this.set_y(this.get_y() * scale);
		this.set_z(this.get_z() * scale);
		this.set_w(this.get_w() * scale);
	}
	,dot: function(q) {
		return this.get_x() * q.get_x() + this.get_y() * q.get_y() + this.get_z() * q.get_z() + this.get_w() * q.get_w();
	}
	,getEulerAngles: function(A1,A2,A3,S,D) {
		if(D == null) {
			D = 1;
		}
		if(S == null) {
			S = 1;
		}
		var result = new kha_math_Vector3();
		var Q = [];
		Q[0] = this.get_x();
		Q[1] = this.get_y();
		Q[2] = this.get_z();
		var ww = this.get_w() * this.get_w();
		var Q11 = Q[A1] * Q[A1];
		var Q22 = Q[A2] * Q[A2];
		var Q33 = Q[A3] * Q[A3];
		var psign = -1;
		var SingularityRadius = 0.0000001;
		var PiOver2 = Math.PI / 2.0;
		if((A1 + 1) % 3 == A2 && (A2 + 1) % 3 == A3) {
			psign = 1;
		}
		var s2 = psign * 2.0 * (psign * this.get_w() * Q[A2] + Q[A1] * Q[A3]);
		if(s2 < -1 + SingularityRadius) {
			result.x = 0;
			result.y = -S * D * PiOver2;
			result.z = S * D * Math.atan2(2 * (psign * Q[A1] * Q[A2] + this.get_w() * Q[A3]),ww + Q22 - Q11 - Q33);
		} else if(s2 > 1 - SingularityRadius) {
			result.x = 0;
			result.y = S * D * PiOver2;
			result.z = S * D * Math.atan2(2 * (psign * Q[A1] * Q[A2] + this.get_w() * Q[A3]),ww + Q22 - Q11 - Q33);
		} else {
			result.x = -S * D * Math.atan2(-2 * (this.get_w() * Q[A1] - psign * Q[A2] * Q[A3]),ww + Q33 - Q11 - Q22);
			result.y = S * D * Math.asin(s2);
			result.z = S * D * Math.atan2(2 * (this.get_w() * Q[A3] - psign * Q[A1] * Q[A2]),ww + Q11 - Q22 - Q33);
		}
		return result;
	}
	,__class__: kha_math_Quaternion
	,__properties__: {set_length:"set_length",get_length:"get_length",set_w:"set_w",get_w:"get_w",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var kha_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.Vector2"] = kha_math_Vector2;
kha_math_Vector2.__name__ = true;
kha_math_Vector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,__class__: kha_math_Vector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector2i = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.Vector2i"] = kha_math_Vector2i;
kha_math_Vector2i.__name__ = true;
kha_math_Vector2i.prototype = {
	x: null
	,y: null
	,__class__: kha_math_Vector2i
};
var kha_math_Vector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.Vector3"] = kha_math_Vector3;
kha_math_Vector3.__name__ = true;
kha_math_Vector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,__class__: kha_math_Vector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.Vector4"] = kha_math_Vector4;
kha_math_Vector4.__name__ = true;
kha_math_Vector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,__class__: kha_math_Vector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_netsync_Client = function() { };
$hxClasses["kha.netsync.Client"] = kha_netsync_Client;
kha_netsync_Client.__name__ = true;
kha_netsync_Client.__isInterface__ = true;
kha_netsync_Client.prototype = {
	get_id: null
	,id: null
	,send: null
	,receive: null
	,onClose: null
	,__class__: kha_netsync_Client
	,__properties__: {get_id:"get_id"}
};
var kha_netsync_ControllerBuilder = function() { };
$hxClasses["kha.netsync.ControllerBuilder"] = kha_netsync_ControllerBuilder;
kha_netsync_ControllerBuilder.__name__ = true;
var kha_netsync_Entity = function() { };
$hxClasses["kha.netsync.Entity"] = kha_netsync_Entity;
kha_netsync_Entity.__name__ = true;
kha_netsync_Entity.__isInterface__ = true;
kha_netsync_Entity.prototype = {
	_id: null
	,_size: null
	,_send: null
	,_receive: null
	,__class__: kha_netsync_Entity
};
var kha_netsync_LocalClient = function(id) {
	this.myId = id;
};
$hxClasses["kha.netsync.LocalClient"] = kha_netsync_LocalClient;
kha_netsync_LocalClient.__name__ = true;
kha_netsync_LocalClient.__interfaces__ = [kha_netsync_Client];
kha_netsync_LocalClient.prototype = {
	myId: null
	,send: function(bytes,mandatory) {
	}
	,receive: function(receiver) {
	}
	,onClose: function(close) {
	}
	,controllers: null
	,get_controllers: function() {
		return null;
	}
	,id: null
	,get_id: function() {
		return this.myId;
	}
	,__class__: kha_netsync_LocalClient
	,__properties__: {get_id:"get_id",get_controllers:"get_controllers"}
};
var kha_netsync_Network = function(url,port,errorCallback,closeCallback) {
	this.open = false;
	var _gthis = this;
	this.socket = new WebSocket("ws://" + url + ":" + port);
	this.socket.onerror = function(error) {
		haxe_Log.trace("Network error.",{ fileName : "kha/netsync/Network.hx", lineNumber : 14, className : "kha.netsync.Network", methodName : "new"});
		errorCallback();
	};
	this.socket.binaryType = "arraybuffer";
	this.socket.onopen = function() {
		_gthis.open = true;
	};
	this.socket.onclose = function(event) {
		haxe_Log.trace("Network connection closed. " + kha_netsync_Network.webSocketCloseReason(event.code) + " (" + event.reason + ").",{ fileName : "kha/netsync/Network.hx", lineNumber : 22, className : "kha.netsync.Network", methodName : "new"});
		closeCallback();
	};
};
$hxClasses["kha.netsync.Network"] = kha_netsync_Network;
kha_netsync_Network.__name__ = true;
kha_netsync_Network.webSocketCloseReason = function(code) {
	switch(code) {
	case 1000:
		return "Normal Closure";
	case 1001:
		return "Going Away";
	case 1002:
		return "Protocol error";
	case 1003:
		return "Unsupported Data";
	case 1005:
		return "No Status Rcvd";
	case 1006:
		return "Abnormal Closure";
	case 1007:
		return "Invalid frame";
	case 1008:
		return "Policy Violation";
	case 1009:
		return "Message Too Big";
	case 1010:
		return "Mandatory Ext.";
	case 1011:
		return "Internal Server Error";
	case 1015:
		return "TLS handshake";
	default:
		return "";
	}
};
kha_netsync_Network.prototype = {
	socket: null
	,open: null
	,send: function(bytes,mandatory) {
		if(this.open) {
			this.socket.send(bytes.b.bufferValue);
		}
	}
	,listen: function(listener) {
		this.socket.onmessage = function(message) {
			listener(haxe_io_Bytes.ofData(message.data));
		};
	}
	,__class__: kha_netsync_Network
};
var kha_netsync_State = function(time,data) {
	this.time = time;
	this.data = data;
};
$hxClasses["kha.netsync.State"] = kha_netsync_State;
kha_netsync_State.__name__ = true;
kha_netsync_State.prototype = {
	time: null
	,data: null
	,__class__: kha_netsync_State
};
var kha_netsync_Session = function(maxPlayers,address,port) {
	this.ping = 1;
	this.currentPlayers = 0;
	this.controllers = new haxe_ds_IntMap();
	this.entities = new haxe_ds_IntMap();
	kha_netsync_Session.instance = this;
	this.maxPlayers = maxPlayers;
	this.address = address;
	this.port = port;
};
$hxClasses["kha.netsync.Session"] = kha_netsync_Session;
kha_netsync_Session.__name__ = true;
kha_netsync_Session.the = function() {
	return kha_netsync_Session.instance;
};
kha_netsync_Session.prototype = {
	entities: null
	,controllers: null
	,maxPlayers: null
	,currentPlayers: null
	,ping: null
	,address: null
	,port: null
	,startCallback: null
	,refusedCallback: null
	,resetCallback: null
	,localClient: null
	,network: null
	,updateTaskId: null
	,pingTaskId: null
	,me: null
	,get_me: function() {
		return this.localClient;
	}
	,addEntity: function(entity) {
		var this1 = this.entities;
		var key = entity._id();
		this1.h[key] = entity;
	}
	,addController: function(controller) {
		haxe_Log.trace("Adding controller id " + controller._id(),{ fileName : "kha/netsync/Session.hx", lineNumber : 88, className : "kha.netsync.Session", methodName : "addController"});
		controller._inputBufferIndex = 0;
		var this1 = this.controllers;
		var key = controller._id();
		this1.h[key] = controller;
	}
	,sendControllerUpdate: function(id,bytes) {
		if(this.controllers.h.hasOwnProperty(id)) {
			if(this.controllers.h[id]._inputBuffer.length < this.controllers.h[id]._inputBufferIndex + 4 + bytes.length) {
				var newBuffer = new haxe_io_Bytes(new ArrayBuffer(this.controllers.h[id]._inputBufferIndex + 4 + bytes.length));
				newBuffer.blit(0,this.controllers.h[id]._inputBuffer,0,this.controllers.h[id]._inputBufferIndex);
				this.controllers.h[id]._inputBuffer = newBuffer;
			}
			this.controllers.h[id]._inputBuffer.setInt32(this.controllers.h[id]._inputBufferIndex,bytes.length);
			this.controllers.h[id]._inputBuffer.blit(this.controllers.h[id]._inputBufferIndex + 4,bytes,0,bytes.length);
			this.controllers.h[id]._inputBufferIndex += 4 + bytes.length;
		}
	}
	,sendPing: function() {
		var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
		bytes.b[0] = 4;
		bytes.setFloat(1,kha_Scheduler.realTime());
		this.sendToServer(bytes);
	}
	,sendPlayerUpdate: function() {
	}
	,receive: function(bytes,client) {
		switch(bytes.b[0]) {
		case 0:
			var index = bytes.b[1];
			this.localClient = new kha_netsync_LocalClient(index);
			kha_Scheduler.resetTime();
			this.startCallback();
			break;
		case 1:
			var time = bytes.getDouble(1);
			var offset = 9;
			var entity = this.entities.iterator();
			while(entity.hasNext()) {
				var entity1 = entity.next();
				entity1._receive(offset,bytes);
				offset += entity1._size();
			}
			kha_Scheduler.warp(time);
			break;
		case 3:
			switch(bytes.b[1]) {
			case 0:
				break;
			case 1:
				this.executeRPC(bytes);
				break;
			}
			break;
		case 4:
			var sendTime = bytes.getFloat(1);
			this.ping = kha_Scheduler.realTime() - sendTime;
			break;
		case 5:
			this.refusedCallback();
			break;
		case 6:
			this.currentPlayers = bytes.getInt32(1);
			break;
		}
	}
	,executeRPC: function(bytes) {
		var args = [];
		var syncId = bytes.getInt32(2);
		var index = 6;
		var classnamelength = bytes.getUInt16(index);
		index += 2;
		var classname = "";
		var _g = 0;
		var _g1 = classnamelength;
		while(_g < _g1) {
			var i = _g++;
			var code = bytes.b[index];
			classname += String.fromCodePoint(code);
			++index;
		}
		var methodnamelength = bytes.getUInt16(index);
		index += 2;
		var methodname = "";
		var _g = 0;
		var _g1 = methodnamelength;
		while(_g < _g1) {
			var i = _g++;
			var code = bytes.b[index];
			methodname += String.fromCodePoint(code);
			++index;
		}
		while(index < bytes.length) {
			var type = bytes.b[index];
			++index;
			switch(type) {
			case 66:
				var value = bytes.b[index] == 1;
				++index;
				haxe_Log.trace("Bool: " + (value == null ? "null" : "" + value),{ fileName : "kha/netsync/Session.hx", lineNumber : 295, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value);
				break;
			case 70:
				var value1 = bytes.getDouble(index);
				index += 8;
				haxe_Log.trace("Float: " + value1,{ fileName : "kha/netsync/Session.hx", lineNumber : 300, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value1);
				break;
			case 73:
				var value2 = bytes.getInt32(index);
				index += 4;
				haxe_Log.trace("Int: " + value2,{ fileName : "kha/netsync/Session.hx", lineNumber : 305, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value2);
				break;
			case 83:
				var length = bytes.getUInt16(index);
				index += 2;
				var str = "";
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					var code = bytes.b[index];
					str += String.fromCodePoint(code);
					++index;
				}
				haxe_Log.trace("String: " + str,{ fileName : "kha/netsync/Session.hx", lineNumber : 315, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(str);
				break;
			default:
				haxe_Log.trace("Unknown argument type.",{ fileName : "kha/netsync/Session.hx", lineNumber : 318, className : "kha.netsync.Session", methodName : "executeRPC"});
			}
		}
		if(syncId == -1) {
			Reflect.field($hxClasses[classname],methodname + "_remotely").apply(null,args);
		} else {
			Reflect.field(kha_netsync_SyncBuilder.objects[syncId],methodname + "_remotely").apply(kha_netsync_SyncBuilder.objects[syncId],args);
		}
	}
	,waitForStart: function(callback,refuseCallback,errorCallback,closeCallback,resCallback) {
		var _gthis = this;
		this.startCallback = callback;
		this.refusedCallback = refuseCallback;
		this.resetCallback = resCallback;
		this.network = new kha_netsync_Network(this.address,this.port,errorCallback,function() {
			closeCallback();
			_gthis.reset();
		});
		this.network.listen(function(bytes) {
			_gthis.receive(bytes);
		});
		this.updateTaskId = kha_Scheduler.addFrameTask($bind(this,this.update),0);
		this.ping = 1;
		this.pingTaskId = kha_Scheduler.addTimeTask($bind(this,this.sendPing),0,1);
	}
	,reset: function() {
		kha_Scheduler.removeFrameTask(this.updateTaskId);
		kha_Scheduler.removeTimeTask(this.pingTaskId);
		this.currentPlayers = 0;
		this.ping = 1;
		this.controllers = new haxe_ds_IntMap();
		this.entities = new haxe_ds_IntMap();
		this.resetCallback();
	}
	,update: function() {
		var controller = this.controllers.iterator();
		while(controller.hasNext()) {
			var controller1 = controller.next();
			if(controller1._inputBufferIndex > 0) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(22 + controller1._inputBufferIndex));
				bytes.b[0] = 2;
				bytes.setInt32(1,controller1._id());
				bytes.setDouble(5,kha_Scheduler.time());
				bytes.setInt32(13,kha_System.windowWidth(0));
				bytes.setInt32(17,kha_System.windowHeight(0));
				bytes.b[21] = 0;
				bytes.blit(22,controller1._inputBuffer,0,controller1._inputBufferIndex);
				this.sendToServer(bytes);
				controller1._inputBufferIndex = 0;
			}
		}
	}
	,sendToServer: function(bytes) {
		this.network.send(bytes,false);
	}
	,__class__: kha_netsync_Session
	,__properties__: {get_me:"get_me"}
};
var kha_netsync_SyncBuilder = function() { };
$hxClasses["kha.netsync.SyncBuilder"] = kha_netsync_SyncBuilder;
kha_netsync_SyncBuilder.__name__ = true;
var kha_simd_Float32x4 = function(_0,_1,_2,_3) {
	this._0 = _0;
	this._1 = _1;
	this._2 = _2;
	this._3 = _3;
};
$hxClasses["kha.simd.Float32x4"] = kha_simd_Float32x4;
kha_simd_Float32x4.__name__ = true;
kha_simd_Float32x4.create = function() {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.loadAllFast = function(t) {
	return new kha_simd_Float32x4(t,t,t,t);
};
kha_simd_Float32x4.load = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.loadFast = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.get = function(t,index) {
	var value = 0;
	switch(index) {
	case 0:
		value = t._0;
		break;
	case 1:
		value = t._1;
		break;
	case 2:
		value = t._2;
		break;
	case 3:
		value = t._3;
		break;
	}
	return value;
};
kha_simd_Float32x4.getFast = function(t,index) {
	var value = 0;
	switch(index) {
	case 0:
		value = t._0;
		break;
	case 1:
		value = t._1;
		break;
	case 2:
		value = t._2;
		break;
	case 3:
		value = t._3;
		break;
	}
	return value;
};
kha_simd_Float32x4.abs = function(t) {
	return new kha_simd_Float32x4(Math.abs(t._0),Math.abs(t._1),Math.abs(t._2),Math.abs(t._3));
};
kha_simd_Float32x4.add = function(a,b) {
	return new kha_simd_Float32x4(a._0 + b._0,a._1 + b._1,a._2 + b._2,a._3 + b._3);
};
kha_simd_Float32x4.div = function(a,b) {
	return new kha_simd_Float32x4(a._0 / b._0,a._1 / b._1,a._2 / b._2,a._3 / b._3);
};
kha_simd_Float32x4.mul = function(a,b) {
	return new kha_simd_Float32x4(a._0 * b._0,a._1 * b._1,a._2 * b._2,a._3 * b._3);
};
kha_simd_Float32x4.neg = function(t) {
	return new kha_simd_Float32x4(-t._0,-t._1,-t._2,-t._3);
};
kha_simd_Float32x4.reciprocalApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.reciprocalSqrtApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.sub = function(a,b) {
	return new kha_simd_Float32x4(a._0 - b._0,a._1 - b._1,a._2 - b._2,a._3 - b._3);
};
kha_simd_Float32x4.sqrt = function(t) {
	return new kha_simd_Float32x4(Math.sqrt(t._0),Math.sqrt(t._1),Math.sqrt(t._2),Math.sqrt(t._3));
};
kha_simd_Float32x4.prototype = {
	_0: null
	,_1: null
	,_2: null
	,_3: null
	,__class__: kha_simd_Float32x4
};
var kha_vr_Pose = function() {
	this.Orientation = new kha_math_Quaternion();
	this.Position = new kha_math_Vector3();
};
$hxClasses["kha.vr.Pose"] = kha_vr_Pose;
kha_vr_Pose.__name__ = true;
kha_vr_Pose.prototype = {
	Orientation: null
	,Position: null
	,__class__: kha_vr_Pose
};
var kha_vr_PoseState = function() {
};
$hxClasses["kha.vr.PoseState"] = kha_vr_PoseState;
kha_vr_PoseState.__name__ = true;
kha_vr_PoseState.prototype = {
	Pose: null
	,AngularVelocity: null
	,LinearVelocity: null
	,AngularAcceleration: null
	,LinearAcceleration: null
	,TimeInSeconds: null
	,__class__: kha_vr_PoseState
};
var kha_vr_SensorState = function() {
};
$hxClasses["kha.vr.SensorState"] = kha_vr_SensorState;
kha_vr_SensorState.__name__ = true;
kha_vr_SensorState.prototype = {
	Predicted: null
	,Recorded: null
	,Temperature: null
	,Status: null
	,__class__: kha_vr_SensorState
};
var kha_vr_TimeWarpImage = function() {
};
$hxClasses["kha.vr.TimeWarpImage"] = kha_vr_TimeWarpImage;
kha_vr_TimeWarpImage.__name__ = true;
kha_vr_TimeWarpImage.prototype = {
	Image: null
	,TexCoordsFromTanAngles: null
	,Pose: null
	,__class__: kha_vr_TimeWarpImage
};
var kha_vr_TimeWarpParms = function() {
};
$hxClasses["kha.vr.TimeWarpParms"] = kha_vr_TimeWarpParms;
kha_vr_TimeWarpParms.__name__ = true;
kha_vr_TimeWarpParms.prototype = {
	LeftImage: null
	,RightImage: null
	,LeftOverlay: null
	,RightOverlay: null
	,__class__: kha_vr_TimeWarpParms
};
var utilities_BuildMacros = function() { };
$hxClasses["utilities.BuildMacros"] = utilities_BuildMacros;
utilities_BuildMacros.__name__ = true;
var utilities_Config = function() { };
$hxClasses["utilities.Config"] = utilities_Config;
utilities_Config.__name__ = true;
utilities_Config.keymap = null;
utilities_Config.load = function(done) {
	try {
		found_data_Data.getBlob("./config.found",function(blob) {
			utilities_Config.configLoaded = true;
			utilities_Config.raw = JSON.parse(blob.toString());
			done();
		});
	} catch( _g ) {
		haxe_Log.trace("Failed to load, will load defaults",{ fileName : "utilities/Config.hx", lineNumber : 24, className : "utilities.Config", methodName : "load"});
		done();
	}
};
utilities_Config.save = function() {
	var path = "./config.found";
	var bytes = haxe_io_Bytes.ofString(JSON.stringify(utilities_Config.raw));
	khafs_Fs.saveBytes(path,bytes);
};
utilities_Config.init = function() {
	if(!utilities_Config.configLoaded || utilities_Config.raw == null) {
		utilities_Config.raw = { };
		utilities_Config.raw.locale = "system";
		utilities_Config.raw.window_mode = 0;
		utilities_Config.raw.window_resizable = true;
		utilities_Config.raw.window_minimizable = true;
		utilities_Config.raw.window_maximizable = true;
		utilities_Config.raw.window_w = 1600;
		utilities_Config.raw.window_h = 900;
		utilities_Config.raw.window_x = -1;
		utilities_Config.raw.window_y = -1;
		utilities_Config.raw.window_scale = 1.0;
		utilities_Config.raw.window_vsync = true;
		var disp = kha_Display.get_primary();
		if(disp != null && disp.get_width() >= 3000 && disp.get_height() >= 2000) {
			utilities_Config.raw.window_scale = 2.0;
		}
		utilities_Config.raw.version = found_data_Data.version + "";
		utilities_Config.raw.sha = found_Found.sha;
		utilities_Config.raw.bookmarks = [];
		utilities_Config.raw.plugins = [];
		utilities_Config.raw.keymap = "default.json";
		utilities_Config.raw.theme = "dark.json";
		utilities_Config.raw.defaultPlayMode = false;
		utilities_Config.raw.autoHideMenuBar = false;
		utilities_Config.raw.undo_steps = 4;
		utilities_Config.raw.pressure_radius = true;
		utilities_Config.raw.pressure_hardness = true;
		utilities_Config.raw.pressure_angle = false;
		utilities_Config.raw.pressure_opacity = false;
		utilities_Config.raw.pressure_sensitivity = 1.0;
		utilities_Config.raw.brush_live = false;
	}
	utilities_Config.loadKeymap();
};
utilities_Config.restore = function() {
	zui_Handle.global = new zui_Handle();
	utilities_Config.configLoaded = false;
	utilities_Config.init();
	utilities_Translator.loadTranslations(utilities_Config.raw.locale);
	found_App.editorui.set_isPlayMode(utilities_Config.raw.defaultPlayMode);
};
utilities_Config.loadKeymap = function() {
	var done = function(blob) {
		utilities_Config.keymap = JSON.parse(blob.toString());
	};
	try {
		found_data_Data.getBlob("./data/keymap_presets/" + utilities_Config.raw.keymap,done);
	} catch( _g ) {
		kha_Assets.loadBlobFromPath("./data/keymap_presets/" + utilities_Config.raw.keymap,done,null,{ fileName : "utilities/Config.hx", lineNumber : 94, className : "utilities.Config", methodName : "loadKeymap"});
	}
};
utilities_Config.saveKeymap = function() {
	var path = "./data/keymap_presets/" + utilities_Config.raw.keymap;
	var bytes = haxe_io_Bytes.ofString(JSON.stringify(utilities_Config.keymap));
	khafs_Fs.saveBytes(path,bytes);
};
var utilities_Conversion = function() { };
$hxClasses["utilities.Conversion"] = utilities_Conversion;
utilities_Conversion.__name__ = true;
utilities_Conversion.WorldToScreen = function(position) {
	var x = found_App.editorui.gameView.get_x();
	var y = found_App.editorui.gameView.get_y();
	var width = found_App.editorui.gameView.get_width();
	var height = found_App.editorui.gameView.drawHeight;
	position.x *= 1.0 / found_Found.WIDTH;
	position.y *= 1.0 / found_Found.HEIGHT;
	position.x = width * position.x;
	position.y = height * position.y;
	return position;
};
utilities_Conversion.ScreenToWorld = function(position) {
	var world = new kha_math_FastVector2();
	var gv = found_App.editorui.gameView;
	position.x = (position.x - gv.get_x()) / gv.get_width();
	position.y = (position.y - gv.get_y()) / gv.drawHeight;
	world.x = found_Found.WIDTH * position.x;
	world.y = found_Found.HEIGHT * position.y;
	return world;
};
var utilities_Translator = function() { };
$hxClasses["utilities.Translator"] = utilities_Translator;
utilities_Translator.__name__ = true;
utilities_Translator.tr = function(id,vars) {
	var translation = id;
	if(utilities_Config.raw.locale != "en" && Object.prototype.hasOwnProperty.call(utilities_Translator.translations.h,id)) {
		translation = utilities_Translator.translations.h[id];
	}
	if(vars != null) {
		var _g = haxe_ds_StringMap.kvIterator(vars.h);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var value = _g1.value;
			translation = StringTools.replace(translation,"{" + key + "}",value == null ? "null" : "" + value);
		}
	}
	return translation;
};
utilities_Translator.loadTranslations = function(newLocale) {
	if(newLocale == "system") {
		utilities_Config.raw.locale = kha_System.get_language();
	}
	if(utilities_Config.raw.locale != "en" && utilities_Translator.getSupportedLocales().indexOf(newLocale) == -1) {
		utilities_Config.raw.locale = "en";
	}
	if(utilities_Config.raw.locale == "en") {
		utilities_Translator.translations.h = Object.create(null);
		return;
	}
	found_data_Data.getBlob("data/locale/" + utilities_Config.raw.locale + ".json",function(blob) {
		var translationJson = blob.toString();
		var data = JSON.parse(translationJson);
		var access = data;
		var _g_access = access;
		var _g_keys = Reflect.fields(access);
		var _g_index = 0;
		while(_g_index < _g_keys.length) {
			var key = _g_keys[_g_index++];
			var _g = { value : _g_access[key], key : key};
			var key1 = _g.key;
			var value = _g.value;
			utilities_Translator.translations.h[key1 == null ? "null" : "" + key1] = value;
		}
		var _g = [];
		var _g1 = 32;
		while(_g1 < 383) {
			var i = _g1++;
			_g.push(i);
		}
		kha_graphics2_Graphics.fontGlyphs = _g;
	});
	zui_Nodes.tr = utilities_Translator.tr;
};
utilities_Translator.getSupportedLocales = function() {
	var locales = ["system","en"];
	var _g = 0;
	var _g1 = khafs_Fs.readDirectory("locale");
	while(_g < _g1.length) {
		var localeFilename = _g1[_g];
		++_g;
		locales.push(HxOverrides.substr(localeFilename,0,-5));
	}
	return locales;
};
var zui_Canvas = function() { };
$hxClasses["zui.Canvas"] = zui_Canvas;
zui_Canvas.__name__ = true;
zui_Canvas._ui = null;
zui_Canvas.draw = function(ui,canvas,g) {
	zui_Canvas.screenW = kha_System.windowWidth();
	zui_Canvas.screenH = kha_System.windowHeight();
	zui_Canvas.events = [];
	zui_Canvas._ui = ui;
	g.end();
	ui.begin(g);
	g.begin(false);
	ui.g = g;
	var _g = 0;
	var _g1 = canvas.elements;
	while(_g < _g1.length) {
		var elem = _g1[_g];
		++_g;
		if(elem.parent == null) {
			zui_Canvas.drawElement(ui,canvas,elem);
		}
	}
	g.end();
	ui.end();
	g.begin(false);
	return zui_Canvas.events;
};
zui_Canvas.drawElement = function(ui,canvas,element,px,py) {
	if(py == null) {
		py = 0.0;
	}
	if(px == null) {
		px = 0.0;
	}
	if(element == null || element.visible == false) {
		return;
	}
	var anchorOffset = zui_Canvas.getAnchorOffset(canvas,element);
	px += anchorOffset[0];
	py += anchorOffset[1];
	ui._x = canvas.x + (element.x * zui_Canvas._ui.ops.scaleFactor | 0) + px;
	ui._y = canvas.y + (element.y * zui_Canvas._ui.ops.scaleFactor | 0) + py;
	ui._w = element.width * zui_Canvas._ui.ops.scaleFactor | 0;
	var rotated = element.rotation != null && element.rotation != 0;
	if(rotated) {
		ui.g.pushRotation(element.rotation,ui._x + (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2);
	}
	switch(element.type) {
	case 0:
		var font = ui.ops.font;
		var size = ui.fontSize;
		var fontAsset = element.asset != null && StringTools.endsWith(element.asset,".ttf");
		if(fontAsset) {
			ui.ops.font = zui_Canvas.getAsset(canvas,element.asset);
		}
		ui.fontSize = element.height * zui_Canvas._ui.ops.scaleFactor | 0;
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color != null ? color : defaultColor;
		ui.text(element.text,element.alignment);
		ui.ops.font = font;
		ui.fontSize = size;
		break;
	case 1:
		var image = zui_Canvas.getAsset(canvas,element.asset);
		var fontAsset = element.asset != null && StringTools.endsWith(element.asset,".ttf");
		if(image != null && !fontAsset) {
			ui.imageScrollAlign = false;
			var tint = element.color != null ? element.color : -1;
			if(ui.image(image,tint,element.height * zui_Canvas._ui.ops.scaleFactor | 0) == 3) {
				var e = element.event;
				if(e != null && e != "") {
					zui_Canvas.events.push(e);
				}
			}
			ui.imageScrollAlign = true;
		}
		break;
	case 2:
		var eh = ui.t.ELEMENT_H;
		var bh = ui.t.BUTTON_H;
		ui.t.ELEMENT_H = element.height;
		ui.t.BUTTON_H = element.height;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.BUTTON_COL = color != null ? color : defaultColor;
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_TEXT_COL;
		ui.t.BUTTON_TEXT_COL = color != null ? color : defaultColor;
		var color = element.color_hover;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.BUTTON_HOVER_COL = color != null ? color : defaultColor;
		var color = element.color_press;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_PRESSED_COL;
		ui.t.BUTTON_PRESSED_COL = color != null ? color : defaultColor;
		if(ui.button(element.text,element.alignment)) {
			var e = element.event;
			if(e != null && e != "") {
				zui_Canvas.events.push(e);
			}
		}
		ui.t.ELEMENT_H = eh;
		ui.t.BUTTON_H = bh;
		break;
	case 3:
		break;
	case 6:
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color != null ? color : defaultColor;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.ACCENT_COL = color != null ? color : defaultColor;
		var color = element.color_hover;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.ACCENT_HOVER_COL = color != null ? color : defaultColor;
		ui.check(zui_Canvas.h.nest(element.id),element.text);
		break;
	case 7:
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color != null ? color : defaultColor;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.ACCENT_COL = color != null ? color : defaultColor;
		var color = element.color_hover;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.ACCENT_HOVER_COL = color != null ? color : defaultColor;
		zui_Ext.inlineRadio(ui,zui_Canvas.h.nest(element.id),element.text.split(";"));
		break;
	case 8:
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color != null ? color : defaultColor;
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.LABEL_COL = color != null ? color : defaultColor;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.ACCENT_COL = color != null ? color : defaultColor;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.SEPARATOR_COL = color != null ? color : defaultColor;
		var color = element.color_hover;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.ACCENT_HOVER_COL = color != null ? color : defaultColor;
		ui.combo(zui_Canvas.h.nest(element.id),element.text.split(";"));
		break;
	case 9:
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color != null ? color : defaultColor;
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.LABEL_COL = color != null ? color : defaultColor;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.ACCENT_COL = color != null ? color : defaultColor;
		var color = element.color_hover;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.ACCENT_HOVER_COL = color != null ? color : defaultColor;
		ui.slider(zui_Canvas.h.nest(element.id),element.text,0.0,1.0,true,100,true,element.alignment);
		break;
	case 10:
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color != null ? color : defaultColor;
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.LABEL_COL = color != null ? color : defaultColor;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.ACCENT_COL = color != null ? color : defaultColor;
		var color = element.color_hover;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.ACCENT_HOVER_COL = color != null ? color : defaultColor;
		ui.textInput(zui_Canvas.h.nest(element.id),element.text,element.alignment);
		if(zui_Canvas.h.nest(element.id).changed) {
			var e = element.event;
			if(e != null && e != "") {
				zui_Canvas.events.push(e);
			}
		}
		break;
	case 11:
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color != null ? color : defaultColor;
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.LABEL_COL = color != null ? color : defaultColor;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.ACCENT_COL = color != null ? color : defaultColor;
		var color = element.color_hover;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.ACCENT_HOVER_COL = color != null ? color : defaultColor;
		zui_Ext.keyInput(ui,zui_Canvas.h.nest(element.id),element.text);
		break;
	case 12:
		var col = ui.g.get_color();
		var ui1 = ui.g;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui1.set_color(color != null ? color : defaultColor);
		ui.g.fillRect(ui._x,ui._y,ui._w,element.height * zui_Canvas._ui.ops.scaleFactor | 0);
		ui.g.set_color(col);
		break;
	case 13:
		var col = ui.g.get_color();
		var ui1 = ui.g;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui1.set_color(color != null ? color : defaultColor);
		ui.g.drawRect(ui._x,ui._y,ui._w,element.height * zui_Canvas._ui.ops.scaleFactor | 0,element.strength);
		ui.g.set_color(col);
		break;
	case 14:
		var col = ui.g.get_color();
		var ui1 = ui.g;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui1.set_color(color != null ? color : defaultColor);
		kha_graphics2_GraphicsExtension.fillCircle(ui.g,ui._x + (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._w / 2);
		ui.g.set_color(col);
		break;
	case 15:
		var col = ui.g.get_color();
		var ui1 = ui.g;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui1.set_color(color != null ? color : defaultColor);
		kha_graphics2_GraphicsExtension.drawCircle(ui.g,ui._x + (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._w / 2,element.strength);
		ui.g.set_color(col);
		break;
	case 16:
		var col = ui.g.get_color();
		var ui1 = ui.g;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui1.set_color(color != null ? color : defaultColor);
		ui.g.fillTriangle(ui._x + ui._w / 2,ui._y,ui._x,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0),ui._x + ui._w,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0));
		ui.g.set_color(col);
		break;
	case 17:
		var col = ui.g.get_color();
		var ui1 = ui.g;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui1.set_color(color != null ? color : defaultColor);
		ui.g.drawLine(ui._x + ui._w / 2,ui._y,ui._x,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0),element.strength);
		ui.g.drawLine(ui._x,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0),ui._x + ui._w,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0),element.strength);
		ui.g.drawLine(ui._x + ui._w,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0),ui._x + ui._w / 2,ui._y,element.strength);
		ui.g.set_color(col);
		break;
	case 18:
		var col = ui.g.get_color();
		var progress = element.progress_at;
		var totalprogress = element.progress_total;
		var ui1 = ui.g;
		var color = element.color_progress;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui1.set_color(color != null ? color : defaultColor);
		ui.g.fillRect(ui._x,ui._y,ui._w / totalprogress * Math.min(progress,totalprogress),element.height * zui_Canvas._ui.ops.scaleFactor | 0);
		var ui1 = ui.g;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui1.set_color(color != null ? color : defaultColor);
		ui.g.drawRect(ui._x,ui._y,ui._w,element.height * zui_Canvas._ui.ops.scaleFactor | 0,element.strength);
		ui.g.set_color(col);
		break;
	case 19:
		var col = ui.g.get_color();
		var progress = element.progress_at;
		var totalprogress = element.progress_total;
		var ui1 = ui.g;
		var color = element.color_progress;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui1.set_color(color != null ? color : defaultColor);
		kha_graphics2_GraphicsExtension.drawArc(ui.g,ui._x + (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._w / 2,-Math.PI / 2,Math.PI * 2 / totalprogress * progress - Math.PI / 2,element.strength);
		var ui1 = ui.g;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui1.set_color(color != null ? color : defaultColor);
		kha_graphics2_GraphicsExtension.fillCircle(ui.g,ui._x + (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._w / 2 - 10);
		ui.g.set_color(col);
		break;
	case 20:
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color != null ? color : defaultColor;
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.LABEL_COL = color != null ? color : defaultColor;
		var color = element.color;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.ACCENT_COL = color != null ? color : defaultColor;
		var color = element.color_hover;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.ACCENT_HOVER_COL = color != null ? color : defaultColor;
		zui_Canvas.h.nest(element.id).text = element.text;
		zui_Ext.textArea(ui,zui_Canvas.h.nest(element.id),element.alignment,element.editable);
		if(zui_Canvas.h.nest(element.id).changed) {
			var e = element.event;
			if(e != null && e != "") {
				zui_Canvas.events.push(e);
			}
		}
		break;
	}
	if(element.children != null) {
		var _g = 0;
		var _g1 = element.children;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			zui_Canvas.drawElement(ui,canvas,zui_Canvas.elemById(canvas,id),(element.x * zui_Canvas._ui.ops.scaleFactor | 0) + px,(element.y * zui_Canvas._ui.ops.scaleFactor | 0) + py);
		}
	}
	if(rotated) {
		ui.g.popTransformation();
	}
};
zui_Canvas.getText = function(canvas,e) {
	return e.text;
};
zui_Canvas.getAsset = function(canvas,asset) {
	var _g = 0;
	var _g1 = canvas.assets;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		if(a.name == asset) {
			return zui_Canvas.assetMap.h[a.id];
		}
	}
	return null;
};
zui_Canvas.getElementId = function(canvas) {
	if(zui_Canvas.elemId == -1) {
		var _g = 0;
		var _g1 = canvas.elements;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(zui_Canvas.elemId < e.id) {
				zui_Canvas.elemId = e.id;
			}
		}
	}
	return ++zui_Canvas.elemId;
};
zui_Canvas.getAssetId = function(canvas) {
	if(zui_Canvas.assetId == -1) {
		var _g = 0;
		var _g1 = canvas.assets;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(zui_Canvas.assetId < a.id) {
				zui_Canvas.assetId = a.id;
			}
		}
	}
	return ++zui_Canvas.assetId;
};
zui_Canvas.elemById = function(canvas,id) {
	var _g = 0;
	var _g1 = canvas.elements;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		if(e.id == id) {
			return e;
		}
	}
	return null;
};
zui_Canvas.scaled = function(f) {
	return f * zui_Canvas._ui.ops.scaleFactor | 0;
};
zui_Canvas.getColor = function(color,defaultColor) {
	if(color != null) {
		return color;
	} else {
		return defaultColor;
	}
};
zui_Canvas.getTheme = function(theme) {
	var _g = 0;
	var _g1 = zui_Canvas.themes;
	while(_g < _g1.length) {
		var t = _g1[_g];
		++_g;
		if(t.NAME == theme) {
			return t;
		}
	}
	return null;
};
zui_Canvas.getAnchorOffset = function(canvas,element) {
	var boxWidth;
	var boxHeight;
	var offsetX = 0.0;
	var offsetY = 0.0;
	if(element.parent == null) {
		boxWidth = canvas.width;
		boxHeight = canvas.height;
	} else {
		var parent = zui_Canvas.elemById(canvas,element.parent);
		boxWidth = parent.width * zui_Canvas._ui.ops.scaleFactor | 0;
		boxHeight = parent.height * zui_Canvas._ui.ops.scaleFactor | 0;
	}
	switch(element.anchor) {
	case 1:
		offsetX += boxWidth / 2 - (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2;
		break;
	case 2:
		offsetX += boxWidth - (element.width * zui_Canvas._ui.ops.scaleFactor | 0);
		break;
	case 3:
		offsetY += boxHeight / 2 - (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2;
		break;
	case 4:
		offsetX += boxWidth / 2 - (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2;
		offsetY += boxHeight / 2 - (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2;
		break;
	case 5:
		offsetX += boxWidth - (element.width * zui_Canvas._ui.ops.scaleFactor | 0);
		offsetY += boxHeight / 2 - (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2;
		break;
	case 6:
		offsetY += boxHeight - (element.height * zui_Canvas._ui.ops.scaleFactor | 0);
		break;
	case 7:
		offsetX += boxWidth / 2 - (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2;
		offsetY += boxHeight - (element.height * zui_Canvas._ui.ops.scaleFactor | 0);
		break;
	case 8:
		offsetX += boxWidth - (element.width * zui_Canvas._ui.ops.scaleFactor | 0);
		offsetY += boxHeight - (element.height * zui_Canvas._ui.ops.scaleFactor | 0);
		break;
	}
	return [offsetX,offsetY];
};
var zui_Ext = function() { };
$hxClasses["zui.Ext"] = zui_Ext;
zui_Ext.__name__ = true;
zui_Ext.floatInput = function(ui,handle,label,align) {
	if(align == null) {
		align = 0;
	}
	if(label == null) {
		label = "";
	}
	handle.text = handle.value == null ? "null" : "" + handle.value;
	var text = ui.textInput(handle,label,align);
	handle.value = parseFloat(text);
	return handle.value;
};
zui_Ext.keyInput = function(ui,handle,label,align) {
	if(align == null) {
		align = 0;
	}
	if(label == null) {
		label = "";
	}
	if(!ui.isVisible(ui.t.ELEMENT_H * ui.ops.scaleFactor)) {
		ui.endElement();
		return handle.value | 0;
	}
	var hover = ui.getHover();
	if(hover && zui_Zui.onTextHover != null) {
		zui_Zui.onTextHover();
	}
	ui.g.set_color(hover ? ui.t.ACCENT_HOVER_COL : ui.t.ACCENT_COL);
	var g = ui.g;
	var fill = ui.t.FILL_ACCENT_BG;
	var x = ui._x + ui.buttonOffsetY;
	var y = ui._y + ui.buttonOffsetY;
	var w = ui._w - ui.buttonOffsetY * 2;
	var h = ui.t.BUTTON_H * ui.ops.scaleFactor;
	var strength = 0.0;
	if(strength == 0.0) {
		strength = 1;
	}
	if(!ui.enabled) {
		ui.fadeColor();
	}
	if(fill) {
		g.fillRect(x,y - 1,w,h + 1);
	} else {
		g.drawRect(x,y,w,h,strength);
	}
	var startEdit = ui.getReleased() || ui.tabPressed;
	if(ui.textSelectedHandle != handle && startEdit) {
		ui.startTextEdit(handle);
	}
	if(ui.textSelectedHandle == handle) {
		zui_Ext.listenToKey(ui,handle);
	} else {
		handle.changed = false;
	}
	if(label != "") {
		ui.g.set_color(ui.t.LABEL_COL);
		var labelAlign = align == 2 ? 0 : 2;
		var xOffset = labelAlign == 0 ? 7 : 0;
		ui.drawString(ui.g,label,xOffset,0,labelAlign);
	}
	handle.text = zui_Ext.keycodeToString(handle.value | 0);
	ui.g.set_color(ui.t.TEXT_COL);
	if(ui.textSelectedHandle != handle) {
		ui.drawString(ui.g,handle.text,null,0,align);
	} else {
		ui.drawString(ui.g,ui.textSelected,null,0,align);
	}
	ui.endElement();
	return handle.value | 0;
};
zui_Ext.listenToKey = function(ui,handle) {
	if(ui.isKeyDown) {
		handle.value = ui.key;
		handle.changed = ui.changed = true;
		ui.textSelectedHandle = null;
		ui.isTyping = false;
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().hide();
		}
	} else {
		ui.textSelected = "Press a key...";
	}
};
zui_Ext.list = function(ui,handle,ar,opts) {
	var selected = 0;
	if(opts == null) {
		opts = { };
	}
	var addCb = opts.addCb != null ? opts.addCb : function(name) {
		ar.push(name);
	};
	var removeCb = opts.removeCb != null ? opts.removeCb : function(i) {
		ar.splice(i,1);
	};
	var getNameCb = opts.getNameCb != null ? opts.getNameCb : function(i) {
		return ar[i];
	};
	var setNameCb = opts.setNameCb != null ? opts.setNameCb : function(i,name) {
		ar[i] = name;
	};
	var getLabelCb = opts.getLabelCb != null ? opts.getLabelCb : function(i) {
		return "";
	};
	var itemDrawCb = opts.itemDrawCb;
	var showRadio = opts.showRadio != null && opts.showRadio;
	var editable = opts.editable != null ? opts.editable : true;
	var showAdd = opts.showAdd != null ? opts.showAdd : true;
	var addLabel = opts.addLabel != null ? opts.addLabel : "Add";
	var i = 0;
	while(i < ar.length) {
		if(showRadio) {
			ui.row([0.12,0.68,0.2]);
			if(ui.radio(handle.nest(0),i,"")) {
				selected = i;
			}
		} else {
			ui.row([0.8,0.2]);
		}
		var itemHandle = handle.nest(i);
		itemHandle.text = getNameCb(i);
		if(editable) {
			setNameCb(i,ui.textInput(itemHandle,getLabelCb(i)));
		} else {
			ui.text(getNameCb(i));
		}
		if(ui.button("X")) {
			removeCb(i);
		} else {
			++i;
		}
		if(itemDrawCb != null) {
			itemDrawCb(itemHandle.nest(i),i - 1);
		}
	}
	if(showAdd && ui.button(addLabel)) {
		addCb("untitled");
	}
	return selected;
};
zui_Ext.panelList = function(ui,handle,ar,addCb,removeCb,getNameCb,setNameCb,itemDrawCb,editable,showAdd,addLabel) {
	if(addLabel == null) {
		addLabel = "Add";
	}
	if(showAdd == null) {
		showAdd = true;
	}
	if(editable == null) {
		editable = true;
	}
	if(addCb == null) {
		addCb = function(name) {
			ar.push(name);
		};
	}
	if(removeCb == null) {
		removeCb = function(i) {
			ar.splice(i,1);
		};
	}
	if(getNameCb == null) {
		getNameCb = function(i) {
			return ar[i];
		};
	}
	if(setNameCb == null) {
		setNameCb = function(i,name) {
			ar[i] = name;
		};
	}
	var i = 0;
	while(i < ar.length) {
		ui.row([0.12,0.68,0.2]);
		var expanded = ui.panel(handle.nest(i),"");
		var itemHandle = handle.nest(i);
		if(editable) {
			setNameCb(i,ui.textInput(itemHandle,getNameCb(i)));
		} else {
			ui.text(getNameCb(i));
		}
		if(ui.button("X")) {
			removeCb(i);
		} else {
			++i;
		}
		if(itemDrawCb != null && expanded) {
			itemDrawCb(itemHandle.nest(i),i - 1);
		}
	}
	if(showAdd && ui.button(addLabel)) {
		addCb("untitled");
	}
};
zui_Ext.colorField = function(ui,handle,alpha) {
	if(alpha == null) {
		alpha = false;
	}
	ui.g.set_color(handle.color);
	var g = ui.g;
	var x = ui._x + 2;
	var y = ui._y + ui.buttonOffsetY;
	var w = ui._w - 4;
	var h = ui.t.BUTTON_H * ui.ops.scaleFactor;
	var strength = 0.0;
	if(strength == 0.0) {
		strength = 1;
	}
	if(!ui.enabled) {
		ui.fadeColor();
	}
	g.fillRect(x,y - 1,w,h + 1);
	ui.g.set_color(ui.getHover() ? ui.t.ACCENT_HOVER_COL : ui.t.ACCENT_COL);
	var g = ui.g;
	var x = ui._x + 2;
	var y = ui._y + ui.buttonOffsetY;
	var w = ui._w - 4;
	var h = ui.t.BUTTON_H * ui.ops.scaleFactor;
	var strength = 1.0;
	if(strength == null) {
		strength = 0.0;
	}
	if(strength == 0.0) {
		strength = 1;
	}
	if(!ui.enabled) {
		ui.fadeColor();
	}
	g.drawRect(x,y,w,h,strength);
	if(ui.getStarted()) {
		zui_Popup.showCustom(new zui_Zui(ui.ops),function(ui) {
			zui_Ext.colorWheel(ui,handle,alpha);
		},ui.inputX | 0,ui.inputY | 0,200,500);
	}
	ui.endElement();
	return handle.color;
};
zui_Ext.colorPicker = function(ui,handle,alpha) {
	if(alpha == null) {
		alpha = false;
	}
	var r = ui.slider(handle.nest(0,{ value : ((handle.color & 16711680) >>> 16) * 0.00392156862745098}),"R",0,1,true);
	var g = ui.slider(handle.nest(1,{ value : ((handle.color & 65280) >>> 8) * 0.00392156862745098}),"G",0,1,true);
	var b = ui.slider(handle.nest(2,{ value : (handle.color & 255) * 0.00392156862745098}),"B",0,1,true);
	var a = (handle.color >>> 24) * 0.00392156862745098;
	if(alpha) {
		a = ui.slider(handle.nest(3,{ value : a}),"A",0,1,true);
	}
	var col = kha_Color.fromFloats(r,g,b,a);
	ui.text("",2,col);
	return col;
};
zui_Ext.initPath = function(handle,systemId) {
	handle.text = systemId == "Windows" ? "C:\\Users" : "/";
};
zui_Ext.fileBrowser = function(ui,handle,foldersOnly) {
	if(foldersOnly == null) {
		foldersOnly = false;
	}
	var sep = "/";
	var files = [];
	var userAgent = navigator.userAgent.toLowerCase();
	if(userAgent.indexOf(" electron/") > -1) {
		if(handle.text == "") {
			var pp = window.process.platform;
			var systemId = pp == "win32" ? "Windows" : pp == "darwin" ? "OSX" : "Linux";
			zui_Ext.initPath(handle,systemId);
		}
		try {
			files = require("fs").readdirSync(handle.text);
		} catch( _g ) {
		}
	}
	var i1 = handle.text.indexOf("/");
	var i2 = handle.text.indexOf("\\");
	var nested = i1 > -1 && handle.text.length - 1 > i1 || i2 > -1 && handle.text.length - 1 > i2;
	handle.changed = false;
	if(nested && ui.button("..",0)) {
		handle.changed = ui.changed = true;
		handle.text = handle.text.substring(0,handle.text.lastIndexOf(sep));
		if(handle.text.length == 2 && handle.text.charAt(1) == ":") {
			handle.text += sep;
		}
	}
	var _g = 0;
	while(_g < files.length) {
		var f = files[_g];
		++_g;
		if(f == "" || f.charAt(0) == ".") {
			continue;
		}
		if(ui.button(f,0)) {
			handle.changed = ui.changed = true;
			if(handle.text.charAt(handle.text.length - 1) != sep) {
				handle.text += sep;
			}
			handle.text += f;
		}
	}
	return handle.text;
};
zui_Ext.inlineRadio = function(ui,handle,texts,align) {
	if(align == null) {
		align = 1;
	}
	if(!ui.isVisible(ui.t.ELEMENT_H * ui.ops.scaleFactor)) {
		ui.endElement();
		return handle.position;
	}
	var step = ui._w / texts.length;
	var hovered = -1;
	if(ui.getHover()) {
		var ix = ui.inputX - ui._x - ui._windowX | 0;
		var _g = 0;
		var _g1 = texts.length;
		while(_g < _g1) {
			var i = _g++;
			if(ix < i * step + step) {
				hovered = i;
				break;
			}
		}
	}
	if(ui.getReleased()) {
		handle.position = hovered;
		handle.changed = ui.changed = true;
	} else {
		handle.changed = false;
	}
	var _g = 0;
	var _g1 = texts.length;
	while(_g < _g1) {
		var i = _g++;
		if(handle.position == i) {
			ui.g.set_color(ui.t.ACCENT_HOVER_COL);
			if(!ui.enabled) {
				ui.fadeColor();
			}
			ui.g.fillRect(ui._x + step * i,ui._y + ui.buttonOffsetY,step,ui.t.BUTTON_H * ui.ops.scaleFactor);
		} else if(hovered == i) {
			ui.g.set_color(ui.t.ACCENT_COL);
			if(!ui.enabled) {
				ui.fadeColor();
			}
			ui.g.drawRect(ui._x + step * i,ui._y + ui.buttonOffsetY,step,ui.t.BUTTON_H * ui.ops.scaleFactor);
		}
		ui.g.set_color(ui.t.TEXT_COL);
		ui.drawString(ui.g,texts[i],ui.t.TEXT_OFFSET * ui.ops.scaleFactor + step * i / ui.ops.scaleFactor,0,0);
	}
	ui.endElement();
	return handle.position;
};
zui_Ext.colorWheel = function(ui,handle,alpha,w,colorPreview) {
	if(colorPreview == null) {
		colorPreview = true;
	}
	if(alpha == null) {
		alpha = false;
	}
	if(w == null) {
		w = ui._w;
	}
	zui_Ext.rgbToHsv(((handle.color & 16711680) >>> 16) * 0.00392156862745098,((handle.color & 65280) >>> 8) * 0.00392156862745098,(handle.color & 255) * 0.00392156862745098,zui_Ext.ar);
	var chue = zui_Ext.ar[0];
	var csat = zui_Ext.ar[1];
	var cval = zui_Ext.ar[2];
	var calpha = (handle.color >>> 24) * 0.00392156862745098;
	var px = ui._x;
	var py = ui._y;
	var scroll = ui.currentWindow != null && ui.currentWindow.scrollEnabled;
	if(!scroll) {
		w -= ui.t.SCROLL_W * ui.ops.scaleFactor | 0;
		px += (ui.t.SCROLL_W * ui.ops.scaleFactor | 0) / 2;
	}
	ui.image(ui.ops.color_wheel,kha_Color.fromFloats(cval,cval,cval));
	var ph = ui._y - py;
	var ox = px + w / 2;
	var oy = py + ph / 2;
	var cw = w * 0.7;
	var cwh = cw / 2;
	var cx = ox;
	var cy = oy + csat * cwh;
	var theta = chue * (Math.PI * 2.0);
	var cx2 = Math.cos(theta) * (cx - ox) - Math.sin(theta) * (cy - oy) + ox;
	var cy2 = Math.sin(theta) * (cx - ox) + Math.cos(theta) * (cy - oy) + oy;
	cx = cx2;
	cy = cy2;
	ui.g.set_color(-16777216);
	ui.g.fillRect(cx - 3 * ui.ops.scaleFactor,cy - 3 * ui.ops.scaleFactor,6 * ui.ops.scaleFactor,6 * ui.ops.scaleFactor);
	ui.g.set_color(-1);
	ui.g.fillRect(cx - 2 * ui.ops.scaleFactor,cy - 2 * ui.ops.scaleFactor,4 * ui.ops.scaleFactor,4 * ui.ops.scaleFactor);
	if(alpha) {
		var alphaHandle = handle.nest(1,{ value : Math.round(calpha * 100) / 100});
		calpha = ui.slider(alphaHandle,"Alpha",0.0,1.0,true);
		if(alphaHandle.changed) {
			handle.changed = ui.changed = true;
		}
	}
	var gx = ox + ui._windowX;
	var gy = oy + ui._windowY;
	if(ui.inputStarted && ui.getInputInRect(gx - cwh,gy - cwh,cw,cw)) {
		zui_Ext.wheelSelectedHande = handle;
	}
	if(ui.inputReleased) {
		zui_Ext.wheelSelectedHande = null;
	}
	if(ui.inputDown && zui_Ext.wheelSelectedHande == handle) {
		var vx = gx - ui.inputX;
		var vy = gy - ui.inputY;
		csat = Math.min(Math.sqrt(vx * vx + vy * vy),cwh) / cwh;
		var angle = Math.atan2(ui.inputX - gx,ui.inputY - gy);
		if(angle < 0) {
			angle = Math.PI + (Math.PI - Math.abs(angle));
		}
		angle = Math.PI * 2 - angle;
		chue = angle / (Math.PI * 2);
		handle.changed = ui.changed = true;
	}
	zui_Ext.hsvToRgb(chue,csat,cval,zui_Ext.ar);
	handle.color = kha_Color.fromFloats(zui_Ext.ar[0],zui_Ext.ar[1],zui_Ext.ar[2],calpha);
	if(colorPreview) {
		ui.text("",2,handle.color);
	}
	var pos = zui_Ext.inlineRadio(ui,zui_Handle.global.nest(13,null),["RGB","HSV","Hex"]);
	var h0 = handle.nest(0).nest(0);
	var h1 = handle.nest(0).nest(1);
	var h2 = handle.nest(0).nest(2);
	if(pos == 0) {
		h0.value = ((handle.color & 16711680) >>> 16) * 0.00392156862745098;
		var f = ui.slider(h0,"R",0,1,true);
		handle.color = ((handle.color >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (f * 255 | 0) << 16 | (((handle.color & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((handle.color & 255) * 0.00392156862745098 * 255 | 0);
		h1.value = ((handle.color & 65280) >>> 8) * 0.00392156862745098;
		var f = ui.slider(h1,"G",0,1,true);
		handle.color = ((handle.color >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((handle.color & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (f * 255 | 0) << 8 | ((handle.color & 255) * 0.00392156862745098 * 255 | 0);
		h2.value = (handle.color & 255) * 0.00392156862745098;
		var f = ui.slider(h2,"B",0,1,true);
		handle.color = ((handle.color >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((handle.color & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((handle.color & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | (f * 255 | 0);
	} else if(pos == 1) {
		zui_Ext.rgbToHsv(((handle.color & 16711680) >>> 16) * 0.00392156862745098,((handle.color & 65280) >>> 8) * 0.00392156862745098,(handle.color & 255) * 0.00392156862745098,zui_Ext.ar);
		h0.value = zui_Ext.ar[0];
		h1.value = zui_Ext.ar[1];
		h2.value = zui_Ext.ar[2];
		var chue = ui.slider(h0,"H",0,1,true);
		var csat = ui.slider(h1,"S",0,1,true);
		var cval = ui.slider(h2,"V",0,1,true);
		zui_Ext.hsvToRgb(chue,csat,cval,zui_Ext.ar);
		handle.color = kha_Color.fromFloats(zui_Ext.ar[0],zui_Ext.ar[1],zui_Ext.ar[2]);
	} else if(pos == 2) {
		handle.text = (handle.color >>> 0).toString(16);
		handle.color = parseInt(ui.textInput(handle,"#"),16);
	}
	if(h0.changed || h1.changed || h2.changed) {
		handle.changed = ui.changed = true;
	}
	return handle.color;
};
zui_Ext.textArea = function(ui,handle,align,editable) {
	if(editable == null) {
		editable = true;
	}
	if(align == null) {
		align = 0;
	}
	handle.text = StringTools.replace(handle.text,"\t","    ");
	var lines = handle.text.split("\n");
	var selected = ui.textSelectedHandle == handle;
	var cursorStartX = ui.cursorX;
	var keyPressed = selected && ui.isKeyPressed;
	ui.highlightOnSelect = false;
	ui.tabSwitchEnabled = false;
	ui.g.set_color(ui.t.SEPARATOR_COL);
	var g = ui.g;
	var x = ui._x + ui.buttonOffsetY;
	var y = ui._y + ui.buttonOffsetY;
	var w = ui._w - ui.buttonOffsetY * 2;
	var h = lines.length * (ui.t.ELEMENT_H * ui.ops.scaleFactor) - ui.buttonOffsetY * 2;
	var strength = 0.0;
	if(strength == 0.0) {
		strength = 1;
	}
	if(!ui.enabled) {
		ui.fadeColor();
	}
	g.fillRect(x,y - 1,w,h + 1);
	var _g = 0;
	var _g1 = lines.length;
	while(_g < _g1) {
		var i = _g++;
		if(!selected && ui.getHover() || selected && i == handle.position) {
			handle.position = i;
			handle.text = lines[i];
			ui.textInput(handle,"",align,editable);
			if(keyPressed && ui.key != 13) {
				lines[i] = ui.textSelected;
			}
		} else {
			ui.text(lines[i],align);
		}
		ui._y -= ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor;
	}
	ui._y += ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor;
	if(keyPressed) {
		if(ui.key == 40 && handle.position < lines.length - 1) {
			handle.position++;
		}
		if(ui.key == 38 && handle.position > 0) {
			handle.position--;
		}
		if(editable && ui.key == 13) {
			handle.position++;
			lines.splice(handle.position,0,HxOverrides.substr(lines[handle.position - 1],ui.cursorX,null));
			lines[handle.position - 1] = HxOverrides.substr(lines[handle.position - 1],0,ui.cursorX);
			ui.startTextEdit(handle);
			ui.cursorX = ui.highlightAnchor = 0;
		}
		if(editable && ui.key == 8 && cursorStartX == 0 && handle.position > 0) {
			handle.position--;
			ui.cursorX = ui.highlightAnchor = lines[handle.position].length;
			lines[handle.position] += lines[handle.position + 1];
			lines.splice(handle.position + 1,1);
		}
		ui.textSelected = lines[handle.position];
	}
	ui.highlightOnSelect = true;
	ui.tabSwitchEnabled = true;
	handle.text = lines.join("\n");
	return handle.text;
};
zui_Ext.beginMenu = function(ui) {
	zui_Ext._ELEMENT_OFFSET = ui.t.ELEMENT_OFFSET;
	zui_Ext._BUTTON_COL = ui.t.BUTTON_COL;
	ui.t.ELEMENT_OFFSET = 0;
	ui.t.BUTTON_COL = ui.t.SEPARATOR_COL;
	ui.g.set_color(ui.t.SEPARATOR_COL);
	ui.g.fillRect(0,0,ui._windowW,ui.t.BUTTON_H * ui.ops.scaleFactor * 1.1 + 2 + ui.buttonOffsetY);
};
zui_Ext.endMenu = function(ui) {
	ui.t.ELEMENT_OFFSET = zui_Ext._ELEMENT_OFFSET;
	ui.t.BUTTON_COL = zui_Ext._BUTTON_COL;
};
zui_Ext.menuButton = function(ui,text) {
	ui._w = ui.ops.font.width(ui.fontSize,text) + 25 * ui.ops.scaleFactor | 0;
	return ui.button(text);
};
zui_Ext.MENUBAR_H = function(ui) {
	return ui.t.BUTTON_H * ui.ops.scaleFactor * 1.1 + 2 + ui.buttonOffsetY;
};
zui_Ext.keycodeToString = function(keycode) {
	switch(keycode) {
	case -1:
		return "None";
	case 0:
		return "Unknown";
	case 1:
		return "Back";
	case 3:
		return "Cancel";
	case 6:
		return "Help";
	case 8:
		return "Backspace";
	case 9:
		return "Tab";
	case 12:
		return "Clear";
	case 13:
		return "Return";
	case 16:
		return "Shift";
	case 17:
		return "Ctrl";
	case 18:
		return "Alt";
	case 19:
		return "Pause";
	case 20:
		return "CapsLock";
	case 21:
		return "Kana";
	case 22:
		return "Eisu";
	case 23:
		return "Junja";
	case 24:
		return "Final";
	case 25:
		return "Hanja";
	case 27:
		return "Esc";
	case 28:
		return "Convert";
	case 29:
		return "NonConvert";
	case 30:
		return "Accept";
	case 31:
		return "ModeChange";
	case 32:
		return "Space";
	case 33:
		return "PageUp";
	case 34:
		return "PageDown";
	case 35:
		return "End";
	case 36:
		return "Home";
	case 37:
		return "Left";
	case 38:
		return "Up";
	case 39:
		return "Right";
	case 40:
		return "Down";
	case 41:
		return "Select";
	case 42:
		return "Print";
	case 43:
		return "Execute";
	case 44:
		return "PrintScreen";
	case 45:
		return "Insert";
	case 46:
		return "Delete";
	case 58:
		return "Colon";
	case 59:
		return "Semicolon";
	case 60:
		return "LessThan";
	case 61:
		return "Equals";
	case 62:
		return "GreaterThan";
	case 63:
		return "QuestionMark";
	case 64:
		return "At";
	case 91:
		return "Win";
	case 93:
		return "ContextMenu";
	case 95:
		return "Sleep";
	case 96:
		return "Numpad0";
	case 97:
		return "Numpad1";
	case 98:
		return "Numpad2";
	case 99:
		return "Numpad3";
	case 100:
		return "Numpad4";
	case 101:
		return "Numpad5";
	case 102:
		return "Numpad6";
	case 103:
		return "Numpad7";
	case 104:
		return "Numpad8";
	case 105:
		return "Numpad9";
	case 106:
		return "Multiply";
	case 107:
		return "Add";
	case 108:
		return "Separator";
	case 109:
		return "Subtract";
	case 110:
		return "Decimal";
	case 111:
		return "Divide";
	case 112:
		return "F1";
	case 113:
		return "F2";
	case 114:
		return "F3";
	case 115:
		return "F4";
	case 116:
		return "F5";
	case 117:
		return "F6";
	case 118:
		return "F7";
	case 119:
		return "F8";
	case 120:
		return "F9";
	case 121:
		return "F10";
	case 122:
		return "F11";
	case 123:
		return "F12";
	case 124:
		return "F13";
	case 125:
		return "F14";
	case 126:
		return "F15";
	case 127:
		return "F16";
	case 128:
		return "F17";
	case 129:
		return "F18";
	case 130:
		return "F19";
	case 131:
		return "F20";
	case 132:
		return "F21";
	case 133:
		return "F22";
	case 134:
		return "F23";
	case 135:
		return "F24";
	case 144:
		return "NumLock";
	case 145:
		return "ScrollLock";
	case 146:
		return "WinOemFjJisho";
	case 147:
		return "WinOemFjMasshou";
	case 148:
		return "WinOemFjTouroku";
	case 149:
		return "WinOemFjLoya";
	case 150:
		return "WinOemFjRoya";
	case 160:
		return "Circumflex";
	case 161:
		return "Exclamation";
	case 162:
		return "DoubleQuote";
	case 163:
		return "Hash";
	case 164:
		return "Dollar";
	case 165:
		return "Percent";
	case 166:
		return "Ampersand";
	case 167:
		return "Underscore";
	case 168:
		return "OpenParen";
	case 169:
		return "CloseParen";
	case 170:
		return "Asterisk";
	case 171:
		return "Plus";
	case 172:
		return "Pipe";
	case 173:
		return "HyphenMinus";
	case 174:
		return "OpenCurlyBracket";
	case 175:
		return "CloseCurlyBracket";
	case 176:
		return "Tilde";
	case 181:
		return "VolumeMute";
	case 182:
		return "VolumeDown";
	case 183:
		return "VolumeUp";
	case 188:
		return "Comma";
	case 190:
		return "Period";
	case 191:
		return "Slash";
	case 192:
		return "BackQuote";
	case 219:
		return "OpenBracket";
	case 220:
		return "BackSlash";
	case 221:
		return "CloseBracket";
	case 222:
		return "Quote";
	case 224:
		return "Meta";
	case 225:
		return "AltGr";
	case 227:
		return "WinIcoHelp";
	case 228:
		return "WinIco00";
	case 230:
		return "WinIcoClear";
	case 233:
		return "WinOemReset";
	case 234:
		return "WinOemJump";
	case 235:
		return "WinOemPA1";
	case 236:
		return "WinOemPA2";
	case 237:
		return "WinOemPA3";
	case 238:
		return "WinOemWSCTRL";
	case 239:
		return "WinOemCUSEL";
	case 240:
		return "WinOemATTN";
	case 241:
		return "WinOemFinish";
	case 242:
		return "WinOemCopy";
	case 243:
		return "WinOemAuto";
	case 244:
		return "WinOemENLW";
	case 245:
		return "WinOemBackTab";
	case 246:
		return "ATTN";
	case 247:
		return "CRSEL";
	case 248:
		return "EXSEL";
	case 249:
		return "EREOF";
	case 250:
		return "Play";
	case 251:
		return "Zoom";
	case 253:
		return "PA1";
	case 254:
		return "WinOemClear";
	}
	return String.fromCodePoint(keycode);
};
zui_Ext.dist = function(x1,y1,x2,y2) {
	var vx = x1 - x2;
	var vy = y1 - y2;
	return Math.sqrt(vx * vx + vy * vy);
};
zui_Ext.fract = function(f) {
	return f - (f | 0);
};
zui_Ext.mix = function(x,y,a) {
	return x * (1.0 - a) + y * a;
};
zui_Ext.clamp = function(x,minVal,maxVal) {
	return Math.min(Math.max(x,minVal),maxVal);
};
zui_Ext.step = function(edge,x) {
	if(x < edge) {
		return 0.0;
	} else {
		return 1.0;
	}
};
zui_Ext.hsvToRgb = function(cR,cG,cB,out) {
	var f = cR + 1.0;
	var px = Math.abs((f - (f | 0)) * 6.0 - 3.0);
	var f = cR + 0.66666666666666663;
	var py = Math.abs((f - (f | 0)) * 6.0 - 3.0);
	var f = cR + 0.333333333333333315;
	var pz = Math.abs((f - (f | 0)) * 6.0 - 3.0);
	out[0] = cB * (1.0 - cG + Math.min(Math.max(px - 1.0,0.0),1.0) * cG);
	out[1] = cB * (1.0 - cG + Math.min(Math.max(py - 1.0,0.0),1.0) * cG);
	out[2] = cB * (1.0 - cG + Math.min(Math.max(pz - 1.0,0.0),1.0) * cG);
};
zui_Ext.rgbToHsv = function(cR,cG,cB,out) {
	var a = cG < cB ? 0.0 : 1.0;
	var px = cB * (1.0 - a) + cG * a;
	var a = cG < cB ? 0.0 : 1.0;
	var py = cG * (1.0 - a) + cB * a;
	var a = cG < cB ? 0.0 : 1.0;
	var pz = -1.0 * (1.0 - a) + 0.0 * a;
	var a = cG < cB ? 0.0 : 1.0;
	var pw = 0.66666666666666663 * (1.0 - a) + -0.333333333333333315 * a;
	var a = cR < px ? 0.0 : 1.0;
	var qx = px * (1.0 - a) + cR * a;
	var a = cR < px ? 0.0 : 1.0;
	var qy = py * (1.0 - a) + py * a;
	var a = cR < px ? 0.0 : 1.0;
	var qz = pw * (1.0 - a) + pz * a;
	var a = cR < px ? 0.0 : 1.0;
	var qw = cR * (1.0 - a) + px * a;
	var d = qx - Math.min(qw,qy);
	out[0] = Math.abs(qz + (qw - qy) / (6.0 * d + 1.0e-10));
	out[1] = d / (qx + 1.0e-10);
	out[2] = qx;
};
var zui_Id = function() { };
$hxClasses["zui.Id"] = zui_Id;
zui_Id.__name__ = true;
var zui_Nodes = function() {
	this.popupCommands = null;
	this.popupH = 0;
	this.popupW = 0;
	this.popupY = 0;
	this.popupX = 0;
	this.nodeId = -1;
	this.lastNodesCount = 0;
	this.handle = new zui_Handle();
	this.snapY = 0.0;
	this.snapX = 0.0;
	this.snapSocket = 0;
	this.snapToId = -1;
	this.snapFromId = -1;
	this.isNewLink = false;
	this.linkDrag = null;
	this.moveOnTop = null;
	this.dragged = false;
	this.ELEMENT_H = 25;
	this.scaleFactor = 1.0;
	this.uih = 0;
	this.uiw = 0;
	this.zoom = 1.0;
	this.panY = 0.0;
	this.panX = 0.0;
	this.nodesSelected = [];
	this.nodesDrag = false;
};
$hxClasses["zui.Nodes"] = zui_Nodes;
zui_Nodes.__name__ = true;
zui_Nodes.tr = function(id,vars) {
	return id;
};
zui_Nodes.prototype = {
	nodesDrag: null
	,nodesSelected: null
	,panX: null
	,panY: null
	,zoom: null
	,uiw: null
	,uih: null
	,scaleFactor: null
	,ELEMENT_H: null
	,dragged: null
	,moveOnTop: null
	,linkDrag: null
	,isNewLink: null
	,snapFromId: null
	,snapToId: null
	,snapSocket: null
	,snapX: null
	,snapY: null
	,handle: null
	,lastNodesCount: null
	,SCALE: function() {
		return this.scaleFactor * this.zoom;
	}
	,PAN_X: function() {
		var zoomPan = (1.0 - this.zoom) * this.uiw / 2.5;
		return this.panX * (this.scaleFactor * this.zoom) + zoomPan;
	}
	,PAN_Y: function() {
		var zoomPan = (1.0 - this.zoom) * this.uih / 2.5;
		return this.panY * (this.scaleFactor * this.zoom) + zoomPan;
	}
	,LINE_H: function() {
		return this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0;
	}
	,BUTTONS_H: function(node) {
		var buttonsH = 0.0;
		var _g = 0;
		var _g1 = node.buttons;
		while(_g < _g1.length) {
			var but = _g1[_g];
			++_g;
			if(but.type == "RGBA") {
				buttonsH += 235 * (this.scaleFactor * this.zoom);
			} else if(but.type == "VECTOR") {
				buttonsH += (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 4;
			} else if(but.type == "RAMP") {
				buttonsH += (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 4.5;
			} else if(but.type == "CURVES") {
				buttonsH += (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 8;
			} else if(but.type == "ARRAY") {
				buttonsH += ((but.default_value) instanceof Array) ? (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * ((js_Boot.__cast(but.default_value , Array)).length + 1.5) : (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.5;
			} else {
				buttonsH += this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0;
			}
		}
		return buttonsH | 0;
	}
	,NODE_H: function(node) {
		return (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.2 + node.inputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + node.outputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + this.BUTTONS_H(node) | 0;
	}
	,NODE_W: function() {
		return 140 * (this.scaleFactor * this.zoom) | 0;
	}
	,NODE_X: function(node) {
		var zoomPan = (1.0 - this.zoom) * this.uiw / 2.5;
		return node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan);
	}
	,NODE_Y: function(node) {
		var zoomPan = (1.0 - this.zoom) * this.uih / 2.5;
		return node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan);
	}
	,SOCKET_Y: function(pos) {
		return ((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.62 | 0) + pos * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0);
	}
	,p: function(f) {
		return f * (this.scaleFactor * this.zoom);
	}
	,getNode: function(nodes,id) {
		var _g = 0;
		while(_g < nodes.length) {
			var node = nodes[_g];
			++_g;
			if(node.id == id) {
				return node;
			}
		}
		return null;
	}
	,nodeId: null
	,getNodeId: function(nodes) {
		if(this.nodeId == -1) {
			var _g = 0;
			while(_g < nodes.length) {
				var n = nodes[_g];
				++_g;
				if(this.nodeId < n.id) {
					this.nodeId = n.id;
				}
			}
		}
		return ++this.nodeId;
	}
	,getLinkId: function(links) {
		var id = 0;
		var _g = 0;
		while(_g < links.length) {
			var l = links[_g];
			++_g;
			if(l.id >= id) {
				id = l.id + 1;
			}
		}
		return id;
	}
	,getSocketId: function(nodes) {
		var id = 0;
		var _g = 0;
		while(_g < nodes.length) {
			var n = nodes[_g];
			++_g;
			var _g1 = 0;
			var _g2 = n.inputs;
			while(_g1 < _g2.length) {
				var s = _g2[_g1];
				++_g1;
				if(s.id >= id) {
					id = s.id + 1;
				}
			}
			var _g3 = 0;
			var _g4 = n.outputs;
			while(_g3 < _g4.length) {
				var s1 = _g4[_g3];
				++_g3;
				if(s1.id >= id) {
					id = s1.id + 1;
				}
			}
		}
		return id;
	}
	,bakeElements: function(ui) {
		ui.g.end();
		zui_Nodes.elementsBaked = true;
		zui_Nodes.socketImage = kha_Image.createRenderTarget(24,24);
		var g = zui_Nodes.socketImage.get_g2();
		g.begin(true,0);
		g.set_color(-16777216);
		kha_graphics2_GraphicsExtension.fillCircle(g,12,12,12);
		g.set_color(-1);
		kha_graphics2_GraphicsExtension.fillCircle(g,12,12,9);
		g.end();
		ui.g.begin(false);
	}
	,nodeCanvas: function(ui,canvas) {
		if(!zui_Nodes.elementsBaked) {
			this.bakeElements(ui);
		}
		if(this.lastNodesCount > canvas.nodes.length) {
			ui.changed = true;
		}
		this.lastNodesCount = canvas.nodes.length;
		var wx = ui._windowX;
		var wy = ui._windowY;
		ui.inputEnabled = this.popupCommands == null;
		if(ui.inputEnabled && (ui.inputDownR || ui.inputDown && ui.isCtrlDown)) {
			this.panX += ui.inputDX / (this.scaleFactor * this.zoom);
			this.panY += ui.inputDY / (this.scaleFactor * this.zoom);
		}
		if(ui.inputEnabled && ui.inputWheelDelta != 0) {
			this.zoom += -ui.inputWheelDelta / 10;
			if(this.zoom < 0.1) {
				this.zoom = 0.1;
			} else if(this.zoom > 1.0) {
				this.zoom = 1.0;
			}
			this.zoom = Math.round(this.zoom * 10) / 10;
			this.uiw = ui._w;
			this.uih = ui._h;
		}
		this.scaleFactor = ui.ops.scaleFactor;
		this.ELEMENT_H = ui.t.ELEMENT_H + 2;
		ui.setScale(this.scaleFactor * this.zoom);
		ui.elementsBaked = true;
		ui.g.set_font(ui.ops.font);
		ui.g.set_fontSize(ui.fontSize);
		var _g = 0;
		var _g1 = canvas.links;
		while(_g < _g1.length) {
			var link = _g1[_g];
			++_g;
			var from = this.getNode(canvas.nodes,link.from_id);
			var to = this.getNode(canvas.nodes,link.to_id);
			var fromX;
			if(from == null) {
				fromX = ui.inputX;
			} else {
				var zoomPan = (1.0 - this.zoom) * this.uiw / 2.5;
				fromX = wx + (from.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan)) + (140 * (this.scaleFactor * this.zoom) | 0);
			}
			var fromY;
			if(from == null) {
				fromY = ui.inputY;
			} else {
				var zoomPan1 = (1.0 - this.zoom) * this.uih / 2.5;
				fromY = wy + (from.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan1)) + (((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.62 | 0) + link.from_socket * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0));
			}
			var toX;
			if(to == null) {
				toX = ui.inputX;
			} else {
				var zoomPan2 = (1.0 - this.zoom) * this.uiw / 2.5;
				toX = wx + (to.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan2));
			}
			var toY;
			if(to == null) {
				toY = ui.inputY;
			} else {
				var zoomPan3 = (1.0 - this.zoom) * this.uih / 2.5;
				toY = wy + (to.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan3)) + (((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.62 | 0) + (link.to_socket + to.outputs.length) * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) + this.BUTTONS_H(to);
			}
			var left = toX > fromX ? fromX : toX;
			var right = toX > fromX ? toX : fromX;
			var top = toY > fromY ? fromY : toY;
			var bottom = toY > fromY ? toY : fromY;
			if(right < 0 || left > wx + ui._windowW || bottom < 0 || top > wy + ui._windowH) {
				continue;
			}
			if(this.linkDrag == link) {
				if(this.snapFromId != -1) {
					fromX = this.snapX;
					fromY = this.snapY;
				}
				if(this.snapToId != -1) {
					toX = this.snapX;
					toY = this.snapY;
				}
				this.snapFromId = this.snapToId = -1;
				var _g2 = 0;
				var _g3 = canvas.nodes;
				while(_g2 < _g3.length) {
					var node = _g3[_g2];
					++_g2;
					var inps = node.inputs;
					var outs = node.outputs;
					var nodeh = (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.2 + node.inputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + node.outputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + this.BUTTONS_H(node) | 0;
					var zoomPan4 = (1.0 - this.zoom) * this.uiw / 2.5;
					var rx = wx + (node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan4)) - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2;
					var zoomPan5 = (1.0 - this.zoom) * this.uih / 2.5;
					var ry = wy + (node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan5)) - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2;
					var rw = (140 * (this.scaleFactor * this.zoom) | 0) + (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0);
					var rh = nodeh + (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0);
					if(ui.getInputInRect(rx,ry,rw,rh)) {
						if(from == null && node.id != to.id) {
							var _g4 = 0;
							var _g5 = outs.length;
							while(_g4 < _g5) {
								var i = _g4++;
								var zoomPan6 = (1.0 - this.zoom) * this.uiw / 2.5;
								var sx = wx + (node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan6)) + (140 * (this.scaleFactor * this.zoom) | 0);
								var zoomPan7 = (1.0 - this.zoom) * this.uih / 2.5;
								var sy = wy + (node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan7)) + (((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.62 | 0) + i * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0));
								var rx1 = sx - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2;
								var ry1 = sy - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2;
								if(ui.getInputInRect(rx1,ry1,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) {
									this.snapX = sx;
									this.snapY = sy;
									this.snapFromId = node.id;
									this.snapSocket = i;
									break;
								}
							}
						} else if(to == null && node.id != from.id) {
							var _g6 = 0;
							var _g7 = inps.length;
							while(_g6 < _g7) {
								var i1 = _g6++;
								var zoomPan8 = (1.0 - this.zoom) * this.uiw / 2.5;
								var sx1 = wx + (node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan8));
								var zoomPan9 = (1.0 - this.zoom) * this.uih / 2.5;
								var sy1 = wy + (node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan9)) + (((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.62 | 0) + (i1 + outs.length) * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) + this.BUTTONS_H(node);
								var rx2 = sx1 - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2;
								var ry2 = sy1 - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2;
								if(ui.getInputInRect(rx2,ry2,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) {
									this.snapX = sx1;
									this.snapY = sy1;
									this.snapToId = node.id;
									this.snapSocket = i1;
									break;
								}
							}
						}
					}
				}
			}
			var selected = false;
			var _g8 = 0;
			var _g9 = this.nodesSelected;
			while(_g8 < _g9.length) {
				var n = _g9[_g8];
				++_g8;
				if(link.from_id == n.id || link.to_id == n.id) {
					selected = true;
					break;
				}
			}
			this.drawLink(ui,fromX - wx,fromY - wy,toX - wx,toY - wy,selected);
		}
		var _g = 0;
		var _g1 = canvas.nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			var tmp;
			var tmp1;
			var tmp2;
			var zoomPan = (1.0 - this.zoom) * this.uiw / 2.5;
			if(!(node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan) > ui._windowW)) {
				var zoomPan1 = (1.0 - this.zoom) * this.uiw / 2.5;
				tmp2 = node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan1) + (140 * (this.scaleFactor * this.zoom) | 0) < 0;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				var zoomPan2 = (1.0 - this.zoom) * this.uih / 2.5;
				tmp1 = node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan2) > ui._windowH;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				var zoomPan3 = (1.0 - this.zoom) * this.uih / 2.5;
				tmp = node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan3) + ((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.2 + node.inputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + node.outputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + this.BUTTONS_H(node) | 0) < 0;
			} else {
				tmp = true;
			}
			if(tmp) {
				if(this.nodesSelected.indexOf(node) < 0) {
					continue;
				}
			}
			var inps = node.inputs;
			var outs = node.outputs;
			var nodeh = (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.2 + node.inputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + node.outputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + this.BUTTONS_H(node) | 0;
			var tmp3;
			if(ui.inputEnabled) {
				var zoomPan4 = (1.0 - this.zoom) * this.uiw / 2.5;
				var zoomPan5 = (1.0 - this.zoom) * this.uih / 2.5;
				tmp3 = ui.getInputInRect(wx + (node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan4)) - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,wy + (node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan5)),(140 * (this.scaleFactor * this.zoom) | 0) + (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0),this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0);
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				if(ui.inputStarted) {
					if(ui.isShiftDown) {
						if(this.nodesSelected.indexOf(node) >= 0) {
							HxOverrides.remove(this.nodesSelected,node);
						} else {
							this.nodesSelected.push(node);
						}
					} else if(this.nodesSelected.length <= 1) {
						this.nodesSelected = [node];
					}
					this.moveOnTop = node;
					this.nodesDrag = true;
					this.dragged = false;
				} else if(ui.inputReleased && !ui.isShiftDown && !this.dragged) {
					this.nodesSelected = [node];
				}
			}
			var tmp4;
			if(ui.inputStarted) {
				var zoomPan6 = (1.0 - this.zoom) * this.uiw / 2.5;
				var zoomPan7 = (1.0 - this.zoom) * this.uih / 2.5;
				tmp4 = ui.getInputInRect(wx + (node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan6)) - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,wy + (node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan7)) - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,(140 * (this.scaleFactor * this.zoom) | 0) + (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0),nodeh + (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0));
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				if(this.linkDrag == null) {
					var _g2 = 0;
					var _g3 = outs.length;
					while(_g2 < _g3) {
						var i = _g2++;
						var zoomPan8 = (1.0 - this.zoom) * this.uiw / 2.5;
						var sx = wx + (node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan8)) + (140 * (this.scaleFactor * this.zoom) | 0);
						var zoomPan9 = (1.0 - this.zoom) * this.uih / 2.5;
						var sy = wy + (node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan9)) + (((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.62 | 0) + i * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0));
						if(ui.getInputInRect(sx - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,sy - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) {
							var l = { id : this.getLinkId(canvas.links), from_id : node.id, from_socket : i, to_id : -1, to_socket : -1};
							canvas.links.push(l);
							this.linkDrag = l;
							this.isNewLink = true;
							break;
						}
					}
				}
				if(this.linkDrag == null) {
					var _g4 = 0;
					var _g5 = inps.length;
					while(_g4 < _g5) {
						var i1 = _g4++;
						var zoomPan10 = (1.0 - this.zoom) * this.uiw / 2.5;
						var sx1 = wx + (node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan10));
						var zoomPan11 = (1.0 - this.zoom) * this.uih / 2.5;
						var sy1 = wy + (node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan11)) + (((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.62 | 0) + (i1 + outs.length) * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) + this.BUTTONS_H(node);
						if(ui.getInputInRect(sx1 - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,sy1 - (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) / 2,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0,this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0)) {
							var _g6 = 0;
							var _g7 = canvas.links;
							while(_g6 < _g7.length) {
								var l1 = _g7[_g6];
								++_g6;
								if(l1.to_id == node.id && l1.to_socket == i1) {
									l1.to_id = l1.to_socket = -1;
									this.linkDrag = l1;
									this.isNewLink = false;
									break;
								}
							}
							if(this.linkDrag != null) {
								break;
							}
							var l2 = { id : this.getLinkId(canvas.links), from_id : -1, from_socket : -1, to_id : node.id, to_socket : i1};
							canvas.links.push(l2);
							this.linkDrag = l2;
							this.isNewLink = true;
							break;
						}
					}
				}
			} else if(ui.inputReleased) {
				if(this.snapToId != -1) {
					var _g8 = 0;
					var _g9 = canvas.links;
					while(_g8 < _g9.length) {
						var l3 = _g9[_g8];
						++_g8;
						if(l3.to_id == this.snapToId && l3.to_socket == this.snapSocket) {
							HxOverrides.remove(canvas.links,l3);
							break;
						}
					}
					this.linkDrag.to_id = this.snapToId;
					this.linkDrag.to_socket = this.snapSocket;
					ui.changed = true;
				} else if(this.snapFromId != -1) {
					this.linkDrag.from_id = this.snapFromId;
					this.linkDrag.from_socket = this.snapSocket;
					ui.changed = true;
				} else if(this.linkDrag != null) {
					HxOverrides.remove(canvas.links,this.linkDrag);
					ui.changed = true;
					if(zui_Nodes.onLinkDrag != null) {
						zui_Nodes.onLinkDrag(this.linkDrag,this.isNewLink);
					}
				}
				this.snapToId = this.snapFromId = -1;
				this.linkDrag = null;
				this.nodesDrag = false;
			}
			if(this.nodesDrag && this.nodesSelected.indexOf(node) >= 0 && !ui.inputDownR) {
				if(ui.inputDX != 0 || ui.inputDY != 0) {
					this.dragged = true;
					node.x += ui.inputDX / (this.scaleFactor * this.zoom) | 0;
					node.y += ui.inputDY / (this.scaleFactor * this.zoom) | 0;
				}
			}
			this.drawNode(ui,node,canvas);
		}
		if(zui_Nodes.boxSelect) {
			ui.g.set_color(573780957);
			ui.g.fillRect(zui_Nodes.boxSelectX,zui_Nodes.boxSelectY,ui.inputX - zui_Nodes.boxSelectX - ui._windowX,ui.inputY - zui_Nodes.boxSelectY - ui._windowY);
			ui.g.set_color(1999844317);
			ui.g.drawRect(zui_Nodes.boxSelectX,zui_Nodes.boxSelectY,ui.inputX - zui_Nodes.boxSelectX - ui._windowX,ui.inputY - zui_Nodes.boxSelectY - ui._windowY);
			ui.g.set_color(-1);
		}
		if(ui.inputEnabled && ui.inputStarted && !ui.isAltDown && !ui.isCtrlDown && this.linkDrag == null && !this.nodesDrag && !ui.changed) {
			zui_Nodes.boxSelect = true;
			zui_Nodes.boxSelectX = ui.inputX - ui._windowX | 0;
			zui_Nodes.boxSelectY = ui.inputY - ui._windowY | 0;
		} else if(zui_Nodes.boxSelect && !ui.inputDown) {
			zui_Nodes.boxSelect = false;
			var nodes = [];
			var left = zui_Nodes.boxSelectX;
			var top = zui_Nodes.boxSelectY;
			var right = ui.inputX - ui._windowX | 0;
			var bottom = ui.inputY - ui._windowY | 0;
			if(left > right) {
				var t = left;
				left = right;
				right = t;
			}
			if(top > bottom) {
				var t = top;
				top = bottom;
				bottom = t;
			}
			var _g = 0;
			var _g1 = canvas.nodes;
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				var tmp;
				var tmp1;
				var tmp2;
				var zoomPan = (1.0 - this.zoom) * this.uiw / 2.5;
				if(n.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan) + (140 * (this.scaleFactor * this.zoom) | 0) > left) {
					var zoomPan1 = (1.0 - this.zoom) * this.uiw / 2.5;
					tmp2 = n.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan1) < right;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					var zoomPan2 = (1.0 - this.zoom) * this.uih / 2.5;
					tmp1 = n.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan2) + ((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.2 + n.inputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + n.outputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + this.BUTTONS_H(n) | 0) > top;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					var zoomPan3 = (1.0 - this.zoom) * this.uih / 2.5;
					tmp = n.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan3) < bottom;
				} else {
					tmp = false;
				}
				if(tmp) {
					nodes.push(n);
				}
			}
			if(ui.isShiftDown) {
				var _g = 0;
				while(_g < nodes.length) {
					var n = nodes[_g];
					++_g;
					this.nodesSelected.push(n);
				}
			} else {
				this.nodesSelected = nodes;
			}
		}
		if(this.moveOnTop != null) {
			HxOverrides.remove(canvas.nodes,this.moveOnTop);
			canvas.nodes.push(this.moveOnTop);
			this.moveOnTop = null;
		}
		var cutSelected = false;
		if(zui_Zui.isCopy) {
			var copyNodes = [];
			var _g = 0;
			var _g1 = this.nodesSelected;
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				if(zui_Nodes.excludeRemove.indexOf(n.type) >= 0) {
					continue;
				}
				copyNodes.push(n);
			}
			var copyLinks = [];
			var _g = 0;
			var _g1 = canvas.links;
			while(_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if(this.getNode(this.nodesSelected,l.from_id) != null && this.getNode(this.nodesSelected,l.to_id) != null) {
					copyLinks.push(l);
				}
			}
			var copyCanvas = { name : canvas.name, nodes : copyNodes, links : copyLinks};
			zui_Nodes.clipboard = JSON.stringify(copyCanvas);
			cutSelected = zui_Zui.isCut;
		}
		if(zui_Zui.isPaste && !ui.isTyping) {
			var pasteCanvas = null;
			try {
				pasteCanvas = JSON.parse(zui_Nodes.clipboard);
			} catch( _g ) {
			}
			if(pasteCanvas != null) {
				var _g = 0;
				var _g1 = pasteCanvas.links;
				while(_g < _g1.length) {
					var l = _g1[_g];
					++_g;
					l.id = this.getLinkId(canvas.links);
					canvas.links.push(l);
				}
				var _g = 0;
				var _g1 = pasteCanvas.nodes;
				while(_g < _g1.length) {
					var n = _g1[_g];
					++_g;
					var old_id = n.id;
					n.id = this.getNodeId(canvas.nodes);
					var _g2 = 0;
					var _g3 = n.inputs;
					while(_g2 < _g3.length) {
						var soc = _g3[_g2];
						++_g2;
						soc.id = this.getSocketId(canvas.nodes);
						soc.node_id = n.id;
					}
					var _g4 = 0;
					var _g5 = n.outputs;
					while(_g4 < _g5.length) {
						var soc1 = _g5[_g4];
						++_g4;
						soc1.id = this.getSocketId(canvas.nodes);
						soc1.node_id = n.id;
					}
					var _g6 = 0;
					var _g7 = pasteCanvas.links;
					while(_g6 < _g7.length) {
						var l = _g7[_g6];
						++_g6;
						if(l.from_id == old_id) {
							l.from_id = n.id;
						} else if(l.to_id == old_id) {
							l.to_id = n.id;
						}
					}
					n.x += 10;
					n.y += 10;
					canvas.nodes.push(n);
				}
				this.nodesSelected = pasteCanvas.nodes;
			}
		}
		if(ui.isCtrlDown && ui.key == 65) {
			this.nodesSelected = [];
			var _g = 0;
			var _g1 = canvas.nodes;
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				this.nodesSelected.push(n);
			}
		}
		if(ui.inputEnabled && (ui.isBackspaceDown || ui.isDeleteDown || cutSelected) && !ui.isTyping) {
			var i = this.nodesSelected.length - 1;
			while(i >= 0) {
				var n = this.nodesSelected[i--];
				if(zui_Nodes.excludeRemove.indexOf(n.type) >= 0) {
					continue;
				}
				this.removeNode(n,canvas);
				ui.changed = true;
			}
		}
		ui.setScale(this.scaleFactor);
		ui.elementsBaked = true;
		ui.inputEnabled = true;
		if(this.popupCommands != null) {
			ui._x = this.popupX;
			ui._y = this.popupY;
			ui._w = this.popupW;
			ui.fill(-6,-6,ui._w / ui.ops.scaleFactor + 12,this.popupH + 12,ui.t.ACCENT_SELECT_COL);
			ui.fill(-5,-5,ui._w / ui.ops.scaleFactor + 10,this.popupH + 10,ui.t.SEPARATOR_COL);
			this.popupCommands(ui);
			var hide = (ui.inputStarted || ui.inputStartedR) && (ui.inputX - wx < this.popupX - 6 || ui.inputX - wx > this.popupX + this.popupW + 6 || ui.inputY - wy < this.popupY - 6 || ui.inputY - wy > this.popupY + this.popupH * ui.ops.scaleFactor + 6);
			if(hide || ui.isEscapeDown) {
				this.popupCommands = null;
			}
		}
	}
	,isSelected: function(node) {
		return this.nodesSelected.indexOf(node) >= 0;
	}
	,drawNode: function(ui,node,canvas) {
		var wx = ui._windowX;
		var wy = ui._windowY;
		var uiX = ui._x;
		var uiY = ui._y;
		var uiW = ui._w;
		var w = 140 * (this.scaleFactor * this.zoom) | 0;
		var g = ui.g;
		var h = (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.2 + node.inputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + node.outputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + this.BUTTONS_H(node) | 0;
		var zoomPan = (1.0 - this.zoom) * this.uiw / 2.5;
		var nx = node.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan);
		var zoomPan = (1.0 - this.zoom) * this.uih / 2.5;
		var ny = node.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan);
		var text = zui_Nodes.tr(node.name);
		var lineh = this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0;
		var _inputStarted = ui.inputStarted;
		if(ui.inputStarted) {
			var _g = canvas.nodes.indexOf(node) + 1;
			var _g1 = canvas.nodes.length;
			while(_g < _g1) {
				var i = _g++;
				var n = canvas.nodes[i];
				var tmp;
				var tmp1;
				var tmp2;
				var zoomPan = (1.0 - this.zoom) * this.uiw / 2.5;
				if(n.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan) < ui.inputX - ui._windowX) {
					var zoomPan1 = (1.0 - this.zoom) * this.uiw / 2.5;
					tmp2 = n.x * (this.scaleFactor * this.zoom) + (this.panX * (this.scaleFactor * this.zoom) + zoomPan1) + (140 * (this.scaleFactor * this.zoom) | 0) > ui.inputX - ui._windowX;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					var zoomPan2 = (1.0 - this.zoom) * this.uih / 2.5;
					tmp1 = n.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan2) < ui.inputY - ui._windowY;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					var zoomPan3 = (1.0 - this.zoom) * this.uih / 2.5;
					tmp = n.y * (this.scaleFactor * this.zoom) + (this.panY * (this.scaleFactor * this.zoom) + zoomPan3) + ((this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) * 1.2 + n.inputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + n.outputs.length * (this.ELEMENT_H * (this.scaleFactor * this.zoom) | 0) + this.BUTTONS_H(n) | 0) > ui.inputY - ui._windowY;
				} else {
					tmp = false;
				}
				if(tmp) {
					ui.inputStarted = false;
					break;
				}
			}
		}
		g.set_color(this.nodesSelected.indexOf(node) >= 0 ? ui.t.LABEL_COL : ui.t.CONTEXT_COL);
		g.fillRect(nx - 1,ny - 1,w + 2,h + 2);
		g.set_color(ui.t.WINDOW_BG_COL - 394758);
		g.fillRect(nx,ny,w,lineh);
		g.set_color(node.color);
		g.fillRect(nx,ny + lineh - 3 * (this.scaleFactor * this.zoom),w,3 * (this.scaleFactor * this.zoom));
		g.set_color(ui.t.WINDOW_BG_COL);
		g.fillRect(nx,ny + lineh,w,h - lineh);
		g.set_color(ui.t.LABEL_COL);
		var textw = g.get_font().width(ui.fontSize,text);
		g.drawString(text,nx + 10 * (this.scaleFactor * this.zoom),ny + 6 * (this.scaleFactor * this.zoom));
		ny += lineh * 0.5;
		var _g = 0;
		var _g1 = node.outputs;
		while(_g < _g1.length) {
			var out = _g1[_g];
			++_g;
			ny += lineh;
			g.set_color(out.color);
			g.drawScaledImage(zui_Nodes.socketImage,nx + w - 6 * (this.scaleFactor * this.zoom),ny - 3 * (this.scaleFactor * this.zoom),12 * (this.scaleFactor * this.zoom),12 * (this.scaleFactor * this.zoom));
		}
		ny -= lineh * node.outputs.length;
		g.set_color(ui.t.LABEL_COL);
		var _g = 0;
		var _g1 = node.outputs;
		while(_g < _g1.length) {
			var out = _g1[_g];
			++_g;
			ny += lineh;
			var strw = ui.ops.font.width(ui.fontSize,zui_Nodes.tr(out.name));
			g.drawString(zui_Nodes.tr(out.name),nx + w - strw - 12 * (this.scaleFactor * this.zoom),ny - 3 * (this.scaleFactor * this.zoom));
		}
		var nhandle = this.handle.nest(node.id);
		ny -= lineh / 3;
		var _g = 0;
		var _g1 = node.buttons.length;
		while(_g < _g1) {
			var buti = _g++;
			var but = node.buttons[buti];
			if(but.type == "RGBA") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var val = node.outputs[but.output].default_value;
				nhandle.color = kha_Color.fromFloats(val[0],val[1],val[2]);
				zui_Ext.colorWheel(ui,nhandle);
				val[0] = ((nhandle.color & 16711680) >>> 16) * 0.00392156862745098;
				val[1] = ((nhandle.color & 65280) >>> 8) * 0.00392156862745098;
				val[2] = (nhandle.color & 255) * 0.00392156862745098;
			} else if(but.type == "VECTOR") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var min = but.min != null ? but.min : 0.0;
				var max = but.max != null ? but.max : 1.0;
				var textOff = ui.t.TEXT_OFFSET;
				ui.t.TEXT_OFFSET = 6;
				ui.text(zui_Nodes.tr(but.name));
				var but1 = but.default_value[0];
				but.default_value[0] = ui.slider(nhandle.nest(buti).nest(0,{ value : but1}),"X",min,max,true,100,true,0);
				var but2 = but.default_value[1];
				but.default_value[1] = ui.slider(nhandle.nest(buti).nest(1,{ value : but2}),"Y",min,max,true,100,true,0);
				var but3 = but.default_value[2];
				but.default_value[2] = ui.slider(nhandle.nest(buti).nest(2,{ value : but3}),"Z",min,max,true,100,true,0);
				ui.t.TEXT_OFFSET = textOff;
				if(but.output != null) {
					node.outputs[but.output].default_value = but.default_value;
				}
				ny += lineh * 3;
			} else if(but.type == "VALUE") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var soc = node.outputs[but.output];
				var min1 = but.min != null ? but.min : 0.0;
				var max1 = but.max != null ? but.max : 1.0;
				var prec = but.precision != null ? but.precision : 100.0;
				var textOff1 = ui.t.TEXT_OFFSET;
				ui.t.TEXT_OFFSET = 6;
				soc.default_value = ui.slider(nhandle.nest(buti,{ value : soc.default_value}),"Value",min1,max1,true,prec,true,0);
				ui.t.TEXT_OFFSET = textOff1;
			} else if(but.type == "STRING") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var soc1 = but.output != null ? node.outputs[but.output] : null;
				but.default_value = ui.textInput(nhandle.nest(buti,{ text : soc1 != null ? soc1.default_value : ""}),zui_Nodes.tr(but.name));
				if(soc1 != null) {
					soc1.default_value = but.default_value;
				}
			} else if(but.type == "ENUM") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var texts = ((but.data) instanceof Array) ? but.data : zui_Nodes.enumTexts(node.type);
				var buthandle = nhandle.nest(buti);
				buthandle.position = but.default_value;
				but.default_value = ui.combo(buthandle,texts,zui_Nodes.tr(but.name));
			} else if(but.type == "KEY") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var buthandle1 = nhandle.nest(buti);
				buthandle1.value = but.default_value;
				but.default_value = zui_Ext.keyInput(ui,buthandle1,zui_Nodes.tr(but.name));
			} else if(but.type == "ARRAY") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var texts1 = ((but.data) instanceof Array) ? but.data : zui_Nodes.enumTexts(node.type);
				if(!((but.default_value) instanceof Array)) {
					but.default_value = [];
				}
				var values = but.default_value;
				ui.row([0.74,0.25]);
				ui.text(zui_Nodes.tr(but.name));
				if(ui.button("+")) {
					values.push(0);
				}
				var i = 0;
				while(i < values.length) {
					ui.row([0.74,0.25]);
					var buthandle2 = nhandle.nest(buti + i);
					buthandle2.position = values[i];
					values[i] = ui.combo(buthandle2,texts1,"" + i);
					if(ui.button("-")) {
						values.splice(i,1);
					} else {
						++i;
					}
				}
				but.default_value = values;
				ny += lineh * i;
			} else if(but.type == "BOOL") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				but.default_value = ui.check(nhandle.nest(buti,{ selected : but.default_value}),zui_Nodes.tr(but.name));
			} else if(but.type == "RAMP") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				var vals = but.default_value;
				var sw = w / (this.scaleFactor * this.zoom);
				var _g2 = 0;
				while(_g2 < vals.length) {
					var val1 = vals[_g2];
					++_g2;
					var pos = val1[4];
					var col = kha_Color.fromFloats(val1[0],val1[1],val1[2]);
					ui.fill(pos * sw,0,(1.0 - pos) * sw,lineh - 2 * (this.scaleFactor * this.zoom),col);
				}
				ui._y += lineh;
				var ihandle = nhandle.nest(buti).nest(2);
				ui.row([0.25,0.25,0.5]);
				if(ui.button("+")) {
					var last = vals[vals.length - 1];
					var this1 = new Float32Array(5);
					var f32 = this1;
					f32[0] = last[0];
					f32[1] = last[1];
					f32[2] = last[2];
					f32[3] = last[3];
					f32[4] = 1.0;
					vals.push(f32);
					ihandle.value += 1;
				}
				if(ui.button("-") && vals.length > 1) {
					vals.pop();
					ihandle.value -= 1;
				}
				but.data = ui.combo(nhandle.nest(buti).nest(1,{ position : but.data}),["Linear","Constant"],"Interpolate");
				ui.row([0.5,0.5]);
				var i1 = ui.slider(ihandle,"Index",0,vals.length - 1,false,1,true,0) | 0;
				var val2 = vals[i1];
				nhandle.nest(buti).nest(3).value = val2[4];
				val2[4] = ui.slider(nhandle.nest(buti).nest(3),"Pos",0,1,true,100,true,0);
				var chandle = nhandle.nest(buti).nest(4);
				chandle.color = kha_Color.fromFloats(val2[0],val2[1],val2[2]);
				if(ui.text("",2,chandle.color) == 1) {
					var rx = nx + w - 37 * (this.scaleFactor * this.zoom);
					var ry = ny - 5 * (this.scaleFactor * this.zoom);
					_inputStarted = ui.inputStarted = false;
					this.rgbaPopup(ui,chandle,val2,rx | 0,ry + ui.t.ELEMENT_H * ui.ops.scaleFactor | 0);
				}
				val2[0] = ((chandle.color & 16711680) >>> 16) * 0.00392156862745098;
				val2[1] = ((chandle.color & 65280) >>> 8) * 0.00392156862745098;
				val2[2] = (chandle.color & 255) * 0.00392156862745098;
				ny += lineh * 3.5;
			} else if(but.type == "CURVES") {
				ny += lineh;
				ui._x = nx;
				ui._y = ny;
				ui._w = w;
				ui.row([0.333333333333333315,0.333333333333333315,0.333333333333333315]);
				ui.radio(nhandle.nest(buti).nest(1),0,"X");
				ui.radio(nhandle.nest(buti).nest(1),1,"Y");
				ui.radio(nhandle.nest(buti).nest(1),2,"Z");
				var axis = nhandle.nest(buti).nest(1).position;
				var val3 = but.default_value[axis];
				var num = val3.length;
				ui._y += lineh * 5;
				ui.row([0.2,0.2,0.6]);
				if(ui.button("+")) {
					var this2 = new Float32Array(2);
					var f321 = this2;
					f321[0] = 0;
					f321[1] = 0;
					val3.push(f321);
				}
				if(ui.button("-")) {
					if(val3.length > 2) {
						val3.pop();
					}
				}
				var i2 = ui.slider(nhandle.nest(buti).nest(2).nest(axis,{ position : 0}),"Index",0,num - 1,false,1,true,0) | 0;
				ui.row([0.5,0.5]);
				nhandle.nest(buti).nest(3).value = val3[i2][0];
				nhandle.nest(buti).nest(4).value = val3[i2][1];
				var value = ui.slider(nhandle.nest(buti).nest(3,{ value : 0}),"X",-1,1,true,100,true,0);
				val3[i2][0] = value;
				var value1 = ui.slider(nhandle.nest(buti).nest(4,{ value : 0}),"Y",-1,1,true,100,true,0);
				val3[i2][1] = value1;
				ny += lineh * 7;
			}
		}
		ny += lineh / 3;
		var _g = 0;
		var _g1 = node.inputs.length;
		while(_g < _g1) {
			var i = _g++;
			var inp = node.inputs[i];
			ny += lineh;
			g.set_color(inp.color);
			g.drawScaledImage(zui_Nodes.socketImage,nx - 6 * (this.scaleFactor * this.zoom),ny - 3 * (this.scaleFactor * this.zoom),12 * (this.scaleFactor * this.zoom),12 * (this.scaleFactor * this.zoom));
			var isLinked = false;
			var _g2 = 0;
			var _g3 = canvas.links;
			while(_g2 < _g3.length) {
				var l = _g3[_g2];
				++_g2;
				if(l.to_id == node.id && l.to_socket == i) {
					isLinked = true;
					break;
				}
			}
			if(!isLinked && inp.type == "VALUE") {
				ui._x = nx + 6 * (this.scaleFactor * this.zoom);
				ui._y = ny - 9 * (this.scaleFactor * this.zoom);
				ui._w = w - 6 * (this.scaleFactor * this.zoom) | 0;
				var soc = inp;
				var min = soc.min != null ? soc.min : 0.0;
				var max = soc.max != null ? soc.max : 1.0;
				var prec = soc.precision != null ? soc.precision : 100.0;
				var textOff = ui.t.TEXT_OFFSET;
				ui.t.TEXT_OFFSET = 6;
				soc.default_value = ui.slider(nhandle.nest(9).nest(i,{ value : soc.default_value}),zui_Nodes.tr(inp.name),min,max,true,prec,true,0);
				ui.t.TEXT_OFFSET = textOff;
			} else if(!isLinked && inp.type == "STRING") {
				ui._x = nx + 6 * (this.scaleFactor * this.zoom);
				ui._y = ny - 9 * (this.scaleFactor * this.zoom);
				ui._w = w - 6 * (this.scaleFactor * this.zoom) | 0;
				var soc1 = inp;
				var textOff1 = ui.t.TEXT_OFFSET;
				ui.t.TEXT_OFFSET = 6;
				soc1.default_value = ui.textInput(nhandle.nest(9).nest(i,{ text : soc1.default_value}),zui_Nodes.tr(inp.name),0);
				ui.t.TEXT_OFFSET = textOff1;
			} else if(!isLinked && inp.type == "RGBA") {
				g.set_color(ui.t.LABEL_COL);
				g.drawString(zui_Nodes.tr(inp.name),nx + 12 * (this.scaleFactor * this.zoom),ny - 3 * (this.scaleFactor * this.zoom));
				var soc2 = inp;
				g.set_color(-16777216);
				g.fillRect(nx + w - 38 * (this.scaleFactor * this.zoom),ny - 6 * (this.scaleFactor * this.zoom),36 * (this.scaleFactor * this.zoom),18 * (this.scaleFactor * this.zoom));
				g.set_color(kha_Color.fromFloats(soc2.default_value[0],soc2.default_value[1],soc2.default_value[2]));
				var rx = nx + w - 37 * (this.scaleFactor * this.zoom);
				var ry = ny - 5 * (this.scaleFactor * this.zoom);
				var rw = 34 * (this.scaleFactor * this.zoom);
				var rh = 16 * (this.scaleFactor * this.zoom);
				g.fillRect(rx,ry,rw,rh);
				var ix = ui.inputX - wx;
				var iy = ui.inputY - wy;
				if(ui.inputStarted && ix > rx && iy > ry && ix < rx + rw && iy < ry + rh) {
					_inputStarted = ui.inputStarted = false;
					this.rgbaPopup(ui,nhandle,soc2.default_value,rx | 0,ry + ui.t.ELEMENT_H * ui.ops.scaleFactor | 0);
				}
			} else {
				g.set_color(ui.t.LABEL_COL);
				g.drawString(zui_Nodes.tr(inp.name),nx + 12 * (this.scaleFactor * this.zoom),ny - 3 * (this.scaleFactor * this.zoom));
			}
		}
		ui._x = uiX;
		ui._y = uiY;
		ui._w = uiW;
		ui.inputStarted = _inputStarted;
	}
	,rgbaPopup: function(ui,nhandle,val,x,y) {
		this.popup(x,y,140 * this.scaleFactor | 0,ui.t.ELEMENT_H * 9 | 0,function(ui) {
			nhandle.color = kha_Color.fromFloats(val[0],val[1],val[2]);
			zui_Ext.colorWheel(ui,nhandle,false,null,false);
			val[0] = ((nhandle.color & 16711680) >>> 16) * 0.00392156862745098;
			val[1] = ((nhandle.color & 65280) >>> 8) * 0.00392156862745098;
			val[2] = (nhandle.color & 255) * 0.00392156862745098;
		});
	}
	,drawLink: function(ui,x1,y1,x2,y2,highlight) {
		if(highlight == null) {
			highlight = false;
		}
		var g = ui.g;
		var c1 = ui.t.LABEL_COL;
		var c2 = ui.t.ACCENT_SELECT_COL;
		g.set_color(highlight ? kha_Color.fromBytes((c1 & 16711680) >>> 16,(c1 & 65280) >>> 8,c1 & 255,210) : kha_Color.fromBytes((c2 & 16711680) >>> 16,(c2 & 65280) >>> 8,c2 & 255,210));
		if(ui.t.LINK_STYLE == 0) {
			g.drawLine(x1,y1,x2,y2,1.0);
			g.set_color(highlight ? kha_Color.fromBytes((c1 & 16711680) >>> 16,(c1 & 65280) >>> 8,c1 & 255,150) : kha_Color.fromBytes((c2 & 16711680) >>> 16,(c2 & 65280) >>> 8,c2 & 255,150));
			g.drawLine(x1 + 0.5,y1,x2 + 0.5,y2,1.0);
			g.drawLine(x1 - 0.5,y1,x2 - 0.5,y2,1.0);
			g.drawLine(x1,y1 + 0.5,x2,y2 + 0.5,1.0);
			g.drawLine(x1,y1 - 0.5,x2,y2 - 0.5,1.0);
		} else if(ui.t.LINK_STYLE == 1) {
			kha_graphics2_GraphicsExtension.drawCubicBezier(g,[x1,x1 + Math.abs(x1 - x2) / 2,x2 - Math.abs(x1 - x2) / 2,x2],[y1,y1,y2,y2],30,highlight ? 2.0 : 1.0);
		}
	}
	,removeNode: function(n,canvas) {
		if(n == null) {
			return;
		}
		var i = 0;
		while(i < canvas.links.length) {
			var l = canvas.links[i];
			if(l.from_id == n.id || l.to_id == n.id) {
				canvas.links.splice(i,1);
			} else {
				++i;
			}
		}
		HxOverrides.remove(canvas.nodes,n);
	}
	,popupX: null
	,popupY: null
	,popupW: null
	,popupH: null
	,popupCommands: null
	,popup: function(x,y,w,h,commands) {
		this.popupX = x;
		this.popupY = y;
		this.popupW = w;
		this.popupH = h;
		this.popupCommands = commands;
	}
	,__class__: zui_Nodes
};
var zui_Popup = function() { };
$hxClasses["zui.Popup"] = zui_Popup;
zui_Popup.__name__ = true;
zui_Popup.render = function(g) {
	zui_Popup.borderOffset = zui_Popup.ui.t.ELEMENT_OFFSET;
	if(zui_Popup.boxCommands == null) {
		zui_Popup.ui.begin(g);
		if(zui_Popup.ui.window(zui_Popup.hwnd,zui_Popup.modalX,zui_Popup.modalY,zui_Popup.modalW,zui_Popup.modalH)) {
			var _this = zui_Popup.ui;
			var origY = zui_Popup.ui._y + _this.t.BUTTON_H * _this.ops.scaleFactor;
			var origX = zui_Popup.ui._x;
			var origW = zui_Popup.ui._w;
			zui_Popup.drawTitle(g);
			zui_Popup.ui._x += zui_Popup.borderW + zui_Popup.borderOffset * 0.5;
			zui_Popup.ui._w -= zui_Popup.borderW * 2 + zui_Popup.borderOffset | 0;
			zui_Popup.ui._y += zui_Popup.borderW + zui_Popup.borderOffset;
			var _g = 0;
			var _g1 = zui_Popup.boxText.split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				zui_Popup.ui.text(line);
			}
			zui_Popup.ui._y = zui_Popup.ui._h - zui_Popup.ui.t.BUTTON_H - 10;
			zui_Popup.ui.row([0.333333333333333315,0.333333333333333315,0.333333333333333315]);
			zui_Popup.ui.endElement();
			if(zui_Popup.ui.button("OK")) {
				zui_Popup.show = false;
			}
			zui_Popup.drawBorder(g,origX,origY,origW);
		}
		zui_Popup.ui.end();
	} else {
		zui_Popup.ui.begin(g);
		if(zui_Popup.ui.window(zui_Popup.hwnd,zui_Popup.modalX,zui_Popup.modalY,zui_Popup.modalW,zui_Popup.modalH)) {
			var _this = zui_Popup.ui;
			var origY = zui_Popup.ui._y + _this.t.BUTTON_H * _this.ops.scaleFactor;
			var origX = zui_Popup.ui._x;
			var origW = zui_Popup.ui._w;
			zui_Popup.drawTitle(g);
			zui_Popup.ui._x += zui_Popup.borderW + zui_Popup.borderOffset * 0.5;
			zui_Popup.ui._w -= zui_Popup.borderW * 2 + zui_Popup.borderOffset | 0;
			zui_Popup.ui._y += zui_Popup.borderW + zui_Popup.borderOffset;
			zui_Popup.boxCommands(zui_Popup.ui);
			zui_Popup.drawBorder(g,origX,origY,origW);
		}
		zui_Popup.ui.end();
	}
};
zui_Popup.drawBorder = function(g,x,y,w) {
	g.set_color(zui_Popup.ui.t.SEPARATOR_COL);
	var height = zui_Popup.ui._h - zui_Popup.borderW - zui_Popup.borderOffset - y;
	var _this = zui_Popup.ui;
	var w1 = zui_Popup.borderW;
	var h = height + zui_Popup.borderW;
	var strength = 0.0;
	if(strength == 0.0) {
		strength = 1;
	}
	if(!_this.enabled) {
		_this.fadeColor();
	}
	g.fillRect(x,y - 1,w1,h + 1);
	var _this = zui_Popup.ui;
	var x1 = w - x - zui_Popup.borderW;
	var w1 = zui_Popup.borderW;
	var h = height + zui_Popup.borderW;
	var strength = 0.0;
	if(strength == 0.0) {
		strength = 1;
	}
	if(!_this.enabled) {
		_this.fadeColor();
	}
	g.fillRect(x1,y - 1,w1,h + 1);
	var _this = zui_Popup.ui;
	var y1 = height + y + zui_Popup.borderW;
	var h = zui_Popup.borderW;
	var strength = 0.0;
	if(strength == 0.0) {
		strength = 1;
	}
	if(!_this.enabled) {
		_this.fadeColor();
	}
	g.fillRect(x,y1 - 1,w,h + 1);
	if(zui_Popup.boxTitle != "" && zui_Popup.titleDrawn) {
		zui_Popup.hwnd.redraws = 2;
	}
};
zui_Popup.drawTitle = function(g) {
	g.set_color(zui_Popup.ui.t.SEPARATOR_COL);
	var _this = zui_Popup.ui;
	var x = zui_Popup.ui._x;
	var y = zui_Popup.ui._y;
	var w = zui_Popup.ui._w;
	var h = zui_Popup.ui.t.BUTTON_H;
	var strength = 0.0;
	if(strength == 0.0) {
		strength = 1;
	}
	if(!_this.enabled) {
		_this.fadeColor();
	}
	g.fillRect(x,y - 1,w,h + 1);
	if(zui_Popup.boxTitle != "") {
		g.set_color(zui_Popup.ui.t.TEXT_COL);
		zui_Popup.ui.text(zui_Popup.boxTitle);
	}
};
zui_Popup.update = function() {
	var inUse = zui_Popup.ui.comboSelectedHandle != null;
	if(zui_Popup.ui.inputStarted && !inUse) {
		if(zui_Popup.ui.inputX < zui_Popup.modalX || zui_Popup.ui.inputX > zui_Popup.modalX + zui_Popup.modalW || zui_Popup.ui.inputY < zui_Popup.modalY || zui_Popup.ui.inputY > zui_Popup.modalY + zui_Popup.modalH) {
			zui_Popup.show = false;
		}
	}
};
zui_Popup.showMessage = function(ui,title,text) {
	zui_Popup.ui = ui;
	zui_Popup.init();
	zui_Popup.boxTitle = title;
	zui_Popup.boxText = text;
	zui_Popup.boxCommands = null;
};
zui_Popup.showCustom = function(ui,commands,mx,my,mw,mh) {
	if(mh == null) {
		mh = 160;
	}
	if(mw == null) {
		mw = 400;
	}
	if(my == null) {
		my = -1;
	}
	if(mx == null) {
		mx = -1;
	}
	zui_Popup.ui = ui;
	zui_Popup.init(mx,my,mw,mh);
	zui_Popup.boxTitle = "";
	zui_Popup.boxText = "";
	zui_Popup.boxCommands = commands;
};
zui_Popup.init = function(mx,my,mw,mh) {
	if(mh == null) {
		mh = 160;
	}
	if(mw == null) {
		mw = 400;
	}
	if(my == null) {
		my = -1;
	}
	if(mx == null) {
		mx = -1;
	}
	var appW = kha_System.windowWidth();
	var appH = kha_System.windowHeight();
	zui_Popup.modalX = mx;
	zui_Popup.modalY = my;
	zui_Popup.modalW = mw * zui_Popup.ui.ops.scaleFactor | 0;
	zui_Popup.modalH = mh * zui_Popup.ui.ops.scaleFactor | 0;
	if(mx == -1) {
		zui_Popup.modalX = appW / 2 - zui_Popup.modalW / 2 | 0;
	}
	if(my == -1) {
		zui_Popup.modalY = appH / 2 - zui_Popup.modalH / 2 | 0;
	}
	zui_Popup.modalX = Math.max(0,Math.min(zui_Popup.modalX,appW - zui_Popup.modalW)) | 0;
	zui_Popup.modalY = Math.max(0,Math.min(zui_Popup.modalY,appH - zui_Popup.modalH)) | 0;
	zui_Popup.hwnd.dragX = 0;
	zui_Popup.hwnd.dragY = 0;
	zui_Popup.titleDrawn = false;
	zui_Popup.show = true;
};
var zui_Themes = function() { };
$hxClasses["zui.Themes"] = zui_Themes;
zui_Themes.__name__ = true;
var zui_Zui = function(ops) {
	this.checkSelectImage = null;
	this.elementsBaked = false;
	this.scissor = false;
	this.sticky = false;
	this.tabVertical = false;
	this.tabScroll = 0.0;
	this.tabHandle = null;
	this.tabColors = null;
	this.tabNames = null;
	this.tooltipTime = 0.0;
	this.tooltipWait = false;
	this.tooltipShown = false;
	this.tooltipY = 0.0;
	this.tooltipX = 0.0;
	this.tooltipInvertY = false;
	this.tooltipImgMaxWidth = null;
	this.tooltipImg = null;
	this.tooltipText = "";
	this.comboToSubmit = 0;
	this.submitComboHandle = null;
	this.comboSelectedWindow = null;
	this.comboSelectedHandle = null;
	this.tabPressedHandle = null;
	this.tabPressed = false;
	this.textToSubmit = "";
	this.submitTextHandle = null;
	this.textSelectedHandle = null;
	this.restoreY = -1.0;
	this.restoreX = -1.0;
	this.windowHeaderH = 0.0;
	this.windowHeaderW = 0.0;
	this.dragHandle = null;
	this.scrollHandle = null;
	this.windowEnded = true;
	this._windowY = 0.0;
	this._windowX = 0.0;
	this.imageScrollAlign = true;
	this.scrollAlign = 0.0;
	this.curRatio = -1;
	this.highlightAnchor = 0;
	this.cursorX = 0;
	this.inputStartedTime = 0.0;
	this.key = null;
	this.isTabDown = false;
	this.isReturnDown = false;
	this.isEscapeDown = false;
	this.isDeleteDown = false;
	this.isBackspaceDown = false;
	this.isADown = false;
	this.isAltDown = false;
	this.isCtrlDown = false;
	this.isShiftDown = false;
	this.isKeyDown = false;
	this.isKeyPressed = false;
	this.inputWheelDelta = 0;
	this.inputEnabled = true;
	this.inputRegistered = false;
	this.touchHold = false;
	this.highlightFullRow = false;
	this.tabSwitchEnabled = true;
	this.highlightOnSelect = true;
	this.alwaysRedraw = false;
	this.scrollEnabled = true;
	this.imageInvertY = false;
	this.changed = false;
	this.isReleased = false;
	this.isHovered = false;
	this.isPushed = false;
	this.isStarted = false;
	this.enabled = true;
	this.isTyping = false;
	this.isScrolling = false;
	if(ops.theme == null) {
		ops.theme = zui_Themes.dark;
	}
	this.t = ops.theme;
	if(ops.khaWindowId == null) {
		ops.khaWindowId = 0;
	}
	if(ops.scaleFactor == null) {
		ops.scaleFactor = 1.0;
	}
	if(ops.autoNotifyInput == null) {
		ops.autoNotifyInput = true;
	}
	this.ops = ops;
	this.setScale(ops.scaleFactor);
	if(ops.autoNotifyInput) {
		this.registerInput();
	}
	if(zui_Zui.copyReceiver == null) {
		zui_Zui.copyReceiver = this;
		kha_System.notifyOnCutCopyPaste($bind(this,this.onCut),$bind(this,this.onCopy),$bind(this,this.onPaste));
		kha_System.notifyOnFrames(function(frames) {
			if((zui_Zui.isCopy || zui_Zui.isPaste) && ++zui_Zui.copyFrame > 1) {
				zui_Zui.isCopy = zui_Zui.isCut = zui_Zui.isPaste = false;
				zui_Zui.copyFrame = 0;
			}
		});
	}
	var rtTextVS = kha_graphics4_Graphics2.createTextVertexStructure();
	this.rtTextPipeline = kha_graphics4_Graphics2.createTextPipeline(rtTextVS);
	this.rtTextPipeline.alphaBlendSource = 1;
	this.rtTextPipeline.compile();
};
$hxClasses["zui.Zui"] = zui_Zui;
zui_Zui.__name__ = true;
zui_Zui.clampi = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
zui_Zui.prototype = {
	isScrolling: null
	,isTyping: null
	,enabled: null
	,isStarted: null
	,isPushed: null
	,isHovered: null
	,isReleased: null
	,changed: null
	,imageInvertY: null
	,scrollEnabled: null
	,alwaysRedraw: null
	,highlightOnSelect: null
	,tabSwitchEnabled: null
	,highlightFullRow: null
	,touchHold: null
	,inputRegistered: null
	,inputEnabled: null
	,inputX: null
	,inputY: null
	,inputStartedX: null
	,inputStartedY: null
	,inputDX: null
	,inputDY: null
	,inputWheelDelta: null
	,inputStarted: null
	,inputStartedR: null
	,inputReleased: null
	,inputReleasedR: null
	,inputDown: null
	,inputDownR: null
	,isKeyPressed: null
	,isKeyDown: null
	,isShiftDown: null
	,isCtrlDown: null
	,isAltDown: null
	,isADown: null
	,isBackspaceDown: null
	,isDeleteDown: null
	,isEscapeDown: null
	,isReturnDown: null
	,isTabDown: null
	,key: null
	,char: null
	,inputStartedTime: null
	,cursorX: null
	,highlightAnchor: null
	,ratios: null
	,curRatio: null
	,xBeforeSplit: null
	,wBeforeSplit: null
	,g: null
	,t: null
	,ops: null
	,globalG: null
	,rtTextPipeline: null
	,fontSize: null
	,fontOffsetY: null
	,arrowOffsetX: null
	,arrowOffsetY: null
	,titleOffsetX: null
	,buttonOffsetY: null
	,checkOffsetX: null
	,checkOffsetY: null
	,checkSelectOffsetX: null
	,checkSelectOffsetY: null
	,radioOffsetX: null
	,radioOffsetY: null
	,radioSelectOffsetX: null
	,radioSelectOffsetY: null
	,scrollAlign: null
	,imageScrollAlign: null
	,_x: null
	,_y: null
	,_w: null
	,_h: null
	,_windowX: null
	,_windowY: null
	,_windowW: null
	,_windowH: null
	,currentWindow: null
	,windowEnded: null
	,scrollHandle: null
	,dragHandle: null
	,windowHeaderW: null
	,windowHeaderH: null
	,restoreX: null
	,restoreY: null
	,textSelectedHandle: null
	,textSelected: null
	,submitTextHandle: null
	,textToSubmit: null
	,tabPressed: null
	,tabPressedHandle: null
	,comboSelectedHandle: null
	,comboSelectedWindow: null
	,comboSelectedAlign: null
	,comboSelectedTexts: null
	,comboItemCount: null
	,comboItemOffset: null
	,comboSelectedLabel: null
	,comboSelectedX: null
	,comboSelectedY: null
	,comboSelectedW: null
	,submitComboHandle: null
	,comboToSubmit: null
	,tooltipText: null
	,tooltipImg: null
	,tooltipImgMaxWidth: null
	,tooltipInvertY: null
	,tooltipX: null
	,tooltipY: null
	,tooltipShown: null
	,tooltipWait: null
	,tooltipTime: null
	,tabNames: null
	,tabColors: null
	,tabHandle: null
	,tabScroll: null
	,tabVertical: null
	,sticky: null
	,scissor: null
	,elementsBaked: null
	,checkSelectImage: null
	,setScale: function(factor) {
		this.ops.scaleFactor = factor;
		this.fontSize = this.t.FONT_SIZE * this.ops.scaleFactor | 0;
		var fontHeight = this.ops.font.height(this.fontSize);
		this.fontOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - fontHeight) / 2;
		this.arrowOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - this.t.ARROW_SIZE * this.ops.scaleFactor) / 2;
		this.arrowOffsetX = this.arrowOffsetY;
		this.titleOffsetX = (this.arrowOffsetX * 2 + this.t.ARROW_SIZE * this.ops.scaleFactor) / this.ops.scaleFactor;
		this.buttonOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - this.t.BUTTON_H * this.ops.scaleFactor) / 2;
		this.checkOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - this.t.CHECK_SIZE * this.ops.scaleFactor) / 2;
		this.checkOffsetX = this.checkOffsetY;
		this.checkSelectOffsetY = (this.t.CHECK_SIZE * this.ops.scaleFactor - this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor) / 2;
		this.checkSelectOffsetX = this.checkSelectOffsetY;
		this.radioOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - this.t.CHECK_SIZE * this.ops.scaleFactor) / 2;
		this.radioOffsetX = this.radioOffsetY;
		this.radioSelectOffsetY = (this.t.CHECK_SIZE * this.ops.scaleFactor - this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor) / 2;
		this.radioSelectOffsetX = this.radioSelectOffsetY;
		this.elementsBaked = false;
	}
	,bakeElements: function() {
		if(this.checkSelectImage != null) {
			this.checkSelectImage.unload();
		}
		this.checkSelectImage = kha_Image.createRenderTarget(this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor | 0,this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor | 0,null,0,1,this.ops.khaWindowId);
		var g = this.checkSelectImage.get_g2();
		g.begin(true,0);
		g.set_color(this.t.ACCENT_SELECT_COL);
		g.drawLine(0,0,this.checkSelectImage.get_width(),this.checkSelectImage.get_height(),2 * this.ops.scaleFactor);
		g.drawLine(this.checkSelectImage.get_width(),0,0,this.checkSelectImage.get_height(),2 * this.ops.scaleFactor);
		g.end();
		this.elementsBaked = true;
	}
	,remove: function() {
		if(this.ops.autoNotifyInput) {
			this.unregisterInput();
		}
	}
	,registerInput: function() {
		var _gthis = this;
		kha_input_Mouse.get().notifyWindowed(this.ops.khaWindowId,$bind(this,this.onMouseDown),$bind(this,this.onMouseUp),$bind(this,this.onMouseMove),$bind(this,this.onMouseWheel));
		kha_input_Keyboard.get().notify($bind(this,this.onKeyDown),$bind(this,this.onKeyUp),$bind(this,this.onKeyPress));
		kha_System.notifyOnApplicationState(function() {
			_gthis.inputDX = _gthis.inputDY = 0;
		},null,null,null,null);
		this.inputRegistered = true;
	}
	,unregisterInput: function() {
		kha_input_Mouse.get().removeWindowed(this.ops.khaWindowId,$bind(this,this.onMouseDown),$bind(this,this.onMouseUp),$bind(this,this.onMouseMove),$bind(this,this.onMouseWheel));
		kha_input_Keyboard.get().remove($bind(this,this.onKeyDown),$bind(this,this.onKeyUp),$bind(this,this.onKeyPress));
		this.endInput();
		this.isShiftDown = this.isCtrlDown = this.isAltDown = false;
		this.inputX = this.inputY = 0;
		this.inputRegistered = false;
	}
	,begin: function(g) {
		if(!this.elementsBaked) {
			this.bakeElements();
		}
		this.changed = false;
		this.globalG = g;
		this._x = 0;
		this._y = 0;
		this._w = 0;
		this._h = 0;
	}
	,end: function(last) {
		if(last == null) {
			last = true;
		}
		if(!this.windowEnded) {
			this.endWindow();
		}
		this.drawCombo();
		this.drawTooltip(true);
		this.tabPressedHandle = null;
		if(last) {
			this.endInput();
		}
	}
	,beginRegion: function(g,x,y,w) {
		if(!this.elementsBaked) {
			g.end();
			this.bakeElements();
			g.begin(false);
		}
		this.changed = false;
		this.globalG = g;
		this.g = g;
		this.currentWindow = null;
		this.tooltipText = "";
		this.tooltipImg = null;
		this._windowX = 0;
		this._windowY = 0;
		this._windowW = w;
		this._x = x;
		this._y = y;
		this._w = w;
	}
	,endRegion: function(last) {
		if(last == null) {
			last = true;
		}
		this.drawTooltip(false);
		this.tabPressedHandle = null;
		if(last) {
			this.endInput();
		}
	}
	,beginSticky: function() {
		this.sticky = true;
		this._y -= this.currentWindow.scrollOffset;
	}
	,endSticky: function() {
		this.sticky = false;
		this.scissor = true;
		this.g.scissor(0,this._y | 0,this._windowW | 0,this._windowH - this._y | 0);
		this.windowHeaderH += this._y - this.windowHeaderH;
		this._y += this.currentWindow.scrollOffset;
	}
	,endInput: function() {
		this.isKeyPressed = false;
		this.inputStarted = false;
		this.inputStartedR = false;
		this.inputReleased = false;
		this.inputReleasedR = false;
		this.inputDX = 0;
		this.inputDY = 0;
		this.inputWheelDelta = 0;
		zui_Zui.textToPaste = "";
		if(zui_Zui.keyRepeat && this.isKeyDown && kha_Scheduler.time() - zui_Zui.keyRepeatTime > 0.05) {
			if(this.key == 8 || this.key == 46 || this.key == 37 || this.key == 39 || this.key == 38 || this.key == 40) {
				zui_Zui.keyRepeatTime = kha_Scheduler.time();
				this.isKeyPressed = true;
			}
		}
		if(zui_Zui.touchControls && this.inputDown && this.inputX == this.inputStartedX && this.inputY == this.inputStartedY && this.inputStartedTime > 0 && kha_Scheduler.time() - this.inputStartedTime > 0.5) {
			this.touchHold = true;
			this.inputStartedTime = 0;
		}
	}
	,inputChanged: function() {
		if(!(this.inputDX != 0 || this.inputDY != 0 || this.inputWheelDelta != 0 || this.inputStarted || this.inputStartedR || this.inputReleased || this.inputReleasedR || this.inputDown || this.inputDownR)) {
			return this.isKeyPressed;
		} else {
			return true;
		}
	}
	,windowDirty: function(handle,x,y,w,h) {
		var wx = x + handle.dragX;
		var wy = y + handle.dragY;
		var inputChanged = this.getInputInRect(wx,wy,w,h) && this.inputChanged();
		if(!(this.alwaysRedraw || this.isScrolling || this.isTyping)) {
			return inputChanged;
		} else {
			return true;
		}
	}
	,window: function(handle,x,y,w,h,drag) {
		if(drag == null) {
			drag = false;
		}
		if(handle.texture == null || w != handle.texture.get_width() || h != handle.texture.get_height()) {
			this.resize(handle,w,h,this.ops.khaWindowId);
		}
		if(!this.windowEnded) {
			this.endWindow();
		}
		this.windowEnded = false;
		this.g = handle.texture.get_g2();
		this.currentWindow = handle;
		this._windowX = x + handle.dragX;
		this._windowY = y + handle.dragY;
		this._windowW = w;
		this._windowH = h;
		this.windowHeaderW = 0;
		this.windowHeaderH = 0;
		if(this.windowDirty(handle,x,y,w,h)) {
			handle.redraws = 2;
		}
		if(zui_Zui.onBorderHover != null) {
			if(this.getInputInRect(this._windowX - 4,this._windowY,8,this._windowH)) {
				zui_Zui.onBorderHover(handle,0);
			} else if(this.getInputInRect(this._windowX + this._windowW - 4,this._windowY,8,this._windowH)) {
				zui_Zui.onBorderHover(handle,1);
			} else if(this.getInputInRect(this._windowX,this._windowY - 4,this._windowW,8)) {
				zui_Zui.onBorderHover(handle,2);
			} else if(this.getInputInRect(this._windowX,this._windowY + this._windowH - 4,this._windowW,8)) {
				zui_Zui.onBorderHover(handle,3);
			}
		}
		if(handle.redraws <= 0) {
			return false;
		}
		this._x = 0;
		this._y = handle.scrollOffset;
		if(handle.layout == 1) {
			w = this.t.ELEMENT_W * this.ops.scaleFactor | 0;
		}
		this._w = !handle.scrollEnabled ? w : w - (this.t.SCROLL_W * this.ops.scaleFactor | 0);
		this._h = h;
		this.tooltipText = "";
		this.tooltipImg = null;
		this.tabNames = null;
		if(this.t.FILL_WINDOW_BG) {
			this.g.begin(true,this.t.WINDOW_BG_COL);
		} else {
			this.g.begin(true,0);
			this.g.set_color(this.t.WINDOW_BG_COL);
			this.g.fillRect(this._x,this._y - handle.scrollOffset,handle.lastMaxX,handle.lastMaxY);
		}
		handle.dragEnabled = drag;
		if(drag) {
			if(this.inputStarted && this.getInputInRect(this._windowX,this._windowY,this._windowW,15 * this.ops.scaleFactor | 0)) {
				this.dragHandle = handle;
			} else if(this.inputReleased) {
				this.dragHandle = null;
			}
			if(handle == this.dragHandle) {
				handle.redraws = 2;
				handle.dragX += this.inputDX | 0;
				handle.dragY += this.inputDY | 0;
			}
			this._y += 15 * this.ops.scaleFactor | 0;
			this.windowHeaderH += 15 * this.ops.scaleFactor | 0;
		}
		return true;
	}
	,endWindow: function(bindGlobalG) {
		if(bindGlobalG == null) {
			bindGlobalG = true;
		}
		var handle = this.currentWindow;
		if(handle == null) {
			return;
		}
		if(handle.redraws > 0 || this.isScrolling || this.isTyping) {
			if(this.scissor) {
				this.scissor = false;
				this.g.disableScissor();
			}
			if(this.tabNames != null) {
				this.drawTabs();
			}
			if(handle.dragEnabled) {
				this.g.set_color(this.t.SEPARATOR_COL);
				this.g.fillRect(0,0,this._windowW,15 * this.ops.scaleFactor | 0);
			}
			var wh = this._windowH - this.windowHeaderH;
			var fullHeight = this._y - handle.scrollOffset - this.windowHeaderH;
			if(fullHeight < wh || handle.layout == 1 || !this.scrollEnabled) {
				handle.scrollEnabled = false;
				handle.scrollOffset = 0;
			} else {
				handle.scrollEnabled = true;
				if(this.tabScroll < 0) {
					handle.scrollOffset = this.tabScroll;
					this.tabScroll = 0;
				}
				var wy = this._windowY + this.windowHeaderH;
				var amountToScroll = fullHeight - wh;
				var amountScrolled = -handle.scrollOffset;
				var ratio = amountScrolled / amountToScroll;
				var barH = wh * Math.abs(wh / fullHeight);
				barH = Math.max(barH,this.t.ELEMENT_H * this.ops.scaleFactor);
				var totalScrollableArea = wh - barH;
				var e = amountToScroll / totalScrollableArea;
				var barY = totalScrollableArea * ratio + this.windowHeaderH;
				var barFocus = this.getInputInRect(this._windowX + this._windowW - (this.t.SCROLL_W * this.ops.scaleFactor | 0),barY + this._windowY,this.t.SCROLL_W * this.ops.scaleFactor | 0,barH);
				if(this.inputStarted && barFocus) {
					this.scrollHandle = handle;
					this.isScrolling = true;
				}
				var scrollDelta = this.inputWheelDelta;
				if(zui_Zui.touchControls && this.inputDownR && this.inputDY != 0) {
					this.isScrolling = true;
					scrollDelta = -this.inputDY / 20;
				}
				if(handle == this.scrollHandle) {
					this.scroll(this.inputDY * e,fullHeight);
				} else if(scrollDelta != 0 && this.comboSelectedHandle == null && this.getInputInRect(this._windowX,wy,this._windowW,wh)) {
					this.scroll(scrollDelta * (this.t.ELEMENT_H * this.ops.scaleFactor),fullHeight);
				}
				if(handle.scrollOffset > 0) {
					handle.scrollOffset = 0;
				} else if(fullHeight + handle.scrollOffset < wh) {
					handle.scrollOffset = wh - fullHeight;
				}
				this.g.set_color(this.t.WINDOW_BG_COL);
				this.g.fillRect(this._windowW - (this.t.SCROLL_W * this.ops.scaleFactor | 0),wy,this.t.SCROLL_W * this.ops.scaleFactor | 0,wh);
				this.g.set_color(this.t.ACCENT_COL);
				var scrollbarFocus = this.getInputInRect(this._windowX + this._windowW - (this.t.SCROLL_W * this.ops.scaleFactor | 0),wy,this.t.SCROLL_W * this.ops.scaleFactor | 0,wh);
				var barW = scrollbarFocus || handle == this.scrollHandle ? this.t.SCROLL_W * this.ops.scaleFactor | 0 : (this.t.SCROLL_W * this.ops.scaleFactor | 0) / 3;
				this.g.fillRect(this._windowW - barW - this.scrollAlign,barY,barW,barH);
			}
			handle.lastMaxX = this._x;
			handle.lastMaxY = this._y;
			if(handle.layout == 0) {
				handle.lastMaxX += this._windowW;
			} else {
				handle.lastMaxY += this._windowH;
			}
			handle.redraws--;
			this.g.end();
		}
		this.windowEnded = true;
		if(zui_Zui.alwaysRedrawWindow || handle.redraws > -4) {
			if(bindGlobalG) {
				this.globalG.begin(false);
			}
			this.globalG.set_color(this.t.WINDOW_TINT_COL);
			this.globalG.drawImage(handle.texture,this._windowX,this._windowY);
			if(bindGlobalG) {
				this.globalG.end();
			}
			if(handle.redraws <= 0) {
				handle.redraws--;
			}
		}
	}
	,scroll: function(delta,fullHeight) {
		this.currentWindow.scrollOffset -= delta;
	}
	,tab: function(handle,text,vertical,color) {
		if(color == null) {
			color = -1;
		}
		if(vertical == null) {
			vertical = false;
		}
		if(this.tabNames == null) {
			this.tabNames = [];
			this.tabColors = [];
			this.tabHandle = handle;
			this.tabVertical = vertical;
			this._w -= this.tabVertical ? this.t.ELEMENT_OFFSET * this.ops.scaleFactor + this.t.ELEMENT_W * this.ops.scaleFactor - this.ops.scaleFactor | 0 : 0;
			if(vertical) {
				this.windowHeaderW += this.t.ELEMENT_W * this.ops.scaleFactor;
			} else {
				this.windowHeaderH += this.t.BUTTON_H * this.ops.scaleFactor + this.buttonOffsetY + this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
			}
			this.restoreX = this.inputX;
			this.restoreY = this.inputY;
			if(!vertical && this.getInputInRect(this._windowX,this._windowY,this._windowW,this.windowHeaderH)) {
				this.inputX = this.inputY = -1;
			}
			if(vertical) {
				this._x += this.windowHeaderW + 6;
				this._w -= 6;
			} else {
				this._y += this.windowHeaderH + 3;
			}
		}
		this.tabNames.push(text);
		this.tabColors.push(color);
		return handle.position == this.tabNames.length - 1;
	}
	,drawTabs: function() {
		this.inputX = this.restoreX;
		this.inputY = this.restoreY;
		if(this.currentWindow == null) {
			return;
		}
		var tabX = 0.0;
		var tabY = 0.0;
		var tabH = this.t.BUTTON_H * this.ops.scaleFactor * 1.1 | 0;
		var origy = this._y;
		this._y = this.currentWindow.dragEnabled ? 15 * this.ops.scaleFactor | 0 : 0;
		this.tabHandle.changed = false;
		if(this.isCtrlDown && this.isTabDown) {
			this.tabHandle.position++;
			if(this.tabHandle.position >= this.tabNames.length) {
				this.tabHandle.position = 0;
			}
			this.tabHandle.changed = true;
			this.isTabDown = false;
		}
		if(this.tabHandle.position >= this.tabNames.length) {
			this.tabHandle.position = this.tabNames.length - 1;
		}
		this.g.set_color(this.t.SEPARATOR_COL);
		if(this.tabVertical) {
			this.g.fillRect(0,this._y,this.t.ELEMENT_W * this.ops.scaleFactor,this._windowH);
		} else {
			this.g.fillRect(0,this._y,this._windowW,this.buttonOffsetY + tabH + 2);
		}
		this.g.set_color(this.t.ACCENT_COL);
		if(this.tabVertical) {
			this.g.fillRect(this.t.ELEMENT_W * this.ops.scaleFactor,this._y,1,this._windowH);
		} else {
			this.g.fillRect(this.buttonOffsetY,this._y + this.buttonOffsetY + tabH + 2,this._windowW - this.buttonOffsetY * 2,1);
		}
		var basey = this.tabVertical ? this._y : this._y + 2;
		var _g = 0;
		var _g1 = this.tabNames.length;
		while(_g < _g1) {
			var i = _g++;
			this._x = tabX;
			this._y = basey + tabY;
			this._w = this.tabVertical ? this.t.ELEMENT_W * this.ops.scaleFactor - this.ops.scaleFactor | 0 : this.ops.font.width(this.fontSize,this.tabNames[i]) + this.buttonOffsetY * 2 + 18 * this.ops.scaleFactor | 0;
			var released = this.getReleased();
			var pushed = this.getPushed();
			var hover = this.getHover();
			if(released) {
				var h = this.tabHandle.nest(this.tabHandle.position);
				h.scrollOffset = this.currentWindow.scrollOffset;
				h = this.tabHandle.nest(i);
				this.tabScroll = h.scrollOffset;
				this.tabHandle.position = i;
				this.currentWindow.redraws = 3;
				this.tabHandle.changed = true;
			}
			var selected = this.tabHandle.position == i;
			this.g.set_color(pushed || hover ? this.t.BUTTON_HOVER_COL : this.tabColors[i] != -1 ? this.tabColors[i] : selected ? this.t.WINDOW_BG_COL : this.t.SEPARATOR_COL);
			if(this.tabVertical) {
				tabY += tabH + 1;
			} else {
				tabX += this._w + 1;
			}
			var g = this.g;
			var x = this._x + this.buttonOffsetY;
			var y = this._y + this.buttonOffsetY;
			var w = this._w;
			var strength = 0.0;
			if(strength == 0.0) {
				strength = 1;
			}
			if(!this.enabled) {
				this.fadeColor();
			}
			g.fillRect(x,y - 1,w,tabH + 1);
			this.g.set_color(selected ? this.t.BUTTON_TEXT_COL : this.t.LABEL_COL);
			this.drawString(this.g,this.tabNames[i],this.t.TEXT_OFFSET,0,0);
			if(selected && !this.tabVertical) {
				this.g.set_color(this.t.WINDOW_BG_COL);
				this.g.fillRect(this._x + this.buttonOffsetY + 1,this._y + this.buttonOffsetY + tabH,this._w - 1,1);
			}
		}
		this._x = 0;
		this._y = origy;
		this._w = (!this.currentWindow.scrollEnabled ? this._windowW : this._windowW - (this.t.SCROLL_W * this.ops.scaleFactor | 0)) | 0;
	}
	,panel: function(handle,text,isTree,filled,pack) {
		if(pack == null) {
			pack = true;
		}
		if(filled == null) {
			filled = true;
		}
		if(isTree == null) {
			isTree = false;
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.selected;
		}
		if(this.getReleased()) {
			handle.selected = !handle.selected;
			handle.changed = this.changed = true;
		}
		if(filled) {
			this.g.set_color(this.t.PANEL_BG_COL);
			var g = this.g;
			var x = this._x;
			var y = this._y;
			var w = this._w;
			var h = this.t.ELEMENT_H * this.ops.scaleFactor;
			var strength = 0.0;
			if(strength == 0.0) {
				strength = 1;
			}
			if(!this.enabled) {
				this.fadeColor();
			}
			g.fillRect(x,y - 1,w,h + 1);
		}
		if(isTree) {
			this.drawTree(handle.selected);
		} else {
			this.drawArrow(handle.selected);
		}
		this.g.set_color(this.t.LABEL_COL);
		this.g.set_opacity(1.0);
		this.drawString(this.g,text,this.titleOffsetX,0);
		this.endElement();
		if(pack && !handle.selected) {
			this._y -= this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
		}
		return handle.selected;
	}
	,image: function(image,tint,h,sx,sy,sw,sh) {
		if(sh == null) {
			sh = 0;
		}
		if(sw == null) {
			sw = 0;
		}
		if(sy == null) {
			sy = 0;
		}
		if(sx == null) {
			sx = 0;
		}
		if(tint == null) {
			tint = -1;
		}
		var iw = (sw > 0 ? sw : image.get_width()) * this.ops.scaleFactor;
		var ih = (sh > 0 ? sh : image.get_height()) * this.ops.scaleFactor;
		var w = Math.min(iw,this._w);
		var x = this._x;
		var scroll = this.currentWindow != null && this.currentWindow.scrollEnabled;
		var r;
		if(this.curRatio == -1) {
			r = 1.0;
		} else {
			var ratio = this.ratios[this.curRatio];
			r = ratio < 0 ? -ratio : ratio;
		}
		if(this.imageScrollAlign) {
			w = Math.min(iw,this._w - this.buttonOffsetY * 2);
			x += this.buttonOffsetY;
			if(!scroll) {
				w -= (this.t.SCROLL_W * this.ops.scaleFactor | 0) * r;
				x += (this.t.SCROLL_W * this.ops.scaleFactor | 0) * r / 2;
			}
		} else if(scroll) {
			w += (this.t.SCROLL_W * this.ops.scaleFactor | 0) * r;
		}
		var ratio = h == null ? w / iw : h / ih;
		if(h == null) {
			h = ih * ratio;
		} else {
			w = iw * ratio;
		}
		if(!this.isVisible(h)) {
			this.endElement(h);
			return 0;
		}
		var started = this.getStarted(h);
		var down = this.getPushed(h);
		var released = this.getReleased(h);
		var hover = this.getHover(h);
		if(this.curRatio == -1 && (started || down || released || hover)) {
			if(this.inputX < this._windowX + this._x || this.inputX > this._windowX + this._x + w) {
				hover = false;
				released = hover;
				down = released;
				started = down;
			}
		}
		this.g.set_color(tint);
		if(!this.enabled) {
			this.fadeColor();
		}
		var h_float = h;
		if(sw > 0) {
			if(this.imageInvertY) {
				this.g.drawScaledSubImage(image,sx,sy,sw,sh,x,this._y + h_float,w,-h_float);
			} else {
				this.g.drawScaledSubImage(image,sx,sy,sw,sh,x,this._y,w,h_float);
			}
		} else if(this.imageInvertY) {
			this.g.drawScaledImage(image,x,this._y + h_float,w,-h_float);
		} else {
			this.g.drawScaledImage(image,x,this._y,w,h_float);
		}
		this.endElement(h);
		if(started) {
			return 1;
		} else if(released) {
			return 3;
		} else if(down) {
			return 2;
		} else if(hover) {
			return 4;
		} else {
			return 0;
		}
	}
	,text: function(text,align,bg) {
		if(bg == null) {
			bg = 0;
		}
		if(align == null) {
			align = 0;
		}
		if(text.indexOf("\n") >= 0) {
			var align1 = align;
			var bg1 = bg;
			if(bg1 == null) {
				bg1 = 0;
			}
			if(align1 == null) {
				align1 = 0;
			}
			var _g = 0;
			var _g1 = text.split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				this.text(line,align1,bg1);
			}
			return 0;
		}
		var h = Math.max(this.t.ELEMENT_H * this.ops.scaleFactor,this.ops.font.height(this.fontSize));
		if(!this.isVisible(h)) {
			this.endElement(h + this.t.ELEMENT_OFFSET * this.ops.scaleFactor);
			return 0;
		}
		var started = this.getStarted(h);
		var down = this.getPushed(h);
		var released = this.getReleased(h);
		var hover = this.getHover(h);
		if(bg != 0) {
			this.g.set_color(bg);
			this.g.fillRect(this._x + this.buttonOffsetY,this._y + this.buttonOffsetY,this._w - this.buttonOffsetY * 2,this.t.BUTTON_H * this.ops.scaleFactor);
		}
		this.g.set_color(this.t.TEXT_COL);
		this.drawString(this.g,text,this.t.TEXT_OFFSET * this.ops.scaleFactor,0,align);
		this.endElement(h + this.t.ELEMENT_OFFSET * this.ops.scaleFactor);
		if(started) {
			return 1;
		} else if(released) {
			return 3;
		} else if(down) {
			return 2;
		} else {
			return 0;
		}
	}
	,splitText: function(lines,align,bg) {
		if(bg == null) {
			bg = 0;
		}
		if(align == null) {
			align = 0;
		}
		var _g = 0;
		var _g1 = lines.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			this.text(line,align,bg);
		}
	}
	,startTextEdit: function(handle) {
		this.isTyping = true;
		this.submitTextHandle = this.textSelectedHandle;
		this.textToSubmit = this.textSelected;
		this.textSelectedHandle = handle;
		this.textSelected = handle.text;
		this.cursorX = handle.text.length;
		if(this.tabPressed) {
			this.tabPressed = false;
			this.isKeyPressed = false;
		} else if(!this.highlightOnSelect) {
			var x = this.inputX - (this._windowX + this._x + this.t.TEXT_OFFSET * this.ops.scaleFactor);
			this.cursorX = 0;
			while(this.cursorX < this.textSelected.length && this.ops.font.width(this.fontSize,HxOverrides.substr(this.textSelected,0,this.cursorX)) < x) this.cursorX++;
		}
		this.tabPressedHandle = handle;
		this.highlightAnchor = this.highlightOnSelect ? 0 : this.cursorX;
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().show();
		}
	}
	,submitTextEdit: function() {
		this.submitTextHandle.text = this.textToSubmit;
		this.submitTextHandle.changed = this.changed = true;
		this.submitTextHandle = null;
		this.textToSubmit = "";
		this.textSelected = "";
	}
	,updateTextEdit: function(align,editable) {
		if(editable == null) {
			editable = true;
		}
		if(align == null) {
			align = 0;
		}
		var text = this.textSelected;
		if(this.isKeyPressed) {
			if(this.key == 37) {
				if(this.cursorX > 0) {
					this.cursorX--;
				}
			} else if(this.key == 39) {
				if(this.cursorX < text.length) {
					this.cursorX++;
				}
			} else if(editable && this.key == 8) {
				if(this.cursorX > 0 && this.highlightAnchor == this.cursorX) {
					text = HxOverrides.substr(text,0,this.cursorX - 1) + HxOverrides.substr(text,this.cursorX,text.length);
					this.cursorX--;
				} else if(this.highlightAnchor < this.cursorX) {
					text = HxOverrides.substr(text,0,this.highlightAnchor) + HxOverrides.substr(text,this.cursorX,text.length);
					this.cursorX = this.highlightAnchor;
				} else {
					text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.highlightAnchor,text.length);
				}
			} else if(editable && this.key == 46) {
				if(this.highlightAnchor == this.cursorX) {
					text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.cursorX + 1,null);
				} else if(this.highlightAnchor < this.cursorX) {
					text = HxOverrides.substr(text,0,this.highlightAnchor) + HxOverrides.substr(text,this.cursorX,text.length);
					this.cursorX = this.highlightAnchor;
				} else {
					text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.highlightAnchor,text.length);
				}
			} else if(this.key == 13) {
				this.deselectText();
			} else if(this.key == 27) {
				this.textSelected = this.textSelectedHandle.text;
				this.deselectText();
			} else if(this.key == 9 && this.tabSwitchEnabled && !this.isCtrlDown) {
				this.tabPressed = true;
				this.deselectText();
				this.key = null;
			} else if(this.key == 36) {
				this.cursorX = 0;
			} else if(this.key == 35) {
				this.cursorX = text.length;
			} else if(this.isCtrlDown && this.isADown) {
				this.cursorX = text.length;
				this.highlightAnchor = 0;
			} else if(editable && this.key != 16 && this.key != 20 && this.key != 17 && this.key != 224 && this.key != 18 && this.key != 38 && this.key != 40 && this.char != null && this.char != "" && HxOverrides.cca(this.char,0) >= 32) {
				text = HxOverrides.substr(text,0,this.highlightAnchor) + this.char + HxOverrides.substr(text,this.cursorX,null);
				this.cursorX = this.cursorX + 1 > text.length ? text.length : this.cursorX + 1;
				if(zui_Zui.dynamicGlyphLoad && HxOverrides.cca(this.char,0) > 126 && kha_graphics2_Graphics.fontGlyphs.indexOf(HxOverrides.cca(this.char,0)) == -1) {
					kha_graphics2_Graphics.fontGlyphs.push(HxOverrides.cca(this.char,0));
					kha_graphics2_Graphics.fontGlyphs = kha_graphics2_Graphics.fontGlyphs.slice();
				}
			}
			var selecting = this.isShiftDown && (this.key == 37 || this.key == 39 || this.key == 16);
			if(!selecting && !this.isCtrlDown) {
				this.highlightAnchor = this.cursorX;
			}
		}
		if(zui_Zui.textToPaste != "") {
			text = HxOverrides.substr(text,0,this.highlightAnchor) + zui_Zui.textToPaste + HxOverrides.substr(text,this.cursorX,null);
			this.cursorX += zui_Zui.textToPaste.length;
			this.highlightAnchor = this.cursorX;
			zui_Zui.textToPaste = "";
		}
		if(this.highlightAnchor == this.cursorX) {
			zui_Zui.textToCopy = text;
		} else if(this.highlightAnchor < this.cursorX) {
			zui_Zui.textToCopy = text.substring(this.highlightAnchor,this.cursorX);
		} else {
			zui_Zui.textToCopy = text.substring(this.cursorX,this.highlightAnchor);
		}
		if(zui_Zui.isCut) {
			if(this.highlightAnchor == this.cursorX) {
				text = "";
			} else if(this.highlightAnchor < this.cursorX) {
				text = HxOverrides.substr(text,0,this.highlightAnchor) + HxOverrides.substr(text,this.cursorX,text.length);
				this.cursorX = this.highlightAnchor;
			} else {
				text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.highlightAnchor,text.length);
			}
		}
		var off = this.t.TEXT_OFFSET * this.ops.scaleFactor;
		var lineHeight = this.t.ELEMENT_H * this.ops.scaleFactor;
		var cursorHeight = lineHeight - this.buttonOffsetY * 3.0;
		if(this.highlightAnchor != this.cursorX) {
			var istart = this.cursorX;
			var iend = this.highlightAnchor;
			if(this.highlightAnchor < this.cursorX) {
				istart = this.highlightAnchor;
				iend = this.cursorX;
			}
			var hlstr = HxOverrides.substr(text,istart,iend - istart);
			var hlstrw = this.ops.font.width(this.fontSize,hlstr);
			var startoff = this.ops.font.width(this.fontSize,HxOverrides.substr(text,0,istart));
			var hlStart = align == 0 ? this._x + startoff + off : this._x + this._w - hlstrw - off;
			if(align == 2) {
				hlStart -= this.ops.font.width(this.fontSize,HxOverrides.substr(text,iend,text.length));
			}
			this.g.set_color(this.t.ACCENT_SELECT_COL);
			this.g.fillRect(hlStart,this._y + this.buttonOffsetY * 1.5,hlstrw,cursorHeight);
		}
		var time = kha_Scheduler.time();
		if(this.isKeyDown || time % 1. < 0.5) {
			var str = align == 0 ? HxOverrides.substr(text,0,this.cursorX) : text.substring(this.cursorX,text.length);
			var strw = this.ops.font.width(this.fontSize,str);
			var cursorX = align == 0 ? this._x + strw + off : this._x + this._w - strw - off;
			this.g.set_color(this.t.TEXT_COL);
			this.g.fillRect(cursorX,this._y + this.buttonOffsetY * 1.5,this.ops.scaleFactor,cursorHeight);
		}
		this.textSelected = text;
	}
	,textInput: function(handle,label,align,editable) {
		if(editable == null) {
			editable = true;
		}
		if(align == null) {
			align = 0;
		}
		if(label == null) {
			label = "";
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.text;
		}
		var hover = this.getHover();
		if(hover && zui_Zui.onTextHover != null) {
			zui_Zui.onTextHover();
		}
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var g = this.g;
		var fill = this.t.FILL_ACCENT_BG;
		var x = this._x + this.buttonOffsetY;
		var y = this._y + this.buttonOffsetY;
		var w = this._w - this.buttonOffsetY * 2;
		var h = this.t.BUTTON_H * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		var startEdit = this.getReleased() || this.tabPressed;
		if(this.textSelectedHandle != handle && startEdit) {
			this.startTextEdit(handle);
		}
		if(this.textSelectedHandle == handle) {
			this.updateTextEdit(align,editable);
		}
		if(this.submitTextHandle == handle) {
			this.submitTextEdit();
		} else {
			handle.changed = false;
		}
		if(label != "") {
			this.g.set_color(this.t.LABEL_COL);
			var labelAlign = align == 2 ? 0 : 2;
			var xOffset = labelAlign == 0 ? 7 : 0;
			this.drawString(this.g,label,xOffset,0,labelAlign);
		}
		this.g.set_color(this.t.TEXT_COL);
		if(this.textSelectedHandle != handle) {
			this.drawString(this.g,handle.text,null,0,align);
		} else {
			this.drawString(this.g,this.textSelected,null,0,align);
		}
		this.endElement();
		return handle.text;
	}
	,deselectText: function() {
		if(this.textSelectedHandle == null) {
			return;
		}
		this.submitTextHandle = this.textSelectedHandle;
		this.textToSubmit = this.textSelected;
		this.textSelectedHandle = null;
		this.isTyping = false;
		if(this.currentWindow != null) {
			this.currentWindow.redraws = 2;
		}
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().hide();
		}
		this.highlightAnchor = this.cursorX;
	}
	,button: function(text,align,label) {
		if(label == null) {
			label = "";
		}
		if(align == null) {
			align = 1;
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return false;
		}
		var released = this.getReleased();
		var pushed = this.getPushed();
		var hover = this.getHover();
		if(released) {
			this.changed = true;
		}
		this.g.set_color(pushed ? this.t.BUTTON_PRESSED_COL : hover ? this.t.BUTTON_HOVER_COL : this.t.BUTTON_COL);
		var g = this.g;
		var fill = this.t.FILL_BUTTON_BG;
		var x = this._x + this.buttonOffsetY;
		var y = this._y + this.buttonOffsetY;
		var w = this._w - this.buttonOffsetY * 2;
		var h = this.t.BUTTON_H * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		this.g.set_color(this.t.BUTTON_TEXT_COL);
		this.drawString(this.g,text,this.t.TEXT_OFFSET * this.ops.scaleFactor,0,align);
		if(label != "") {
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,label,this.t.TEXT_OFFSET * this.ops.scaleFactor,0,align == 2 ? 0 : 2);
		}
		this.endElement();
		return released;
	}
	,check: function(handle,text) {
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.selected;
		}
		if(this.getReleased()) {
			handle.selected = !handle.selected;
			handle.changed = this.changed = true;
		} else {
			handle.changed = false;
		}
		var hover = this.getHover();
		this.drawCheck(handle.selected,hover);
		this.g.set_color(this.t.TEXT_COL);
		this.drawString(this.g,text,this.titleOffsetX,0,0);
		this.endElement();
		return handle.selected;
	}
	,radio: function(handle,position,text) {
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.position == position;
		}
		if(position == 0) {
			handle.changed = false;
		}
		if(this.getReleased()) {
			handle.position = position;
			handle.changed = this.changed = true;
		}
		var hover = this.getHover();
		this.drawRadio(handle.position == position,hover);
		this.g.set_color(this.t.TEXT_COL);
		this.drawString(this.g,text,this.titleOffsetX,0);
		this.endElement();
		return handle.position == position;
	}
	,combo: function(handle,texts,label,showLabel,align,itemCount) {
		if(itemCount == null) {
			itemCount = -1;
		}
		if(align == null) {
			align = 0;
		}
		if(showLabel == null) {
			showLabel = false;
		}
		if(label == null) {
			label = "";
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.position;
		}
		if(this.getReleased()) {
			if(this.comboSelectedHandle == null) {
				this.inputEnabled = false;
				this.comboSelectedHandle = handle;
				this.comboSelectedWindow = this.currentWindow;
				this.comboSelectedAlign = align;
				this.comboSelectedTexts = texts;
				this.comboSelectedLabel = label;
				this.comboSelectedX = this._x + this._windowX | 0;
				this.comboSelectedY = this._y + this._windowY + this.t.ELEMENT_H * this.ops.scaleFactor | 0;
				this.comboSelectedW = this._w | 0;
				this.comboItemCount = itemCount < 0 ? texts.length : itemCount;
				this.comboItemOffset = -1;
			}
		}
		if(handle == this.submitComboHandle) {
			handle.position = this.comboToSubmit;
			this.submitComboHandle = null;
			handle.changed = this.changed = true;
		} else {
			handle.changed = false;
		}
		if(this.inputWheelDelta != 0 && this.comboSelectedHandle != null) {
			this.comboItemOffset += this.inputWheelDelta > 0 ? 1 : -1;
			var maxOffset = this.comboSelectedTexts.length - this.comboItemCount;
			if(this.comboItemOffset > maxOffset) {
				this.comboItemOffset = maxOffset;
			}
			if(this.comboItemOffset < 0) {
				this.comboItemOffset = 0;
			}
		}
		var hover = this.getHover();
		if(hover) {
			this.g.set_color(this.t.ACCENT_HOVER_COL);
			var g = this.g;
			var fill = this.t.FILL_ACCENT_BG;
			var x = this._x + this.buttonOffsetY;
			var y = this._y + this.buttonOffsetY;
			var w = this._w - this.buttonOffsetY * 2;
			var h = this.t.BUTTON_H * this.ops.scaleFactor;
			var strength = 0.0;
			if(strength == 0.0) {
				strength = 1;
			}
			if(!this.enabled) {
				this.fadeColor();
			}
			if(fill) {
				g.fillRect(x,y - 1,w,h + 1);
			} else {
				g.drawRect(x,y,w,h,strength);
			}
		} else {
			this.g.set_color(this.t.ACCENT_COL);
			var g = this.g;
			var fill = this.t.FILL_ACCENT_BG;
			var x = this._x + this.buttonOffsetY;
			var y = this._y + this.buttonOffsetY;
			var w = this._w - this.buttonOffsetY * 2;
			var h = this.t.BUTTON_H * this.ops.scaleFactor;
			var strength = 0.0;
			if(strength == 0.0) {
				strength = 1;
			}
			if(!this.enabled) {
				this.fadeColor();
			}
			if(fill) {
				g.fillRect(x,y - 1,w,h + 1);
			} else {
				g.drawRect(x,y,w,h,strength);
			}
		}
		var x = this._x + this._w - this.arrowOffsetX - 8;
		var y = this._y + this.arrowOffsetY + 3;
		this.g.fillTriangle(x,y,x + this.t.ARROW_SIZE * this.ops.scaleFactor,y,x + this.t.ARROW_SIZE * this.ops.scaleFactor / 2,y + this.t.ARROW_SIZE * this.ops.scaleFactor / 2);
		if(showLabel && label != "") {
			if(align == 0) {
				this._x -= 15;
			}
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,label,null,0,align == 0 ? 2 : 0);
			if(align == 0) {
				this._x += 15;
			}
		}
		if(align == 2) {
			this._x -= 15;
		}
		this.g.set_color(this.t.TEXT_COL);
		if(handle.position < texts.length) {
			this.drawString(this.g,texts[handle.position],null,0,align);
		}
		if(align == 2) {
			this._x += 15;
		}
		this.endElement();
		return handle.position;
	}
	,slider: function(handle,text,from,to,filled,precision,displayValue,align,textEdit) {
		if(textEdit == null) {
			textEdit = true;
		}
		if(align == null) {
			align = 2;
		}
		if(displayValue == null) {
			displayValue = true;
		}
		if(precision == null) {
			precision = 100.0;
		}
		if(filled == null) {
			filled = false;
		}
		if(to == null) {
			to = 1.0;
		}
		if(from == null) {
			from = 0.0;
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.value;
		}
		if(this.getStarted()) {
			this.scrollHandle = handle;
			this.isScrolling = true;
		}
		handle.changed = false;
		if(handle == this.scrollHandle) {
			var range = to - from;
			var sliderX = this._x + this._windowX + this.buttonOffsetY;
			var sliderW = this._w - this.buttonOffsetY * 2;
			var step = range / sliderW;
			var value = from + (this.inputX - sliderX) * step;
			handle.value = Math.round(value * precision) / precision;
			if(handle.value < from) {
				handle.value = from;
			} else if(handle.value > to) {
				handle.value = to;
			}
			handle.changed = this.changed = true;
		}
		var hover = this.getHover();
		this.drawSlider(handle.value,from,to,filled,hover);
		var startEdit = (this.getReleased() || this.tabPressed) && textEdit;
		if(startEdit) {
			handle.text = handle.value + "";
			this.startTextEdit(handle);
			handle.changed = this.changed = true;
		}
		var lalign = align == 0 ? 2 : 0;
		if(this.textSelectedHandle == handle) {
			this.updateTextEdit(lalign);
		}
		if(this.submitTextHandle == handle) {
			this.submitTextEdit();
			try {
				var code = handle.text;
				handle.value = eval(code);
			} catch( _g ) {
			}
			handle.changed = this.changed = true;
		}
		this.g.set_color(this.t.LABEL_COL);
		this.drawString(this.g,text,null,0,align);
		if(displayValue) {
			this.g.set_color(this.t.TEXT_COL);
			if(this.textSelectedHandle != handle) {
				this.drawString(this.g,Math.round(handle.value * precision) / precision + "",null,0,lalign);
			} else {
				this.drawString(this.g,this.textSelected,null,0,lalign);
			}
		}
		this.endElement();
		return handle.value;
	}
	,separator: function(h,fill) {
		if(fill == null) {
			fill = true;
		}
		if(h == null) {
			h = 4;
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this._y += h * this.ops.scaleFactor;
			return;
		}
		if(fill) {
			this.g.set_color(this.t.SEPARATOR_COL);
			this.g.fillRect(this._x,this._y,this._w,h * this.ops.scaleFactor);
		}
		this._y += h * this.ops.scaleFactor;
	}
	,tooltip: function(text) {
		this.tooltipText = text;
		this.tooltipY = this._y + this._windowY;
	}
	,tooltipImage: function(image,maxWidth) {
		this.tooltipImg = image;
		this.tooltipImgMaxWidth = maxWidth;
		this.tooltipInvertY = this.imageInvertY;
		this.tooltipY = this._y + this._windowY;
	}
	,drawArrow: function(selected) {
		var x = this._x + this.arrowOffsetX;
		var y = this._y + this.arrowOffsetY;
		this.g.set_color(this.t.TEXT_COL);
		if(selected) {
			this.g.fillTriangle(x,y,x + this.t.ARROW_SIZE * this.ops.scaleFactor,y,x + this.t.ARROW_SIZE * this.ops.scaleFactor / 2,y + this.t.ARROW_SIZE * this.ops.scaleFactor);
		} else {
			this.g.fillTriangle(x,y,x,y + this.t.ARROW_SIZE * this.ops.scaleFactor,x + this.t.ARROW_SIZE * this.ops.scaleFactor,y + this.t.ARROW_SIZE * this.ops.scaleFactor / 2);
		}
	}
	,drawTree: function(selected) {
		var SIGN_W = 7 * this.ops.scaleFactor;
		var x = this._x + this.arrowOffsetX + 1;
		var y = this._y + this.arrowOffsetY + 1;
		this.g.set_color(this.t.TEXT_COL);
		if(selected) {
			this.g.fillRect(x,y + SIGN_W / 2 - 1,SIGN_W,SIGN_W / 8);
		} else {
			this.g.fillRect(x,y + SIGN_W / 2 - 1,SIGN_W,SIGN_W / 8);
			this.g.fillRect(x + SIGN_W / 2 - 1,y,SIGN_W / 8,SIGN_W);
		}
	}
	,drawCheck: function(selected,hover) {
		var x = this._x + this.checkOffsetX;
		var y = this._y + this.checkOffsetY;
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var g = this.g;
		var fill = this.t.FILL_ACCENT_BG;
		var w = this.t.CHECK_SIZE * this.ops.scaleFactor;
		var h = this.t.CHECK_SIZE * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		if(selected) {
			this.g.set_color(-1);
			if(!this.enabled) {
				this.fadeColor();
			}
			var size = this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor | 0;
			this.g.drawScaledImage(this.checkSelectImage,x + this.checkSelectOffsetX,y + this.checkSelectOffsetY,size,size);
		}
	}
	,drawRadio: function(selected,hover) {
		var x = this._x + this.radioOffsetX;
		var y = this._y + this.radioOffsetY;
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var g = this.g;
		var fill = this.t.FILL_ACCENT_BG;
		var w = this.t.CHECK_SIZE * this.ops.scaleFactor;
		var h = this.t.CHECK_SIZE * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		if(selected) {
			this.g.set_color(this.t.ACCENT_SELECT_COL);
			if(!this.enabled) {
				this.fadeColor();
			}
			this.g.fillRect(x + this.radioSelectOffsetX,y + this.radioSelectOffsetY,this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor,this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor);
		}
	}
	,drawSlider: function(value,from,to,filled,hover) {
		var x = this._x + this.buttonOffsetY;
		var y = this._y + this.buttonOffsetY;
		var w = this._w - this.buttonOffsetY * 2;
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var g = this.g;
		var fill = this.t.FILL_ACCENT_BG;
		var h = this.t.BUTTON_H * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var offset = (value - from) / (to - from);
		var barW = 8 * this.ops.scaleFactor;
		var sliderX = filled ? x : x + (w - barW) * offset;
		sliderX = Math.max(Math.min(sliderX,x + (w - barW)),x);
		var sliderW = filled ? w * offset : barW;
		sliderW = Math.max(Math.min(sliderW,w),0);
		var g = this.g;
		var h = this.t.BUTTON_H * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		g.fillRect(sliderX,y - 1,sliderW,h + 1);
	}
	,drawCombo: function() {
		if(this.comboSelectedHandle == null) {
			return;
		}
		var _g = this.g;
		this.globalG.set_color(this.t.SEPARATOR_COL);
		var elementSize = this.t.ELEMENT_H * this.ops.scaleFactor + this.t.ELEMENT_OFFSET * this.ops.scaleFactor | 0;
		var maxItemCount = Math.min(this.comboSelectedTexts.length,this.comboItemCount) | 0;
		var comboH = (maxItemCount + 1) * elementSize;
		this.globalG.begin(false);
		var distTop = this.comboSelectedY - comboH - (this.t.ELEMENT_H * this.ops.scaleFactor | 0);
		var distBottom = kha_System.windowHeight() - (this.comboSelectedY + comboH);
		var outOfScreen = distBottom < 0 && distBottom < distTop;
		var comboY = outOfScreen ? this.comboSelectedY - comboH - (this.t.ELEMENT_H * this.ops.scaleFactor | 0) : this.comboSelectedY;
		this.globalG.fillRect(this.comboSelectedX,comboY,this.comboSelectedW,comboH);
		this.beginRegion(this.globalG,this.comboSelectedX,comboY,this.comboSelectedW);
		if(this.comboItemOffset == -1) {
			if(outOfScreen) {
				this.comboItemOffset = this.comboSelectedTexts.length - 1 - this.comboSelectedHandle.position;
			} else {
				this.comboItemOffset = this.comboSelectedHandle.position;
			}
			var value = this.comboItemOffset;
			var max = this.comboSelectedTexts.length - maxItemCount;
			this.comboItemOffset = value < 0 ? 0 : value > max ? max : value;
		}
		if(outOfScreen) {
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,this.comboSelectedLabel,null,0,2);
			this._y += elementSize;
			this.fill(0,0,this._w / this.ops.scaleFactor,this.ops.scaleFactor,this.t.ACCENT_SELECT_COL);
		}
		this.inputEnabled = true;
		var BUTTON_COL = this.t.BUTTON_COL;
		var _g1 = this.comboItemOffset;
		var _g2 = this.comboItemOffset + maxItemCount;
		while(_g1 < _g2) {
			var i = _g1++;
			var j = outOfScreen ? this.comboSelectedTexts.length - 1 - i : i;
			this.t.BUTTON_COL = j == this.comboSelectedHandle.position ? this.t.ACCENT_SELECT_COL : this.t.SEPARATOR_COL;
			if(this.button(this.comboSelectedTexts[j],this.comboSelectedAlign)) {
				this.comboToSubmit = j;
				this.submitComboHandle = this.comboSelectedHandle;
				if(this.comboSelectedWindow != null) {
					this.comboSelectedWindow.redraws = 2;
				}
				break;
			}
		}
		this.t.BUTTON_COL = BUTTON_COL;
		if(!outOfScreen) {
			this.fill(0,0,this._w / this.ops.scaleFactor,this.ops.scaleFactor,this.t.ACCENT_SELECT_COL);
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,this.comboSelectedLabel,null,0,2);
		}
		var maxOffset = this.comboSelectedTexts.length - this.comboItemCount;
		if(maxOffset > 0) {
			var barH = Math.max(this.comboItemCount / this.comboSelectedTexts.length * (this.t.ELEMENT_H * this.ops.scaleFactor) * 16,this.t.ELEMENT_H * this.ops.scaleFactor);
			var off = (comboH - barH - elementSize) * this.comboItemOffset / maxOffset;
			this.g.set_color(this.t.ACCENT_COL);
			this.g.fillRect(this._x + this._w - (this.t.SCROLL_W * this.ops.scaleFactor | 0) / 3,comboY + off,(this.t.SCROLL_W * this.ops.scaleFactor | 0) / 3,barH);
		}
		if((this.inputReleased || this.isEscapeDown) && !zui_Zui.comboFirst) {
			this.comboSelectedHandle = null;
			zui_Zui.comboFirst = true;
		} else {
			zui_Zui.comboFirst = false;
		}
		this.inputEnabled = this.comboSelectedHandle == null;
		this.endRegion(false);
		this.globalG.end();
		this.g = _g;
	}
	,drawTooltip: function(bindGlobalG) {
		if(this.tooltipText != "" || this.tooltipImg != null) {
			if(this.inputChanged()) {
				this.tooltipShown = false;
				this.tooltipWait = this.inputDX == 0 && this.inputDY == 0;
			}
			if(!this.tooltipShown) {
				this.tooltipShown = true;
				this.tooltipX = this.inputX;
				this.tooltipTime = kha_Scheduler.time();
			}
			if(!this.tooltipWait && kha_Scheduler.time() - this.tooltipTime > 1.0) {
				if(this.tooltipText != "") {
					this.drawTooltipText(bindGlobalG);
				} else {
					this.drawTooltipImage(bindGlobalG);
				}
			}
		} else {
			this.tooltipShown = false;
		}
	}
	,drawTooltipText: function(bindGlobalG) {
		this.globalG.set_color(this.t.TEXT_COL);
		var lines = this.tooltipText.split("\n");
		var tooltipW = 0.0;
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			var lineTooltipW = this.ops.font.width(this.fontSize,line);
			if(lineTooltipW > tooltipW) {
				tooltipW = lineTooltipW;
			}
		}
		this.tooltipX = Math.min(this.tooltipX,kha_System.windowWidth() - tooltipW - 20);
		if(bindGlobalG) {
			this.globalG.begin(false);
		}
		this.globalG.fillRect(this.tooltipX,this.tooltipY,tooltipW + 20,this.t.ELEMENT_H * this.ops.scaleFactor * lines.length * 0.6);
		this.globalG.set_font(this.ops.font);
		this.globalG.set_fontSize(this.fontSize);
		this.globalG.set_color(this.t.ACCENT_COL);
		var _g = 0;
		var _g1 = lines.length;
		while(_g < _g1) {
			var i = _g++;
			this.globalG.drawString(lines[i],this.tooltipX + 5,this.tooltipY + i * this.fontSize);
		}
		if(bindGlobalG) {
			this.globalG.end();
		}
	}
	,drawTooltipImage: function(bindGlobalG) {
		var w = this.tooltipImg.get_width();
		if(this.tooltipImgMaxWidth != null && w > this.tooltipImgMaxWidth) {
			w = this.tooltipImgMaxWidth;
		}
		var h = this.tooltipImg.get_height() * (w / this.tooltipImg.get_width());
		this.tooltipX = Math.min(this.tooltipX,kha_System.windowWidth() - w - 20);
		this.tooltipY = Math.min(this.tooltipY,kha_System.windowHeight() - h - 20);
		if(bindGlobalG) {
			this.globalG.begin(false);
		}
		this.globalG.set_color(-16777216);
		this.globalG.fillRect(this.tooltipX,this.tooltipY,w,h);
		this.globalG.set_color(-1);
		if(this.tooltipInvertY) {
			this.globalG.drawScaledImage(this.tooltipImg,this.tooltipX,this.tooltipY + h,w,-h);
		} else {
			this.globalG.drawScaledImage(this.tooltipImg,this.tooltipX,this.tooltipY,w,h);
		}
		if(bindGlobalG) {
			this.globalG.end();
		}
	}
	,drawString: function(g,text,xOffset,yOffset,align) {
		if(align == null) {
			align = 0;
		}
		if(yOffset == null) {
			yOffset = 0;
		}
		var fullLength = text.length;
		while(text.length > 0 && this.ops.font.width(this.fontSize,text) > this._w) text = HxOverrides.substr(text,0,text.length - 1);
		if(text.length < fullLength) {
			text += "..";
		}
		if(xOffset == null) {
			xOffset = this.t.TEXT_OFFSET;
		}
		xOffset *= this.ops.scaleFactor;
		g.set_font(this.ops.font);
		g.set_fontSize(this.fontSize);
		if(align == 1) {
			xOffset = this._w / 2 - this.ops.font.width(this.fontSize,text) / 2;
		} else if(align == 2) {
			xOffset = this._w - this.ops.font.width(this.fontSize,text) - this.t.TEXT_OFFSET * this.ops.scaleFactor;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		g.set_pipeline(this.rtTextPipeline);
		g.drawString(text,this._x + xOffset,this._y + this.fontOffsetY + yOffset);
		g.set_pipeline(null);
	}
	,endElement: function(elementSize) {
		if(elementSize == null) {
			elementSize = this.t.ELEMENT_H * this.ops.scaleFactor + this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
		}
		if(this.currentWindow == null || this.currentWindow.layout == 0) {
			if(this.curRatio == -1 || this.ratios != null && this.curRatio == this.ratios.length - 1) {
				this._y += elementSize;
				if(this.ratios != null && this.curRatio == this.ratios.length - 1) {
					this.curRatio = -1;
					this.ratios = null;
					this._x = this.xBeforeSplit;
					this._w = this.wBeforeSplit;
					this.highlightFullRow = false;
				}
			} else {
				this.curRatio++;
				this._x += this._w;
				var ratio = this.ratios[this.curRatio];
				this._w = (ratio < 0 ? -ratio : ratio * this.wBeforeSplit) | 0;
			}
		} else {
			this._x += this._w + this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
		}
	}
	,highlightNextRow: function() {
		this.highlightFullRow = true;
	}
	,getRatio: function(ratio,dyn) {
		if(ratio < 0) {
			return -ratio;
		} else {
			return ratio * dyn;
		}
	}
	,row: function(ratios) {
		this.ratios = ratios;
		this.curRatio = 0;
		this.xBeforeSplit = this._x;
		this.wBeforeSplit = this._w;
		var ratio = ratios[this.curRatio];
		this._w = (ratio < 0 ? -ratio : ratio * this._w) | 0;
	}
	,indent: function(bothSides) {
		if(bothSides == null) {
			bothSides = true;
		}
		this._x += this.t.TAB_W * this.ops.scaleFactor | 0;
		this._w -= this.t.TAB_W * this.ops.scaleFactor | 0;
		if(bothSides) {
			this._w -= this.t.TAB_W * this.ops.scaleFactor | 0;
		}
	}
	,unindent: function(bothSides) {
		if(bothSides == null) {
			bothSides = true;
		}
		this._x -= this.t.TAB_W * this.ops.scaleFactor | 0;
		this._w += this.t.TAB_W * this.ops.scaleFactor | 0;
		if(bothSides) {
			this._w += this.t.TAB_W * this.ops.scaleFactor | 0;
		}
	}
	,fadeColor: function() {
		this.g.set_color(kha_Color.fromFloats(((this.g.get_color() & 16711680) >>> 16) * 0.00392156862745098,((this.g.get_color() & 65280) >>> 8) * 0.00392156862745098,(this.g.get_color() & 255) * 0.00392156862745098,0.25));
	}
	,fill: function(x,y,w,h,color) {
		this.g.set_color(color);
		if(!this.enabled) {
			this.fadeColor();
		}
		this.g.fillRect(this._x + x * this.ops.scaleFactor,this._y + y * this.ops.scaleFactor - 1,w * this.ops.scaleFactor,h * this.ops.scaleFactor);
		this.g.set_color(-1);
	}
	,rect: function(x,y,w,h,color,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.g.set_color(color);
		if(!this.enabled) {
			this.fadeColor();
		}
		this.g.drawRect(this._x + x * this.ops.scaleFactor,this._y + y * this.ops.scaleFactor,w * this.ops.scaleFactor,h * this.ops.scaleFactor,strength);
		this.g.set_color(-1);
	}
	,drawRect: function(g,fill,x,y,w,h,strength) {
		if(strength == null) {
			strength = 0.0;
		}
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
	}
	,isVisible: function(elemH) {
		if(this.currentWindow == null) {
			return true;
		}
		if(this._y + elemH > this.windowHeaderH) {
			return this._y < this.currentWindow.texture.get_height();
		} else {
			return false;
		}
	}
	,getReleased: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		this.isReleased = this.enabled && this.inputEnabled && this.inputReleased && this.getHover(elemH) && this.getInitialHover(elemH);
		return this.isReleased;
	}
	,getPushed: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		this.isPushed = this.enabled && this.inputEnabled && this.inputDown && this.getHover(elemH) && this.getInitialHover(elemH);
		return this.isPushed;
	}
	,getStarted: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		this.isStarted = this.enabled && this.inputEnabled && this.inputStarted && this.getHover(elemH);
		return this.isStarted;
	}
	,getInitialHover: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		if(this.scissor && this.inputY < this._windowY + this.windowHeaderH) {
			return false;
		}
		if(elemH == -1.0) {
			elemH = this.t.ELEMENT_H * this.ops.scaleFactor;
		}
		if(this.enabled && this.inputEnabled && this.inputStartedX >= this._windowX + this._x && this.inputStartedX < this._windowX + this._x + this._w && this.inputStartedY >= this._windowY + this._y) {
			return this.inputStartedY < this._windowY + this._y + elemH;
		} else {
			return false;
		}
	}
	,getHover: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		if(this.scissor && this.inputY < this._windowY + this.windowHeaderH) {
			return false;
		}
		if(elemH == -1.0) {
			elemH = this.t.ELEMENT_H * this.ops.scaleFactor;
		}
		this.isHovered = this.enabled && this.inputEnabled && this.inputX >= this._windowX + (this.highlightFullRow ? 0 : this._x) && this.inputX < this._windowX + this._x + (this.highlightFullRow ? this._windowW : this._w) && this.inputY >= this._windowY + this._y && this.inputY < this._windowY + this._y + elemH;
		return this.isHovered;
	}
	,getInputInRect: function(x,y,w,h,scale) {
		if(scale == null) {
			scale = 1.0;
		}
		if(this.enabled && this.inputEnabled && this.inputX >= x * scale && this.inputX < (x + w) * scale && this.inputY >= y * scale) {
			return this.inputY < (y + h) * scale;
		} else {
			return false;
		}
	}
	,onMouseDown: function(button,x,y) {
		if(button == 0) {
			this.inputStarted = true;
		} else {
			this.inputStartedR = true;
		}
		if(button == 0) {
			this.inputDown = true;
		} else {
			this.inputDownR = true;
		}
		this.inputStartedTime = kha_Scheduler.time();
		this.setInputPosition(x,y);
		this.inputStartedX = x;
		this.inputStartedY = y;
	}
	,onMouseUp: function(button,x,y) {
		if(this.isScrolling) {
			this.isScrolling = false;
			this.scrollHandle = null;
			if(x == this.inputStartedX && y == this.inputStartedY) {
				if(button == 0) {
					this.inputReleased = true;
				} else {
					this.inputReleasedR = true;
				}
			}
		} else if(button == 0) {
			this.inputReleased = true;
		} else {
			this.inputReleasedR = true;
		}
		if(button == 0) {
			this.inputDown = false;
		} else {
			this.inputDownR = false;
		}
		this.setInputPosition(x,y);
		this.deselectText();
		if(this.touchHold) {
			this.touchHold = false;
			this.inputReleased = false;
			this.inputReleasedR = true;
		}
	}
	,onMouseMove: function(x,y,movementX,movementY) {
		this.setInputPosition(x,y);
	}
	,onMouseWheel: function(delta) {
		this.inputWheelDelta = delta;
	}
	,setInputPosition: function(x,y) {
		this.inputDX += x - this.inputX;
		this.inputDY += y - this.inputY;
		this.inputX = x;
		this.inputY = y;
	}
	,onKeyDown: function(code) {
		this.key = code;
		this.isKeyPressed = true;
		this.isKeyDown = true;
		zui_Zui.keyRepeatTime = kha_Scheduler.time() + 0.4;
		switch(code) {
		case 8:
			this.isBackspaceDown = true;
			break;
		case 9:
			this.isTabDown = true;
			break;
		case 13:
			this.isReturnDown = true;
			break;
		case 16:
			this.isShiftDown = true;
			break;
		case 17:
			this.isCtrlDown = true;
			break;
		case 18:
			this.isAltDown = true;
			break;
		case 27:
			this.isEscapeDown = true;
			break;
		case 32:
			this.char = " ";
			break;
		case 46:
			this.isDeleteDown = true;
			break;
		case 65:
			this.isADown = true;
			break;
		default:
		}
	}
	,onKeyUp: function(code) {
		this.isKeyDown = false;
		switch(code) {
		case 8:
			this.isBackspaceDown = false;
			break;
		case 9:
			this.isTabDown = false;
			break;
		case 13:
			this.isReturnDown = false;
			break;
		case 16:
			this.isShiftDown = false;
			break;
		case 17:
			this.isCtrlDown = false;
			break;
		case 18:
			this.isAltDown = false;
			break;
		case 27:
			this.isEscapeDown = false;
			break;
		case 46:
			this.isDeleteDown = false;
			break;
		case 65:
			this.isADown = false;
			break;
		default:
		}
	}
	,onKeyPress: function(char) {
		this.char = char;
		this.isKeyPressed = true;
	}
	,onCut: function() {
		zui_Zui.isCut = true;
		return this.onCopy();
	}
	,onCopy: function() {
		zui_Zui.isCopy = true;
		return zui_Zui.textToCopy;
	}
	,onPaste: function(s) {
		zui_Zui.isPaste = true;
		zui_Zui.textToPaste = s;
	}
	,ELEMENT_W: function() {
		return this.t.ELEMENT_W * this.ops.scaleFactor;
	}
	,ELEMENT_H: function() {
		return this.t.ELEMENT_H * this.ops.scaleFactor;
	}
	,ELEMENT_OFFSET: function() {
		return this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
	}
	,ARROW_SIZE: function() {
		return this.t.ARROW_SIZE * this.ops.scaleFactor;
	}
	,BUTTON_H: function() {
		return this.t.BUTTON_H * this.ops.scaleFactor;
	}
	,CHECK_SIZE: function() {
		return this.t.CHECK_SIZE * this.ops.scaleFactor;
	}
	,CHECK_SELECT_SIZE: function() {
		return this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor;
	}
	,FONT_SIZE: function() {
		return this.t.FONT_SIZE * this.ops.scaleFactor | 0;
	}
	,SCROLL_W: function() {
		return this.t.SCROLL_W * this.ops.scaleFactor | 0;
	}
	,TEXT_OFFSET: function() {
		return this.t.TEXT_OFFSET * this.ops.scaleFactor;
	}
	,TAB_W: function() {
		return this.t.TAB_W * this.ops.scaleFactor | 0;
	}
	,HEADER_DRAG_H: function() {
		return 15 * this.ops.scaleFactor | 0;
	}
	,SCALE: function() {
		return this.ops.scaleFactor;
	}
	,FLASH_SPEED: function() {
		return 0.5;
	}
	,TOOLTIP_DELAY: function() {
		return 1.0;
	}
	,resize: function(handle,w,h,khaWindowId) {
		if(khaWindowId == null) {
			khaWindowId = 0;
		}
		handle.redraws = 2;
		if(handle.texture != null) {
			handle.texture.unload();
		}
		if(w < 1) {
			w = 1;
		}
		if(h < 1) {
			h = 1;
		}
		handle.texture = kha_Image.createRenderTarget(w,h,0,0,1,khaWindowId);
		handle.texture.get_g2().set_imageScaleQuality(1);
	}
	,__class__: zui_Zui
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = true;
$hxClasses["Array"] = Array;
Array.__name__ = true;
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
AnimationEditor.timeline = null;
AnimationEditor.dot = null;
zui_Handle.global = new zui_Handle();
CollisionEditorDialog.textInputHandle = zui_Handle.global.nest(56,null);
CollisionEditorDialog.comboBoxHandle = zui_Handle.global.nest(47,null);
CollisionEditorDialog.collisionTypes = ["Rect","Circle","Polygon"];
CollisionEditorDialog.shouldTileInit = false;
ConfigSettingsDialog.localeHandle = zui_Handle.global.nest(28,null);
ConfigSettingsDialog.languages = [];
ConfigSettingsDialog.playModeHandle = zui_Handle.global.nest(29,null);
ConfigSettingsDialog.hideMenuHandle = zui_Handle.global.nest(30,null);
ConfigSettingsDialog.uiScaleHandle = zui_Handle.global.nest(31,null);
ConfigSettingsDialog.changedScale = false;
CustomExt.lastFiles = [];
CustomExt.lastFolders = [];
EditorMenu.show = false;
EditorMenu.menuCategory = 0;
EditorMenu.menuX = 0;
EditorMenu.menuY = 0;
EditorMenu.menuW = 0;
EditorMenu.menuElements = 0;
EditorMenu.keepOpen = false;
EditorMenu.menuCommands = null;
EditorMenu.changeStarted = false;
EditorMenu.showMenuFirst = true;
EditorMenu.hideMenu = false;
EditorMenu.drawGridHandle = zui_Handle.global.nest(32,{ selected : true});
EditorMenu.physicsDebugHandle = zui_Handle.global.nest(33,{ selected : false});
EditorMenu.camControlLeftHandle = zui_Handle.global.nest(34,null);
EditorMenu.camControlRightHandle = zui_Handle.global.nest(35,null);
EditorMenu.camControlUpHandle = zui_Handle.global.nest(36,null);
EditorMenu.camControlDownHandle = zui_Handle.global.nest(37,null);
EditorMenu.menuItemsCount = [6,2,4,5,3];
EditorMenuBar.defaultMenubarW = 330;
EditorTools.redrawArrows = true;
found_Trait.props = new haxe_ds_StringMap();
EditorUi.scenePath = "";
EditorUi.projectName = "";
EditorUi.projectPath = ".";
EditorUi.cwd = ".";
EditorUi.arrow = -1;
EditorUi.arrowMode = 0;
FileBrowserDialog.inst = null;
FileBrowserDialog.defaultPath = ".";
FileBrowserDialog.fbHandle = zui_Handle.global.nest(18,null);
FileBrowserDialog.textInputHandle = zui_Handle.global.nest(19,null);
found_App.onResets = null;
found_App.onEndFrames = null;
found_App.traitAwakes = [];
found_App.traitInits = [];
found_App.traitUpdates = [];
found_App.traitLateUpdates = [];
found_App.traitRenders = [];
found_App.traitRenders2D = [];
found_App.editorui = null;
found_App.frameCounter = new found__$App_FPS();
ProjectCreator.pathInputHandle = zui_Handle.global.nest(94,null);
ProjectCreator.nameInputHandle = zui_Handle.global.nest(92,null);
ProjectCreator.typeHandle = zui_Handle.global.nest(93,null);
ProjectInit.path = "";
ProjectInit.project = "";
ProjectInit.hasHaxeui = true;
TraitsDialog.textInputHandle = zui_Handle.global.nest(23,null);
TraitsDialog.comboBoxHandle = zui_Handle.global.nest(25,null);
TraitsDialog.traitsFolderPath = "";
TraitsDialog.traitTypes = ["Visual Trait","Script Trait"];
TraitsDialog.traitTypeExtensions = ["vhx","hx"];
TraitsDialog.camelCaseRegex = new EReg("([A-Z][a-z0-9]+)((\\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?","");
TraitsDialog.arrayOfTraits = [];
TraitsDialog.fullFileName = "";
echo_Body.ids = 0;
echo_Collisions.qr = [];
echo_Collisions.sqr = [];
echo_Echo.listeners = new echo_Listeners();
echo_Line._pool = new echo_util_Pool(echo_Line);
echo_Physics.zero = (function($this) {
	var $r;
	var this1 = new hxmath_math_Vector2Default(0.0,0.0);
	$r = this1;
	return $r;
}(this));
echo_data_Collision._pool = new echo_util_Pool(echo_data_Collision);
echo_data_CollisionData._pool = new echo_util_Pool(echo_data_CollisionData);
echo_data_Intersection._pool = new echo_util_Pool(echo_data_Intersection);
echo_data_IntersectionData._pool = new echo_util_Pool(echo_data_IntersectionData);
echo_shape_Circle._pool = new echo_util_Pool(echo_shape_Circle);
echo_shape_Polygon._pool = new echo_util_Pool(echo_shape_Polygon);
echo_shape_Rect._pool = new echo_util_Pool(echo_shape_Rect);
echo_util_AABB._pool = new echo_util_Pool(echo_util_AABB);
echo_util_QuadTree._pool = new echo_util_Pool(echo_util_QuadTree);
echo_util_SAT.norm = (function($this) {
	var $r;
	var this1 = new hxmath_math_Vector2Default(0,0);
	$r = this1;
	return $r;
}(this));
echo_util_SAT.closest = (function($this) {
	var $r;
	var this1 = new hxmath_math_Vector2Default(0,0);
	$r = this1;
	return $r;
}(this));
found_Event.events = new haxe_ds_StringMap();
found_Found.GRID = 64;
found_Found.fullscreen = false;
found_Found.BUFFERWIDTH = found_Found.WIDTH;
found_Found.BUFFERHEIGHT = found_Found.HEIGHT;
found_Found.sha = HxOverrides.substr("'5deaa01'",1,7);
found_Found.date = "2020-12-16 14:57:53".split(" ")[0];
found_Found.collisionsDraw = false;
found_Found.drawGrid = true;
found_Found.sceneX = 0.0;
found_Found.sceneY = 0.0;
found_Input.occupied = false;
found_Input.mouse = null;
found_Input.pen = null;
found_Input.keyboard = null;
found_Input.gamepads = [];
found_Input.sensor = null;
found_Input.registered = false;
found_Input.virtualButtons = null;
found_Mouse.buttons = ["left","right","middle"];
found_Pen.buttons = ["tip"];
found_Keyboard.keys = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","space","backspace","tab","enter","shift","control","alt","escape","delete","up","down","left","right","back",",",".",":",";","<","=",">","?","!","\"","#","$","%","&","_","(",")","*","|","{","}","[","]","~","`","/","\\","@","+","-","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12"];
found_Gamepad.buttonsPS = ["cross","circle","square","triangle","l1","r1","l2","r2","share","options","l3","r3","up","down","left","right","home","touchpad"];
found_Gamepad.buttonsXBOX = ["a","b","x","y","l1","r1","l2","r2","share","options","l3","r3","up","down","left","right","home","touchpad"];
found_Gamepad.buttons = found_Gamepad.buttonsXBOX;
found_Gamepad.axisNames = ["left joystick X","left joystick Y","right joystick X","right joystick Y","left trigger","right trigger"];
found_Scene.ready = false;
found_Scene.STEP = 0.016;
found_Scene.zsort = true;
found_object_Object.uidCounter = -1;
found_object_Object._positions = [];
found_object_Object._translations = null;
found_object_Object._rotations = [];
found_object_Object._rotates = null;
found_object_Object._scales = [];
found_object_Object._scaler = null;
found_anim_Tile.onStaticDone = null;
found_audio_Music.musicChannels = new haxe_ds_StringMap();
found_audio_Sfx.sfxChannels = new haxe_ds_StringMap();
found_audio_Sfx.inactiveChannels = [];
found_audio_Sfx.allLoaded = false;
khafs_Fs.dataPath = "";
khafs_Fs.curDir = "";
khafs_Fs.sep = "/";
khafs_Fs.lastPath = "";
khafs_Fs.dbKeys = new haxe_ds_StringMap();
khafs_Fs.reader = new FileReader();
khafs_Fs.callCount = 0;
khafs_Fs.filetypeExceptions = [".json",".hx"];
kha_internal_BytesBlob.bufferSize = 2000;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
found_data_Data.version = 0.1;
found_data_Data.cachedSceneRaws = new haxe_ds_StringMap();
found_data_Data.cachedBlobs = new haxe_ds_StringMap();
found_data_Data.cachedImages = new haxe_ds_StringMap();
found_data_Data.cachedSounds = new haxe_ds_StringMap();
found_data_Data.cachedVideos = new haxe_ds_StringMap();
found_data_Data.cachedFonts = new haxe_ds_StringMap();
found_data_Data.assetsLoaded = 0;
found_data_Data.loadingSceneRaws = new haxe_ds_StringMap();
found_data_Data.loadingBlobs = new haxe_ds_StringMap();
found_data_Data.loadingImages = new haxe_ds_StringMap();
found_data_Data.loadingSounds = new haxe_ds_StringMap();
found_data_Data.loadingVideos = new haxe_ds_StringMap();
found_data_Data.loadingFonts = new haxe_ds_StringMap();
found_data_Data.dataPath = "";
found_data_Data.getData = khafs_Fs.getData;
found_math_Util.RAND_MAX = -2147483648 - 1;
found_math_Util.PI = 3.141592653589793;
found_math_Util.d2r = 0.0174532925199432955;
found_math_Util.r2d = 57.2957795130823229;
found_math_Util.EPS = 1e-6;
found_math_Cli.red = "\x1B[31m";
found_math_Cli.green = "\x1B[32m";
found_math_Cli.yellow = "\x1B[33m";
found_math_Cli.bred = "\x1B[1m\x1B[31m";
found_math_Cli.bgreen = "\x1B[1m\x1B[32m";
found_math_Cli.byellow = "\x1B[1m\x1B[33m";
found_math_Cli.reset = "\x1B[0m";
found_node_GateNode.operationsNames = ["Or","And","Equal","Less","Less Equal","Greater","Greater Equal"];
found_node_Logic.parsed_nodes = null;
found_node_Logic.parsed_labels = null;
found_node_Logic.enumTexts = null;
found_node_Logic.packageNames = ["found.node","gameplay"];
found_node_OnGamepadButtonInputNode.buttonEventTypes = ["Pressed","Down","Released"];
found_node_OnKeyboardNode.keyboardEventTypes = ["Pressed","Down","Released"];
found_node_OnMouseNode.mouseEventTypes = ["Pressed","Down","Released","Moved"];
found_node_data_FoundryNode.onAddNode = { id : 0, name : "On Add", type : "OnAddNode", x : 200, y : 200, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : [], color : -4962746};
found_node_data_FoundryNode.onInitNode = { id : 0, name : "On Init", type : "InitNode", x : 200, y : 200, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : [], color : -4962746};
found_node_data_FoundryNode.onUpdateNode = { id : 0, name : "On Update", type : "UpdateNode", x : 200, y : 200, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : [], color : -4962746};
found_node_data_FoundryNode.multiEventNode = { id : 0, name : "Multiple Events", type : "MultiEventNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 1, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : [], color : -4962746};
found_node_data_FoundryNode.eventListenNode = { id : 0, name : "Event Listener", type : "EventListenNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Event Name", type : "STRING", color : -4934476, default_value : ""}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : [], color : -4962746};
found_node_data_FoundryNode.sendEventNode = { id : 0, name : "Send Event", type : "SendEventNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Event Name", type : "STRING", color : -4934476, default_value : ""},{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null}], outputs : [], buttons : [], color : -4962746};
found_node_data_FoundryNode.onMouseNode = (function($this) {
	var $r;
	var tmp = { name : "mouseEventType", type : "ENUM", data : found_node_OnMouseNode.getMouseButtonEventTypes(), output : 0, default_value : 0};
	$r = { id : 0, name : "On Mouse", type : "OnMouseNode", x : 200, y : 200, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : [tmp,{ name : "mouseButton", type : "ENUM", data : found_Mouse.getMouseButtonStringValues(), output : 0, default_value : 0}], color : -4962746};
	return $r;
}(this));
found_node_data_FoundryNode.mouseCoordNode = { id : 0, name : "Mouse Coord", type : "MouseCoordNode", x : 200, y : 200, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Position", type : "VECTOR2", color : -7929601, default_value : ""},{ id : 0, node_id : 0, name : "Movement", type : "VECTOR2", color : -7929601, default_value : ""},{ id : 0, node_id : 0, name : "Wheel Delta", type : "VALUE", color : -10183681, default_value : ""}], buttons : [], color : -4962746};
found_node_data_FoundryNode.onKeyboardNode = { id : 0, name : "On Keyboard", type : "OnKeyboardNode", x : 200, y : 200, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""},{ id : 1, node_id : 0, name : "isActive", type : "BOOLEAN", color : -10822566, default_value : 0.0}], buttons : [{ name : "keyboardEventType", type : "ENUM", data : found_node_OnKeyboardNode.getKeyboardEventTypes(), output : 0, default_value : 0},{ name : "keyCode", type : "KEY", output : 0, default_value : 65}], color : -4962746};
found_node_data_FoundryNode.onGamepadAxisInputNode = { id : 0, name : "On Gamepad Axis Input", type : "OnGamepadAxisInputNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "Gamepad Index", type : "VALUE", color : -10183681, default_value : 0}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""},{ id : 1, node_id : 0, name : "Float Axis Value", type : "FLOAT", color : -10183681, default_value : 0.0}], buttons : [{ name : "selectedAxisName", type : "ENUM", data : found_Gamepad.getAxisStringValues(), output : 0, default_value : 0}], color : -4962746};
found_node_data_FoundryNode.onGamepadButtonInputNode = (function($this) {
	var $r;
	var tmp = { name : "selectedButtonEventType", type : "ENUM", data : found_node_OnGamepadButtonInputNode.getButtonEventTypes(), output : 0, default_value : 0};
	$r = { id : 0, name : "On Gamepad Button Input", type : "OnGamepadButtonInputNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "Gamepad Index", type : "VALUE", color : -10183681, default_value : 0}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""},{ id : 1, node_id : 0, name : "Int Button Value", type : "INT", color : -10183681, default_value : 0.0}], buttons : [tmp,{ name : "selectedButtonName", type : "ENUM", data : found_Gamepad.getButtonStringValues(), output : 0, default_value : 0}], color : -4962746};
	return $r;
}(this));
found_node_data_FoundryNode.splitVec2Node = { id : 0, name : "Split Vec2", type : "SplitVec2Node", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Vec2", type : "VECTOR2", color : -7929601, default_value : [0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "X", type : "VALUE", color : -10183681, default_value : 0.0},{ id : 1, node_id : 0, name : "Y", type : "VALUE", color : -10183681, default_value : 0.0}], buttons : []};
found_node_data_FoundryNode.joinVec2Node = { id : 0, name : "Join Vec2", type : "JoinVec2Node", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "X", type : "VALUE", color : -10183681, default_value : 0.0},{ id : 0, node_id : 0, name : "Y", type : "VALUE", color : -10183681, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Vec2", type : "VECTOR2", color : -7929601, default_value : [0.0,0.0]}], buttons : []};
found_node_data_FoundryNode.addVec2Node = { id : 0, name : "Add Vec2", type : "AddVec2Node", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Fisrt Vec2", type : "VECTOR2", color : -7929601, default_value : [0.0,0.0]},{ id : 0, node_id : 0, name : "Second Vec2", type : "VECTOR2", color : -7929601, default_value : [0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Vec2", type : "VECTOR2", color : -7929601, default_value : [0.0,0.0]}], buttons : []};
found_node_data_FoundryNode.multiplyVec2Node = { id : 0, name : "Multiply Vec2", type : "MultiplyVec2Node", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Fisrt Vec2", type : "VECTOR2", color : -7929601, default_value : [0.0,0.0]},{ id : 0, node_id : 0, name : "Multiplier", type : "VALUE", color : -10183681, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Vec2", type : "VECTOR2", color : -7929601, default_value : [0.0,0.0]}], buttons : []};
found_node_data_FoundryNode.multiplyVec2sNode = { id : 0, name : "Multiply Vec2's", type : "MultiplyVec2sNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Fisrt Vec2", type : "VECTOR2", color : -7929601, default_value : [0.0,0.0]},{ id : 0, node_id : 0, name : "Second Vec2", type : "VECTOR2", color : -7929601, default_value : [0.0,0.0]}], outputs : [{ id : 0, node_id : 0, name : "Vec2", type : "VECTOR2", color : -7929601, default_value : [0.0,0.0]}], buttons : []};
found_node_data_FoundryNode.everyXNode = { id : 0, name : "Every X sec", type : "EveryXNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Number of sec", type : "VALUE", color : -10183681, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : []};
found_node_data_FoundryNode.cooldownNode = { id : 0, name : "X s Cooldown", type : "CooldownNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Number of sec", type : "VALUE", color : -10183681, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : []};
found_node_data_FoundryNode.getPositionNode = { id : 0, name : "Get Position", type : "GetPositionNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null}], outputs : [{ id : 0, node_id : 0, name : "Position Vec2", type : "VECTOR2", color : -7929601, default_value : new kha_math_FastVector2(0.0,0.0)}], buttons : []};
found_node_data_FoundryNode.getCenterNode = { id : 0, name : "Get Center", type : "GetCenterNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null}], outputs : [{ id : 0, node_id : 0, name : "Center Vec2", type : "VECTOR2", color : -7929601, default_value : new kha_math_FastVector2(0.0,0.0)}], buttons : []};
found_node_data_FoundryNode.getForwardNode = { id : 0, name : "Get Forward", type : "GetForwardNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null}], outputs : [{ id : 0, node_id : 0, name : "Forward Vec2", type : "VECTOR2", color : -7929601, default_value : new kha_math_FastVector2(0.0,0.0)}], buttons : []};
found_node_data_FoundryNode.getWidthHeightNode = { id : 0, name : "Get Width/Height", type : "GetWidthHeightNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null}], outputs : [{ id : 0, node_id : 0, name : "Width/Height Vec2", type : "VECTOR2", color : -7929601, default_value : new kha_math_FastVector2(0.0,0.0)}], buttons : []};
found_node_data_FoundryNode.setObjectLocationNode = { id : 0, name : "Set Object Location", type : "SetObjectLocationNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null},{ id : 0, node_id : 0, name : "Vec2", type : "VECTOR2", color : -7929601, default_value : new kha_math_FastVector2(0.0,0.0)}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : []};
found_node_data_FoundryNode.getRotationNode = { id : 0, name : "Get Rotation", type : "GetRotationNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null}], outputs : [{ id : 0, node_id : 0, name : "Rotation", type : "VALUE", color : -10183681, default_value : 0}], buttons : []};
found_node_data_FoundryNode.translateObjectNode = { id : 0, name : "Translate Object", type : "TranslateObjectNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null},{ id : 0, node_id : 0, name : "Position Vec2", type : "VECTOR2", color : -7929601, default_value : new kha_math_FastVector2(0.0,0.0)},{ id : 0, node_id : 0, name : "Speed", type : "VALUE", color : -10183681, default_value : 1.0}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : []};
found_node_data_FoundryNode.rotateTowardPositionNode = { id : 0, name : "Rotate Toward Position", type : "RotateTowardPositionNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Object to Rotate", type : "OBJECT", color : -4934476, default_value : null},{ id : 0, node_id : 0, name : "Position Vec2", type : "VECTOR2", color : -7929601, default_value : new kha_math_FastVector2(0.0,0.0)}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : []};
found_node_data_FoundryNode.getObjectNode = { id : 0, name : "Get Object", type : "GetObjectNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Selected Object", type : "OBJECT", color : -4934476, default_value : null}], buttons : [{ name : "selectedObjectName", type : "ENUM", data : [""], output : 0, default_value : 0}], color : -4962746};
found_node_data_FoundryNode.getRandomObjectNode = { id : 0, name : "Get Random Object", type : "GetRandomObjectNode", x : 200, y : 200, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Random Object from list", type : "OBJECT", color : -4934476, default_value : null}], buttons : [{ name : "listOfObjects", type : "ARRAY", data : [], output : 0, default_value : []}], color : -4962746};
found_node_data_FoundryNode.spawnObjectNode = { id : 0, name : "Spawn Object", type : "SpawnObjectNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null},{ id : 0, node_id : 0, name : "Position Vec2", type : "VECTOR2", color : -7929601, default_value : new kha_math_FastVector2(0.0,0.0)},{ id : 0, node_id : 0, name : "Rotation", type : "VALUE", color : -10183681, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : [], color : -4962746};
found_node_data_FoundryNode.destroyObjectNode = { id : 0, name : "Destroy Object", type : "DestroyObjectNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : [], color : -4962746};
found_node_data_FoundryNode.destroyObjectOutsideViewNode = { id : 0, name : "Destroy Object Outside View", type : "DestroyObjectOutsideViewNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null},{ id : 0, node_id : 0, name : "OffsetFromView", type : "VALUE", color : -10183681, default_value : 0.0}], outputs : [], buttons : [], color : -4962746};
found_node_data_FoundryNode.isObjectOutsideViewNode = { id : 0, name : "Is Object Outside View", type : "IsObjectOutsideViewNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null},{ id : 0, node_id : 0, name : "OffsetFromView", type : "VALUE", color : -10183681, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : [], color : -4962746};
found_node_data_FoundryNode.flipSpriteNode = { id : 0, name : "Flip Sprite", type : "FlipSpriteNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 1, node_id : 0, name : "selectedSpriteName", type : "OBJECT", color : -4934476, default_value : null},{ id : 2, node_id : 0, name : "FlipX", type : "BOOLEAN", color : -10822566, default_value : 0.0},{ id : 3, node_id : 0, name : "FlipY", type : "BOOLEAN", color : -10822566, default_value : 0.0}], outputs : [], buttons : [{ name : "selectedSpriteName", type : "ENUM", data : [""], output : 0, default_value : 0}], color : -4962746};
found_node_data_FoundryNode.applyForceToRigidbodyNode = { id : 0, name : "Apply Force To Rigidbody", type : "ApplyForceToRigidbodyNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null},{ id : 0, node_id : 0, name : "Vec2", type : "VECTOR2", color : -7929601, default_value : new kha_math_FastVector2(0.0,0.0)}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : []};
found_node_data_FoundryNode.applyImpulseToRigidbodyNode = { id : 0, name : "Apply Impulse To Rigidbody", type : "ApplyImpulseToRigidbodyNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null},{ id : 0, node_id : 0, name : "Vec2", type : "VECTOR2", color : -7929601, default_value : new kha_math_FastVector2(0.0,0.0)}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : []};
found_node_data_FoundryNode.topDownControllerNode = { id : 0, name : "Top-down Controller", type : "TopDownControllerNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "Custom Input Vec2", type : "VECTOR2", color : -7929601, default_value : new kha_math_FastVector2(0.0,0.0)},{ id : 1, node_id : 0, name : "Speed", type : "VALUE", color : -10183681, default_value : 300.0}], outputs : [], buttons : [{ name : "inputType", type : "ENUM", data : ["Use default input","Use custom input"], output : 0, default_value : 0},{ name : "defaultUpKeyCode", type : "KEY", output : 0, default_value : 38},{ name : "defaultDownKeyCode", type : "KEY", output : 0, default_value : 40},{ name : "defaultLeftKeyCode", type : "KEY", output : 0, default_value : 37},{ name : "defaultRightKeyCode", type : "KEY", output : 0, default_value : 39}], color : -4962746};
found_node_data_FoundryNode.platformer2DControllerNode = { id : 0, name : "Platformer 2D Controller", type : "Platformer2DControllerNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "Custom Input Vec2", type : "VECTOR2", color : -7929601, default_value : new kha_math_FastVector2(0.0,0.0)},{ id : 1, node_id : 0, name : "Speed", type : "VALUE", color : -10183681, default_value : 300.0},{ id : 2, node_id : 0, name : "Jump Force", type : "VALUE", color : -10183681, default_value : 1000.0}], outputs : [], buttons : [{ name : "inputType", type : "ENUM", data : ["Use default input","Use custom input"], output : 0, default_value : 0},{ name : "defaultLeftKeyCode", type : "KEY", output : 0, default_value : 37},{ name : "defaultRightKeyCode", type : "KEY", output : 0, default_value : 39},{ name : "defaultJumpKeyCode", type : "KEY", output : 0, default_value : 32}], color : -4962746};
found_node_data_FoundryNode.bulletMovementNode = { id : 0, name : "Bullet Movement", type : "BulletMovementNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "Reset Vel & angle", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Speed", type : "VALUE", color : -10183681, default_value : 300.0}], outputs : [], buttons : [], color : -4962746};
found_node_data_FoundryNode.setCameraTargetPositionNode = { id : 0, name : "Set Camera Target Position", type : "SetCameraTargetPositionNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 1, node_id : 0, name : "Target Position Vec2", type : "VECTOR2", color : -7929601, default_value : new kha_math_FastVector2(0.0,0.0)}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : [], color : -4962746};
found_node_data_FoundryNode.setCameraFollowTargetNode = { id : 0, name : "Set Camera Follow Target", type : "SetCameraFollowTargetNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -4934476, default_value : null}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : [], color : -4962746};
found_node_data_FoundryNode.playAnimationNode = { id : 0, name : "Play Animation", type : "PlayAnimationNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Animation Name", type : "STRING", color : -4934476, default_value : ""},{ id : 0, node_id : 0, name : "Object", type : "OBJECT", color : -16067936, default_value : null}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : [], color : -4962746};
found_node_data_FoundryNode.onCollisionNode = { id : 0, name : "On Collision", type : "OnCollisionNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Selected Object", type : "OBJECT", color : -4934476, default_value : null}], outputs : [{ id : 0, node_id : 0, name : "On Enter", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "On Stay", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "On Exit", type : "ACTION", color : -5618620, default_value : ""},{ id : 0, node_id : 0, name : "Object collided", type : "OBJECT", color : -4934476, default_value : null}], buttons : [], color : -4962746};
found_node_data_FoundryNode.playMusicNode = { id : 0, name : "Play Music", type : "PlayMusicNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 1, node_id : 1, name : "Music alias", type : "STRING", color : -4934476, default_value : ""}], outputs : [{ id : 0, node_id : 0, name : "OnFinished", type : "ACTION", color : -5618620, default_value : ""}], buttons : [{ name : "loop", type : "BOOL", output : 0, default_value : false},{ name : "volume", type : "VALUE", min : 0.0, max : 1.0, output : 0, default_value : 1.0}], color : -4962746};
found_node_data_FoundryNode.playSfxNode = { id : 0, name : "Play Sound", type : "PlaySfxNode", x : 200, y : 200, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 1, node_id : 1, name : "Sound alias", type : "STRING", color : -4934476, default_value : ""}], outputs : [{ id : 0, node_id : 0, name : "OnFinished", type : "ACTION", color : -5618620, default_value : ""}], buttons : [{ name : "volume", type : "VALUE", min : 0.0, max : 1.0, output : 0, default_value : 1.0}], color : -4962746};
found_node_data_LogicNode.gate = { id : 0, name : "Gate", type : "GateNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 1, node_id : 0, name : "Bool", type : "BOOLEAN", color : -10822566, default_value : 0.0},{ id : 2, node_id : 0, name : "Bool", type : "BOOLEAN", color : -10822566, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Bool", type : "BOOLEAN", color : -10822566, default_value : 0.0}], buttons : [{ name : "operations", type : "ENUM", data : found_node_GateNode.getOperationsNames(), default_value : 0}]};
found_node_data_LogicNode.branch = { id : 0, name : "Branch", type : "BranchNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : 0.0},{ id : 1, node_id : 0, name : "Bool", type : "BOOLEAN", color : -10822566, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "True", type : "BOOL", color : -10822566, default_value : 0.0},{ id : 1, node_id : 0, name : "False", type : "BOOL", color : -10822566, default_value : 0.0}], buttons : []};
found_node_data_LogicNode.isFalse = { id : 0, name : "Is False", type : "IsFalseNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : 0.0},{ id : 1, node_id : 0, name : "Bool", type : "BOOLEAN", color : -10822566, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : 0.0}], buttons : []};
found_node_data_LogicNode.isTrue = { id : 0, name : "Is True", type : "IsTrueNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : 0.0},{ id : 1, node_id : 0, name : "Bool", type : "BOOLEAN", color : -10822566, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : 0.0}], buttons : []};
found_node_data_LogicNode.whileN = { id : 0, name : "While", type : "WhileNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : 0.0},{ id : 1, node_id : 0, name : "Condition", type : "BOOLEAN", color : -10822566, default_value : 0.0}], outputs : [{ id : 0, node_id : 0, name : "Loop", type : "ACTION", color : -5618620, default_value : 0.0},{ id : 0, node_id : 0, name : "Done", type : "ACTION", color : -5618620, default_value : 0.0}], buttons : []};
found_node_data_MathNode.maths = { id : 0, name : "Maths", type : "MathNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Value", type : "VALUE", color : -10183681, default_value : 0.0, max : 100.0},{ id : 1, node_id : 0, name : "Value", type : "VALUE", color : -10183681, default_value : 0.0, max : 100.0}], outputs : [{ id : 0, node_id : 0, name : "value", type : "Value", color : -10183681, default_value : 0.0}], buttons : [{ name : "operations", type : "ENUM", data : ["Add","Subtract","Multiply","Divide"], output : 0, default_value : 0}]};
found_node_data_MathNode.radtodeg = { id : 0, name : "Radian to Degre", type : "RadToDegNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Rad", type : "VALUE", color : -10183681, default_value : 0.0, max : 6.28}], outputs : [{ id : 0, node_id : 0, name : "Deg", type : "Value", color : -10183681, default_value : 0.0}], buttons : []};
found_node_data_MathNode.degtorad = { id : 0, name : "Degree to Radian", type : "DegToRadNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Deg", type : "VALUE", color : -10183681, default_value : 0.0, max : 360.0}], outputs : [{ id : 0, node_id : 0, name : "Rad", type : "Value", color : -10183681, default_value : 0.0}], buttons : []};
found_node_data_MathNode.randf = { id : 0, name : "Random (Float)", type : "RandFNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Float", type : "VALUE", color : -10183681, default_value : 0.0, max : 100.0},{ id : 1, node_id : 0, name : "Float", type : "VALUE", color : -10183681, default_value : 0.0, max : 100.0}], outputs : [{ id : 0, node_id : 0, name : "Float", type : "Value", color : -10183681, default_value : 0.0}], buttons : []};
found_node_data_MathNode.randi = { id : 0, name : "Random (Int)", type : "RandINode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Int", type : "VALUE", color : -10183681, default_value : 0, max : 100},{ id : 1, node_id : 0, name : "Int", type : "VALUE", color : -10183681, default_value : 0, max : 100}], outputs : [{ id : 0, node_id : 0, name : "Int", type : "Value", color : -10183681, default_value : 0}], buttons : []};
found_node_data_StdNode.parseInt = { id : 0, name : "Parse Int", type : "ParseIntNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "String", type : "STRING", color : -4934476, default_value : ""}], outputs : [{ id : 0, node_id : 0, name : "Int", type : "VALUE", color : -10183681, default_value : ""}], buttons : []};
found_node_data_StdNode.parseFloat = { id : 0, name : "Parse Float", type : "ParseFloatNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "String", type : "STRING", color : -4934476, default_value : ""}], outputs : [{ id : 0, node_id : 0, name : "Float", type : "VALUE", color : -10183681, default_value : ""}], buttons : []};
found_node_data_StdNode.floatToInt = { id : 0, name : "Float to Int", type : "FloatToIntNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "Float", type : "VALUE", color : -10183681, default_value : ""}], outputs : [{ id : 0, node_id : 0, name : "Int", type : "VALUE", color : -10183681, default_value : ""}], buttons : []};
found_node_data_StdNode.print = { id : 0, name : "Print", type : "PrintNode", x : 200, y : 200, color : -4962746, inputs : [{ id : 0, node_id : 0, name : "In", type : "ACTION", color : -5618620, default_value : ""},{ id : 1, node_id : 0, name : "Value", type : "STRING", color : -4934476, default_value : ""}], outputs : [{ id : 0, node_id : 0, name : "Out", type : "ACTION", color : -5618620, default_value : ""}], buttons : []};
found_node_data_VariableNode.string = { id : 0, name : "String", type : "StringNode", x : 200, y : 200, color : -16067936, inputs : [{ id : 0, node_id : 0, name : "String", type : "STRING", color : -4934476, default_value : ""}], outputs : [{ id : 0, node_id : 0, name : "String", type : "STRING", color : -4934476, default_value : ""}], buttons : []};
found_node_data_VariableNode.float = { id : 0, name : "Float", type : "FloatNode", x : 200, y : 200, color : -16067936, inputs : [{ id : 0, node_id : 0, name : "Float", type : "VALUE", color : -10183681, default_value : 0.0, max : 100.0}], outputs : [{ id : 0, node_id : 0, name : "Float", type : "VALUE", color : -10183681, default_value : 0.0}], buttons : []};
found_node_data_VariableNode.int = { id : 0, name : "Int", type : "IntegerNode", x : 200, y : 200, color : -16067936, inputs : [{ id : 0, node_id : 0, name : "Int", type : "VALUE", color : -10183681, default_value : 0, max : 100}], outputs : [{ id : 0, node_id : 0, name : "Int", type : "VALUE", color : -10183681, default_value : 0}], buttons : []};
found_node_data_VariableNode.boolean = { id : 0, name : "Boolean", type : "BoolNode", x : 200, y : 200, color : -16067936, inputs : [{ id : 0, node_id : 0, name : "Bool", type : "BOOLEAN", color : -10822566, default_value : ""}], outputs : [{ id : 0, node_id : 0, name : "Bool", type : "BOOLEAN", color : -10822566, default_value : ""}], buttons : []};
found_node_data_VariableNode.vector2 = { id : 0, name : "Vector2", type : "Vector2Node", x : 200, y : 200, color : -16067936, inputs : [{ id : 0, node_id : 0, name : "X", type : "VALUE", color : -10183681, default_value : 0.0, max : 100.0},{ id : 1, node_id : 0, name : "Y", type : "VALUE", color : -10183681, default_value : 0.0, max : 100.0}], outputs : [{ id : 0, node_id : 0, name : "Vec2", type : "VECTOR2", color : -7929601, default_value : [0.0,0.0]},{ id : 1, node_id : 0, name : "Normalised Vec2", type : "VECTOR2", color : -7929601, default_value : [0.0,0.0]}], buttons : []};
found_node_data_VariableNode.getProp = { id : 0, name : "Get Property", type : "GetPropNode", x : 200, y : 200, color : -16067936, inputs : [], outputs : [{ id : 0, node_id : 0, name : "Prop", type : "VALUE", color : -10183681, default_value : null}], buttons : [{ name : "classname", type : "ENUM", data : [], output : 0, default_value : 0},{ name : "propertyName", type : "ENUM", data : [], output : 0, default_value : 0}]};
found_object_Executor.executors = [];
found_tool_Log.customLogs = [];
found_tool_NodeEditor.nodesArray = [];
found_tool_NodeEditor.selectedNode = null;
found_tool_NodeEditor.gameplayNodes = new haxe_ds_StringMap();
found_tool_NodeEditor.grid = null;
found_tool_NodeEditor.gridSize = 20;
found_tool_TileEditorState.Draw = 0;
found_tool_TileEditorState.Erase = 1;
found_tool_TileEditor.editorStates = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		var _g2 = Type.getClassFields(found_tool_TileEditorState);
		while(_g1 < _g2.length) {
			var field = _g2[_g1];
			++_g1;
			_g.push(field);
		}
	}
	$r = _g;
	return $r;
}(this));
found_tool_TileEditor.selectedTilemapIdIndex = -1;
found_tool_TileEditor.tilemapIds = [];
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.CODES = null;
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
haxe_zip_InflateImpl.FIXED_HUFFMAN = null;
hxmath_math_IntVector2.elementCount = 2;
hxmath_math_MathUtil.eps = 1e-6;
hxmath_math_Matrix2x2.elementCount = 4;
hxmath_math_Matrix3x2.elementCount = 6;
hxmath_math_Matrix3x3.elementCount = 9;
hxmath_math_Matrix4x4.elementCount = 16;
hxmath_math_Quaternion.elementCount = 4;
hxmath_math_Vector2.elementCount = 2;
hxmath_math_Vector3.elementCount = 3;
hxmath_math_Vector4.elementCount = 4;
kha_Assets.images = new kha__$Assets_ImageList();
kha_Assets.sounds = new kha__$Assets_SoundList();
kha_Assets.blobs = new kha__$Assets_BlobList();
kha_Assets.fonts = new kha__$Assets_FontList();
kha_Assets.videos = new kha__$Assets_VideoList();
kha_Color.Black = -16777216;
kha_Color.White = -1;
kha_Color.Red = -65536;
kha_Color.Blue = -16776961;
kha_Color.Green = -16711936;
kha_Color.Magenta = -65281;
kha_Color.Yellow = -256;
kha_Color.Cyan = -16711681;
kha_Color.Purple = -8388480;
kha_Color.Pink = -16181;
kha_Color.Orange = -23296;
kha_Color.Transparent = 0;
kha_Color.invMaxChannelValue = 0.00392156862745098;
kha_Display.instance = new kha_Display();
kha_Scheduler.timeWarpSaveTime = 10.0;
kha_Scheduler.DIF_COUNT = 3;
kha_Scheduler.maxframetime = 0.5;
kha_Scheduler.startTime = 0;
kha_Scheduler.activeTimeTask = null;
kha_Shaders.painter_colored_fragData0 = "s198:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IGZyYWdtZW50Q29sb3I7Cn0KCg";
kha_Shaders.painter_colored_fragData1 = "s223:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSBmcmFnbWVudENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_fragData2 = "s192:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gZnJhZ21lbnRDb2xvcjsKfQoK";
kha_Shaders.painter_colored_frag = null;
kha_Shaders.painter_colored_vertData0 = "s331:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData1 = "s311:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData2 = "s374:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIG1lZGl1bXAgdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_colored_vert = null;
kha_Shaders.painter_image_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData1 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData2 = "s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_image_frag = null;
kha_Shaders.painter_image_vertData0 = "s415:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_vertData1 = "s380:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_image_vertData2 = "s479:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_vert = null;
kha_Shaders.painter_text_fragData0 = "s351:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CnZhcnlpbmcgaGlnaHAgdmVjMiB0ZXhDb29yZDsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChmcmFnbWVudENvbG9yLnh5eiwgdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_fragData1 = "s367:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSB2ZWM0KGZyYWdtZW50Q29sb3IueHl6LCB0ZXh0dXJlKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_fragData2 = "s340:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjNCBmcmFnbWVudENvbG9yOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQoZnJhZ21lbnRDb2xvci54eXosIHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKS54ICogZnJhZ21lbnRDb2xvci53KTsKfQoK";
kha_Shaders.painter_text_frag = null;
kha_Shaders.painter_text_vertData0 = "s436:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKICAgIGZyYWdtZW50Q29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_vertData1 = "s402:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBmcmFnbWVudENvbG9yOwppbiB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_text_vertData2 = "s500:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGZyYWdtZW50Q29sb3I7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKICAgIGZyYWdtZW50Q29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_vert = null;
kha_Shaders.painter_video_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_fragData1 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_fragData2 = "s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_video_frag = null;
kha_Shaders.painter_video_vertData0 = "s415:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_video_vertData1 = "s380:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_video_vertData2 = "s479:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_video_vert = null;
kha_System.renderListeners = [];
kha_System.foregroundListeners = [];
kha_System.resumeListeners = [];
kha_System.pauseListeners = [];
kha_System.backgroundListeners = [];
kha_System.shutdownListeners = [];
kha_System.dropFilesListeners = [];
kha_System.cutListener = null;
kha_System.copyListener = null;
kha_System.pasteListener = null;
kha_System.loginListener = null;
kha_System.logoutListener = null;
kha_SystemImpl.mobile = false;
kha_SystemImpl.ios = false;
kha_SystemImpl.mobileAudioPlaying = false;
kha_SystemImpl.chrome = false;
kha_SystemImpl.firefox = false;
kha_SystemImpl.ie = false;
kha_SystemImpl.insideInputEvent = false;
kha_SystemImpl.maxGamepads = 4;
kha_SystemImpl.keyboard = null;
kha_SystemImpl.minimumScroll = 999;
kha_SystemImpl.lastFirstTouchX = 0;
kha_SystemImpl.lastFirstTouchY = 0;
kha_SystemImpl.iosSoundEnabled = false;
kha_SystemImpl.soundEnabled = false;
kha_SystemImpl.iosTouchs = [];
kha_WebGLImage.GL_RGBA16F = 34842;
kha_WebGLImage.GL_RGBA32F = 34836;
kha_WebGLImage.GL_R16F = 33325;
kha_WebGLImage.GL_R32F = 33326;
kha_WebGLImage.GL_RED = 6403;
kha_WebGLImage.GL_DEPTH_COMPONENT24 = 33190;
kha_WebGLImage.GL_DEPTH24_STENCIL8 = 35056;
kha_WebGLImage.GL_DEPTH32F_STENCIL8 = 36013;
kha_Window.windows = [];
kha_Window.resizeCallbacks = [];
kha_WindowFeatures.None = 0;
kha_WindowFeatures.FeatureResizable = 1;
kha_WindowFeatures.FeatureMinimizable = 2;
kha_WindowFeatures.FeatureMaximizable = 4;
kha_WindowFeatures.FeatureBorderless = 8;
kha_WindowFeatures.FeatureOnTop = 16;
kha_audio2_Audio.disableGcInteractions = false;
kha_audio2_Audio.intBox = new kha_internal_IntBox(0);
kha_audio2_Audio.virtualChannels = [];
kha_audio2_Audio1.channelCount = 32;
kha_audio2_Audio1.lastAllocationCount = 0;
kha_audio2_ogg_tools_Crc32.POLY = 79764919;
kha_audio2_ogg_vorbis_VorbisDecodeState.INVALID_BITS = -1;
kha_audio2_ogg_vorbis_VorbisTools.EOP = -1;
kha_audio2_ogg_vorbis_VorbisTools.M__PI = 3.14159265358979323846264;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_NUMER = 32;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_DENOM = 64;
kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE = [1.0649863e-07,1.1341951e-07,1.2079015e-07,1.2863978e-07,1.3699951e-07,1.4590251e-07,1.5538408e-07,1.6548181e-07,1.7623575e-07,1.8768855e-07,1.9988561e-07,2.1287530e-07,2.2670913e-07,2.4144197e-07,2.5713223e-07,2.7384213e-07,2.9163793e-07,3.1059021e-07,3.3077411e-07,3.5226968e-07,3.7516214e-07,3.9954229e-07,4.2550680e-07,4.5315863e-07,4.8260743e-07,5.1396998e-07,5.4737065e-07,5.8294187e-07,6.2082472e-07,6.6116941e-07,7.0413592e-07,7.4989464e-07,7.9862701e-07,8.5052630e-07,9.0579828e-07,9.6466216e-07,1.0273513e-06,1.0941144e-06,1.1652161e-06,1.2409384e-06,1.3215816e-06,1.4074654e-06,1.4989305e-06,1.5963394e-06,1.7000785e-06,1.8105592e-06,1.9282195e-06,2.0535261e-06,2.1869758e-06,2.3290978e-06,2.4804557e-06,2.6416497e-06,2.8133190e-06,2.9961443e-06,3.1908506e-06,3.3982101e-06,3.6190449e-06,3.8542308e-06,4.1047004e-06,4.3714470e-06,4.6555282e-06,4.9580707e-06,5.2802740e-06,5.6234160e-06,5.9888572e-06,6.3780469e-06,6.7925283e-06,7.2339451e-06,7.7040476e-06,8.2047000e-06,8.7378876e-06,9.3057248e-06,9.9104632e-06,1.0554501e-05,1.1240392e-05,1.1970856e-05,1.2748789e-05,1.3577278e-05,1.4459606e-05,1.5399272e-05,1.6400004e-05,1.7465768e-05,1.8600792e-05,1.9809576e-05,2.1096914e-05,2.2467911e-05,2.3928002e-05,2.5482978e-05,2.7139006e-05,2.8902651e-05,3.0780908e-05,3.2781225e-05,3.4911534e-05,3.7180282e-05,3.9596466e-05,4.2169667e-05,4.4910090e-05,4.7828601e-05,5.0936773e-05,5.4246931e-05,5.7772202e-05,6.1526565e-05,6.5524908e-05,6.9783085e-05,7.4317983e-05,7.9147585e-05,8.4291040e-05,8.9768747e-05,9.5602426e-05,0.00010181521,0.00010843174,0.00011547824,0.00012298267,0.00013097477,0.00013948625,0.00014855085,0.00015820453,0.00016848555,0.00017943469,0.00019109536,0.00020351382,0.00021673929,0.00023082423,0.00024582449,0.00026179955,0.00027881276,0.00029693158,0.00031622787,0.00033677814,0.00035866388,0.00038197188,0.00040679456,0.00043323036,0.00046138411,0.00049136745,0.00052329927,0.00055730621,0.00059352311,0.00063209358,0.00067317058,0.00071691700,0.00076350630,0.00081312324,0.00086596457,0.00092223983,0.00098217216,0.0010459992,0.0011139742,0.0011863665,0.0012634633,0.0013455702,0.0014330129,0.0015261382,0.0016253153,0.0017309374,0.0018434235,0.0019632195,0.0020908006,0.0022266726,0.0023713743,0.0025254795,0.0026895994,0.0028643847,0.0030505286,0.0032487691,0.0034598925,0.0036847358,0.0039241906,0.0041792066,0.0044507950,0.0047400328,0.0050480668,0.0053761186,0.0057254891,0.0060975636,0.0064938176,0.0069158225,0.0073652516,0.0078438871,0.0083536271,0.0088964928,0.009474637,0.010090352,0.010746080,0.011444421,0.012188144,0.012980198,0.013823725,0.014722068,0.015678791,0.016697687,0.017782797,0.018938423,0.020169149,0.021479854,0.022875735,0.024362330,0.025945531,0.027631618,0.029427276,0.031339626,0.033376252,0.035545228,0.037855157,0.040315199,0.042935108,0.045725273,0.048696758,0.051861348,0.055231591,0.058820850,0.062643361,0.066714279,0.071049749,0.075666962,0.080584227,0.085821044,0.091398179,0.097337747,0.10366330,0.11039993,0.11757434,0.12521498,0.13335215,0.14201813,0.15124727,0.16107617,0.17154380,0.18269168,0.19456402,0.20720788,0.22067342,0.23501402,0.25028656,0.26655159,0.28387361,0.30232132,0.32196786,0.34289114,0.36517414,0.38890521,0.41417847,0.44109412,0.46975890,0.50028648,0.53279791,0.56742212,0.60429640,0.64356699,0.68538959,0.72993007,0.77736504,0.82788260,0.88168307,0.9389798,1.0];
kha_audio2_ogg_vorbis_data_Codebook.NO_CODE = 255;
kha_audio2_ogg_vorbis_data_Codebook.delay = 0;
kha_audio2_ogg_vorbis_data_Header.PACKET_ID = 1;
kha_audio2_ogg_vorbis_data_Header.PACKET_COMMENT = 3;
kha_audio2_ogg_vorbis_data_Header.PACKET_SETUP = 5;
kha_audio2_ogg_vorbis_data_PageFlag.CONTINUED_PACKET = 1;
kha_audio2_ogg_vorbis_data_PageFlag.FIRST_PAGE = 2;
kha_audio2_ogg_vorbis_data_PageFlag.LAST_PAGE = 4;
kha_audio2_ogg_vorbis_data_Setting.MAX_CHANNELS = 16;
kha_audio2_ogg_vorbis_data_Setting.PUSHDATA_CRC_COUNT = 4;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_LENGTH = 10;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_SIZE = 1024;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_MASK = 1023;
kha_graphics2_Graphics.fontGlyphs = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 32;
		while(_g1 < 256) {
			var i = _g1++;
			_g.push(i);
		}
	}
	$r = _g;
	return $r;
}(this));
kha_graphics2_truetype_StbTruetype.STBTT_vmove = 1;
kha_graphics2_truetype_StbTruetype.STBTT_vline = 2;
kha_graphics2_truetype_StbTruetype.STBTT_vcurve = 3;
kha_graphics2_truetype_StbTruetype.STBTT_vcubic = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_DONTCARE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_BOLD = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_ITALIC = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_UNDERSCORE = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_NONE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_UNICODE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MAC = 1;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_ISO = 2;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MICROSOFT = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_0 = 0;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_1 = 1;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_ISO_10646 = 2;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_BMP = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_FULL = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SYMBOL = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_BMP = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SHIFTJIS = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_FULL = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ROMAN = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ARABIC = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_JAPANESE = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_HEBREW = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_CHINESE_TRAD = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_GREEK = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_KOREAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_RUSSIAN = 7;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ENGLISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ITALIAN = 1040;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_CHINESE = 2052;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_JAPANESE = 1041;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_DUTCH = 1043;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_KOREAN = 1042;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_FRENCH = 1036;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_RUSSIAN = 1049;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_GERMAN = 1031;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SPANISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_HEBREW = 1037;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SWEDISH = 1053;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ENGLISH = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_JAPANESE = 11;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ARABIC = 12;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_KOREAN = 23;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_DUTCH = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_RUSSIAN = 32;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_FRENCH = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SPANISH = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_GERMAN = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SWEDISH = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_HEBREW = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_SIMPLIFIED = 33;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ITALIAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_TRAD = 19;
kha_graphics2_truetype_StbTruetype.STBTT_MAX_OVERSAMPLE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_RASTERIZER_VERSION = 2;
kha_graphics4_CubeMap.GL_RGBA16F = 34842;
kha_graphics4_CubeMap.GL_RGBA32F = 34836;
kha_graphics4_CubeMap.GL_R16F = 33325;
kha_graphics4_CubeMap.GL_R32F = 33326;
kha_graphics4_CubeMap.GL_DEPTH_COMPONENT24 = 33190;
kha_graphics4_CubeMap.GL_DEPTH24_STENCIL8 = 35056;
kha_graphics4_CubeMap.GL_DEPTH32F_STENCIL8 = 36013;
kha_graphics4_ImageShaderPainter.standardImagePipeline = null;
kha_graphics4_ImageShaderPainter.structure = null;
kha_graphics4_ImageShaderPainter.bufferSize = 1500;
kha_graphics4_ImageShaderPainter.vertexSize = 9;
kha_graphics4_ColoredShaderPainter.standardColorPipeline = null;
kha_graphics4_ColoredShaderPainter.structure = null;
kha_graphics4_ColoredShaderPainter.bufferSize = 1000;
kha_graphics4_ColoredShaderPainter.triangleBufferSize = 1000;
kha_graphics4_TextShaderPainter.standardTextPipeline = null;
kha_graphics4_TextShaderPainter.structure = null;
kha_graphics4_TextShaderPainter.bufferSize = 1000;
kha_graphics4_Graphics2.current = null;
kha_input_Gamepad.__meta__ = { statics : { sendConnectEvent : { input : null}, sendDisconnectEvent : { input : null}}, fields : { sendAxisEvent : { input : null}, sendButtonEvent : { input : null}}};
kha_input_Gamepad.instances = [];
kha_input_Gamepad.connectListeners = [];
kha_input_Gamepad.disconnectListeners = [];
kha_input_Keyboard.__meta__ = { fields : { sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendPressEvent : { input : null}}};
kha_input_Keyboard.keyBehavior = kha_input_BlockInterventions.Default;
kha_input_Mouse.__meta__ = { fields : { sendLeaveEvent : { input : null}, sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendMoveEvent : { input : null}, sendWheelEvent : { input : null}}};
kha_input_Mouse.wheelEventBlockBehavior = kha_input_MouseEventBlockBehavior.Full;
kha_input_Sensor.isInited = false;
kha_input_Sensor.accelerometer = new kha_input_Sensor();
kha_input_Sensor.gyroscope = new kha_input_Sensor();
kha_input_Surface.touchDownEventBlockBehavior = kha_input_TouchDownEventBlockBehavior.Full;
kha_internal_HdrFormat.radiancePattern = new EReg("#\\?RADIANCE","i");
kha_internal_HdrFormat.commentPattern = new EReg("#.*","i");
kha_internal_HdrFormat.gammaPattern = new EReg("GAMMA=","i");
kha_internal_HdrFormat.exposurePattern = new EReg("EXPOSURE=\\s*([0-9]*[.][0-9]*)","i");
kha_internal_HdrFormat.formatPattern = new EReg("FORMAT=32-bit_rle_rgbe","i");
kha_internal_HdrFormat.widthHeightPattern = new EReg("-Y ([0-9]+) \\+X ([0-9]+)","i");
kha_js_Sound.loading = [];
kha_js_graphics4_Graphics.GL_TEXTURE_COMPARE_MODE = 34892;
kha_js_graphics4_Graphics.GL_TEXTURE_COMPARE_FUNC = 34893;
kha_js_graphics4_Graphics.GL_COMPARE_REF_TO_TEXTURE = 34894;
kha_math_FastMatrix3.width = 3;
kha_math_FastMatrix3.height = 3;
kha_math_FastMatrix4.width = 4;
kha_math_FastMatrix4.height = 4;
kha_math_Matrix3.width = 3;
kha_math_Matrix3.height = 3;
kha_math_Matrix4.width = 4;
kha_math_Matrix4.height = 4;
kha_math_Quaternion.AXIS_X = 0;
kha_math_Quaternion.AXIS_Y = 1;
kha_math_Quaternion.AXIS_Z = 2;
kha_netsync_ControllerBuilder.nextId = 0;
kha_netsync_Session.START = 0;
kha_netsync_Session.ENTITY_UPDATES = 1;
kha_netsync_Session.CONTROLLER_UPDATES = 2;
kha_netsync_Session.REMOTE_CALL = 3;
kha_netsync_Session.PING = 4;
kha_netsync_Session.SESSION_ERROR = 5;
kha_netsync_Session.PLAYER_UPDATES = 6;
kha_netsync_Session.RPC_SERVER = 0;
kha_netsync_Session.RPC_ALL = 1;
kha_netsync_Session.instance = null;
kha_netsync_SyncBuilder.nextId = 0;
kha_netsync_SyncBuilder.objects = [];
utilities_Config.raw = null;
utilities_Config.configLoaded = false;
utilities_Translator.translations = new haxe_ds_StringMap();
zui_Canvas.assetMap = new haxe_ds_IntMap();
zui_Canvas.themes = [];
zui_Canvas.events = [];
zui_Canvas.screenW = -1;
zui_Canvas.screenH = -1;
zui_Canvas.locale = "en";
zui_Canvas.h = new zui_Handle();
zui_Canvas.elemId = -1;
zui_Canvas.assetId = -1;
zui_Ext.dataPath = "";
zui_Ext.lastPath = "";
zui_Ext.wheelSelectedHande = null;
zui_Ext._ELEMENT_OFFSET = 0;
zui_Ext._BUTTON_COL = 0;
zui_Ext.kx = 1.0;
zui_Ext.ky = 0.66666666666666663;
zui_Ext.kz = 0.333333333333333315;
zui_Ext.kw = 3.0;
zui_Ext.ar = [0.0,0.0,0.0];
zui_Ext.Kx = 0.0;
zui_Ext.Ky = -0.333333333333333315;
zui_Ext.Kz = 0.66666666666666663;
zui_Ext.Kw = -1.0;
zui_Ext.e = 1.0e-10;
zui_Id.i = 0;
zui_Nodes.elementsBaked = false;
zui_Nodes.socketImage = null;
zui_Nodes.clipboard = "";
zui_Nodes.boxSelect = false;
zui_Nodes.boxSelectX = 0;
zui_Nodes.boxSelectY = 0;
zui_Nodes.maxButtons = 9;
zui_Nodes.excludeRemove = [];
zui_Nodes.onLinkDrag = null;
zui_Nodes.enumTexts = null;
zui_Popup.show = false;
zui_Popup.ui = null;
zui_Popup.hwnd = new zui_Handle();
zui_Popup.boxTitle = "";
zui_Popup.boxText = "";
zui_Popup.boxCommands = null;
zui_Popup.modalX = 0;
zui_Popup.modalY = 0;
zui_Popup.modalW = 400;
zui_Popup.modalH = 160;
zui_Popup.borderW = 10;
zui_Popup.borderOffset = 0;
zui_Popup.titleDrawn = false;
zui_Themes.dark = { NAME : "Default Dark", WINDOW_BG_COL : -13421773, WINDOW_TINT_COL : -1, ACCENT_COL : -12303292, ACCENT_HOVER_COL : -11974327, ACCENT_SELECT_COL : -10461088, BUTTON_COL : -12171706, BUTTON_TEXT_COL : -1513499, BUTTON_HOVER_COL : -11974327, BUTTON_PRESSED_COL : -15000805, TEXT_COL : -1513499, LABEL_COL : -3618616, SEPARATOR_COL : -14211289, HIGHLIGHT_COL : -14656100, CONTEXT_COL : -14540254, PANEL_BG_COL : -12895429, FONT_SIZE : 13, ELEMENT_W : 100, ELEMENT_H : 24, ELEMENT_OFFSET : 4, ARROW_SIZE : 5, BUTTON_H : 22, CHECK_SIZE : 15, CHECK_SELECT_SIZE : 8, SCROLL_W : 6, TEXT_OFFSET : 8, TAB_W : 6, FILL_WINDOW_BG : false, FILL_BUTTON_BG : true, FILL_ACCENT_BG : false, LINK_STYLE : 0};
zui_Themes.light = { NAME : "Default Light", WINDOW_BG_COL : -1052689, WINDOW_TINT_COL : -14540254, ACCENT_COL : -1118482, ACCENT_HOVER_COL : -4473925, ACCENT_SELECT_COL : -5592406, BUTTON_COL : -3355444, BUTTON_TEXT_COL : -14540254, BUTTON_HOVER_COL : -5000269, BUTTON_PRESSED_COL : -5131855, TEXT_COL : -6710887, LABEL_COL : -5592406, SEPARATOR_COL : -6710887, HIGHLIGHT_COL : -14656100, CONTEXT_COL : -5592406, PANEL_BG_COL : -5592406, FONT_SIZE : 26, ELEMENT_W : 200, ELEMENT_H : 48, ELEMENT_OFFSET : 8, ARROW_SIZE : 10, BUTTON_H : 44, CHECK_SIZE : 30, CHECK_SELECT_SIZE : 16, SCROLL_W : 12, TEXT_OFFSET : 16, TAB_W : 24, FILL_WINDOW_BG : false, FILL_BUTTON_BG : true, FILL_ACCENT_BG : false, LINK_STYLE : 0};
zui_Zui.onBorderHover = null;
zui_Zui.onTextHover = null;
zui_Zui.alwaysRedrawWindow = true;
zui_Zui.keyRepeat = true;
zui_Zui.dynamicGlyphLoad = true;
zui_Zui.touchControls = false;
zui_Zui.keyRepeatTime = 0.0;
zui_Zui.textToPaste = "";
zui_Zui.textToCopy = "";
zui_Zui.isCut = false;
zui_Zui.isCopy = false;
zui_Zui.isPaste = false;
zui_Zui.copyReceiver = null;
zui_Zui.copyFrame = 0;
zui_Zui.comboFirst = true;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=kha.js.map